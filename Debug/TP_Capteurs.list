
TP_Capteurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  080055b4  080055b4  000155b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a4c  08005a4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a54  08005a54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a54  08005a54  00015a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a58  08005a58  00015a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08005acc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08005acc  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011927  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002724  00000000  00000000  000319c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000340f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00034e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ecb4  00000000  00000000  00035ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d63  00000000  00000000  0005477c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb7f6  00000000  00000000  000664df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121cd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb0  00000000  00000000  00121d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800559c 	.word	0x0800559c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800559c 	.word	0x0800559c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <SearchBMP280>:
 * @brief fonction qui permet de verifier qu'on arrive à communiquer avec le capteur BMP280
 *
 * @param bcom
 */
void SearchBMP280()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
	int result;
	uint8_t bcom[MAX_COM_BUF];

	bcom[0] = BMP_ADDR;
 80005ca:	23ee      	movs	r3, #238	; 0xee
 80005cc:	713b      	strb	r3, [r7, #4]
	printf("Recherche Capteur BMP280\r\n\n");
 80005ce:	481e      	ldr	r0, [pc, #120]	; (8000648 <SearchBMP280+0x84>)
 80005d0:	f004 f81e 	bl	8004610 <puts>

	result = HAL_I2C_Master_Transmit(&hi2c1, BMP_ADDR, bcom, 1, HAL_TIMEOUT); //bcom = addresse de bcom[0]
 80005d4:	1d3a      	adds	r2, r7, #4
 80005d6:	2303      	movs	r3, #3
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	21ee      	movs	r1, #238	; 0xee
 80005de:	481b      	ldr	r0, [pc, #108]	; (800064c <SearchBMP280+0x88>)
 80005e0:	f001 f82e 	bl	8001640 <HAL_I2C_Master_Transmit>
 80005e4:	4603      	mov	r3, r0
 80005e6:	60fb      	str	r3, [r7, #12]
	if(result != HAL_OK)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d004      	beq.n	80005f8 <SearchBMP280+0x34>
		{
			printf("Error I2C Transmit SearchBMP280\r\n");
 80005ee:	4818      	ldr	r0, [pc, #96]	; (8000650 <SearchBMP280+0x8c>)
 80005f0:	f004 f80e 	bl	8004610 <puts>
			Error_Handler();
 80005f4:	f000 faba 	bl	8000b6c <Error_Handler>
		}

	result = HAL_I2C_Master_Receive(&hi2c1, BMP_ADDR, bcom+1, 1, HAL_TIMEOUT);
 80005f8:	1d3a      	adds	r2, r7, #4
 80005fa:	3201      	adds	r2, #1
 80005fc:	2303      	movs	r3, #3
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2301      	movs	r3, #1
 8000602:	21ee      	movs	r1, #238	; 0xee
 8000604:	4811      	ldr	r0, [pc, #68]	; (800064c <SearchBMP280+0x88>)
 8000606:	f001 f90f 	bl	8001828 <HAL_I2C_Master_Receive>
 800060a:	4603      	mov	r3, r0
 800060c:	60fb      	str	r3, [r7, #12]
	if(result != HAL_OK)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d004      	beq.n	800061e <SearchBMP280+0x5a>
		{
			printf("Error I2C Receive SearchBMP280\r\n");
 8000614:	480f      	ldr	r0, [pc, #60]	; (8000654 <SearchBMP280+0x90>)
 8000616:	f003 fffb 	bl	8004610 <puts>
			Error_Handler();
 800061a:	f000 faa7 	bl	8000b6c <Error_Handler>
		}

	printf("Registre : %d et contenu %d\r\n\n", bcom[0], bcom[1]);
 800061e:	793b      	ldrb	r3, [r7, #4]
 8000620:	4619      	mov	r1, r3
 8000622:	797b      	ldrb	r3, [r7, #5]
 8000624:	461a      	mov	r2, r3
 8000626:	480c      	ldr	r0, [pc, #48]	; (8000658 <SearchBMP280+0x94>)
 8000628:	f003 ff56 	bl	80044d8 <iprintf>
	if (bcom[1]==BMP_WHO_AM_I_ID_VAL) printf("Capteur BMP280 trouve\r\n\n");
 800062c:	797b      	ldrb	r3, [r7, #5]
 800062e:	2b58      	cmp	r3, #88	; 0x58
 8000630:	d103      	bne.n	800063a <SearchBMP280+0x76>
 8000632:	480a      	ldr	r0, [pc, #40]	; (800065c <SearchBMP280+0x98>)
 8000634:	f003 ffec 	bl	8004610 <puts>
	else printf("Error : Capteur non trouve, verifier addresse ID_REG\r\n\n\n");
}
 8000638:	e002      	b.n	8000640 <SearchBMP280+0x7c>
	else printf("Error : Capteur non trouve, verifier addresse ID_REG\r\n\n\n");
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <SearchBMP280+0x9c>)
 800063c:	f003 ffe8 	bl	8004610 <puts>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	080055b4 	.word	0x080055b4
 800064c:	2000008c 	.word	0x2000008c
 8000650:	080055d0 	.word	0x080055d0
 8000654:	080055f4 	.word	0x080055f4
 8000658:	08005614 	.word	0x08005614
 800065c:	08005634 	.word	0x08005634
 8000660:	0800564c 	.word	0x0800564c

08000664 <SearchMPU9250>:
 * @brief fonction qui permet de verifier qu'on arrive à communiquer avec le capteur MPU9250
 *
 * @param bcom (uint8)
 */
void SearchMPU9250()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af02      	add	r7, sp, #8
	  int result;
	  uint8_t bcom[MAX_COM_BUF];

	  bcom[0] = MPU_ID_REG;
 800066a:	2375      	movs	r3, #117	; 0x75
 800066c:	713b      	strb	r3, [r7, #4]
	  //Ici je vais envoyer à l'adresse hardware un handshake pr lui demander la valeur qu'il a à l'adresse WHO_AMI_I
	  printf("Recherche Capteur MPU9250\r\n\n");
 800066e:	481e      	ldr	r0, [pc, #120]	; (80006e8 <SearchMPU9250+0x84>)
 8000670:	f003 ffce 	bl	8004610 <puts>

	  result = HAL_I2C_Master_Transmit(&hi2c1, MPU_ADDR, bcom, 1, HAL_TIMEOUT); //bcom = addresse de bcom[0]
 8000674:	1d3a      	adds	r2, r7, #4
 8000676:	2303      	movs	r3, #3
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2301      	movs	r3, #1
 800067c:	21d0      	movs	r1, #208	; 0xd0
 800067e:	481b      	ldr	r0, [pc, #108]	; (80006ec <SearchMPU9250+0x88>)
 8000680:	f000 ffde 	bl	8001640 <HAL_I2C_Master_Transmit>
 8000684:	4603      	mov	r3, r0
 8000686:	60fb      	str	r3, [r7, #12]
	  if(result != HAL_OK)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d004      	beq.n	8000698 <SearchMPU9250+0x34>
		{
		  printf("Error I2C Transmit SearchMPU9250\r\n");
 800068e:	4818      	ldr	r0, [pc, #96]	; (80006f0 <SearchMPU9250+0x8c>)
 8000690:	f003 ffbe 	bl	8004610 <puts>
		  Error_Handler();
 8000694:	f000 fa6a 	bl	8000b6c <Error_Handler>
		}

	  result = HAL_I2C_Master_Receive(&hi2c1, MPU_ADDR, bcom+1, 1, HAL_TIMEOUT);
 8000698:	1d3a      	adds	r2, r7, #4
 800069a:	3201      	adds	r2, #1
 800069c:	2303      	movs	r3, #3
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2301      	movs	r3, #1
 80006a2:	21d0      	movs	r1, #208	; 0xd0
 80006a4:	4811      	ldr	r0, [pc, #68]	; (80006ec <SearchMPU9250+0x88>)
 80006a6:	f001 f8bf 	bl	8001828 <HAL_I2C_Master_Receive>
 80006aa:	4603      	mov	r3, r0
 80006ac:	60fb      	str	r3, [r7, #12]
	  if(result != HAL_OK)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d004      	beq.n	80006be <SearchMPU9250+0x5a>
	  {
	  	printf("Error I2C Receive SearchMPU9250\r\n");
 80006b4:	480f      	ldr	r0, [pc, #60]	; (80006f4 <SearchMPU9250+0x90>)
 80006b6:	f003 ffab 	bl	8004610 <puts>
	  	Error_Handler();
 80006ba:	f000 fa57 	bl	8000b6c <Error_Handler>
	  }

	  printf("En decimal, Registre : %d et contenu %d\r\n\n", bcom[0], bcom[1]);
 80006be:	793b      	ldrb	r3, [r7, #4]
 80006c0:	4619      	mov	r1, r3
 80006c2:	797b      	ldrb	r3, [r7, #5]
 80006c4:	461a      	mov	r2, r3
 80006c6:	480c      	ldr	r0, [pc, #48]	; (80006f8 <SearchMPU9250+0x94>)
 80006c8:	f003 ff06 	bl	80044d8 <iprintf>
	  if (bcom[1]==MPU_WHO_AM_I_ID_VAL) printf("Capteur MPU9250 trouve\r\n\n");
 80006cc:	797b      	ldrb	r3, [r7, #5]
 80006ce:	2b71      	cmp	r3, #113	; 0x71
 80006d0:	d103      	bne.n	80006da <SearchMPU9250+0x76>
 80006d2:	480a      	ldr	r0, [pc, #40]	; (80006fc <SearchMPU9250+0x98>)
 80006d4:	f003 ff9c 	bl	8004610 <puts>
	  else printf("Error : Capteur non trouve, verifier addresse WHO_AM_I_MPU9250\r\n\n\n");
}
 80006d8:	e002      	b.n	80006e0 <SearchMPU9250+0x7c>
	  else printf("Error : Capteur non trouve, verifier addresse WHO_AM_I_MPU9250\r\n\n\n");
 80006da:	4809      	ldr	r0, [pc, #36]	; (8000700 <SearchMPU9250+0x9c>)
 80006dc:	f003 ff98 	bl	8004610 <puts>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	08005684 	.word	0x08005684
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	080056a0 	.word	0x080056a0
 80006f4:	080056c4 	.word	0x080056c4
 80006f8:	080056e8 	.word	0x080056e8
 80006fc:	08005714 	.word	0x08005714
 8000700:	08005730 	.word	0x08005730

08000704 <TestSensorOnI2C>:
/**
 * @brief Fonction qui vient tester la presence de capteurs sur le bus I2C et les print via uart
 *
 */
void TestSensorOnI2C(int * tab)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	 int u = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

	 printf("debut de lecture du bus I2c\r\n\n");
 8000710:	4818      	ldr	r0, [pc, #96]	; (8000774 <TestSensorOnI2C+0x70>)
 8000712:	f003 ff7d 	bl	8004610 <puts>
	  for(int i =0; i< 256; i++)
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	e021      	b.n	8000760 <TestSensorOnI2C+0x5c>
	  {
		  int result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i),2,2);
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	b299      	uxth	r1, r3
 8000720:	2302      	movs	r3, #2
 8000722:	2202      	movs	r2, #2
 8000724:	4814      	ldr	r0, [pc, #80]	; (8000778 <TestSensorOnI2C+0x74>)
 8000726:	f001 fba3 	bl	8001e70 <HAL_I2C_IsDeviceReady>
 800072a:	4603      	mov	r3, r0
 800072c:	60fb      	str	r3, [r7, #12]
		  if (result != HAL_OK)//HAL_ERROR or HAL_TIMEOUT
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <TestSensorOnI2C+0x36>
		  {
			  printf("."); //No ACKreceived at the address
 8000734:	202e      	movs	r0, #46	; 0x2e
 8000736:	f003 fee7 	bl	8004508 <putchar>
		  }
		  if (result == HAL_OK)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10c      	bne.n	800075a <TestSensorOnI2C+0x56>
		  {
			  tab[u] = i;
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4413      	add	r3, r2
 8000748:	693a      	ldr	r2, [r7, #16]
 800074a:	601a      	str	r2, [r3, #0]
			  u++;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	3301      	adds	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
			  printf("0x%X",i); //Received an ACK at the address
 8000752:	6939      	ldr	r1, [r7, #16]
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <TestSensorOnI2C+0x78>)
 8000756:	f003 febf 	bl	80044d8 <iprintf>
	  for(int i =0; i< 256; i++)
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	3301      	adds	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	2bff      	cmp	r3, #255	; 0xff
 8000764:	ddda      	ble.n	800071c <TestSensorOnI2C+0x18>
		  }
	  }
	  printf("\r\n\nfin de lecture du bus I2C\r\n\n\n");
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <TestSensorOnI2C+0x7c>)
 8000768:	f003 ff52 	bl	8004610 <puts>
}
 800076c:	bf00      	nop
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	08005774 	.word	0x08005774
 8000778:	2000008c 	.word	0x2000008c
 800077c:	08005794 	.word	0x08005794
 8000780:	0800579c 	.word	0x0800579c

08000784 <PrintTab>:
 * @brief cette fonction permet d'afficher le contenu du tableau tab
 *
 * @param tab
 */
void PrintTab(int * tab)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	printf("les adresses detectees sont :\r\n");
 800078c:	4813      	ldr	r0, [pc, #76]	; (80007dc <PrintTab+0x58>)
 800078e:	f003 ff3f 	bl	8004610 <puts>
	for(int i = 0; i<8; i++)
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	e016      	b.n	80007c6 <PrintTab+0x42>
	{
		if(tab[i]!=0) printf("%d\r\n", tab[i]);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d009      	beq.n	80007ba <PrintTab+0x36>
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4619      	mov	r1, r3
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <PrintTab+0x5c>)
 80007b4:	f003 fe90 	bl	80044d8 <iprintf>
 80007b8:	e002      	b.n	80007c0 <PrintTab+0x3c>
		else printf("NULL\r\n");
 80007ba:	480a      	ldr	r0, [pc, #40]	; (80007e4 <PrintTab+0x60>)
 80007bc:	f003 ff28 	bl	8004610 <puts>
	for(int i = 0; i<8; i++)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3301      	adds	r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b07      	cmp	r3, #7
 80007ca:	dde5      	ble.n	8000798 <PrintTab+0x14>
	}

	printf("Rappel : \r\nLes adresses paires sont en ecritures\r\n"
 80007cc:	4806      	ldr	r0, [pc, #24]	; (80007e8 <PrintTab+0x64>)
 80007ce:	f003 ff1f 	bl	8004610 <puts>
			"les adresses impaires sont en lecture\r\n\n");

}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	080057bc 	.word	0x080057bc
 80007e0:	080057dc 	.word	0x080057dc
 80007e4:	080057e4 	.word	0x080057e4
 80007e8:	080057ec 	.word	0x080057ec

080007ec <Init_IMU_10DOF>:

void Init_IMU_10DOF(I2C_HandleTypeDef* i2c_handle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af04      	add	r7, sp, #16
 80007f2:	6078      	str	r0, [r7, #4]
	int result;
	uint8_t bcom[MAX_COM_BUF];

	//HW Reset
	printf("debut reset value\r\n");
 80007f4:	481f      	ldr	r0, [pc, #124]	; (8000874 <Init_IMU_10DOF+0x88>)
 80007f6:	f003 ff0b 	bl	8004610 <puts>
	printf("MPU\r\n");
 80007fa:	481f      	ldr	r0, [pc, #124]	; (8000878 <Init_IMU_10DOF+0x8c>)
 80007fc:	f003 ff08 	bl	8004610 <puts>

	bcom[0] = MPU_RESET_VALUE;
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR, PWR_MGMT_1,1, bcom, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	9302      	str	r3, [sp, #8]
 800080a:	2301      	movs	r3, #1
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2301      	movs	r3, #1
 8000816:	226b      	movs	r2, #107	; 0x6b
 8000818:	21d0      	movs	r1, #208	; 0xd0
 800081a:	4818      	ldr	r0, [pc, #96]	; (800087c <Init_IMU_10DOF+0x90>)
 800081c:	f001 f8fa 	bl	8001a14 <HAL_I2C_Mem_Write>
 8000820:	4603      	mov	r3, r0
 8000822:	617b      	str	r3, [r7, #20]
	if(result != HAL_OK)
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d004      	beq.n	8000834 <Init_IMU_10DOF+0x48>
	{
		printf("Error I2C Mem Write Init_IMU_10_DOF Reset BMP\r\n");
 800082a:	4815      	ldr	r0, [pc, #84]	; (8000880 <Init_IMU_10DOF+0x94>)
 800082c:	f003 fef0 	bl	8004610 <puts>
		Error_Handler();
 8000830:	f000 f99c 	bl	8000b6c <Error_Handler>
	}
	result = HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR, PWR_MGMT_1,1, bcom, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 8000834:	f04f 33ff 	mov.w	r3, #4294967295
 8000838:	9302      	str	r3, [sp, #8]
 800083a:	2301      	movs	r3, #1
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2301      	movs	r3, #1
 8000846:	226b      	movs	r2, #107	; 0x6b
 8000848:	21d0      	movs	r1, #208	; 0xd0
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <Init_IMU_10DOF+0x90>)
 800084c:	f001 f9f6 	bl	8001c3c <HAL_I2C_Mem_Read>
 8000850:	4603      	mov	r3, r0
 8000852:	617b      	str	r3, [r7, #20]
	if(result != HAL_OK)
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <Init_IMU_10DOF+0x78>
	{
		printf("Error I2C Mem Read Init_IMU_10_DOF Reset BMP\r\n");
 800085a:	480a      	ldr	r0, [pc, #40]	; (8000884 <Init_IMU_10DOF+0x98>)
 800085c:	f003 fed8 	bl	8004610 <puts>
		Error_Handler();
 8000860:	f000 f984 	bl	8000b6c <Error_Handler>
	}


	printf("fin reset value\r\n");
 8000864:	4808      	ldr	r0, [pc, #32]	; (8000888 <Init_IMU_10DOF+0x9c>)
 8000866:	f003 fed3 	bl	8004610 <puts>
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	08005848 	.word	0x08005848
 8000878:	0800585c 	.word	0x0800585c
 800087c:	2000008c 	.word	0x2000008c
 8000880:	08005864 	.word	0x08005864
 8000884:	08005894 	.word	0x08005894
 8000888:	080058c4 	.word	0x080058c4

0800088c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a2a      	ldr	r2, [pc, #168]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a24      	ldr	r2, [pc, #144]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a1e      	ldr	r2, [pc, #120]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a18      	ldr	r2, [pc, #96]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_GPIO_Init+0xc4>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2120      	movs	r1, #32
 8000906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090a:	f000 fdf1 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800090e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000914:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <MX_GPIO_Init+0xc8>)
 8000926:	f000 fc61 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800092a:	2320      	movs	r3, #32
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000944:	f000 fc52 	bl	80011ec <HAL_GPIO_Init>

}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	; 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	48000800 	.word	0x48000800

08000958 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_I2C1_Init+0x74>)
 800095e:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <MX_I2C1_Init+0x78>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_I2C1_Init+0x74>)
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <MX_I2C1_Init+0x7c>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_I2C1_Init+0x74>)
 8000970:	2201      	movs	r2, #1
 8000972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_I2C1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_I2C1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000992:	480e      	ldr	r0, [pc, #56]	; (80009cc <MX_I2C1_Init+0x74>)
 8000994:	f000 fdc4 	bl	8001520 <HAL_I2C_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800099e:	f000 f8e5 	bl	8000b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <MX_I2C1_Init+0x74>)
 80009a6:	f001 fe8b 	bl	80026c0 <HAL_I2CEx_ConfigAnalogFilter>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009b0:	f000 f8dc 	bl	8000b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_I2C1_Init+0x74>)
 80009b8:	f001 fecd 	bl	8002756 <HAL_I2CEx_ConfigDigitalFilter>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009c2:	f000 f8d3 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000008c 	.word	0x2000008c
 80009d0:	40005400 	.word	0x40005400
 80009d4:	30a0a7fb 	.word	0x30a0a7fb

080009d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b09a      	sub	sp, #104	; 0x68
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	2244      	movs	r2, #68	; 0x44
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 fd65 	bl	80044c8 <memset>
  if(i2cHandle->Instance==I2C1)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <HAL_I2C_MspInit+0xa8>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d136      	bne.n	8000a76 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a08:	2340      	movs	r3, #64	; 0x40
 8000a0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 fcd3 	bl	80033c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a20:	f000 f8a4 	bl	8000b6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_I2C_MspInit+0xac>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a28:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <HAL_I2C_MspInit+0xac>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_I2C_MspInit+0xac>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a40:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a42:	2312      	movs	r3, #18
 8000a44:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a56:	4619      	mov	r1, r3
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <HAL_I2C_MspInit+0xb0>)
 8000a5a:	f000 fbc7 	bl	80011ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_I2C_MspInit+0xac>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_I2C_MspInit+0xac>)
 8000a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a68:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_I2C_MspInit+0xac>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a76:	bf00      	nop
 8000a78:	3768      	adds	r7, #104	; 0x68
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40005400 	.word	0x40005400
 8000a84:	40021000 	.word	0x40021000
 8000a88:	48000400 	.word	0x48000400

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a90:	f000 fa57 	bl	8000f42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a94:	f000 f81e 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a98:	f7ff fef8 	bl	800088c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a9c:	f7ff ff5c 	bl	8000958 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000aa0:	f000 f984 	bl	8000dac <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //SIG INIT STM32
  printf("-----------------------------------------------\r\n"
 8000aa4:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <main+0x3c>)
 8000aa6:	f003 fdb3 	bl	8004610 <puts>

  // INIT SENSORS

  //Presence capteurs sur le bus I2C

  TestSensorOnI2C(tabI2CAdd);
 8000aaa:	4808      	ldr	r0, [pc, #32]	; (8000acc <main+0x40>)
 8000aac:	f7ff fe2a 	bl	8000704 <TestSensorOnI2C>

  // On cherche le MPU9250

  SearchMPU9250();
 8000ab0:	f7ff fdd8 	bl	8000664 <SearchMPU9250>

  // On cherche le BMP280

  SearchBMP280();
 8000ab4:	f7ff fd86 	bl	80005c4 <SearchBMP280>

  PrintTab(tabI2CAdd); //on affiche les valeurs du tableau d'addresse
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <main+0x40>)
 8000aba:	f7ff fe63 	bl	8000784 <PrintTab>

  Init_IMU_10DOF(&hi2c1);
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <main+0x44>)
 8000ac0:	f7ff fe94 	bl	80007ec <Init_IMU_10DOF>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <main+0x38>
 8000ac6:	bf00      	nop
 8000ac8:	080058d8 	.word	0x080058d8
 8000acc:	200000d8 	.word	0x200000d8
 8000ad0:	2000008c 	.word	0x2000008c

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b094      	sub	sp, #80	; 0x50
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0318 	add.w	r3, r7, #24
 8000ade:	2238      	movs	r2, #56	; 0x38
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 fcf0 	bl	80044c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f001 fe7a 	bl	80027f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b06:	2340      	movs	r3, #64	; 0x40
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b12:	2304      	movs	r3, #4
 8000b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b16:	2355      	movs	r3, #85	; 0x55
 8000b18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b22:	2302      	movs	r3, #2
 8000b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b26:	f107 0318 	add.w	r3, r7, #24
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 ff14 	bl	8002958 <HAL_RCC_OscConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b36:	f000 f819 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2104      	movs	r1, #4
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fa18 	bl	8002f88 <HAL_RCC_ClockConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b5e:	f000 f805 	bl	8000b6c <Error_Handler>
  }
}
 8000b62:	bf00      	nop
 8000b64:	3750      	adds	r7, #80	; 0x50
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  printf("an Error Occur, please Reset system\r\n");
 8000b74:	4801      	ldr	r0, [pc, #4]	; (8000b7c <Error_Handler+0x10>)
 8000b76:	f003 fd4b 	bl	8004610 <puts>

  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <Error_Handler+0xe>
 8000b7c:	0800594c 	.word	0x0800594c

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6613      	str	r3, [r2, #96]	; 0x60
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_MspInit+0x44>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_MspInit+0x44>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bb6:	f001 febf 	bl	8002938 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000bd0:	1d39      	adds	r1, r7, #4
 8000bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <__io_putchar+0x20>)
 8000bda:	f002 fe31 	bl	8003840 <HAL_UART_Transmit>

  return ch;
 8000bde:	687b      	ldr	r3, [r7, #4]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000fc 	.word	0x200000fc

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f9d6 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	e00a      	b.n	8000c68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c52:	f3af 8000 	nop.w
 8000c56:	4601      	mov	r1, r0
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	60ba      	str	r2, [r7, #8]
 8000c5e:	b2ca      	uxtb	r2, r1
 8000c60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbf0      	blt.n	8000c52 <_read+0x12>
	}

return len;
 8000c70:	687b      	ldr	r3, [r7, #4]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e009      	b.n	8000ca0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	60ba      	str	r2, [r7, #8]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff97 	bl	8000bc8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbf1      	blt.n	8000c8c <_write+0x12>
	}
	return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_close>:

int _close(int file)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	return -1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cda:	605a      	str	r2, [r3, #4]
	return 0;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_isatty>:

int _isatty(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
	return 1;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f003 fb92 	bl	8004474 <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20008000 	.word	0x20008000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	200000f8 	.word	0x200000f8
 8000d84:	200001a0 	.word	0x200001a0

08000d88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000db2:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <MX_LPUART1_UART_Init+0x90>)
 8000db4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000dee:	4812      	ldr	r0, [pc, #72]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000df0:	f002 fcd6 	bl	80037a0 <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dfa:	f7ff feb7 	bl	8000b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000e02:	f003 fa6d 	bl	80042e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000e0c:	f7ff feae 	bl	8000b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e10:	2100      	movs	r1, #0
 8000e12:	4809      	ldr	r0, [pc, #36]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000e14:	f003 faa2 	bl	800435c <HAL_UARTEx_SetRxFifoThreshold>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000e1e:	f7ff fea5 	bl	8000b6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_LPUART1_UART_Init+0x8c>)
 8000e24:	f003 fa23 	bl	800426e <HAL_UARTEx_DisableFifoMode>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000e2e:	f7ff fe9d 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000fc 	.word	0x200000fc
 8000e3c:	40008000 	.word	0x40008000

08000e40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b09a      	sub	sp, #104	; 0x68
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	2244      	movs	r2, #68	; 0x44
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 fb31 	bl	80044c8 <memset>
  if(uartHandle->Instance==LPUART1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <HAL_UART_MspInit+0xa8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d136      	bne.n	8000ede <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e70:	2320      	movs	r3, #32
 8000e72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 fa9f 	bl	80033c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e88:	f7ff fe70 	bl	8000b6c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_UART_MspInit+0xac>)
 8000e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e90:	4a16      	ldr	r2, [pc, #88]	; (8000eec <HAL_UART_MspInit+0xac>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_UART_MspInit+0xac>)
 8000e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_UART_MspInit+0xac>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea8:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_UART_MspInit+0xac>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_UART_MspInit+0xac>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ecc:	230c      	movs	r3, #12
 8000ece:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f000 f987 	bl	80011ec <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3768      	adds	r7, #104	; 0x68
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40008000 	.word	0x40008000
 8000eec:	40021000 	.word	0x40021000

08000ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ef2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef6:	490e      	ldr	r1, [pc, #56]	; (8000f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <LoopForever+0xe>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f0c:	4c0b      	ldr	r4, [pc, #44]	; (8000f3c <LoopForever+0x16>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f1a:	f7ff ff35 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f003 faaf 	bl	8004480 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f22:	f7ff fdb3 	bl	8000a8c <main>

08000f26 <LoopForever>:

LoopForever:
    b LoopForever
 8000f26:	e7fe      	b.n	8000f26 <LoopForever>
  ldr   r0, =_estack
 8000f28:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f34:	08005a5c 	.word	0x08005a5c
  ldr r2, =_sbss
 8000f38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f3c:	200001a0 	.word	0x200001a0

08000f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_2_IRQHandler>

08000f42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 f91b 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f80e 	bl	8000f74 <HAL_InitTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	e001      	b.n	8000f68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f64:	f7ff fe0c 	bl	8000b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f68:	79fb      	ldrb	r3, [r7, #7]

}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_InitTick+0x68>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d022      	beq.n	8000fce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_InitTick+0x6c>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_InitTick+0x68>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f918 	bl	80011d2 <HAL_SYSTICK_Config>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10f      	bne.n	8000fc8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	d809      	bhi.n	8000fc2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb6:	f000 f8f2 	bl	800119e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_InitTick+0x70>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	e007      	b.n	8000fd2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e004      	b.n	8000fd2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e001      	b.n	8000fd2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_IncTick+0x1c>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_IncTick+0x20>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a03      	ldr	r2, [pc, #12]	; (8001004 <HAL_IncTick+0x1c>)
 8000ff8:	6013      	str	r3, [r2, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	2000018c 	.word	0x2000018c
 8001008:	20000008 	.word	0x20000008

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2000018c 	.word	0x2000018c

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff47 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff5e 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff90 	bl	80010dc <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5f 	bl	8001088 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffb2 	bl	8001144 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011fa:	e15a      	b.n	80014b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	2101      	movs	r1, #1
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	4013      	ands	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 814c 	beq.w	80014ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d005      	beq.n	800122c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001228:	2b02      	cmp	r3, #2
 800122a:	d130      	bne.n	800128e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001262:	2201      	movs	r2, #1
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	f003 0201 	and.w	r2, r3, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b03      	cmp	r3, #3
 8001298:	d017      	beq.n	80012ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d123      	bne.n	800131e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3208      	adds	r2, #8
 80012de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	691a      	ldr	r2, [r3, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	08da      	lsrs	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3208      	adds	r2, #8
 8001318:	6939      	ldr	r1, [r7, #16]
 800131a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0203 	and.w	r2, r3, #3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80a6 	beq.w	80014ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001360:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <HAL_GPIO_Init+0x2e4>)
 8001362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001364:	4a5a      	ldr	r2, [pc, #360]	; (80014d0 <HAL_GPIO_Init+0x2e4>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6613      	str	r3, [r2, #96]	; 0x60
 800136c:	4b58      	ldr	r3, [pc, #352]	; (80014d0 <HAL_GPIO_Init+0x2e4>)
 800136e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001378:	4a56      	ldr	r2, [pc, #344]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013a2:	d01f      	beq.n	80013e4 <HAL_GPIO_Init+0x1f8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <HAL_GPIO_Init+0x2ec>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d019      	beq.n	80013e0 <HAL_GPIO_Init+0x1f4>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a4b      	ldr	r2, [pc, #300]	; (80014dc <HAL_GPIO_Init+0x2f0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d013      	beq.n	80013dc <HAL_GPIO_Init+0x1f0>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a4a      	ldr	r2, [pc, #296]	; (80014e0 <HAL_GPIO_Init+0x2f4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d00d      	beq.n	80013d8 <HAL_GPIO_Init+0x1ec>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a49      	ldr	r2, [pc, #292]	; (80014e4 <HAL_GPIO_Init+0x2f8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d007      	beq.n	80013d4 <HAL_GPIO_Init+0x1e8>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a48      	ldr	r2, [pc, #288]	; (80014e8 <HAL_GPIO_Init+0x2fc>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d101      	bne.n	80013d0 <HAL_GPIO_Init+0x1e4>
 80013cc:	2305      	movs	r3, #5
 80013ce:	e00a      	b.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013d0:	2306      	movs	r3, #6
 80013d2:	e008      	b.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013d4:	2304      	movs	r3, #4
 80013d6:	e006      	b.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013d8:	2303      	movs	r3, #3
 80013da:	e004      	b.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013dc:	2302      	movs	r3, #2
 80013de:	e002      	b.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013e4:	2300      	movs	r3, #0
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	f002 0203 	and.w	r2, r2, #3
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	4093      	lsls	r3, r2
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f6:	4937      	ldr	r1, [pc, #220]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <HAL_GPIO_Init+0x300>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001428:	4a30      	ldr	r2, [pc, #192]	; (80014ec <HAL_GPIO_Init+0x300>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <HAL_GPIO_Init+0x300>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001452:	4a26      	ldr	r2, [pc, #152]	; (80014ec <HAL_GPIO_Init+0x300>)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_GPIO_Init+0x300>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800147c:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <HAL_GPIO_Init+0x300>)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_GPIO_Init+0x300>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a6:	4a11      	ldr	r2, [pc, #68]	; (80014ec <HAL_GPIO_Init+0x300>)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3301      	adds	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f47f ae9d 	bne.w	80011fc <HAL_GPIO_Init+0x10>
  }
}
 80014c2:	bf00      	nop
 80014c4:	bf00      	nop
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010000 	.word	0x40010000
 80014d8:	48000400 	.word	0x48000400
 80014dc:	48000800 	.word	0x48000800
 80014e0:	48000c00 	.word	0x48000c00
 80014e4:	48001000 	.word	0x48001000
 80014e8:	48001400 	.word	0x48001400
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800150c:	e002      	b.n	8001514 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e081      	b.n	8001636 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fa46 	bl	80009d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2224      	movs	r2, #36	; 0x24
 8001550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0201 	bic.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001570:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001580:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d107      	bne.n	800159a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	e006      	b.n	80015a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d104      	bne.n	80015ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69d9      	ldr	r1, [r3, #28]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2220      	movs	r2, #32
 8001622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	460b      	mov	r3, r1
 800164e:	817b      	strh	r3, [r7, #10]
 8001650:	4613      	mov	r3, r2
 8001652:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b20      	cmp	r3, #32
 800165e:	f040 80da 	bne.w	8001816 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_I2C_Master_Transmit+0x30>
 800166c:	2302      	movs	r3, #2
 800166e:	e0d3      	b.n	8001818 <HAL_I2C_Master_Transmit+0x1d8>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001678:	f7ff fcc8 	bl	800100c <HAL_GetTick>
 800167c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2319      	movs	r3, #25
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 fdc4 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0be      	b.n	8001818 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2221      	movs	r2, #33	; 0x21
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2210      	movs	r2, #16
 80016a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	893a      	ldrh	r2, [r7, #8]
 80016ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2bff      	cmp	r3, #255	; 0xff
 80016ca:	d90e      	bls.n	80016ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	22ff      	movs	r2, #255	; 0xff
 80016d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	8979      	ldrh	r1, [r7, #10]
 80016da:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_I2C_Master_Transmit+0x1e0>)
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 ffba 	bl	800265c <I2C_TransferConfig>
 80016e8:	e06c      	b.n	80017c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	8979      	ldrh	r1, [r7, #10]
 80016fc:	4b48      	ldr	r3, [pc, #288]	; (8001820 <HAL_I2C_Master_Transmit+0x1e0>)
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 ffa9 	bl	800265c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800170a:	e05b      	b.n	80017c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	6a39      	ldr	r1, [r7, #32]
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 fdc1 	bl	8002298 <I2C_WaitOnTXISFlagUntilTimeout>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e07b      	b.n	8001818 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173a:	b29b      	uxth	r3, r3
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001748:	3b01      	subs	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001754:	b29b      	uxth	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d034      	beq.n	80017c4 <HAL_I2C_Master_Transmit+0x184>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175e:	2b00      	cmp	r3, #0
 8001760:	d130      	bne.n	80017c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	2200      	movs	r2, #0
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 fd53 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e04d      	b.n	8001818 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001780:	b29b      	uxth	r3, r3
 8001782:	2bff      	cmp	r3, #255	; 0xff
 8001784:	d90e      	bls.n	80017a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	22ff      	movs	r2, #255	; 0xff
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001790:	b2da      	uxtb	r2, r3
 8001792:	8979      	ldrh	r1, [r7, #10]
 8001794:	2300      	movs	r3, #0
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 ff5d 	bl	800265c <I2C_TransferConfig>
 80017a2:	e00f      	b.n	80017c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	8979      	ldrh	r1, [r7, #10]
 80017b6:	2300      	movs	r3, #0
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 ff4c 	bl	800265c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d19e      	bne.n	800170c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 fda0 	bl	8002318 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e01a      	b.n	8001818 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2220      	movs	r2, #32
 80017e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6859      	ldr	r1, [r3, #4]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_I2C_Master_Transmit+0x1e4>)
 80017f6:	400b      	ands	r3, r1
 80017f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2220      	movs	r2, #32
 80017fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001816:	2302      	movs	r3, #2
  }
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	80002000 	.word	0x80002000
 8001824:	fe00e800 	.word	0xfe00e800

08001828 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af02      	add	r7, sp, #8
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	461a      	mov	r2, r3
 8001834:	460b      	mov	r3, r1
 8001836:	817b      	strh	r3, [r7, #10]
 8001838:	4613      	mov	r3, r2
 800183a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b20      	cmp	r3, #32
 8001846:	f040 80db 	bne.w	8001a00 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_I2C_Master_Receive+0x30>
 8001854:	2302      	movs	r3, #2
 8001856:	e0d4      	b.n	8001a02 <HAL_I2C_Master_Receive+0x1da>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001860:	f7ff fbd4 	bl	800100c <HAL_GetTick>
 8001864:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2319      	movs	r3, #25
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 fcd0 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0bf      	b.n	8001a02 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2222      	movs	r2, #34	; 0x22
 8001886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2210      	movs	r2, #16
 800188e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	893a      	ldrh	r2, [r7, #8]
 80018a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2bff      	cmp	r3, #255	; 0xff
 80018b2:	d90e      	bls.n	80018d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	22ff      	movs	r2, #255	; 0xff
 80018b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	8979      	ldrh	r1, [r7, #10]
 80018c2:	4b52      	ldr	r3, [pc, #328]	; (8001a0c <HAL_I2C_Master_Receive+0x1e4>)
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 fec6 	bl	800265c <I2C_TransferConfig>
 80018d0:	e06d      	b.n	80019ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	8979      	ldrh	r1, [r7, #10]
 80018e4:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_I2C_Master_Receive+0x1e4>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 feb5 	bl	800265c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018f2:	e05c      	b.n	80019ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	6a39      	ldr	r1, [r7, #32]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 fd49 	bl	8002390 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e07c      	b.n	8001a02 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001924:	3b01      	subs	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001930:	b29b      	uxth	r3, r3
 8001932:	3b01      	subs	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193e:	b29b      	uxth	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d034      	beq.n	80019ae <HAL_I2C_Master_Receive+0x186>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	d130      	bne.n	80019ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	2200      	movs	r2, #0
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fc5e 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e04d      	b.n	8001a02 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196a:	b29b      	uxth	r3, r3
 800196c:	2bff      	cmp	r3, #255	; 0xff
 800196e:	d90e      	bls.n	800198e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	22ff      	movs	r2, #255	; 0xff
 8001974:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197a:	b2da      	uxtb	r2, r3
 800197c:	8979      	ldrh	r1, [r7, #10]
 800197e:	2300      	movs	r3, #0
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 fe68 	bl	800265c <I2C_TransferConfig>
 800198c:	e00f      	b.n	80019ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	b2da      	uxtb	r2, r3
 800199e:	8979      	ldrh	r1, [r7, #10]
 80019a0:	2300      	movs	r3, #0
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fe57 	bl	800265c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d19d      	bne.n	80018f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	6a39      	ldr	r1, [r7, #32]
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 fcab 	bl	8002318 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e01a      	b.n	8001a02 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2220      	movs	r2, #32
 80019d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6859      	ldr	r1, [r3, #4]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_I2C_Master_Receive+0x1e8>)
 80019e0:	400b      	ands	r3, r1
 80019e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e000      	b.n	8001a02 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001a00:	2302      	movs	r3, #2
  }
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	80002400 	.word	0x80002400
 8001a10:	fe00e800 	.word	0xfe00e800

08001a14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	4611      	mov	r1, r2
 8001a20:	461a      	mov	r2, r3
 8001a22:	4603      	mov	r3, r0
 8001a24:	817b      	strh	r3, [r7, #10]
 8001a26:	460b      	mov	r3, r1
 8001a28:	813b      	strh	r3, [r7, #8]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	f040 80f9 	bne.w	8001c2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_I2C_Mem_Write+0x34>
 8001a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0ed      	b.n	8001c30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_I2C_Mem_Write+0x4e>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e0e6      	b.n	8001c30 <HAL_I2C_Mem_Write+0x21c>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a6a:	f7ff facf 	bl	800100c <HAL_GetTick>
 8001a6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2319      	movs	r3, #25
 8001a76:	2201      	movs	r2, #1
 8001a78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fbcb 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0d1      	b.n	8001c30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2221      	movs	r2, #33	; 0x21
 8001a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2240      	movs	r2, #64	; 0x40
 8001a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a3a      	ldr	r2, [r7, #32]
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ab4:	88f8      	ldrh	r0, [r7, #6]
 8001ab6:	893a      	ldrh	r2, [r7, #8]
 8001ab8:	8979      	ldrh	r1, [r7, #10]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fadb 	bl	8002080 <I2C_RequestMemoryWrite>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0a9      	b.n	8001c30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	2bff      	cmp	r3, #255	; 0xff
 8001ae4:	d90e      	bls.n	8001b04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	22ff      	movs	r2, #255	; 0xff
 8001aea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	8979      	ldrh	r1, [r7, #10]
 8001af4:	2300      	movs	r3, #0
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fdad 	bl	800265c <I2C_TransferConfig>
 8001b02:	e00f      	b.n	8001b24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	8979      	ldrh	r1, [r7, #10]
 8001b16:	2300      	movs	r3, #0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fd9c 	bl	800265c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 fbb5 	bl	8002298 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e07b      	b.n	8001c30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d034      	beq.n	8001bdc <HAL_I2C_Mem_Write+0x1c8>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d130      	bne.n	8001bdc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b80:	2200      	movs	r2, #0
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 fb47 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e04d      	b.n	8001c30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	2bff      	cmp	r3, #255	; 0xff
 8001b9c:	d90e      	bls.n	8001bbc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	22ff      	movs	r2, #255	; 0xff
 8001ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	8979      	ldrh	r1, [r7, #10]
 8001bac:	2300      	movs	r3, #0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fd51 	bl	800265c <I2C_TransferConfig>
 8001bba:	e00f      	b.n	8001bdc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	8979      	ldrh	r1, [r7, #10]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 fd40 	bl	800265c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d19e      	bne.n	8001b24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fb94 	bl	8002318 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e01a      	b.n	8001c30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_I2C_Mem_Write+0x224>)
 8001c0e:	400b      	ands	r3, r1
 8001c10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	fe00e800 	.word	0xfe00e800

08001c3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	817b      	strh	r3, [r7, #10]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	813b      	strh	r3, [r7, #8]
 8001c52:	4613      	mov	r3, r2
 8001c54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b20      	cmp	r3, #32
 8001c60:	f040 80fd 	bne.w	8001e5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_I2C_Mem_Read+0x34>
 8001c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d105      	bne.n	8001c7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0f1      	b.n	8001e60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_I2C_Mem_Read+0x4e>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e0ea      	b.n	8001e60 <HAL_I2C_Mem_Read+0x224>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c92:	f7ff f9bb 	bl	800100c <HAL_GetTick>
 8001c96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2319      	movs	r3, #25
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 fab7 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0d5      	b.n	8001e60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2222      	movs	r2, #34	; 0x22
 8001cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2240      	movs	r2, #64	; 0x40
 8001cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a3a      	ldr	r2, [r7, #32]
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cdc:	88f8      	ldrh	r0, [r7, #6]
 8001cde:	893a      	ldrh	r2, [r7, #8]
 8001ce0:	8979      	ldrh	r1, [r7, #10]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	4603      	mov	r3, r0
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 fa1b 	bl	8002128 <I2C_RequestMemoryRead>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0ad      	b.n	8001e60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	2bff      	cmp	r3, #255	; 0xff
 8001d0c:	d90e      	bls.n	8001d2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	22ff      	movs	r2, #255	; 0xff
 8001d12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	8979      	ldrh	r1, [r7, #10]
 8001d1c:	4b52      	ldr	r3, [pc, #328]	; (8001e68 <HAL_I2C_Mem_Read+0x22c>)
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 fc99 	bl	800265c <I2C_TransferConfig>
 8001d2a:	e00f      	b.n	8001d4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	8979      	ldrh	r1, [r7, #10]
 8001d3e:	4b4a      	ldr	r3, [pc, #296]	; (8001e68 <HAL_I2C_Mem_Read+0x22c>)
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 fc88 	bl	800265c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d52:	2200      	movs	r2, #0
 8001d54:	2104      	movs	r1, #4
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fa5e 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e07c      	b.n	8001e60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d034      	beq.n	8001e0c <HAL_I2C_Mem_Read+0x1d0>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d130      	bne.n	8001e0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	2200      	movs	r2, #0
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 fa2f 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e04d      	b.n	8001e60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2bff      	cmp	r3, #255	; 0xff
 8001dcc:	d90e      	bls.n	8001dec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	22ff      	movs	r2, #255	; 0xff
 8001dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	8979      	ldrh	r1, [r7, #10]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 fc39 	bl	800265c <I2C_TransferConfig>
 8001dea:	e00f      	b.n	8001e0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	8979      	ldrh	r1, [r7, #10]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 fc28 	bl	800265c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d19a      	bne.n	8001d4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 fa7c 	bl	8002318 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e01a      	b.n	8001e60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_I2C_Mem_Read+0x230>)
 8001e3e:	400b      	ands	r3, r1
 8001e40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e000      	b.n	8001e60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001e5e:	2302      	movs	r3, #2
  }
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	80002400 	.word	0x80002400
 8001e6c:	fe00e800 	.word	0xfe00e800

08001e70 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	f040 80f1 	bne.w	8002074 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea0:	d101      	bne.n	8001ea6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e0e7      	b.n	8002076 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_I2C_IsDeviceReady+0x44>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e0e0      	b.n	8002076 <HAL_I2C_IsDeviceReady+0x206>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2224      	movs	r2, #36	; 0x24
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_I2C_IsDeviceReady+0x72>
 8001ed2:	897b      	ldrh	r3, [r7, #10]
 8001ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001edc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ee0:	e004      	b.n	8001eec <HAL_I2C_IsDeviceReady+0x7c>
 8001ee2:	897b      	ldrh	r3, [r7, #10]
 8001ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001ef2:	f7ff f88b 	bl	800100c <HAL_GetTick>
 8001ef6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	bf0c      	ite	eq
 8001f06:	2301      	moveq	r3, #1
 8001f08:	2300      	movne	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f24:	e034      	b.n	8001f90 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d01a      	beq.n	8001f64 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f2e:	f7ff f86d 	bl	800100c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d302      	bcc.n	8001f44 <HAL_I2C_IsDeviceReady+0xd4>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f50:	f043 0220 	orr.w	r2, r3, #32
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e088      	b.n	8002076 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b10      	cmp	r3, #16
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f90:	7ffb      	ldrb	r3, [r7, #31]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_I2C_IsDeviceReady+0x12c>
 8001f96:	7fbb      	ldrb	r3, [r7, #30]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0c4      	beq.n	8001f26 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d01a      	beq.n	8001fe0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2120      	movs	r1, #32
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f92f 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e058      	b.n	8002076 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e04a      	b.n	8002076 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2120      	movs	r1, #32
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f914 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e03d      	b.n	8002076 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2210      	movs	r2, #16
 8002000:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2220      	movs	r2, #32
 8002008:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	429a      	cmp	r2, r3
 8002010:	d118      	bne.n	8002044 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002020:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2200      	movs	r2, #0
 800202a:	2120      	movs	r1, #32
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f8f3 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e01c      	b.n	8002076 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2220      	movs	r2, #32
 8002042:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	f63f af3b 	bhi.w	8001eca <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	f043 0220 	orr.w	r2, r3, #32
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002074:	2302      	movs	r3, #2
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	3720      	adds	r7, #32
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	4608      	mov	r0, r1
 800208a:	4611      	mov	r1, r2
 800208c:	461a      	mov	r2, r3
 800208e:	4603      	mov	r3, r0
 8002090:	817b      	strh	r3, [r7, #10]
 8002092:	460b      	mov	r3, r1
 8002094:	813b      	strh	r3, [r7, #8]
 8002096:	4613      	mov	r3, r2
 8002098:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	8979      	ldrh	r1, [r7, #10]
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <I2C_RequestMemoryWrite+0xa4>)
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fad7 	bl	800265c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	69b9      	ldr	r1, [r7, #24]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f8f0 	bl	8002298 <I2C_WaitOnTXISFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e02c      	b.n	800211c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020c8:	893b      	ldrh	r3, [r7, #8]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	629a      	str	r2, [r3, #40]	; 0x28
 80020d2:	e015      	b.n	8002100 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020d4:	893b      	ldrh	r3, [r7, #8]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	69b9      	ldr	r1, [r7, #24]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f8d6 	bl	8002298 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e012      	b.n	800211c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020f6:	893b      	ldrh	r3, [r7, #8]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2200      	movs	r2, #0
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f884 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	80002000 	.word	0x80002000

08002128 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	461a      	mov	r2, r3
 8002136:	4603      	mov	r3, r0
 8002138:	817b      	strh	r3, [r7, #10]
 800213a:	460b      	mov	r3, r1
 800213c:	813b      	strh	r3, [r7, #8]
 800213e:	4613      	mov	r3, r2
 8002140:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	8979      	ldrh	r1, [r7, #10]
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <I2C_RequestMemoryRead+0xa4>)
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2300      	movs	r3, #0
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fa84 	bl	800265c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f89d 	bl	8002298 <I2C_WaitOnTXISFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e02c      	b.n	80021c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d105      	bne.n	800217a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800216e:	893b      	ldrh	r3, [r7, #8]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
 8002178:	e015      	b.n	80021a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800217a:	893b      	ldrh	r3, [r7, #8]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	b29b      	uxth	r3, r3
 8002180:	b2da      	uxtb	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	69b9      	ldr	r1, [r7, #24]
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f883 	bl	8002298 <I2C_WaitOnTXISFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e012      	b.n	80021c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800219c:	893b      	ldrh	r3, [r7, #8]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2200      	movs	r2, #0
 80021ae:	2140      	movs	r1, #64	; 0x40
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f831 	bl	8002218 <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	80002000 	.word	0x80002000

080021d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d103      	bne.n	80021ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2200      	movs	r2, #0
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d007      	beq.n	800220c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	619a      	str	r2, [r3, #24]
  }
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002228:	e022      	b.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d01e      	beq.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002232:	f7fe feeb 	bl	800100c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d302      	bcc.n	8002248 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d113      	bne.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e00f      	b.n	8002290 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4013      	ands	r3, r2
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	429a      	cmp	r2, r3
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	429a      	cmp	r2, r3
 800228c:	d0cd      	beq.n	800222a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022a4:	e02c      	b.n	8002300 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f8ea 	bl	8002484 <I2C_IsErrorOccurred>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e02a      	b.n	8002310 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d01e      	beq.n	8002300 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c2:	f7fe fea3 	bl	800100c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d302      	bcc.n	80022d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d113      	bne.n	8002300 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	f043 0220 	orr.w	r2, r3, #32
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e007      	b.n	8002310 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b02      	cmp	r3, #2
 800230c:	d1cb      	bne.n	80022a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002324:	e028      	b.n	8002378 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f8aa 	bl	8002484 <I2C_IsErrorOccurred>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e026      	b.n	8002388 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233a:	f7fe fe67 	bl	800100c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	429a      	cmp	r2, r3
 8002348:	d302      	bcc.n	8002350 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d113      	bne.n	8002378 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e007      	b.n	8002388 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b20      	cmp	r3, #32
 8002384:	d1cf      	bne.n	8002326 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800239c:	e064      	b.n	8002468 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f86e 	bl	8002484 <I2C_IsErrorOccurred>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e062      	b.n	8002478 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d138      	bne.n	8002432 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d105      	bne.n	80023da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e04e      	b.n	8002478 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b10      	cmp	r3, #16
 80023e6:	d107      	bne.n	80023f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2204      	movs	r2, #4
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44
 80023f6:	e002      	b.n	80023fe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2220      	movs	r2, #32
 8002404:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002412:	400b      	ands	r3, r1
 8002414:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e022      	b.n	8002478 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7fe fdeb 	bl	800100c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10f      	bne.n	8002468 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	f043 0220 	orr.w	r2, r3, #32
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e007      	b.n	8002478 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b04      	cmp	r3, #4
 8002474:	d193      	bne.n	800239e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	fe00e800 	.word	0xfe00e800

08002484 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d075      	beq.n	800259c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2210      	movs	r2, #16
 80024b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024b8:	e056      	b.n	8002568 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d052      	beq.n	8002568 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024c2:	f7fe fda3 	bl	800100c <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d302      	bcc.n	80024d8 <I2C_IsErrorOccurred+0x54>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d147      	bne.n	8002568 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024fa:	d12e      	bne.n	800255a <I2C_IsErrorOccurred+0xd6>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002502:	d02a      	beq.n	800255a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	2b20      	cmp	r3, #32
 8002508:	d027      	beq.n	800255a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002518:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800251a:	f7fe fd77 	bl	800100c <HAL_GetTick>
 800251e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002520:	e01b      	b.n	800255a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002522:	f7fe fd73 	bl	800100c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b19      	cmp	r3, #25
 800252e:	d914      	bls.n	800255a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b20      	cmp	r3, #32
 8002566:	d1dc      	bne.n	8002522 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b20      	cmp	r3, #32
 8002574:	d003      	beq.n	800257e <I2C_IsErrorOccurred+0xfa>
 8002576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800257a:	2b00      	cmp	r3, #0
 800257c:	d09d      	beq.n	80024ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800257e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2220      	movs	r2, #32
 800258c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00b      	beq.n	80025e8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	f043 0308 	orr.w	r3, r3, #8
 80025d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002602:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800260a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01c      	beq.n	800264c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff fddc 	bl	80021d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6859      	ldr	r1, [r3, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <I2C_IsErrorOccurred+0x1d4>)
 8002624:	400b      	ands	r3, r1
 8002626:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	431a      	orrs	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800264c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002650:	4618      	mov	r0, r3
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	fe00e800 	.word	0xfe00e800

0800265c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	460b      	mov	r3, r1
 8002668:	817b      	strh	r3, [r7, #10]
 800266a:	4613      	mov	r3, r2
 800266c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002674:	7a7b      	ldrb	r3, [r7, #9]
 8002676:	041b      	lsls	r3, r3, #16
 8002678:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800267c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	4313      	orrs	r3, r2
 8002686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800268a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	0d5b      	lsrs	r3, r3, #21
 8002696:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <I2C_TransferConfig+0x60>)
 800269c:	430b      	orrs	r3, r1
 800269e:	43db      	mvns	r3, r3
 80026a0:	ea02 0103 	and.w	r1, r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026ae:	bf00      	nop
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	03ff63ff 	.word	0x03ff63ff

080026c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d138      	bne.n	8002748 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e032      	b.n	800274a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2224      	movs	r2, #36	; 0x24
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002712:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b20      	cmp	r3, #32
 800276a:	d139      	bne.n	80027e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002776:	2302      	movs	r3, #2
 8002778:	e033      	b.n	80027e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2224      	movs	r2, #36	; 0x24
 8002786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e000      	b.n	80027e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d141      	bne.n	8002882 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027fe:	4b4b      	ldr	r3, [pc, #300]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280a:	d131      	bne.n	8002870 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800280c:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002812:	4a46      	ldr	r2, [pc, #280]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002818:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800281c:	4b43      	ldr	r3, [pc, #268]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002824:	4a41      	ldr	r2, [pc, #260]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800282a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800282c:	4b40      	ldr	r3, [pc, #256]	; (8002930 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2232      	movs	r2, #50	; 0x32
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	4a3f      	ldr	r2, [pc, #252]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	0c9b      	lsrs	r3, r3, #18
 800283e:	3301      	adds	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002842:	e002      	b.n	800284a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3b01      	subs	r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800284a:	4b38      	ldr	r3, [pc, #224]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002856:	d102      	bne.n	800285e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f2      	bne.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286a:	d158      	bne.n	800291e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e057      	b.n	8002920 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002870:	4b2e      	ldr	r3, [pc, #184]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002876:	4a2d      	ldr	r2, [pc, #180]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800287c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002880:	e04d      	b.n	800291e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002888:	d141      	bne.n	800290e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800288a:	4b28      	ldr	r3, [pc, #160]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002896:	d131      	bne.n	80028fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002898:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800289a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800289e:	4a23      	ldr	r2, [pc, #140]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a8:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028b0:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2232      	movs	r2, #50	; 0x32
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028c4:	fba2 2303 	umull	r2, r3, r2, r3
 80028c8:	0c9b      	lsrs	r3, r3, #18
 80028ca:	3301      	adds	r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ce:	e002      	b.n	80028d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e2:	d102      	bne.n	80028ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f2      	bne.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	d112      	bne.n	800291e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e011      	b.n	8002920 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002908:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800290c:	e007      	b.n	800291e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002916:	4a05      	ldr	r2, [pc, #20]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002918:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40007000 	.word	0x40007000
 8002930:	20000000 	.word	0x20000000
 8002934:	431bde83 	.word	0x431bde83

08002938 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002946:	6093      	str	r3, [r2, #8]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40007000 	.word	0x40007000

08002958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e306      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d075      	beq.n	8002a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002976:	4b97      	ldr	r3, [pc, #604]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002980:	4b94      	ldr	r3, [pc, #592]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d102      	bne.n	8002996 <HAL_RCC_OscConfig+0x3e>
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d002      	beq.n	800299c <HAL_RCC_OscConfig+0x44>
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d10b      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	4b8d      	ldr	r3, [pc, #564]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d05b      	beq.n	8002a60 <HAL_RCC_OscConfig+0x108>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d157      	bne.n	8002a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e2e1      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029bc:	d106      	bne.n	80029cc <HAL_RCC_OscConfig+0x74>
 80029be:	4b85      	ldr	r3, [pc, #532]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a84      	ldr	r2, [pc, #528]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e01d      	b.n	8002a08 <HAL_RCC_OscConfig+0xb0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x98>
 80029d6:	4b7f      	ldr	r3, [pc, #508]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7e      	ldr	r2, [pc, #504]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b7c      	ldr	r3, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a7b      	ldr	r2, [pc, #492]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0xb0>
 80029f0:	4b78      	ldr	r3, [pc, #480]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a77      	ldr	r2, [pc, #476]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	4b75      	ldr	r3, [pc, #468]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a74      	ldr	r2, [pc, #464]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fafc 	bl	800100c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fe faf8 	bl	800100c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e2a6      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a2a:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0xc0>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fae8 	bl	800100c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fe fae4 	bl	800100c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e292      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a52:	4b60      	ldr	r3, [pc, #384]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0xe8>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d075      	beq.n	8002b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6e:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a78:	4b56      	ldr	r3, [pc, #344]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_OscConfig+0x136>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d002      	beq.n	8002a94 <HAL_RCC_OscConfig+0x13c>
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d11f      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a94:	4b4f      	ldr	r3, [pc, #316]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x154>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e265      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	4946      	ldr	r1, [pc, #280]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ac0:	4b45      	ldr	r3, [pc, #276]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe fa55 	bl	8000f74 <HAL_InitTick>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d043      	beq.n	8002b58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e251      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d023      	beq.n	8002b24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3c      	ldr	r2, [pc, #240]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fa90 	bl	800100c <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af0:	f7fe fa8c 	bl	800100c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e23a      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b02:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	061b      	lsls	r3, r3, #24
 8002b1c:	492d      	ldr	r1, [pc, #180]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
 8002b22:	e01a      	b.n	8002b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b24:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2a      	ldr	r2, [pc, #168]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fa6c 	bl	800100c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b38:	f7fe fa68 	bl	800100c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e216      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x1e0>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d041      	beq.n	8002bea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6e:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b74:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fa45 	bl	800100c <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b86:	f7fe fa41 	bl	800100c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e1ef      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0ef      	beq.n	8002b86 <HAL_RCC_OscConfig+0x22e>
 8002ba6:	e020      	b.n	8002bea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fe fa28 	bl	800100c <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bbe:	e00d      	b.n	8002bdc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7fe fa24 	bl	800100c <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d906      	bls.n	8002bdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1d2      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bdc:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ea      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80a6 	beq.w	8002d44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bfc:	4b84      	ldr	r3, [pc, #528]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_OscConfig+0x2b4>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x2b6>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00d      	beq.n	8002c2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c16:	4a7e      	ldr	r2, [pc, #504]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c1e:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2e:	4b79      	ldr	r3, [pc, #484]	; (8002e14 <HAL_RCC_OscConfig+0x4bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d118      	bne.n	8002c6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c3a:	4b76      	ldr	r3, [pc, #472]	; (8002e14 <HAL_RCC_OscConfig+0x4bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a75      	ldr	r2, [pc, #468]	; (8002e14 <HAL_RCC_OscConfig+0x4bc>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c46:	f7fe f9e1 	bl	800100c <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4e:	f7fe f9dd 	bl	800100c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e18b      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c60:	4b6c      	ldr	r3, [pc, #432]	; (8002e14 <HAL_RCC_OscConfig+0x4bc>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d108      	bne.n	8002c86 <HAL_RCC_OscConfig+0x32e>
 8002c74:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	4a65      	ldr	r2, [pc, #404]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c84:	e024      	b.n	8002cd0 <HAL_RCC_OscConfig+0x378>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	d110      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x358>
 8002c8e:	4b60      	ldr	r3, [pc, #384]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c94:	4a5e      	ldr	r2, [pc, #376]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9e:	4b5c      	ldr	r3, [pc, #368]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	4a5a      	ldr	r2, [pc, #360]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cae:	e00f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x378>
 8002cb0:	4b57      	ldr	r3, [pc, #348]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	4a56      	ldr	r2, [pc, #344]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d016      	beq.n	8002d06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe f998 	bl	800100c <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fe f994 	bl	800100c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e140      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf6:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ed      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x388>
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe f981 	bl	800100c <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe f97d 	bl	800100c <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e129      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d24:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ed      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d32:	7ffb      	ldrb	r3, [r7, #31]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d38:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d03c      	beq.n	8002dca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01c      	beq.n	8002d92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d58:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d5e:	4a2c      	ldr	r2, [pc, #176]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d68:	f7fe f950 	bl	800100c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d70:	f7fe f94c 	bl	800100c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0fa      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d82:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ef      	beq.n	8002d70 <HAL_RCC_OscConfig+0x418>
 8002d90:	e01b      	b.n	8002dca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d92:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d98:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7fe f933 	bl	800100c <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002daa:	f7fe f92f 	bl	800100c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e0dd      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dbc:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1ef      	bne.n	8002daa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80d1 	beq.w	8002f76 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	f000 808b 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d15e      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe f909 	bl	800100c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dfc:	e00c      	b.n	8002e18 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe f905 	bl	800100c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d905      	bls.n	8002e18 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0b3      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e18:	4b59      	ldr	r3, [pc, #356]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ec      	bne.n	8002dfe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e24:	4b56      	ldr	r3, [pc, #344]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <HAL_RCC_OscConfig+0x62c>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6a11      	ldr	r1, [r2, #32]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e34:	3a01      	subs	r2, #1
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	4311      	orrs	r1, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e3e:	0212      	lsls	r2, r2, #8
 8002e40:	4311      	orrs	r1, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e46:	0852      	lsrs	r2, r2, #1
 8002e48:	3a01      	subs	r2, #1
 8002e4a:	0552      	lsls	r2, r2, #21
 8002e4c:	4311      	orrs	r1, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e52:	0852      	lsrs	r2, r2, #1
 8002e54:	3a01      	subs	r2, #1
 8002e56:	0652      	lsls	r2, r2, #25
 8002e58:	4311      	orrs	r1, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e5e:	06d2      	lsls	r2, r2, #27
 8002e60:	430a      	orrs	r2, r1
 8002e62:	4947      	ldr	r1, [pc, #284]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e68:	4b45      	ldr	r3, [pc, #276]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a44      	ldr	r2, [pc, #272]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e74:	4b42      	ldr	r3, [pc, #264]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a41      	ldr	r2, [pc, #260]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe f8c4 	bl	800100c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe f8c0 	bl	800100c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e06e      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9a:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x530>
 8002ea6:	e066      	b.n	8002f76 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b35      	ldr	r3, [pc, #212]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a34      	ldr	r2, [pc, #208]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eb4:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4a31      	ldr	r2, [pc, #196]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ec0:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4a2e      	ldr	r2, [pc, #184]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002ec6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ece:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe f89c 	bl	800100c <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe f898 	bl	800100c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e046      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x580>
 8002ef6:	e03e      	b.n	8002f76 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e039      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f04:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <HAL_RCC_OscConfig+0x628>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f003 0203 	and.w	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d12c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	3b01      	subs	r3, #1
 8002f24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d123      	bne.n	8002f72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d11b      	bne.n	8002f72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d113      	bne.n	8002f72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	3b01      	subs	r3, #1
 8002f58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000
 8002f84:	019f800c 	.word	0x019f800c

08002f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e11e      	b.n	80031de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b91      	ldr	r3, [pc, #580]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d910      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b8e      	ldr	r3, [pc, #568]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 020f 	bic.w	r2, r3, #15
 8002fb6:	498c      	ldr	r1, [pc, #560]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b8a      	ldr	r3, [pc, #552]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e106      	b.n	80031de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d073      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d129      	bne.n	8003038 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe4:	4b81      	ldr	r3, [pc, #516]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0f4      	b.n	80031de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ff4:	f000 f99e 	bl	8003334 <RCC_GetSysClockFreqFromPLLSource>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4a7c      	ldr	r2, [pc, #496]	; (80031f0 <HAL_RCC_ClockConfig+0x268>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d93f      	bls.n	8003082 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003002:	4b7a      	ldr	r3, [pc, #488]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	d033      	beq.n	8003082 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800301e:	2b00      	cmp	r3, #0
 8003020:	d12f      	bne.n	8003082 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003022:	4b72      	ldr	r3, [pc, #456]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800302a:	4a70      	ldr	r2, [pc, #448]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 800302c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003030:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e024      	b.n	8003082 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d107      	bne.n	8003050 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0c6      	b.n	80031de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003050:	4b66      	ldr	r3, [pc, #408]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0be      	b.n	80031de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003060:	f000 f8ce 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8003064:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4a61      	ldr	r2, [pc, #388]	; (80031f0 <HAL_RCC_ClockConfig+0x268>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d909      	bls.n	8003082 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800306e:	4b5f      	ldr	r3, [pc, #380]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003076:	4a5d      	ldr	r2, [pc, #372]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003082:	4b5a      	ldr	r3, [pc, #360]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f023 0203 	bic.w	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4957      	ldr	r1, [pc, #348]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003090:	4313      	orrs	r3, r2
 8003092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003094:	f7fd ffba 	bl	800100c <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309c:	f7fd ffb6 	bl	800100c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e095      	b.n	80031de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	4b4e      	ldr	r3, [pc, #312]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 020c 	and.w	r2, r3, #12
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d1eb      	bne.n	800309c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d023      	beq.n	8003118 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030dc:	4b43      	ldr	r3, [pc, #268]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a42      	ldr	r2, [pc, #264]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 80030e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030f4:	4b3d      	ldr	r3, [pc, #244]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030fc:	4a3b      	ldr	r2, [pc, #236]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 80030fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003102:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b39      	ldr	r3, [pc, #228]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4936      	ldr	r1, [pc, #216]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
 8003116:	e008      	b.n	800312a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d105      	bne.n	800312a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800311e:	4b33      	ldr	r3, [pc, #204]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	4a32      	ldr	r2, [pc, #200]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003128:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800312a:	4b2f      	ldr	r3, [pc, #188]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d21d      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003138:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f023 020f 	bic.w	r2, r3, #15
 8003140:	4929      	ldr	r1, [pc, #164]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	4313      	orrs	r3, r2
 8003146:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003148:	f7fd ff60 	bl	800100c <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003150:	f7fd ff5c 	bl	800100c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e03b      	b.n	80031de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d1ed      	bne.n	8003150 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4917      	ldr	r1, [pc, #92]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800319e:	4b13      	ldr	r3, [pc, #76]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	490f      	ldr	r1, [pc, #60]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031b2:	f000 f825 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80031b6:	4602      	mov	r2, r0
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <HAL_RCC_ClockConfig+0x264>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	490c      	ldr	r1, [pc, #48]	; (80031f4 <HAL_RCC_ClockConfig+0x26c>)
 80031c4:	5ccb      	ldrb	r3, [r1, r3]
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	fa22 f303 	lsr.w	r3, r2, r3
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <HAL_RCC_ClockConfig+0x270>)
 80031d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031d2:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x274>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd fecc 	bl	8000f74 <HAL_InitTick>
 80031dc:	4603      	mov	r3, r0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40022000 	.word	0x40022000
 80031ec:	40021000 	.word	0x40021000
 80031f0:	04c4b400 	.word	0x04c4b400
 80031f4:	08005974 	.word	0x08005974
 80031f8:	20000000 	.word	0x20000000
 80031fc:	20000004 	.word	0x20000004

08003200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003206:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b04      	cmp	r3, #4
 8003210:	d102      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003212:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	e047      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003218:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b08      	cmp	r3, #8
 8003222:	d102      	bne.n	800322a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003224:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e03e      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800322a:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d136      	bne.n	80032a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	3301      	adds	r3, #1
 800324c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d10c      	bne.n	800326e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003254:	4a1a      	ldr	r2, [pc, #104]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800325e:	68d2      	ldr	r2, [r2, #12]
 8003260:	0a12      	lsrs	r2, r2, #8
 8003262:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	617b      	str	r3, [r7, #20]
      break;
 800326c:	e00c      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800326e:	4a13      	ldr	r2, [pc, #76]	; (80032bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	4a10      	ldr	r2, [pc, #64]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003278:	68d2      	ldr	r2, [r2, #12]
 800327a:	0a12      	lsrs	r2, r2, #8
 800327c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003280:	fb02 f303 	mul.w	r3, r2, r3
 8003284:	617b      	str	r3, [r7, #20]
      break;
 8003286:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	0e5b      	lsrs	r3, r3, #25
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	3301      	adds	r3, #1
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	e001      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032a8:	693b      	ldr	r3, [r7, #16]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	00f42400 	.word	0x00f42400
 80032c0:	016e3600 	.word	0x016e3600

080032c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000000 	.word	0x20000000

080032dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032e0:	f7ff fff0 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4904      	ldr	r1, [pc, #16]	; (8003304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	08005984 	.word	0x08005984

08003308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800330c:	f7ff ffda 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0adb      	lsrs	r3, r3, #11
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4904      	ldr	r1, [pc, #16]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	08005984 	.word	0x08005984

08003334 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800333a:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	3301      	adds	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d10c      	bne.n	8003372 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003358:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003362:	68d2      	ldr	r2, [r2, #12]
 8003364:	0a12      	lsrs	r2, r2, #8
 8003366:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	617b      	str	r3, [r7, #20]
    break;
 8003370:	e00c      	b.n	800338c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003372:	4a12      	ldr	r2, [pc, #72]	; (80033bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	4a0e      	ldr	r2, [pc, #56]	; (80033b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800337c:	68d2      	ldr	r2, [r2, #12]
 800337e:	0a12      	lsrs	r2, r2, #8
 8003380:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003384:	fb02 f303 	mul.w	r3, r2, r3
 8003388:	617b      	str	r3, [r7, #20]
    break;
 800338a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0e5b      	lsrs	r3, r3, #25
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	3301      	adds	r3, #1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80033a6:	687b      	ldr	r3, [r7, #4]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40021000 	.word	0x40021000
 80033b8:	016e3600 	.word	0x016e3600
 80033bc:	00f42400 	.word	0x00f42400

080033c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033c8:	2300      	movs	r3, #0
 80033ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033cc:	2300      	movs	r3, #0
 80033ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8098 	beq.w	800350e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033de:	2300      	movs	r3, #0
 80033e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e2:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10d      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	4b40      	ldr	r3, [pc, #256]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	4a3f      	ldr	r2, [pc, #252]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6593      	str	r3, [r2, #88]	; 0x58
 80033fa:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003406:	2301      	movs	r3, #1
 8003408:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800340a:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a39      	ldr	r2, [pc, #228]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003414:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003416:	f7fd fdf9 	bl	800100c <HAL_GetTick>
 800341a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800341c:	e009      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341e:	f7fd fdf5 	bl	800100c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d902      	bls.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	74fb      	strb	r3, [r7, #19]
        break;
 8003430:	e005      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003432:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0ef      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800343e:	7cfb      	ldrb	r3, [r7, #19]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d159      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01e      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	d019      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003460:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800346c:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	4a1f      	ldr	r2, [pc, #124]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800347c:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800348c:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fd fdb5 	bl	800100c <HAL_GetTick>
 80034a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a4:	e00b      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7fd fdb1 	bl	800100c <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d902      	bls.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	74fb      	strb	r3, [r7, #19]
            break;
 80034bc:	e006      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034be:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0ec      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d2:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	4903      	ldr	r1, [pc, #12]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034e8:	e008      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	74bb      	strb	r3, [r7, #18]
 80034ee:	e005      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034fc:	7c7b      	ldrb	r3, [r7, #17]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d105      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003502:	4ba6      	ldr	r3, [pc, #664]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	4aa5      	ldr	r2, [pc, #660]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800351a:	4ba0      	ldr	r3, [pc, #640]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f023 0203 	bic.w	r2, r3, #3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	499c      	ldr	r1, [pc, #624]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800353c:	4b97      	ldr	r3, [pc, #604]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f023 020c 	bic.w	r2, r3, #12
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4994      	ldr	r1, [pc, #592]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800355e:	4b8f      	ldr	r3, [pc, #572]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	498b      	ldr	r1, [pc, #556]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003580:	4b86      	ldr	r3, [pc, #536]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	4983      	ldr	r1, [pc, #524]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035a2:	4b7e      	ldr	r3, [pc, #504]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	497a      	ldr	r1, [pc, #488]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035c4:	4b75      	ldr	r3, [pc, #468]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	4972      	ldr	r1, [pc, #456]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035e6:	4b6d      	ldr	r3, [pc, #436]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	4969      	ldr	r1, [pc, #420]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003608:	4b64      	ldr	r3, [pc, #400]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	4961      	ldr	r1, [pc, #388]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800362a:	4b5c      	ldr	r3, [pc, #368]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	4958      	ldr	r1, [pc, #352]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	2b00      	cmp	r3, #0
 800364a:	d015      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800364c:	4b53      	ldr	r3, [pc, #332]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	4950      	ldr	r1, [pc, #320]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366a:	d105      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366c:	4b4b      	ldr	r3, [pc, #300]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a4a      	ldr	r2, [pc, #296]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003676:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003680:	2b00      	cmp	r3, #0
 8003682:	d015      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003684:	4b45      	ldr	r3, [pc, #276]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	4942      	ldr	r1, [pc, #264]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a2:	d105      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a4:	4b3d      	ldr	r3, [pc, #244]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4a3c      	ldr	r2, [pc, #240]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036bc:	4b37      	ldr	r3, [pc, #220]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4934      	ldr	r1, [pc, #208]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036da:	d105      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036dc:	4b2f      	ldr	r3, [pc, #188]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a2e      	ldr	r2, [pc, #184]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d015      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036f4:	4b29      	ldr	r3, [pc, #164]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	4926      	ldr	r1, [pc, #152]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003712:	d105      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4a20      	ldr	r2, [pc, #128]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800371a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800371e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d015      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800372c:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	4918      	ldr	r1, [pc, #96]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800374a:	d105      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a12      	ldr	r2, [pc, #72]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003756:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d015      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	490a      	ldr	r1, [pc, #40]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003782:	d105      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800378a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003790:	7cbb      	ldrb	r3, [r7, #18]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000

080037a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e042      	b.n	8003838 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fd fb3b 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2224      	movs	r2, #36	; 0x24
 80037ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f8c2 	bl	800396c <UART_SetConfig>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e022      	b.n	8003838 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fb82 	bl	8003f04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800380e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800381e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fc09 	bl	8004048 <UART_CheckIdleState>
 8003836:	4603      	mov	r3, r0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003856:	2b20      	cmp	r3, #32
 8003858:	f040 8083 	bne.w	8003962 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_UART_Transmit+0x28>
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e07b      	b.n	8003964 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_UART_Transmit+0x3a>
 8003876:	2302      	movs	r3, #2
 8003878:	e074      	b.n	8003964 <HAL_UART_Transmit+0x124>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2221      	movs	r2, #33	; 0x21
 800388e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003892:	f7fd fbbb 	bl	800100c <HAL_GetTick>
 8003896:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b0:	d108      	bne.n	80038c4 <HAL_UART_Transmit+0x84>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d104      	bne.n	80038c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	e003      	b.n	80038cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80038d4:	e02c      	b.n	8003930 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fbfc 	bl	80040de <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e039      	b.n	8003964 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10b      	bne.n	800390e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	3302      	adds	r3, #2
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	e007      	b.n	800391e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	3301      	adds	r3, #1
 800391c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1cc      	bne.n	80038d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2200      	movs	r2, #0
 8003944:	2140      	movs	r1, #64	; 0x40
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fbc9 	bl	80040de <UART_WaitOnFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e006      	b.n	8003964 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800396c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003970:	b08c      	sub	sp, #48	; 0x30
 8003972:	af00      	add	r7, sp, #0
 8003974:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	431a      	orrs	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	431a      	orrs	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	4313      	orrs	r3, r2
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4bab      	ldr	r3, [pc, #684]	; (8003c48 <UART_SetConfig+0x2dc>)
 800399c:	4013      	ands	r3, r2
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4aa0      	ldr	r2, [pc, #640]	; (8003c4c <UART_SetConfig+0x2e0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d4:	4313      	orrs	r3, r2
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80039e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	f023 010f 	bic.w	r1, r3, #15
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a91      	ldr	r2, [pc, #580]	; (8003c50 <UART_SetConfig+0x2e4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d125      	bne.n	8003a5c <UART_SetConfig+0xf0>
 8003a10:	4b90      	ldr	r3, [pc, #576]	; (8003c54 <UART_SetConfig+0x2e8>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d81a      	bhi.n	8003a54 <UART_SetConfig+0xe8>
 8003a1e:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <UART_SetConfig+0xb8>)
 8003a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a24:	08003a35 	.word	0x08003a35
 8003a28:	08003a45 	.word	0x08003a45
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a4d 	.word	0x08003a4d
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3a:	e0d6      	b.n	8003bea <UART_SetConfig+0x27e>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a42:	e0d2      	b.n	8003bea <UART_SetConfig+0x27e>
 8003a44:	2304      	movs	r3, #4
 8003a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a4a:	e0ce      	b.n	8003bea <UART_SetConfig+0x27e>
 8003a4c:	2308      	movs	r3, #8
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a52:	e0ca      	b.n	8003bea <UART_SetConfig+0x27e>
 8003a54:	2310      	movs	r3, #16
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a5a:	e0c6      	b.n	8003bea <UART_SetConfig+0x27e>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7d      	ldr	r2, [pc, #500]	; (8003c58 <UART_SetConfig+0x2ec>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d138      	bne.n	8003ad8 <UART_SetConfig+0x16c>
 8003a66:	4b7b      	ldr	r3, [pc, #492]	; (8003c54 <UART_SetConfig+0x2e8>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	f003 030c 	and.w	r3, r3, #12
 8003a70:	2b0c      	cmp	r3, #12
 8003a72:	d82d      	bhi.n	8003ad0 <UART_SetConfig+0x164>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <UART_SetConfig+0x110>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003ab1 	.word	0x08003ab1
 8003a80:	08003ad1 	.word	0x08003ad1
 8003a84:	08003ad1 	.word	0x08003ad1
 8003a88:	08003ad1 	.word	0x08003ad1
 8003a8c:	08003ac1 	.word	0x08003ac1
 8003a90:	08003ad1 	.word	0x08003ad1
 8003a94:	08003ad1 	.word	0x08003ad1
 8003a98:	08003ad1 	.word	0x08003ad1
 8003a9c:	08003ab9 	.word	0x08003ab9
 8003aa0:	08003ad1 	.word	0x08003ad1
 8003aa4:	08003ad1 	.word	0x08003ad1
 8003aa8:	08003ad1 	.word	0x08003ad1
 8003aac:	08003ac9 	.word	0x08003ac9
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ab6:	e098      	b.n	8003bea <UART_SetConfig+0x27e>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003abe:	e094      	b.n	8003bea <UART_SetConfig+0x27e>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ac6:	e090      	b.n	8003bea <UART_SetConfig+0x27e>
 8003ac8:	2308      	movs	r3, #8
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ace:	e08c      	b.n	8003bea <UART_SetConfig+0x27e>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad6:	e088      	b.n	8003bea <UART_SetConfig+0x27e>
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a5f      	ldr	r2, [pc, #380]	; (8003c5c <UART_SetConfig+0x2f0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d125      	bne.n	8003b2e <UART_SetConfig+0x1c2>
 8003ae2:	4b5c      	ldr	r3, [pc, #368]	; (8003c54 <UART_SetConfig+0x2e8>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003aec:	2b30      	cmp	r3, #48	; 0x30
 8003aee:	d016      	beq.n	8003b1e <UART_SetConfig+0x1b2>
 8003af0:	2b30      	cmp	r3, #48	; 0x30
 8003af2:	d818      	bhi.n	8003b26 <UART_SetConfig+0x1ba>
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d00a      	beq.n	8003b0e <UART_SetConfig+0x1a2>
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d814      	bhi.n	8003b26 <UART_SetConfig+0x1ba>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <UART_SetConfig+0x19a>
 8003b00:	2b10      	cmp	r3, #16
 8003b02:	d008      	beq.n	8003b16 <UART_SetConfig+0x1aa>
 8003b04:	e00f      	b.n	8003b26 <UART_SetConfig+0x1ba>
 8003b06:	2300      	movs	r3, #0
 8003b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b0c:	e06d      	b.n	8003bea <UART_SetConfig+0x27e>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b14:	e069      	b.n	8003bea <UART_SetConfig+0x27e>
 8003b16:	2304      	movs	r3, #4
 8003b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b1c:	e065      	b.n	8003bea <UART_SetConfig+0x27e>
 8003b1e:	2308      	movs	r3, #8
 8003b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b24:	e061      	b.n	8003bea <UART_SetConfig+0x27e>
 8003b26:	2310      	movs	r3, #16
 8003b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b2c:	e05d      	b.n	8003bea <UART_SetConfig+0x27e>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a4b      	ldr	r2, [pc, #300]	; (8003c60 <UART_SetConfig+0x2f4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d125      	bne.n	8003b84 <UART_SetConfig+0x218>
 8003b38:	4b46      	ldr	r3, [pc, #280]	; (8003c54 <UART_SetConfig+0x2e8>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b42:	2bc0      	cmp	r3, #192	; 0xc0
 8003b44:	d016      	beq.n	8003b74 <UART_SetConfig+0x208>
 8003b46:	2bc0      	cmp	r3, #192	; 0xc0
 8003b48:	d818      	bhi.n	8003b7c <UART_SetConfig+0x210>
 8003b4a:	2b80      	cmp	r3, #128	; 0x80
 8003b4c:	d00a      	beq.n	8003b64 <UART_SetConfig+0x1f8>
 8003b4e:	2b80      	cmp	r3, #128	; 0x80
 8003b50:	d814      	bhi.n	8003b7c <UART_SetConfig+0x210>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <UART_SetConfig+0x1f0>
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d008      	beq.n	8003b6c <UART_SetConfig+0x200>
 8003b5a:	e00f      	b.n	8003b7c <UART_SetConfig+0x210>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b62:	e042      	b.n	8003bea <UART_SetConfig+0x27e>
 8003b64:	2302      	movs	r3, #2
 8003b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b6a:	e03e      	b.n	8003bea <UART_SetConfig+0x27e>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b72:	e03a      	b.n	8003bea <UART_SetConfig+0x27e>
 8003b74:	2308      	movs	r3, #8
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b7a:	e036      	b.n	8003bea <UART_SetConfig+0x27e>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b82:	e032      	b.n	8003bea <UART_SetConfig+0x27e>
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a30      	ldr	r2, [pc, #192]	; (8003c4c <UART_SetConfig+0x2e0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d12a      	bne.n	8003be4 <UART_SetConfig+0x278>
 8003b8e:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <UART_SetConfig+0x2e8>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b9c:	d01a      	beq.n	8003bd4 <UART_SetConfig+0x268>
 8003b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ba2:	d81b      	bhi.n	8003bdc <UART_SetConfig+0x270>
 8003ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba8:	d00c      	beq.n	8003bc4 <UART_SetConfig+0x258>
 8003baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bae:	d815      	bhi.n	8003bdc <UART_SetConfig+0x270>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <UART_SetConfig+0x250>
 8003bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb8:	d008      	beq.n	8003bcc <UART_SetConfig+0x260>
 8003bba:	e00f      	b.n	8003bdc <UART_SetConfig+0x270>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc2:	e012      	b.n	8003bea <UART_SetConfig+0x27e>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bca:	e00e      	b.n	8003bea <UART_SetConfig+0x27e>
 8003bcc:	2304      	movs	r3, #4
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bd2:	e00a      	b.n	8003bea <UART_SetConfig+0x27e>
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bda:	e006      	b.n	8003bea <UART_SetConfig+0x27e>
 8003bdc:	2310      	movs	r3, #16
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be2:	e002      	b.n	8003bea <UART_SetConfig+0x27e>
 8003be4:	2310      	movs	r3, #16
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a17      	ldr	r2, [pc, #92]	; (8003c4c <UART_SetConfig+0x2e0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	f040 80a8 	bne.w	8003d46 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d834      	bhi.n	8003c68 <UART_SetConfig+0x2fc>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <UART_SetConfig+0x298>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c29 	.word	0x08003c29
 8003c08:	08003c69 	.word	0x08003c69
 8003c0c:	08003c31 	.word	0x08003c31
 8003c10:	08003c69 	.word	0x08003c69
 8003c14:	08003c37 	.word	0x08003c37
 8003c18:	08003c69 	.word	0x08003c69
 8003c1c:	08003c69 	.word	0x08003c69
 8003c20:	08003c69 	.word	0x08003c69
 8003c24:	08003c3f 	.word	0x08003c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c28:	f7ff fb58 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8003c2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c2e:	e021      	b.n	8003c74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <UART_SetConfig+0x2f8>)
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c34:	e01e      	b.n	8003c74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c36:	f7ff fae3 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8003c3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c3c:	e01a      	b.n	8003c74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c44:	e016      	b.n	8003c74 <UART_SetConfig+0x308>
 8003c46:	bf00      	nop
 8003c48:	cfff69f3 	.word	0xcfff69f3
 8003c4c:	40008000 	.word	0x40008000
 8003c50:	40013800 	.word	0x40013800
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40004400 	.word	0x40004400
 8003c5c:	40004800 	.word	0x40004800
 8003c60:	40004c00 	.word	0x40004c00
 8003c64:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 812a 	beq.w	8003ed0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	4a9e      	ldr	r2, [pc, #632]	; (8003efc <UART_SetConfig+0x590>)
 8003c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c86:	461a      	mov	r2, r3
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4413      	add	r3, r2
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d305      	bcc.n	8003cac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d903      	bls.n	8003cb4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003cb2:	e10d      	b.n	8003ed0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	60fa      	str	r2, [r7, #12]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	4a8e      	ldr	r2, [pc, #568]	; (8003efc <UART_SetConfig+0x590>)
 8003cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2200      	movs	r2, #0
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	607a      	str	r2, [r7, #4]
 8003cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cd6:	f7fc faf3 	bl	80002c0 <__aeabi_uldivmod>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	020b      	lsls	r3, r1, #8
 8003cec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003cf0:	0202      	lsls	r2, r0, #8
 8003cf2:	6979      	ldr	r1, [r7, #20]
 8003cf4:	6849      	ldr	r1, [r1, #4]
 8003cf6:	0849      	lsrs	r1, r1, #1
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	4605      	mov	r5, r0
 8003cfe:	eb12 0804 	adds.w	r8, r2, r4
 8003d02:	eb43 0905 	adc.w	r9, r3, r5
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	469a      	mov	sl, r3
 8003d0e:	4693      	mov	fp, r2
 8003d10:	4652      	mov	r2, sl
 8003d12:	465b      	mov	r3, fp
 8003d14:	4640      	mov	r0, r8
 8003d16:	4649      	mov	r1, r9
 8003d18:	f7fc fad2 	bl	80002c0 <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4613      	mov	r3, r2
 8003d22:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2a:	d308      	bcc.n	8003d3e <UART_SetConfig+0x3d2>
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d32:	d204      	bcs.n	8003d3e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a3a      	ldr	r2, [r7, #32]
 8003d3a:	60da      	str	r2, [r3, #12]
 8003d3c:	e0c8      	b.n	8003ed0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d44:	e0c4      	b.n	8003ed0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4e:	d167      	bne.n	8003e20 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003d50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d828      	bhi.n	8003daa <UART_SetConfig+0x43e>
 8003d58:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <UART_SetConfig+0x3f4>)
 8003d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5e:	bf00      	nop
 8003d60:	08003d85 	.word	0x08003d85
 8003d64:	08003d8d 	.word	0x08003d8d
 8003d68:	08003d95 	.word	0x08003d95
 8003d6c:	08003dab 	.word	0x08003dab
 8003d70:	08003d9b 	.word	0x08003d9b
 8003d74:	08003dab 	.word	0x08003dab
 8003d78:	08003dab 	.word	0x08003dab
 8003d7c:	08003dab 	.word	0x08003dab
 8003d80:	08003da3 	.word	0x08003da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d84:	f7ff faaa 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8003d88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d8a:	e014      	b.n	8003db6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d8c:	f7ff fabc 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 8003d90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d92:	e010      	b.n	8003db6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d94:	4b5a      	ldr	r3, [pc, #360]	; (8003f00 <UART_SetConfig+0x594>)
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d98:	e00d      	b.n	8003db6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9a:	f7ff fa31 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8003d9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003da0:	e009      	b.n	8003db6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003da8:	e005      	b.n	8003db6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003db4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8089 	beq.w	8003ed0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	4a4e      	ldr	r2, [pc, #312]	; (8003efc <UART_SetConfig+0x590>)
 8003dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dd0:	005a      	lsls	r2, r3, #1
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	441a      	add	r2, r3
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	2b0f      	cmp	r3, #15
 8003de8:	d916      	bls.n	8003e18 <UART_SetConfig+0x4ac>
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df0:	d212      	bcs.n	8003e18 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f023 030f 	bic.w	r3, r3, #15
 8003dfa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	085b      	lsrs	r3, r3, #1
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	8bfb      	ldrh	r3, [r7, #30]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	8bfa      	ldrh	r2, [r7, #30]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	e05b      	b.n	8003ed0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e1e:	e057      	b.n	8003ed0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d828      	bhi.n	8003e7a <UART_SetConfig+0x50e>
 8003e28:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <UART_SetConfig+0x4c4>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e55 	.word	0x08003e55
 8003e34:	08003e5d 	.word	0x08003e5d
 8003e38:	08003e65 	.word	0x08003e65
 8003e3c:	08003e7b 	.word	0x08003e7b
 8003e40:	08003e6b 	.word	0x08003e6b
 8003e44:	08003e7b 	.word	0x08003e7b
 8003e48:	08003e7b 	.word	0x08003e7b
 8003e4c:	08003e7b 	.word	0x08003e7b
 8003e50:	08003e73 	.word	0x08003e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7ff fa42 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8003e58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e5a:	e014      	b.n	8003e86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e5c:	f7ff fa54 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 8003e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e62:	e010      	b.n	8003e86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e64:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <UART_SetConfig+0x594>)
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e68:	e00d      	b.n	8003e86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6a:	f7ff f9c9 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8003e6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e70:	e009      	b.n	8003e86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e78:	e005      	b.n	8003e86 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e84:	bf00      	nop
    }

    if (pclk != 0U)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d021      	beq.n	8003ed0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <UART_SetConfig+0x590>)
 8003e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e96:	461a      	mov	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	441a      	add	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	2b0f      	cmp	r3, #15
 8003eb4:	d909      	bls.n	8003eca <UART_SetConfig+0x55e>
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d205      	bcs.n	8003eca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60da      	str	r2, [r3, #12]
 8003ec8:	e002      	b.n	8003ed0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003eec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3730      	adds	r7, #48	; 0x30
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efa:	bf00      	nop
 8003efc:	0800598c 	.word	0x0800598c
 8003f00:	00f42400 	.word	0x00f42400

08003f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01a      	beq.n	800401a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004002:	d10a      	bne.n	800401a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	605a      	str	r2, [r3, #4]
  }
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af02      	add	r7, sp, #8
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004058:	f7fc ffd8 	bl	800100c <HAL_GetTick>
 800405c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b08      	cmp	r3, #8
 800406a:	d10e      	bne.n	800408a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800406c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f82f 	bl	80040de <UART_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e025      	b.n	80040d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b04      	cmp	r3, #4
 8004096:	d10e      	bne.n	80040b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f819 	bl	80040de <UART_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e00f      	b.n	80040d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b09c      	sub	sp, #112	; 0x70
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ee:	e0a9      	b.n	8004244 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f6:	f000 80a5 	beq.w	8004244 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fc ff87 	bl	800100c <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <UART_WaitOnFlagUntilTimeout+0x32>
 800410a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410c:	2b00      	cmp	r3, #0
 800410e:	d140      	bne.n	8004192 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800411e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004124:	667b      	str	r3, [r7, #100]	; 0x64
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800412e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004130:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004134:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800413c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e6      	bne.n	8004110 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3308      	adds	r3, #8
 8004148:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	663b      	str	r3, [r7, #96]	; 0x60
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3308      	adds	r3, #8
 8004160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004162:	64ba      	str	r2, [r7, #72]	; 0x48
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800416a:	e841 2300 	strex	r3, r2, [r1]
 800416e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1e5      	bne.n	8004142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e069      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d051      	beq.n	8004244 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ae:	d149      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
 80041da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e6      	bne.n	80041ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3308      	adds	r3, #8
 80041f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	613b      	str	r3, [r7, #16]
   return(result);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	66bb      	str	r3, [r7, #104]	; 0x68
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3308      	adds	r3, #8
 800420a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800420c:	623a      	str	r2, [r7, #32]
 800420e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	69f9      	ldr	r1, [r7, #28]
 8004212:	6a3a      	ldr	r2, [r7, #32]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	61bb      	str	r3, [r7, #24]
   return(result);
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e010      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4013      	ands	r3, r2
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	429a      	cmp	r2, r3
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	429a      	cmp	r2, r3
 8004260:	f43f af46 	beq.w	80040f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3770      	adds	r7, #112	; 0x70
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_UARTEx_DisableFifoMode+0x16>
 8004280:	2302      	movs	r3, #2
 8004282:	e027      	b.n	80042d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	; 0x24
 8004290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80042b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e02d      	b.n	8004354 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2224      	movs	r2, #36	; 0x24
 8004304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f84f 	bl	80043d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004370:	2302      	movs	r3, #2
 8004372:	e02d      	b.n	80043d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2224      	movs	r2, #36	; 0x24
 8004380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f811 	bl	80043d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d108      	bne.n	80043fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80043f8:	e031      	b.n	800445e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80043fa:	2308      	movs	r3, #8
 80043fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80043fe:	2308      	movs	r3, #8
 8004400:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	0e5b      	lsrs	r3, r3, #25
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	0f5b      	lsrs	r3, r3, #29
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004422:	7bbb      	ldrb	r3, [r7, #14]
 8004424:	7b3a      	ldrb	r2, [r7, #12]
 8004426:	4911      	ldr	r1, [pc, #68]	; (800446c <UARTEx_SetNbDataToProcess+0x94>)
 8004428:	5c8a      	ldrb	r2, [r1, r2]
 800442a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800442e:	7b3a      	ldrb	r2, [r7, #12]
 8004430:	490f      	ldr	r1, [pc, #60]	; (8004470 <UARTEx_SetNbDataToProcess+0x98>)
 8004432:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004434:	fb93 f3f2 	sdiv	r3, r3, r2
 8004438:	b29a      	uxth	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	7b7a      	ldrb	r2, [r7, #13]
 8004444:	4909      	ldr	r1, [pc, #36]	; (800446c <UARTEx_SetNbDataToProcess+0x94>)
 8004446:	5c8a      	ldrb	r2, [r1, r2]
 8004448:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800444c:	7b7a      	ldrb	r2, [r7, #13]
 800444e:	4908      	ldr	r1, [pc, #32]	; (8004470 <UARTEx_SetNbDataToProcess+0x98>)
 8004450:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004452:	fb93 f3f2 	sdiv	r3, r3, r2
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	080059a4 	.word	0x080059a4
 8004470:	080059ac 	.word	0x080059ac

08004474 <__errno>:
 8004474:	4b01      	ldr	r3, [pc, #4]	; (800447c <__errno+0x8>)
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	2000000c 	.word	0x2000000c

08004480 <__libc_init_array>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	4d0d      	ldr	r5, [pc, #52]	; (80044b8 <__libc_init_array+0x38>)
 8004484:	4c0d      	ldr	r4, [pc, #52]	; (80044bc <__libc_init_array+0x3c>)
 8004486:	1b64      	subs	r4, r4, r5
 8004488:	10a4      	asrs	r4, r4, #2
 800448a:	2600      	movs	r6, #0
 800448c:	42a6      	cmp	r6, r4
 800448e:	d109      	bne.n	80044a4 <__libc_init_array+0x24>
 8004490:	4d0b      	ldr	r5, [pc, #44]	; (80044c0 <__libc_init_array+0x40>)
 8004492:	4c0c      	ldr	r4, [pc, #48]	; (80044c4 <__libc_init_array+0x44>)
 8004494:	f001 f882 	bl	800559c <_init>
 8004498:	1b64      	subs	r4, r4, r5
 800449a:	10a4      	asrs	r4, r4, #2
 800449c:	2600      	movs	r6, #0
 800449e:	42a6      	cmp	r6, r4
 80044a0:	d105      	bne.n	80044ae <__libc_init_array+0x2e>
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a8:	4798      	blx	r3
 80044aa:	3601      	adds	r6, #1
 80044ac:	e7ee      	b.n	800448c <__libc_init_array+0xc>
 80044ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b2:	4798      	blx	r3
 80044b4:	3601      	adds	r6, #1
 80044b6:	e7f2      	b.n	800449e <__libc_init_array+0x1e>
 80044b8:	08005a54 	.word	0x08005a54
 80044bc:	08005a54 	.word	0x08005a54
 80044c0:	08005a54 	.word	0x08005a54
 80044c4:	08005a58 	.word	0x08005a58

080044c8 <memset>:
 80044c8:	4402      	add	r2, r0
 80044ca:	4603      	mov	r3, r0
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d100      	bne.n	80044d2 <memset+0xa>
 80044d0:	4770      	bx	lr
 80044d2:	f803 1b01 	strb.w	r1, [r3], #1
 80044d6:	e7f9      	b.n	80044cc <memset+0x4>

080044d8 <iprintf>:
 80044d8:	b40f      	push	{r0, r1, r2, r3}
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <iprintf+0x2c>)
 80044dc:	b513      	push	{r0, r1, r4, lr}
 80044de:	681c      	ldr	r4, [r3, #0]
 80044e0:	b124      	cbz	r4, 80044ec <iprintf+0x14>
 80044e2:	69a3      	ldr	r3, [r4, #24]
 80044e4:	b913      	cbnz	r3, 80044ec <iprintf+0x14>
 80044e6:	4620      	mov	r0, r4
 80044e8:	f000 fa74 	bl	80049d4 <__sinit>
 80044ec:	ab05      	add	r3, sp, #20
 80044ee:	9a04      	ldr	r2, [sp, #16]
 80044f0:	68a1      	ldr	r1, [r4, #8]
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	4620      	mov	r0, r4
 80044f6:	f000 fc7d 	bl	8004df4 <_vfiprintf_r>
 80044fa:	b002      	add	sp, #8
 80044fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004500:	b004      	add	sp, #16
 8004502:	4770      	bx	lr
 8004504:	2000000c 	.word	0x2000000c

08004508 <putchar>:
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <putchar+0x28>)
 800450a:	b513      	push	{r0, r1, r4, lr}
 800450c:	681c      	ldr	r4, [r3, #0]
 800450e:	4601      	mov	r1, r0
 8004510:	b134      	cbz	r4, 8004520 <putchar+0x18>
 8004512:	69a3      	ldr	r3, [r4, #24]
 8004514:	b923      	cbnz	r3, 8004520 <putchar+0x18>
 8004516:	9001      	str	r0, [sp, #4]
 8004518:	4620      	mov	r0, r4
 800451a:	f000 fa5b 	bl	80049d4 <__sinit>
 800451e:	9901      	ldr	r1, [sp, #4]
 8004520:	68a2      	ldr	r2, [r4, #8]
 8004522:	4620      	mov	r0, r4
 8004524:	b002      	add	sp, #8
 8004526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800452a:	f000 bf27 	b.w	800537c <_putc_r>
 800452e:	bf00      	nop
 8004530:	2000000c 	.word	0x2000000c

08004534 <_puts_r>:
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	460e      	mov	r6, r1
 8004538:	4605      	mov	r5, r0
 800453a:	b118      	cbz	r0, 8004544 <_puts_r+0x10>
 800453c:	6983      	ldr	r3, [r0, #24]
 800453e:	b90b      	cbnz	r3, 8004544 <_puts_r+0x10>
 8004540:	f000 fa48 	bl	80049d4 <__sinit>
 8004544:	69ab      	ldr	r3, [r5, #24]
 8004546:	68ac      	ldr	r4, [r5, #8]
 8004548:	b913      	cbnz	r3, 8004550 <_puts_r+0x1c>
 800454a:	4628      	mov	r0, r5
 800454c:	f000 fa42 	bl	80049d4 <__sinit>
 8004550:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <_puts_r+0xd0>)
 8004552:	429c      	cmp	r4, r3
 8004554:	d120      	bne.n	8004598 <_puts_r+0x64>
 8004556:	686c      	ldr	r4, [r5, #4]
 8004558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800455a:	07db      	lsls	r3, r3, #31
 800455c:	d405      	bmi.n	800456a <_puts_r+0x36>
 800455e:	89a3      	ldrh	r3, [r4, #12]
 8004560:	0598      	lsls	r0, r3, #22
 8004562:	d402      	bmi.n	800456a <_puts_r+0x36>
 8004564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004566:	f000 fad3 	bl	8004b10 <__retarget_lock_acquire_recursive>
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	0719      	lsls	r1, r3, #28
 800456e:	d51d      	bpl.n	80045ac <_puts_r+0x78>
 8004570:	6923      	ldr	r3, [r4, #16]
 8004572:	b1db      	cbz	r3, 80045ac <_puts_r+0x78>
 8004574:	3e01      	subs	r6, #1
 8004576:	68a3      	ldr	r3, [r4, #8]
 8004578:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800457c:	3b01      	subs	r3, #1
 800457e:	60a3      	str	r3, [r4, #8]
 8004580:	bb39      	cbnz	r1, 80045d2 <_puts_r+0x9e>
 8004582:	2b00      	cmp	r3, #0
 8004584:	da38      	bge.n	80045f8 <_puts_r+0xc4>
 8004586:	4622      	mov	r2, r4
 8004588:	210a      	movs	r1, #10
 800458a:	4628      	mov	r0, r5
 800458c:	f000 f848 	bl	8004620 <__swbuf_r>
 8004590:	3001      	adds	r0, #1
 8004592:	d011      	beq.n	80045b8 <_puts_r+0x84>
 8004594:	250a      	movs	r5, #10
 8004596:	e011      	b.n	80045bc <_puts_r+0x88>
 8004598:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <_puts_r+0xd4>)
 800459a:	429c      	cmp	r4, r3
 800459c:	d101      	bne.n	80045a2 <_puts_r+0x6e>
 800459e:	68ac      	ldr	r4, [r5, #8]
 80045a0:	e7da      	b.n	8004558 <_puts_r+0x24>
 80045a2:	4b1a      	ldr	r3, [pc, #104]	; (800460c <_puts_r+0xd8>)
 80045a4:	429c      	cmp	r4, r3
 80045a6:	bf08      	it	eq
 80045a8:	68ec      	ldreq	r4, [r5, #12]
 80045aa:	e7d5      	b.n	8004558 <_puts_r+0x24>
 80045ac:	4621      	mov	r1, r4
 80045ae:	4628      	mov	r0, r5
 80045b0:	f000 f888 	bl	80046c4 <__swsetup_r>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d0dd      	beq.n	8004574 <_puts_r+0x40>
 80045b8:	f04f 35ff 	mov.w	r5, #4294967295
 80045bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045be:	07da      	lsls	r2, r3, #31
 80045c0:	d405      	bmi.n	80045ce <_puts_r+0x9a>
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	059b      	lsls	r3, r3, #22
 80045c6:	d402      	bmi.n	80045ce <_puts_r+0x9a>
 80045c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ca:	f000 faa2 	bl	8004b12 <__retarget_lock_release_recursive>
 80045ce:	4628      	mov	r0, r5
 80045d0:	bd70      	pop	{r4, r5, r6, pc}
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	da04      	bge.n	80045e0 <_puts_r+0xac>
 80045d6:	69a2      	ldr	r2, [r4, #24]
 80045d8:	429a      	cmp	r2, r3
 80045da:	dc06      	bgt.n	80045ea <_puts_r+0xb6>
 80045dc:	290a      	cmp	r1, #10
 80045de:	d004      	beq.n	80045ea <_puts_r+0xb6>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	6022      	str	r2, [r4, #0]
 80045e6:	7019      	strb	r1, [r3, #0]
 80045e8:	e7c5      	b.n	8004576 <_puts_r+0x42>
 80045ea:	4622      	mov	r2, r4
 80045ec:	4628      	mov	r0, r5
 80045ee:	f000 f817 	bl	8004620 <__swbuf_r>
 80045f2:	3001      	adds	r0, #1
 80045f4:	d1bf      	bne.n	8004576 <_puts_r+0x42>
 80045f6:	e7df      	b.n	80045b8 <_puts_r+0x84>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	250a      	movs	r5, #10
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	6022      	str	r2, [r4, #0]
 8004600:	701d      	strb	r5, [r3, #0]
 8004602:	e7db      	b.n	80045bc <_puts_r+0x88>
 8004604:	080059d8 	.word	0x080059d8
 8004608:	080059f8 	.word	0x080059f8
 800460c:	080059b8 	.word	0x080059b8

08004610 <puts>:
 8004610:	4b02      	ldr	r3, [pc, #8]	; (800461c <puts+0xc>)
 8004612:	4601      	mov	r1, r0
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	f7ff bf8d 	b.w	8004534 <_puts_r>
 800461a:	bf00      	nop
 800461c:	2000000c 	.word	0x2000000c

08004620 <__swbuf_r>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	460e      	mov	r6, r1
 8004624:	4614      	mov	r4, r2
 8004626:	4605      	mov	r5, r0
 8004628:	b118      	cbz	r0, 8004632 <__swbuf_r+0x12>
 800462a:	6983      	ldr	r3, [r0, #24]
 800462c:	b90b      	cbnz	r3, 8004632 <__swbuf_r+0x12>
 800462e:	f000 f9d1 	bl	80049d4 <__sinit>
 8004632:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <__swbuf_r+0x98>)
 8004634:	429c      	cmp	r4, r3
 8004636:	d12b      	bne.n	8004690 <__swbuf_r+0x70>
 8004638:	686c      	ldr	r4, [r5, #4]
 800463a:	69a3      	ldr	r3, [r4, #24]
 800463c:	60a3      	str	r3, [r4, #8]
 800463e:	89a3      	ldrh	r3, [r4, #12]
 8004640:	071a      	lsls	r2, r3, #28
 8004642:	d52f      	bpl.n	80046a4 <__swbuf_r+0x84>
 8004644:	6923      	ldr	r3, [r4, #16]
 8004646:	b36b      	cbz	r3, 80046a4 <__swbuf_r+0x84>
 8004648:	6923      	ldr	r3, [r4, #16]
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	1ac0      	subs	r0, r0, r3
 800464e:	6963      	ldr	r3, [r4, #20]
 8004650:	b2f6      	uxtb	r6, r6
 8004652:	4283      	cmp	r3, r0
 8004654:	4637      	mov	r7, r6
 8004656:	dc04      	bgt.n	8004662 <__swbuf_r+0x42>
 8004658:	4621      	mov	r1, r4
 800465a:	4628      	mov	r0, r5
 800465c:	f000 f926 	bl	80048ac <_fflush_r>
 8004660:	bb30      	cbnz	r0, 80046b0 <__swbuf_r+0x90>
 8004662:	68a3      	ldr	r3, [r4, #8]
 8004664:	3b01      	subs	r3, #1
 8004666:	60a3      	str	r3, [r4, #8]
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	701e      	strb	r6, [r3, #0]
 8004670:	6963      	ldr	r3, [r4, #20]
 8004672:	3001      	adds	r0, #1
 8004674:	4283      	cmp	r3, r0
 8004676:	d004      	beq.n	8004682 <__swbuf_r+0x62>
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	07db      	lsls	r3, r3, #31
 800467c:	d506      	bpl.n	800468c <__swbuf_r+0x6c>
 800467e:	2e0a      	cmp	r6, #10
 8004680:	d104      	bne.n	800468c <__swbuf_r+0x6c>
 8004682:	4621      	mov	r1, r4
 8004684:	4628      	mov	r0, r5
 8004686:	f000 f911 	bl	80048ac <_fflush_r>
 800468a:	b988      	cbnz	r0, 80046b0 <__swbuf_r+0x90>
 800468c:	4638      	mov	r0, r7
 800468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <__swbuf_r+0x9c>)
 8004692:	429c      	cmp	r4, r3
 8004694:	d101      	bne.n	800469a <__swbuf_r+0x7a>
 8004696:	68ac      	ldr	r4, [r5, #8]
 8004698:	e7cf      	b.n	800463a <__swbuf_r+0x1a>
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <__swbuf_r+0xa0>)
 800469c:	429c      	cmp	r4, r3
 800469e:	bf08      	it	eq
 80046a0:	68ec      	ldreq	r4, [r5, #12]
 80046a2:	e7ca      	b.n	800463a <__swbuf_r+0x1a>
 80046a4:	4621      	mov	r1, r4
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f80c 	bl	80046c4 <__swsetup_r>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d0cb      	beq.n	8004648 <__swbuf_r+0x28>
 80046b0:	f04f 37ff 	mov.w	r7, #4294967295
 80046b4:	e7ea      	b.n	800468c <__swbuf_r+0x6c>
 80046b6:	bf00      	nop
 80046b8:	080059d8 	.word	0x080059d8
 80046bc:	080059f8 	.word	0x080059f8
 80046c0:	080059b8 	.word	0x080059b8

080046c4 <__swsetup_r>:
 80046c4:	4b32      	ldr	r3, [pc, #200]	; (8004790 <__swsetup_r+0xcc>)
 80046c6:	b570      	push	{r4, r5, r6, lr}
 80046c8:	681d      	ldr	r5, [r3, #0]
 80046ca:	4606      	mov	r6, r0
 80046cc:	460c      	mov	r4, r1
 80046ce:	b125      	cbz	r5, 80046da <__swsetup_r+0x16>
 80046d0:	69ab      	ldr	r3, [r5, #24]
 80046d2:	b913      	cbnz	r3, 80046da <__swsetup_r+0x16>
 80046d4:	4628      	mov	r0, r5
 80046d6:	f000 f97d 	bl	80049d4 <__sinit>
 80046da:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <__swsetup_r+0xd0>)
 80046dc:	429c      	cmp	r4, r3
 80046de:	d10f      	bne.n	8004700 <__swsetup_r+0x3c>
 80046e0:	686c      	ldr	r4, [r5, #4]
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046e8:	0719      	lsls	r1, r3, #28
 80046ea:	d42c      	bmi.n	8004746 <__swsetup_r+0x82>
 80046ec:	06dd      	lsls	r5, r3, #27
 80046ee:	d411      	bmi.n	8004714 <__swsetup_r+0x50>
 80046f0:	2309      	movs	r3, #9
 80046f2:	6033      	str	r3, [r6, #0]
 80046f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046f8:	81a3      	strh	r3, [r4, #12]
 80046fa:	f04f 30ff 	mov.w	r0, #4294967295
 80046fe:	e03e      	b.n	800477e <__swsetup_r+0xba>
 8004700:	4b25      	ldr	r3, [pc, #148]	; (8004798 <__swsetup_r+0xd4>)
 8004702:	429c      	cmp	r4, r3
 8004704:	d101      	bne.n	800470a <__swsetup_r+0x46>
 8004706:	68ac      	ldr	r4, [r5, #8]
 8004708:	e7eb      	b.n	80046e2 <__swsetup_r+0x1e>
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <__swsetup_r+0xd8>)
 800470c:	429c      	cmp	r4, r3
 800470e:	bf08      	it	eq
 8004710:	68ec      	ldreq	r4, [r5, #12]
 8004712:	e7e6      	b.n	80046e2 <__swsetup_r+0x1e>
 8004714:	0758      	lsls	r0, r3, #29
 8004716:	d512      	bpl.n	800473e <__swsetup_r+0x7a>
 8004718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800471a:	b141      	cbz	r1, 800472e <__swsetup_r+0x6a>
 800471c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004720:	4299      	cmp	r1, r3
 8004722:	d002      	beq.n	800472a <__swsetup_r+0x66>
 8004724:	4630      	mov	r0, r6
 8004726:	f000 fa5b 	bl	8004be0 <_free_r>
 800472a:	2300      	movs	r3, #0
 800472c:	6363      	str	r3, [r4, #52]	; 0x34
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004734:	81a3      	strh	r3, [r4, #12]
 8004736:	2300      	movs	r3, #0
 8004738:	6063      	str	r3, [r4, #4]
 800473a:	6923      	ldr	r3, [r4, #16]
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	f043 0308 	orr.w	r3, r3, #8
 8004744:	81a3      	strh	r3, [r4, #12]
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	b94b      	cbnz	r3, 800475e <__swsetup_r+0x9a>
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004754:	d003      	beq.n	800475e <__swsetup_r+0x9a>
 8004756:	4621      	mov	r1, r4
 8004758:	4630      	mov	r0, r6
 800475a:	f000 fa01 	bl	8004b60 <__smakebuf_r>
 800475e:	89a0      	ldrh	r0, [r4, #12]
 8004760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004764:	f010 0301 	ands.w	r3, r0, #1
 8004768:	d00a      	beq.n	8004780 <__swsetup_r+0xbc>
 800476a:	2300      	movs	r3, #0
 800476c:	60a3      	str	r3, [r4, #8]
 800476e:	6963      	ldr	r3, [r4, #20]
 8004770:	425b      	negs	r3, r3
 8004772:	61a3      	str	r3, [r4, #24]
 8004774:	6923      	ldr	r3, [r4, #16]
 8004776:	b943      	cbnz	r3, 800478a <__swsetup_r+0xc6>
 8004778:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800477c:	d1ba      	bne.n	80046f4 <__swsetup_r+0x30>
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	0781      	lsls	r1, r0, #30
 8004782:	bf58      	it	pl
 8004784:	6963      	ldrpl	r3, [r4, #20]
 8004786:	60a3      	str	r3, [r4, #8]
 8004788:	e7f4      	b.n	8004774 <__swsetup_r+0xb0>
 800478a:	2000      	movs	r0, #0
 800478c:	e7f7      	b.n	800477e <__swsetup_r+0xba>
 800478e:	bf00      	nop
 8004790:	2000000c 	.word	0x2000000c
 8004794:	080059d8 	.word	0x080059d8
 8004798:	080059f8 	.word	0x080059f8
 800479c:	080059b8 	.word	0x080059b8

080047a0 <__sflush_r>:
 80047a0:	898a      	ldrh	r2, [r1, #12]
 80047a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a6:	4605      	mov	r5, r0
 80047a8:	0710      	lsls	r0, r2, #28
 80047aa:	460c      	mov	r4, r1
 80047ac:	d458      	bmi.n	8004860 <__sflush_r+0xc0>
 80047ae:	684b      	ldr	r3, [r1, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	dc05      	bgt.n	80047c0 <__sflush_r+0x20>
 80047b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	dc02      	bgt.n	80047c0 <__sflush_r+0x20>
 80047ba:	2000      	movs	r0, #0
 80047bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047c2:	2e00      	cmp	r6, #0
 80047c4:	d0f9      	beq.n	80047ba <__sflush_r+0x1a>
 80047c6:	2300      	movs	r3, #0
 80047c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047cc:	682f      	ldr	r7, [r5, #0]
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	d032      	beq.n	8004838 <__sflush_r+0x98>
 80047d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	075a      	lsls	r2, r3, #29
 80047d8:	d505      	bpl.n	80047e6 <__sflush_r+0x46>
 80047da:	6863      	ldr	r3, [r4, #4]
 80047dc:	1ac0      	subs	r0, r0, r3
 80047de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047e0:	b10b      	cbz	r3, 80047e6 <__sflush_r+0x46>
 80047e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047e4:	1ac0      	subs	r0, r0, r3
 80047e6:	2300      	movs	r3, #0
 80047e8:	4602      	mov	r2, r0
 80047ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ec:	6a21      	ldr	r1, [r4, #32]
 80047ee:	4628      	mov	r0, r5
 80047f0:	47b0      	blx	r6
 80047f2:	1c43      	adds	r3, r0, #1
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	d106      	bne.n	8004806 <__sflush_r+0x66>
 80047f8:	6829      	ldr	r1, [r5, #0]
 80047fa:	291d      	cmp	r1, #29
 80047fc:	d82c      	bhi.n	8004858 <__sflush_r+0xb8>
 80047fe:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <__sflush_r+0x108>)
 8004800:	40ca      	lsrs	r2, r1
 8004802:	07d6      	lsls	r6, r2, #31
 8004804:	d528      	bpl.n	8004858 <__sflush_r+0xb8>
 8004806:	2200      	movs	r2, #0
 8004808:	6062      	str	r2, [r4, #4]
 800480a:	04d9      	lsls	r1, r3, #19
 800480c:	6922      	ldr	r2, [r4, #16]
 800480e:	6022      	str	r2, [r4, #0]
 8004810:	d504      	bpl.n	800481c <__sflush_r+0x7c>
 8004812:	1c42      	adds	r2, r0, #1
 8004814:	d101      	bne.n	800481a <__sflush_r+0x7a>
 8004816:	682b      	ldr	r3, [r5, #0]
 8004818:	b903      	cbnz	r3, 800481c <__sflush_r+0x7c>
 800481a:	6560      	str	r0, [r4, #84]	; 0x54
 800481c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800481e:	602f      	str	r7, [r5, #0]
 8004820:	2900      	cmp	r1, #0
 8004822:	d0ca      	beq.n	80047ba <__sflush_r+0x1a>
 8004824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004828:	4299      	cmp	r1, r3
 800482a:	d002      	beq.n	8004832 <__sflush_r+0x92>
 800482c:	4628      	mov	r0, r5
 800482e:	f000 f9d7 	bl	8004be0 <_free_r>
 8004832:	2000      	movs	r0, #0
 8004834:	6360      	str	r0, [r4, #52]	; 0x34
 8004836:	e7c1      	b.n	80047bc <__sflush_r+0x1c>
 8004838:	6a21      	ldr	r1, [r4, #32]
 800483a:	2301      	movs	r3, #1
 800483c:	4628      	mov	r0, r5
 800483e:	47b0      	blx	r6
 8004840:	1c41      	adds	r1, r0, #1
 8004842:	d1c7      	bne.n	80047d4 <__sflush_r+0x34>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0c4      	beq.n	80047d4 <__sflush_r+0x34>
 800484a:	2b1d      	cmp	r3, #29
 800484c:	d001      	beq.n	8004852 <__sflush_r+0xb2>
 800484e:	2b16      	cmp	r3, #22
 8004850:	d101      	bne.n	8004856 <__sflush_r+0xb6>
 8004852:	602f      	str	r7, [r5, #0]
 8004854:	e7b1      	b.n	80047ba <__sflush_r+0x1a>
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	e7ad      	b.n	80047bc <__sflush_r+0x1c>
 8004860:	690f      	ldr	r7, [r1, #16]
 8004862:	2f00      	cmp	r7, #0
 8004864:	d0a9      	beq.n	80047ba <__sflush_r+0x1a>
 8004866:	0793      	lsls	r3, r2, #30
 8004868:	680e      	ldr	r6, [r1, #0]
 800486a:	bf08      	it	eq
 800486c:	694b      	ldreq	r3, [r1, #20]
 800486e:	600f      	str	r7, [r1, #0]
 8004870:	bf18      	it	ne
 8004872:	2300      	movne	r3, #0
 8004874:	eba6 0807 	sub.w	r8, r6, r7
 8004878:	608b      	str	r3, [r1, #8]
 800487a:	f1b8 0f00 	cmp.w	r8, #0
 800487e:	dd9c      	ble.n	80047ba <__sflush_r+0x1a>
 8004880:	6a21      	ldr	r1, [r4, #32]
 8004882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004884:	4643      	mov	r3, r8
 8004886:	463a      	mov	r2, r7
 8004888:	4628      	mov	r0, r5
 800488a:	47b0      	blx	r6
 800488c:	2800      	cmp	r0, #0
 800488e:	dc06      	bgt.n	800489e <__sflush_r+0xfe>
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004896:	81a3      	strh	r3, [r4, #12]
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	e78e      	b.n	80047bc <__sflush_r+0x1c>
 800489e:	4407      	add	r7, r0
 80048a0:	eba8 0800 	sub.w	r8, r8, r0
 80048a4:	e7e9      	b.n	800487a <__sflush_r+0xda>
 80048a6:	bf00      	nop
 80048a8:	20400001 	.word	0x20400001

080048ac <_fflush_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	690b      	ldr	r3, [r1, #16]
 80048b0:	4605      	mov	r5, r0
 80048b2:	460c      	mov	r4, r1
 80048b4:	b913      	cbnz	r3, 80048bc <_fflush_r+0x10>
 80048b6:	2500      	movs	r5, #0
 80048b8:	4628      	mov	r0, r5
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	b118      	cbz	r0, 80048c6 <_fflush_r+0x1a>
 80048be:	6983      	ldr	r3, [r0, #24]
 80048c0:	b90b      	cbnz	r3, 80048c6 <_fflush_r+0x1a>
 80048c2:	f000 f887 	bl	80049d4 <__sinit>
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <_fflush_r+0x6c>)
 80048c8:	429c      	cmp	r4, r3
 80048ca:	d11b      	bne.n	8004904 <_fflush_r+0x58>
 80048cc:	686c      	ldr	r4, [r5, #4]
 80048ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ef      	beq.n	80048b6 <_fflush_r+0xa>
 80048d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048d8:	07d0      	lsls	r0, r2, #31
 80048da:	d404      	bmi.n	80048e6 <_fflush_r+0x3a>
 80048dc:	0599      	lsls	r1, r3, #22
 80048de:	d402      	bmi.n	80048e6 <_fflush_r+0x3a>
 80048e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048e2:	f000 f915 	bl	8004b10 <__retarget_lock_acquire_recursive>
 80048e6:	4628      	mov	r0, r5
 80048e8:	4621      	mov	r1, r4
 80048ea:	f7ff ff59 	bl	80047a0 <__sflush_r>
 80048ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048f0:	07da      	lsls	r2, r3, #31
 80048f2:	4605      	mov	r5, r0
 80048f4:	d4e0      	bmi.n	80048b8 <_fflush_r+0xc>
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	059b      	lsls	r3, r3, #22
 80048fa:	d4dd      	bmi.n	80048b8 <_fflush_r+0xc>
 80048fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048fe:	f000 f908 	bl	8004b12 <__retarget_lock_release_recursive>
 8004902:	e7d9      	b.n	80048b8 <_fflush_r+0xc>
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <_fflush_r+0x70>)
 8004906:	429c      	cmp	r4, r3
 8004908:	d101      	bne.n	800490e <_fflush_r+0x62>
 800490a:	68ac      	ldr	r4, [r5, #8]
 800490c:	e7df      	b.n	80048ce <_fflush_r+0x22>
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <_fflush_r+0x74>)
 8004910:	429c      	cmp	r4, r3
 8004912:	bf08      	it	eq
 8004914:	68ec      	ldreq	r4, [r5, #12]
 8004916:	e7da      	b.n	80048ce <_fflush_r+0x22>
 8004918:	080059d8 	.word	0x080059d8
 800491c:	080059f8 	.word	0x080059f8
 8004920:	080059b8 	.word	0x080059b8

08004924 <std>:
 8004924:	2300      	movs	r3, #0
 8004926:	b510      	push	{r4, lr}
 8004928:	4604      	mov	r4, r0
 800492a:	e9c0 3300 	strd	r3, r3, [r0]
 800492e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004932:	6083      	str	r3, [r0, #8]
 8004934:	8181      	strh	r1, [r0, #12]
 8004936:	6643      	str	r3, [r0, #100]	; 0x64
 8004938:	81c2      	strh	r2, [r0, #14]
 800493a:	6183      	str	r3, [r0, #24]
 800493c:	4619      	mov	r1, r3
 800493e:	2208      	movs	r2, #8
 8004940:	305c      	adds	r0, #92	; 0x5c
 8004942:	f7ff fdc1 	bl	80044c8 <memset>
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <std+0x38>)
 8004948:	6263      	str	r3, [r4, #36]	; 0x24
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <std+0x3c>)
 800494c:	62a3      	str	r3, [r4, #40]	; 0x28
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <std+0x40>)
 8004950:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <std+0x44>)
 8004954:	6224      	str	r4, [r4, #32]
 8004956:	6323      	str	r3, [r4, #48]	; 0x30
 8004958:	bd10      	pop	{r4, pc}
 800495a:	bf00      	nop
 800495c:	0800542d 	.word	0x0800542d
 8004960:	0800544f 	.word	0x0800544f
 8004964:	08005487 	.word	0x08005487
 8004968:	080054ab 	.word	0x080054ab

0800496c <_cleanup_r>:
 800496c:	4901      	ldr	r1, [pc, #4]	; (8004974 <_cleanup_r+0x8>)
 800496e:	f000 b8af 	b.w	8004ad0 <_fwalk_reent>
 8004972:	bf00      	nop
 8004974:	080048ad 	.word	0x080048ad

08004978 <__sfmoreglue>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	2268      	movs	r2, #104	; 0x68
 800497c:	1e4d      	subs	r5, r1, #1
 800497e:	4355      	muls	r5, r2
 8004980:	460e      	mov	r6, r1
 8004982:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004986:	f000 f997 	bl	8004cb8 <_malloc_r>
 800498a:	4604      	mov	r4, r0
 800498c:	b140      	cbz	r0, 80049a0 <__sfmoreglue+0x28>
 800498e:	2100      	movs	r1, #0
 8004990:	e9c0 1600 	strd	r1, r6, [r0]
 8004994:	300c      	adds	r0, #12
 8004996:	60a0      	str	r0, [r4, #8]
 8004998:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800499c:	f7ff fd94 	bl	80044c8 <memset>
 80049a0:	4620      	mov	r0, r4
 80049a2:	bd70      	pop	{r4, r5, r6, pc}

080049a4 <__sfp_lock_acquire>:
 80049a4:	4801      	ldr	r0, [pc, #4]	; (80049ac <__sfp_lock_acquire+0x8>)
 80049a6:	f000 b8b3 	b.w	8004b10 <__retarget_lock_acquire_recursive>
 80049aa:	bf00      	nop
 80049ac:	20000191 	.word	0x20000191

080049b0 <__sfp_lock_release>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__sfp_lock_release+0x8>)
 80049b2:	f000 b8ae 	b.w	8004b12 <__retarget_lock_release_recursive>
 80049b6:	bf00      	nop
 80049b8:	20000191 	.word	0x20000191

080049bc <__sinit_lock_acquire>:
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <__sinit_lock_acquire+0x8>)
 80049be:	f000 b8a7 	b.w	8004b10 <__retarget_lock_acquire_recursive>
 80049c2:	bf00      	nop
 80049c4:	20000192 	.word	0x20000192

080049c8 <__sinit_lock_release>:
 80049c8:	4801      	ldr	r0, [pc, #4]	; (80049d0 <__sinit_lock_release+0x8>)
 80049ca:	f000 b8a2 	b.w	8004b12 <__retarget_lock_release_recursive>
 80049ce:	bf00      	nop
 80049d0:	20000192 	.word	0x20000192

080049d4 <__sinit>:
 80049d4:	b510      	push	{r4, lr}
 80049d6:	4604      	mov	r4, r0
 80049d8:	f7ff fff0 	bl	80049bc <__sinit_lock_acquire>
 80049dc:	69a3      	ldr	r3, [r4, #24]
 80049de:	b11b      	cbz	r3, 80049e8 <__sinit+0x14>
 80049e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e4:	f7ff bff0 	b.w	80049c8 <__sinit_lock_release>
 80049e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049ec:	6523      	str	r3, [r4, #80]	; 0x50
 80049ee:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <__sinit+0x68>)
 80049f0:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <__sinit+0x6c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80049f6:	42a3      	cmp	r3, r4
 80049f8:	bf04      	itt	eq
 80049fa:	2301      	moveq	r3, #1
 80049fc:	61a3      	streq	r3, [r4, #24]
 80049fe:	4620      	mov	r0, r4
 8004a00:	f000 f820 	bl	8004a44 <__sfp>
 8004a04:	6060      	str	r0, [r4, #4]
 8004a06:	4620      	mov	r0, r4
 8004a08:	f000 f81c 	bl	8004a44 <__sfp>
 8004a0c:	60a0      	str	r0, [r4, #8]
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f000 f818 	bl	8004a44 <__sfp>
 8004a14:	2200      	movs	r2, #0
 8004a16:	60e0      	str	r0, [r4, #12]
 8004a18:	2104      	movs	r1, #4
 8004a1a:	6860      	ldr	r0, [r4, #4]
 8004a1c:	f7ff ff82 	bl	8004924 <std>
 8004a20:	68a0      	ldr	r0, [r4, #8]
 8004a22:	2201      	movs	r2, #1
 8004a24:	2109      	movs	r1, #9
 8004a26:	f7ff ff7d 	bl	8004924 <std>
 8004a2a:	68e0      	ldr	r0, [r4, #12]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	2112      	movs	r1, #18
 8004a30:	f7ff ff78 	bl	8004924 <std>
 8004a34:	2301      	movs	r3, #1
 8004a36:	61a3      	str	r3, [r4, #24]
 8004a38:	e7d2      	b.n	80049e0 <__sinit+0xc>
 8004a3a:	bf00      	nop
 8004a3c:	080059b4 	.word	0x080059b4
 8004a40:	0800496d 	.word	0x0800496d

08004a44 <__sfp>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	4607      	mov	r7, r0
 8004a48:	f7ff ffac 	bl	80049a4 <__sfp_lock_acquire>
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <__sfp+0x84>)
 8004a4e:	681e      	ldr	r6, [r3, #0]
 8004a50:	69b3      	ldr	r3, [r6, #24]
 8004a52:	b913      	cbnz	r3, 8004a5a <__sfp+0x16>
 8004a54:	4630      	mov	r0, r6
 8004a56:	f7ff ffbd 	bl	80049d4 <__sinit>
 8004a5a:	3648      	adds	r6, #72	; 0x48
 8004a5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	d503      	bpl.n	8004a6c <__sfp+0x28>
 8004a64:	6833      	ldr	r3, [r6, #0]
 8004a66:	b30b      	cbz	r3, 8004aac <__sfp+0x68>
 8004a68:	6836      	ldr	r6, [r6, #0]
 8004a6a:	e7f7      	b.n	8004a5c <__sfp+0x18>
 8004a6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a70:	b9d5      	cbnz	r5, 8004aa8 <__sfp+0x64>
 8004a72:	4b16      	ldr	r3, [pc, #88]	; (8004acc <__sfp+0x88>)
 8004a74:	60e3      	str	r3, [r4, #12]
 8004a76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a7a:	6665      	str	r5, [r4, #100]	; 0x64
 8004a7c:	f000 f847 	bl	8004b0e <__retarget_lock_init_recursive>
 8004a80:	f7ff ff96 	bl	80049b0 <__sfp_lock_release>
 8004a84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a8c:	6025      	str	r5, [r4, #0]
 8004a8e:	61a5      	str	r5, [r4, #24]
 8004a90:	2208      	movs	r2, #8
 8004a92:	4629      	mov	r1, r5
 8004a94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a98:	f7ff fd16 	bl	80044c8 <memset>
 8004a9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004aa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa8:	3468      	adds	r4, #104	; 0x68
 8004aaa:	e7d9      	b.n	8004a60 <__sfp+0x1c>
 8004aac:	2104      	movs	r1, #4
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f7ff ff62 	bl	8004978 <__sfmoreglue>
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	6030      	str	r0, [r6, #0]
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d1d5      	bne.n	8004a68 <__sfp+0x24>
 8004abc:	f7ff ff78 	bl	80049b0 <__sfp_lock_release>
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	e7ee      	b.n	8004aa4 <__sfp+0x60>
 8004ac6:	bf00      	nop
 8004ac8:	080059b4 	.word	0x080059b4
 8004acc:	ffff0001 	.word	0xffff0001

08004ad0 <_fwalk_reent>:
 8004ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	4688      	mov	r8, r1
 8004ad8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004adc:	2700      	movs	r7, #0
 8004ade:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ae2:	f1b9 0901 	subs.w	r9, r9, #1
 8004ae6:	d505      	bpl.n	8004af4 <_fwalk_reent+0x24>
 8004ae8:	6824      	ldr	r4, [r4, #0]
 8004aea:	2c00      	cmp	r4, #0
 8004aec:	d1f7      	bne.n	8004ade <_fwalk_reent+0xe>
 8004aee:	4638      	mov	r0, r7
 8004af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004af4:	89ab      	ldrh	r3, [r5, #12]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d907      	bls.n	8004b0a <_fwalk_reent+0x3a>
 8004afa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004afe:	3301      	adds	r3, #1
 8004b00:	d003      	beq.n	8004b0a <_fwalk_reent+0x3a>
 8004b02:	4629      	mov	r1, r5
 8004b04:	4630      	mov	r0, r6
 8004b06:	47c0      	blx	r8
 8004b08:	4307      	orrs	r7, r0
 8004b0a:	3568      	adds	r5, #104	; 0x68
 8004b0c:	e7e9      	b.n	8004ae2 <_fwalk_reent+0x12>

08004b0e <__retarget_lock_init_recursive>:
 8004b0e:	4770      	bx	lr

08004b10 <__retarget_lock_acquire_recursive>:
 8004b10:	4770      	bx	lr

08004b12 <__retarget_lock_release_recursive>:
 8004b12:	4770      	bx	lr

08004b14 <__swhatbuf_r>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	460e      	mov	r6, r1
 8004b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	b096      	sub	sp, #88	; 0x58
 8004b20:	4614      	mov	r4, r2
 8004b22:	461d      	mov	r5, r3
 8004b24:	da08      	bge.n	8004b38 <__swhatbuf_r+0x24>
 8004b26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	602a      	str	r2, [r5, #0]
 8004b2e:	061a      	lsls	r2, r3, #24
 8004b30:	d410      	bmi.n	8004b54 <__swhatbuf_r+0x40>
 8004b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b36:	e00e      	b.n	8004b56 <__swhatbuf_r+0x42>
 8004b38:	466a      	mov	r2, sp
 8004b3a:	f000 fcdd 	bl	80054f8 <_fstat_r>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	dbf1      	blt.n	8004b26 <__swhatbuf_r+0x12>
 8004b42:	9a01      	ldr	r2, [sp, #4]
 8004b44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b4c:	425a      	negs	r2, r3
 8004b4e:	415a      	adcs	r2, r3
 8004b50:	602a      	str	r2, [r5, #0]
 8004b52:	e7ee      	b.n	8004b32 <__swhatbuf_r+0x1e>
 8004b54:	2340      	movs	r3, #64	; 0x40
 8004b56:	2000      	movs	r0, #0
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	b016      	add	sp, #88	; 0x58
 8004b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b60 <__smakebuf_r>:
 8004b60:	898b      	ldrh	r3, [r1, #12]
 8004b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b64:	079d      	lsls	r5, r3, #30
 8004b66:	4606      	mov	r6, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	d507      	bpl.n	8004b7c <__smakebuf_r+0x1c>
 8004b6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	6123      	str	r3, [r4, #16]
 8004b74:	2301      	movs	r3, #1
 8004b76:	6163      	str	r3, [r4, #20]
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
 8004b7c:	ab01      	add	r3, sp, #4
 8004b7e:	466a      	mov	r2, sp
 8004b80:	f7ff ffc8 	bl	8004b14 <__swhatbuf_r>
 8004b84:	9900      	ldr	r1, [sp, #0]
 8004b86:	4605      	mov	r5, r0
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f000 f895 	bl	8004cb8 <_malloc_r>
 8004b8e:	b948      	cbnz	r0, 8004ba4 <__smakebuf_r+0x44>
 8004b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b94:	059a      	lsls	r2, r3, #22
 8004b96:	d4ef      	bmi.n	8004b78 <__smakebuf_r+0x18>
 8004b98:	f023 0303 	bic.w	r3, r3, #3
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	e7e3      	b.n	8004b6c <__smakebuf_r+0xc>
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <__smakebuf_r+0x7c>)
 8004ba6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	6020      	str	r0, [r4, #0]
 8004bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	9b00      	ldr	r3, [sp, #0]
 8004bb4:	6163      	str	r3, [r4, #20]
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	6120      	str	r0, [r4, #16]
 8004bba:	b15b      	cbz	r3, 8004bd4 <__smakebuf_r+0x74>
 8004bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f000 fcab 	bl	800551c <_isatty_r>
 8004bc6:	b128      	cbz	r0, 8004bd4 <__smakebuf_r+0x74>
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	89a0      	ldrh	r0, [r4, #12]
 8004bd6:	4305      	orrs	r5, r0
 8004bd8:	81a5      	strh	r5, [r4, #12]
 8004bda:	e7cd      	b.n	8004b78 <__smakebuf_r+0x18>
 8004bdc:	0800496d 	.word	0x0800496d

08004be0 <_free_r>:
 8004be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004be2:	2900      	cmp	r1, #0
 8004be4:	d044      	beq.n	8004c70 <_free_r+0x90>
 8004be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bea:	9001      	str	r0, [sp, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f1a1 0404 	sub.w	r4, r1, #4
 8004bf2:	bfb8      	it	lt
 8004bf4:	18e4      	addlt	r4, r4, r3
 8004bf6:	f000 fcb3 	bl	8005560 <__malloc_lock>
 8004bfa:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <_free_r+0x94>)
 8004bfc:	9801      	ldr	r0, [sp, #4]
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	b933      	cbnz	r3, 8004c10 <_free_r+0x30>
 8004c02:	6063      	str	r3, [r4, #4]
 8004c04:	6014      	str	r4, [r2, #0]
 8004c06:	b003      	add	sp, #12
 8004c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c0c:	f000 bcae 	b.w	800556c <__malloc_unlock>
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d908      	bls.n	8004c26 <_free_r+0x46>
 8004c14:	6825      	ldr	r5, [r4, #0]
 8004c16:	1961      	adds	r1, r4, r5
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	bf01      	itttt	eq
 8004c1c:	6819      	ldreq	r1, [r3, #0]
 8004c1e:	685b      	ldreq	r3, [r3, #4]
 8004c20:	1949      	addeq	r1, r1, r5
 8004c22:	6021      	streq	r1, [r4, #0]
 8004c24:	e7ed      	b.n	8004c02 <_free_r+0x22>
 8004c26:	461a      	mov	r2, r3
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	b10b      	cbz	r3, 8004c30 <_free_r+0x50>
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	d9fa      	bls.n	8004c26 <_free_r+0x46>
 8004c30:	6811      	ldr	r1, [r2, #0]
 8004c32:	1855      	adds	r5, r2, r1
 8004c34:	42a5      	cmp	r5, r4
 8004c36:	d10b      	bne.n	8004c50 <_free_r+0x70>
 8004c38:	6824      	ldr	r4, [r4, #0]
 8004c3a:	4421      	add	r1, r4
 8004c3c:	1854      	adds	r4, r2, r1
 8004c3e:	42a3      	cmp	r3, r4
 8004c40:	6011      	str	r1, [r2, #0]
 8004c42:	d1e0      	bne.n	8004c06 <_free_r+0x26>
 8004c44:	681c      	ldr	r4, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	6053      	str	r3, [r2, #4]
 8004c4a:	4421      	add	r1, r4
 8004c4c:	6011      	str	r1, [r2, #0]
 8004c4e:	e7da      	b.n	8004c06 <_free_r+0x26>
 8004c50:	d902      	bls.n	8004c58 <_free_r+0x78>
 8004c52:	230c      	movs	r3, #12
 8004c54:	6003      	str	r3, [r0, #0]
 8004c56:	e7d6      	b.n	8004c06 <_free_r+0x26>
 8004c58:	6825      	ldr	r5, [r4, #0]
 8004c5a:	1961      	adds	r1, r4, r5
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	bf04      	itt	eq
 8004c60:	6819      	ldreq	r1, [r3, #0]
 8004c62:	685b      	ldreq	r3, [r3, #4]
 8004c64:	6063      	str	r3, [r4, #4]
 8004c66:	bf04      	itt	eq
 8004c68:	1949      	addeq	r1, r1, r5
 8004c6a:	6021      	streq	r1, [r4, #0]
 8004c6c:	6054      	str	r4, [r2, #4]
 8004c6e:	e7ca      	b.n	8004c06 <_free_r+0x26>
 8004c70:	b003      	add	sp, #12
 8004c72:	bd30      	pop	{r4, r5, pc}
 8004c74:	20000194 	.word	0x20000194

08004c78 <sbrk_aligned>:
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	4e0e      	ldr	r6, [pc, #56]	; (8004cb4 <sbrk_aligned+0x3c>)
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	6831      	ldr	r1, [r6, #0]
 8004c80:	4605      	mov	r5, r0
 8004c82:	b911      	cbnz	r1, 8004c8a <sbrk_aligned+0x12>
 8004c84:	f000 fbc2 	bl	800540c <_sbrk_r>
 8004c88:	6030      	str	r0, [r6, #0]
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 fbbd 	bl	800540c <_sbrk_r>
 8004c92:	1c43      	adds	r3, r0, #1
 8004c94:	d00a      	beq.n	8004cac <sbrk_aligned+0x34>
 8004c96:	1cc4      	adds	r4, r0, #3
 8004c98:	f024 0403 	bic.w	r4, r4, #3
 8004c9c:	42a0      	cmp	r0, r4
 8004c9e:	d007      	beq.n	8004cb0 <sbrk_aligned+0x38>
 8004ca0:	1a21      	subs	r1, r4, r0
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f000 fbb2 	bl	800540c <_sbrk_r>
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d101      	bne.n	8004cb0 <sbrk_aligned+0x38>
 8004cac:	f04f 34ff 	mov.w	r4, #4294967295
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	20000198 	.word	0x20000198

08004cb8 <_malloc_r>:
 8004cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbc:	1ccd      	adds	r5, r1, #3
 8004cbe:	f025 0503 	bic.w	r5, r5, #3
 8004cc2:	3508      	adds	r5, #8
 8004cc4:	2d0c      	cmp	r5, #12
 8004cc6:	bf38      	it	cc
 8004cc8:	250c      	movcc	r5, #12
 8004cca:	2d00      	cmp	r5, #0
 8004ccc:	4607      	mov	r7, r0
 8004cce:	db01      	blt.n	8004cd4 <_malloc_r+0x1c>
 8004cd0:	42a9      	cmp	r1, r5
 8004cd2:	d905      	bls.n	8004ce0 <_malloc_r+0x28>
 8004cd4:	230c      	movs	r3, #12
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	2600      	movs	r6, #0
 8004cda:	4630      	mov	r0, r6
 8004cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce0:	4e2e      	ldr	r6, [pc, #184]	; (8004d9c <_malloc_r+0xe4>)
 8004ce2:	f000 fc3d 	bl	8005560 <__malloc_lock>
 8004ce6:	6833      	ldr	r3, [r6, #0]
 8004ce8:	461c      	mov	r4, r3
 8004cea:	bb34      	cbnz	r4, 8004d3a <_malloc_r+0x82>
 8004cec:	4629      	mov	r1, r5
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f7ff ffc2 	bl	8004c78 <sbrk_aligned>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	d14d      	bne.n	8004d96 <_malloc_r+0xde>
 8004cfa:	6834      	ldr	r4, [r6, #0]
 8004cfc:	4626      	mov	r6, r4
 8004cfe:	2e00      	cmp	r6, #0
 8004d00:	d140      	bne.n	8004d84 <_malloc_r+0xcc>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	4631      	mov	r1, r6
 8004d06:	4638      	mov	r0, r7
 8004d08:	eb04 0803 	add.w	r8, r4, r3
 8004d0c:	f000 fb7e 	bl	800540c <_sbrk_r>
 8004d10:	4580      	cmp	r8, r0
 8004d12:	d13a      	bne.n	8004d8a <_malloc_r+0xd2>
 8004d14:	6821      	ldr	r1, [r4, #0]
 8004d16:	3503      	adds	r5, #3
 8004d18:	1a6d      	subs	r5, r5, r1
 8004d1a:	f025 0503 	bic.w	r5, r5, #3
 8004d1e:	3508      	adds	r5, #8
 8004d20:	2d0c      	cmp	r5, #12
 8004d22:	bf38      	it	cc
 8004d24:	250c      	movcc	r5, #12
 8004d26:	4629      	mov	r1, r5
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f7ff ffa5 	bl	8004c78 <sbrk_aligned>
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d02b      	beq.n	8004d8a <_malloc_r+0xd2>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	442b      	add	r3, r5
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	e00e      	b.n	8004d58 <_malloc_r+0xa0>
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	1b52      	subs	r2, r2, r5
 8004d3e:	d41e      	bmi.n	8004d7e <_malloc_r+0xc6>
 8004d40:	2a0b      	cmp	r2, #11
 8004d42:	d916      	bls.n	8004d72 <_malloc_r+0xba>
 8004d44:	1961      	adds	r1, r4, r5
 8004d46:	42a3      	cmp	r3, r4
 8004d48:	6025      	str	r5, [r4, #0]
 8004d4a:	bf18      	it	ne
 8004d4c:	6059      	strne	r1, [r3, #4]
 8004d4e:	6863      	ldr	r3, [r4, #4]
 8004d50:	bf08      	it	eq
 8004d52:	6031      	streq	r1, [r6, #0]
 8004d54:	5162      	str	r2, [r4, r5]
 8004d56:	604b      	str	r3, [r1, #4]
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f104 060b 	add.w	r6, r4, #11
 8004d5e:	f000 fc05 	bl	800556c <__malloc_unlock>
 8004d62:	f026 0607 	bic.w	r6, r6, #7
 8004d66:	1d23      	adds	r3, r4, #4
 8004d68:	1af2      	subs	r2, r6, r3
 8004d6a:	d0b6      	beq.n	8004cda <_malloc_r+0x22>
 8004d6c:	1b9b      	subs	r3, r3, r6
 8004d6e:	50a3      	str	r3, [r4, r2]
 8004d70:	e7b3      	b.n	8004cda <_malloc_r+0x22>
 8004d72:	6862      	ldr	r2, [r4, #4]
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	bf0c      	ite	eq
 8004d78:	6032      	streq	r2, [r6, #0]
 8004d7a:	605a      	strne	r2, [r3, #4]
 8004d7c:	e7ec      	b.n	8004d58 <_malloc_r+0xa0>
 8004d7e:	4623      	mov	r3, r4
 8004d80:	6864      	ldr	r4, [r4, #4]
 8004d82:	e7b2      	b.n	8004cea <_malloc_r+0x32>
 8004d84:	4634      	mov	r4, r6
 8004d86:	6876      	ldr	r6, [r6, #4]
 8004d88:	e7b9      	b.n	8004cfe <_malloc_r+0x46>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4638      	mov	r0, r7
 8004d90:	f000 fbec 	bl	800556c <__malloc_unlock>
 8004d94:	e7a1      	b.n	8004cda <_malloc_r+0x22>
 8004d96:	6025      	str	r5, [r4, #0]
 8004d98:	e7de      	b.n	8004d58 <_malloc_r+0xa0>
 8004d9a:	bf00      	nop
 8004d9c:	20000194 	.word	0x20000194

08004da0 <__sfputc_r>:
 8004da0:	6893      	ldr	r3, [r2, #8]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	b410      	push	{r4}
 8004da8:	6093      	str	r3, [r2, #8]
 8004daa:	da08      	bge.n	8004dbe <__sfputc_r+0x1e>
 8004dac:	6994      	ldr	r4, [r2, #24]
 8004dae:	42a3      	cmp	r3, r4
 8004db0:	db01      	blt.n	8004db6 <__sfputc_r+0x16>
 8004db2:	290a      	cmp	r1, #10
 8004db4:	d103      	bne.n	8004dbe <__sfputc_r+0x1e>
 8004db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dba:	f7ff bc31 	b.w	8004620 <__swbuf_r>
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	1c58      	adds	r0, r3, #1
 8004dc2:	6010      	str	r0, [r2, #0]
 8004dc4:	7019      	strb	r1, [r3, #0]
 8004dc6:	4608      	mov	r0, r1
 8004dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <__sfputs_r>:
 8004dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd0:	4606      	mov	r6, r0
 8004dd2:	460f      	mov	r7, r1
 8004dd4:	4614      	mov	r4, r2
 8004dd6:	18d5      	adds	r5, r2, r3
 8004dd8:	42ac      	cmp	r4, r5
 8004dda:	d101      	bne.n	8004de0 <__sfputs_r+0x12>
 8004ddc:	2000      	movs	r0, #0
 8004dde:	e007      	b.n	8004df0 <__sfputs_r+0x22>
 8004de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de4:	463a      	mov	r2, r7
 8004de6:	4630      	mov	r0, r6
 8004de8:	f7ff ffda 	bl	8004da0 <__sfputc_r>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d1f3      	bne.n	8004dd8 <__sfputs_r+0xa>
 8004df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004df4 <_vfiprintf_r>:
 8004df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df8:	460d      	mov	r5, r1
 8004dfa:	b09d      	sub	sp, #116	; 0x74
 8004dfc:	4614      	mov	r4, r2
 8004dfe:	4698      	mov	r8, r3
 8004e00:	4606      	mov	r6, r0
 8004e02:	b118      	cbz	r0, 8004e0c <_vfiprintf_r+0x18>
 8004e04:	6983      	ldr	r3, [r0, #24]
 8004e06:	b90b      	cbnz	r3, 8004e0c <_vfiprintf_r+0x18>
 8004e08:	f7ff fde4 	bl	80049d4 <__sinit>
 8004e0c:	4b89      	ldr	r3, [pc, #548]	; (8005034 <_vfiprintf_r+0x240>)
 8004e0e:	429d      	cmp	r5, r3
 8004e10:	d11b      	bne.n	8004e4a <_vfiprintf_r+0x56>
 8004e12:	6875      	ldr	r5, [r6, #4]
 8004e14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e16:	07d9      	lsls	r1, r3, #31
 8004e18:	d405      	bmi.n	8004e26 <_vfiprintf_r+0x32>
 8004e1a:	89ab      	ldrh	r3, [r5, #12]
 8004e1c:	059a      	lsls	r2, r3, #22
 8004e1e:	d402      	bmi.n	8004e26 <_vfiprintf_r+0x32>
 8004e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e22:	f7ff fe75 	bl	8004b10 <__retarget_lock_acquire_recursive>
 8004e26:	89ab      	ldrh	r3, [r5, #12]
 8004e28:	071b      	lsls	r3, r3, #28
 8004e2a:	d501      	bpl.n	8004e30 <_vfiprintf_r+0x3c>
 8004e2c:	692b      	ldr	r3, [r5, #16]
 8004e2e:	b9eb      	cbnz	r3, 8004e6c <_vfiprintf_r+0x78>
 8004e30:	4629      	mov	r1, r5
 8004e32:	4630      	mov	r0, r6
 8004e34:	f7ff fc46 	bl	80046c4 <__swsetup_r>
 8004e38:	b1c0      	cbz	r0, 8004e6c <_vfiprintf_r+0x78>
 8004e3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e3c:	07dc      	lsls	r4, r3, #31
 8004e3e:	d50e      	bpl.n	8004e5e <_vfiprintf_r+0x6a>
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295
 8004e44:	b01d      	add	sp, #116	; 0x74
 8004e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4a:	4b7b      	ldr	r3, [pc, #492]	; (8005038 <_vfiprintf_r+0x244>)
 8004e4c:	429d      	cmp	r5, r3
 8004e4e:	d101      	bne.n	8004e54 <_vfiprintf_r+0x60>
 8004e50:	68b5      	ldr	r5, [r6, #8]
 8004e52:	e7df      	b.n	8004e14 <_vfiprintf_r+0x20>
 8004e54:	4b79      	ldr	r3, [pc, #484]	; (800503c <_vfiprintf_r+0x248>)
 8004e56:	429d      	cmp	r5, r3
 8004e58:	bf08      	it	eq
 8004e5a:	68f5      	ldreq	r5, [r6, #12]
 8004e5c:	e7da      	b.n	8004e14 <_vfiprintf_r+0x20>
 8004e5e:	89ab      	ldrh	r3, [r5, #12]
 8004e60:	0598      	lsls	r0, r3, #22
 8004e62:	d4ed      	bmi.n	8004e40 <_vfiprintf_r+0x4c>
 8004e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e66:	f7ff fe54 	bl	8004b12 <__retarget_lock_release_recursive>
 8004e6a:	e7e9      	b.n	8004e40 <_vfiprintf_r+0x4c>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e70:	2320      	movs	r3, #32
 8004e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e7a:	2330      	movs	r3, #48	; 0x30
 8004e7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005040 <_vfiprintf_r+0x24c>
 8004e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e84:	f04f 0901 	mov.w	r9, #1
 8004e88:	4623      	mov	r3, r4
 8004e8a:	469a      	mov	sl, r3
 8004e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e90:	b10a      	cbz	r2, 8004e96 <_vfiprintf_r+0xa2>
 8004e92:	2a25      	cmp	r2, #37	; 0x25
 8004e94:	d1f9      	bne.n	8004e8a <_vfiprintf_r+0x96>
 8004e96:	ebba 0b04 	subs.w	fp, sl, r4
 8004e9a:	d00b      	beq.n	8004eb4 <_vfiprintf_r+0xc0>
 8004e9c:	465b      	mov	r3, fp
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f7ff ff93 	bl	8004dce <__sfputs_r>
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f000 80aa 	beq.w	8005002 <_vfiprintf_r+0x20e>
 8004eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eb0:	445a      	add	r2, fp
 8004eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8004eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80a2 	beq.w	8005002 <_vfiprintf_r+0x20e>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ec8:	f10a 0a01 	add.w	sl, sl, #1
 8004ecc:	9304      	str	r3, [sp, #16]
 8004ece:	9307      	str	r3, [sp, #28]
 8004ed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ed6:	4654      	mov	r4, sl
 8004ed8:	2205      	movs	r2, #5
 8004eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ede:	4858      	ldr	r0, [pc, #352]	; (8005040 <_vfiprintf_r+0x24c>)
 8004ee0:	f7fb f99e 	bl	8000220 <memchr>
 8004ee4:	9a04      	ldr	r2, [sp, #16]
 8004ee6:	b9d8      	cbnz	r0, 8004f20 <_vfiprintf_r+0x12c>
 8004ee8:	06d1      	lsls	r1, r2, #27
 8004eea:	bf44      	itt	mi
 8004eec:	2320      	movmi	r3, #32
 8004eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ef2:	0713      	lsls	r3, r2, #28
 8004ef4:	bf44      	itt	mi
 8004ef6:	232b      	movmi	r3, #43	; 0x2b
 8004ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004efc:	f89a 3000 	ldrb.w	r3, [sl]
 8004f00:	2b2a      	cmp	r3, #42	; 0x2a
 8004f02:	d015      	beq.n	8004f30 <_vfiprintf_r+0x13c>
 8004f04:	9a07      	ldr	r2, [sp, #28]
 8004f06:	4654      	mov	r4, sl
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f04f 0c0a 	mov.w	ip, #10
 8004f0e:	4621      	mov	r1, r4
 8004f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f14:	3b30      	subs	r3, #48	; 0x30
 8004f16:	2b09      	cmp	r3, #9
 8004f18:	d94e      	bls.n	8004fb8 <_vfiprintf_r+0x1c4>
 8004f1a:	b1b0      	cbz	r0, 8004f4a <_vfiprintf_r+0x156>
 8004f1c:	9207      	str	r2, [sp, #28]
 8004f1e:	e014      	b.n	8004f4a <_vfiprintf_r+0x156>
 8004f20:	eba0 0308 	sub.w	r3, r0, r8
 8004f24:	fa09 f303 	lsl.w	r3, r9, r3
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	9304      	str	r3, [sp, #16]
 8004f2c:	46a2      	mov	sl, r4
 8004f2e:	e7d2      	b.n	8004ed6 <_vfiprintf_r+0xe2>
 8004f30:	9b03      	ldr	r3, [sp, #12]
 8004f32:	1d19      	adds	r1, r3, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	9103      	str	r1, [sp, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bfbb      	ittet	lt
 8004f3c:	425b      	neglt	r3, r3
 8004f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8004f42:	9307      	strge	r3, [sp, #28]
 8004f44:	9307      	strlt	r3, [sp, #28]
 8004f46:	bfb8      	it	lt
 8004f48:	9204      	strlt	r2, [sp, #16]
 8004f4a:	7823      	ldrb	r3, [r4, #0]
 8004f4c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f4e:	d10c      	bne.n	8004f6a <_vfiprintf_r+0x176>
 8004f50:	7863      	ldrb	r3, [r4, #1]
 8004f52:	2b2a      	cmp	r3, #42	; 0x2a
 8004f54:	d135      	bne.n	8004fc2 <_vfiprintf_r+0x1ce>
 8004f56:	9b03      	ldr	r3, [sp, #12]
 8004f58:	1d1a      	adds	r2, r3, #4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	9203      	str	r2, [sp, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bfb8      	it	lt
 8004f62:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f66:	3402      	adds	r4, #2
 8004f68:	9305      	str	r3, [sp, #20]
 8004f6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005050 <_vfiprintf_r+0x25c>
 8004f6e:	7821      	ldrb	r1, [r4, #0]
 8004f70:	2203      	movs	r2, #3
 8004f72:	4650      	mov	r0, sl
 8004f74:	f7fb f954 	bl	8000220 <memchr>
 8004f78:	b140      	cbz	r0, 8004f8c <_vfiprintf_r+0x198>
 8004f7a:	2340      	movs	r3, #64	; 0x40
 8004f7c:	eba0 000a 	sub.w	r0, r0, sl
 8004f80:	fa03 f000 	lsl.w	r0, r3, r0
 8004f84:	9b04      	ldr	r3, [sp, #16]
 8004f86:	4303      	orrs	r3, r0
 8004f88:	3401      	adds	r4, #1
 8004f8a:	9304      	str	r3, [sp, #16]
 8004f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f90:	482c      	ldr	r0, [pc, #176]	; (8005044 <_vfiprintf_r+0x250>)
 8004f92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f96:	2206      	movs	r2, #6
 8004f98:	f7fb f942 	bl	8000220 <memchr>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d03f      	beq.n	8005020 <_vfiprintf_r+0x22c>
 8004fa0:	4b29      	ldr	r3, [pc, #164]	; (8005048 <_vfiprintf_r+0x254>)
 8004fa2:	bb1b      	cbnz	r3, 8004fec <_vfiprintf_r+0x1f8>
 8004fa4:	9b03      	ldr	r3, [sp, #12]
 8004fa6:	3307      	adds	r3, #7
 8004fa8:	f023 0307 	bic.w	r3, r3, #7
 8004fac:	3308      	adds	r3, #8
 8004fae:	9303      	str	r3, [sp, #12]
 8004fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb2:	443b      	add	r3, r7
 8004fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb6:	e767      	b.n	8004e88 <_vfiprintf_r+0x94>
 8004fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	e7a5      	b.n	8004f0e <_vfiprintf_r+0x11a>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	3401      	adds	r4, #1
 8004fc6:	9305      	str	r3, [sp, #20]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f04f 0c0a 	mov.w	ip, #10
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fd4:	3a30      	subs	r2, #48	; 0x30
 8004fd6:	2a09      	cmp	r2, #9
 8004fd8:	d903      	bls.n	8004fe2 <_vfiprintf_r+0x1ee>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0c5      	beq.n	8004f6a <_vfiprintf_r+0x176>
 8004fde:	9105      	str	r1, [sp, #20]
 8004fe0:	e7c3      	b.n	8004f6a <_vfiprintf_r+0x176>
 8004fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e7f0      	b.n	8004fce <_vfiprintf_r+0x1da>
 8004fec:	ab03      	add	r3, sp, #12
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	4b16      	ldr	r3, [pc, #88]	; (800504c <_vfiprintf_r+0x258>)
 8004ff4:	a904      	add	r1, sp, #16
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f3af 8000 	nop.w
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	1c78      	adds	r0, r7, #1
 8005000:	d1d6      	bne.n	8004fb0 <_vfiprintf_r+0x1bc>
 8005002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005004:	07d9      	lsls	r1, r3, #31
 8005006:	d405      	bmi.n	8005014 <_vfiprintf_r+0x220>
 8005008:	89ab      	ldrh	r3, [r5, #12]
 800500a:	059a      	lsls	r2, r3, #22
 800500c:	d402      	bmi.n	8005014 <_vfiprintf_r+0x220>
 800500e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005010:	f7ff fd7f 	bl	8004b12 <__retarget_lock_release_recursive>
 8005014:	89ab      	ldrh	r3, [r5, #12]
 8005016:	065b      	lsls	r3, r3, #25
 8005018:	f53f af12 	bmi.w	8004e40 <_vfiprintf_r+0x4c>
 800501c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800501e:	e711      	b.n	8004e44 <_vfiprintf_r+0x50>
 8005020:	ab03      	add	r3, sp, #12
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	462a      	mov	r2, r5
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <_vfiprintf_r+0x258>)
 8005028:	a904      	add	r1, sp, #16
 800502a:	4630      	mov	r0, r6
 800502c:	f000 f880 	bl	8005130 <_printf_i>
 8005030:	e7e4      	b.n	8004ffc <_vfiprintf_r+0x208>
 8005032:	bf00      	nop
 8005034:	080059d8 	.word	0x080059d8
 8005038:	080059f8 	.word	0x080059f8
 800503c:	080059b8 	.word	0x080059b8
 8005040:	08005a18 	.word	0x08005a18
 8005044:	08005a22 	.word	0x08005a22
 8005048:	00000000 	.word	0x00000000
 800504c:	08004dcf 	.word	0x08004dcf
 8005050:	08005a1e 	.word	0x08005a1e

08005054 <_printf_common>:
 8005054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	4616      	mov	r6, r2
 800505a:	4699      	mov	r9, r3
 800505c:	688a      	ldr	r2, [r1, #8]
 800505e:	690b      	ldr	r3, [r1, #16]
 8005060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005064:	4293      	cmp	r3, r2
 8005066:	bfb8      	it	lt
 8005068:	4613      	movlt	r3, r2
 800506a:	6033      	str	r3, [r6, #0]
 800506c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005070:	4607      	mov	r7, r0
 8005072:	460c      	mov	r4, r1
 8005074:	b10a      	cbz	r2, 800507a <_printf_common+0x26>
 8005076:	3301      	adds	r3, #1
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	0699      	lsls	r1, r3, #26
 800507e:	bf42      	ittt	mi
 8005080:	6833      	ldrmi	r3, [r6, #0]
 8005082:	3302      	addmi	r3, #2
 8005084:	6033      	strmi	r3, [r6, #0]
 8005086:	6825      	ldr	r5, [r4, #0]
 8005088:	f015 0506 	ands.w	r5, r5, #6
 800508c:	d106      	bne.n	800509c <_printf_common+0x48>
 800508e:	f104 0a19 	add.w	sl, r4, #25
 8005092:	68e3      	ldr	r3, [r4, #12]
 8005094:	6832      	ldr	r2, [r6, #0]
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	42ab      	cmp	r3, r5
 800509a:	dc26      	bgt.n	80050ea <_printf_common+0x96>
 800509c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050a0:	1e13      	subs	r3, r2, #0
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	bf18      	it	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	0692      	lsls	r2, r2, #26
 80050aa:	d42b      	bmi.n	8005104 <_printf_common+0xb0>
 80050ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050b0:	4649      	mov	r1, r9
 80050b2:	4638      	mov	r0, r7
 80050b4:	47c0      	blx	r8
 80050b6:	3001      	adds	r0, #1
 80050b8:	d01e      	beq.n	80050f8 <_printf_common+0xa4>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	68e5      	ldr	r5, [r4, #12]
 80050be:	6832      	ldr	r2, [r6, #0]
 80050c0:	f003 0306 	and.w	r3, r3, #6
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	bf08      	it	eq
 80050c8:	1aad      	subeq	r5, r5, r2
 80050ca:	68a3      	ldr	r3, [r4, #8]
 80050cc:	6922      	ldr	r2, [r4, #16]
 80050ce:	bf0c      	ite	eq
 80050d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050d4:	2500      	movne	r5, #0
 80050d6:	4293      	cmp	r3, r2
 80050d8:	bfc4      	itt	gt
 80050da:	1a9b      	subgt	r3, r3, r2
 80050dc:	18ed      	addgt	r5, r5, r3
 80050de:	2600      	movs	r6, #0
 80050e0:	341a      	adds	r4, #26
 80050e2:	42b5      	cmp	r5, r6
 80050e4:	d11a      	bne.n	800511c <_printf_common+0xc8>
 80050e6:	2000      	movs	r0, #0
 80050e8:	e008      	b.n	80050fc <_printf_common+0xa8>
 80050ea:	2301      	movs	r3, #1
 80050ec:	4652      	mov	r2, sl
 80050ee:	4649      	mov	r1, r9
 80050f0:	4638      	mov	r0, r7
 80050f2:	47c0      	blx	r8
 80050f4:	3001      	adds	r0, #1
 80050f6:	d103      	bne.n	8005100 <_printf_common+0xac>
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005100:	3501      	adds	r5, #1
 8005102:	e7c6      	b.n	8005092 <_printf_common+0x3e>
 8005104:	18e1      	adds	r1, r4, r3
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	2030      	movs	r0, #48	; 0x30
 800510a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800510e:	4422      	add	r2, r4
 8005110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005118:	3302      	adds	r3, #2
 800511a:	e7c7      	b.n	80050ac <_printf_common+0x58>
 800511c:	2301      	movs	r3, #1
 800511e:	4622      	mov	r2, r4
 8005120:	4649      	mov	r1, r9
 8005122:	4638      	mov	r0, r7
 8005124:	47c0      	blx	r8
 8005126:	3001      	adds	r0, #1
 8005128:	d0e6      	beq.n	80050f8 <_printf_common+0xa4>
 800512a:	3601      	adds	r6, #1
 800512c:	e7d9      	b.n	80050e2 <_printf_common+0x8e>
	...

08005130 <_printf_i>:
 8005130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005134:	7e0f      	ldrb	r7, [r1, #24]
 8005136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005138:	2f78      	cmp	r7, #120	; 0x78
 800513a:	4691      	mov	r9, r2
 800513c:	4680      	mov	r8, r0
 800513e:	460c      	mov	r4, r1
 8005140:	469a      	mov	sl, r3
 8005142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005146:	d807      	bhi.n	8005158 <_printf_i+0x28>
 8005148:	2f62      	cmp	r7, #98	; 0x62
 800514a:	d80a      	bhi.n	8005162 <_printf_i+0x32>
 800514c:	2f00      	cmp	r7, #0
 800514e:	f000 80d8 	beq.w	8005302 <_printf_i+0x1d2>
 8005152:	2f58      	cmp	r7, #88	; 0x58
 8005154:	f000 80a3 	beq.w	800529e <_printf_i+0x16e>
 8005158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800515c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005160:	e03a      	b.n	80051d8 <_printf_i+0xa8>
 8005162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005166:	2b15      	cmp	r3, #21
 8005168:	d8f6      	bhi.n	8005158 <_printf_i+0x28>
 800516a:	a101      	add	r1, pc, #4	; (adr r1, 8005170 <_printf_i+0x40>)
 800516c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005170:	080051c9 	.word	0x080051c9
 8005174:	080051dd 	.word	0x080051dd
 8005178:	08005159 	.word	0x08005159
 800517c:	08005159 	.word	0x08005159
 8005180:	08005159 	.word	0x08005159
 8005184:	08005159 	.word	0x08005159
 8005188:	080051dd 	.word	0x080051dd
 800518c:	08005159 	.word	0x08005159
 8005190:	08005159 	.word	0x08005159
 8005194:	08005159 	.word	0x08005159
 8005198:	08005159 	.word	0x08005159
 800519c:	080052e9 	.word	0x080052e9
 80051a0:	0800520d 	.word	0x0800520d
 80051a4:	080052cb 	.word	0x080052cb
 80051a8:	08005159 	.word	0x08005159
 80051ac:	08005159 	.word	0x08005159
 80051b0:	0800530b 	.word	0x0800530b
 80051b4:	08005159 	.word	0x08005159
 80051b8:	0800520d 	.word	0x0800520d
 80051bc:	08005159 	.word	0x08005159
 80051c0:	08005159 	.word	0x08005159
 80051c4:	080052d3 	.word	0x080052d3
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	1d1a      	adds	r2, r3, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	602a      	str	r2, [r5, #0]
 80051d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051d8:	2301      	movs	r3, #1
 80051da:	e0a3      	b.n	8005324 <_printf_i+0x1f4>
 80051dc:	6820      	ldr	r0, [r4, #0]
 80051de:	6829      	ldr	r1, [r5, #0]
 80051e0:	0606      	lsls	r6, r0, #24
 80051e2:	f101 0304 	add.w	r3, r1, #4
 80051e6:	d50a      	bpl.n	80051fe <_printf_i+0xce>
 80051e8:	680e      	ldr	r6, [r1, #0]
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	2e00      	cmp	r6, #0
 80051ee:	da03      	bge.n	80051f8 <_printf_i+0xc8>
 80051f0:	232d      	movs	r3, #45	; 0x2d
 80051f2:	4276      	negs	r6, r6
 80051f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f8:	485e      	ldr	r0, [pc, #376]	; (8005374 <_printf_i+0x244>)
 80051fa:	230a      	movs	r3, #10
 80051fc:	e019      	b.n	8005232 <_printf_i+0x102>
 80051fe:	680e      	ldr	r6, [r1, #0]
 8005200:	602b      	str	r3, [r5, #0]
 8005202:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005206:	bf18      	it	ne
 8005208:	b236      	sxthne	r6, r6
 800520a:	e7ef      	b.n	80051ec <_printf_i+0xbc>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	6820      	ldr	r0, [r4, #0]
 8005210:	1d19      	adds	r1, r3, #4
 8005212:	6029      	str	r1, [r5, #0]
 8005214:	0601      	lsls	r1, r0, #24
 8005216:	d501      	bpl.n	800521c <_printf_i+0xec>
 8005218:	681e      	ldr	r6, [r3, #0]
 800521a:	e002      	b.n	8005222 <_printf_i+0xf2>
 800521c:	0646      	lsls	r6, r0, #25
 800521e:	d5fb      	bpl.n	8005218 <_printf_i+0xe8>
 8005220:	881e      	ldrh	r6, [r3, #0]
 8005222:	4854      	ldr	r0, [pc, #336]	; (8005374 <_printf_i+0x244>)
 8005224:	2f6f      	cmp	r7, #111	; 0x6f
 8005226:	bf0c      	ite	eq
 8005228:	2308      	moveq	r3, #8
 800522a:	230a      	movne	r3, #10
 800522c:	2100      	movs	r1, #0
 800522e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005232:	6865      	ldr	r5, [r4, #4]
 8005234:	60a5      	str	r5, [r4, #8]
 8005236:	2d00      	cmp	r5, #0
 8005238:	bfa2      	ittt	ge
 800523a:	6821      	ldrge	r1, [r4, #0]
 800523c:	f021 0104 	bicge.w	r1, r1, #4
 8005240:	6021      	strge	r1, [r4, #0]
 8005242:	b90e      	cbnz	r6, 8005248 <_printf_i+0x118>
 8005244:	2d00      	cmp	r5, #0
 8005246:	d04d      	beq.n	80052e4 <_printf_i+0x1b4>
 8005248:	4615      	mov	r5, r2
 800524a:	fbb6 f1f3 	udiv	r1, r6, r3
 800524e:	fb03 6711 	mls	r7, r3, r1, r6
 8005252:	5dc7      	ldrb	r7, [r0, r7]
 8005254:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005258:	4637      	mov	r7, r6
 800525a:	42bb      	cmp	r3, r7
 800525c:	460e      	mov	r6, r1
 800525e:	d9f4      	bls.n	800524a <_printf_i+0x11a>
 8005260:	2b08      	cmp	r3, #8
 8005262:	d10b      	bne.n	800527c <_printf_i+0x14c>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	07de      	lsls	r6, r3, #31
 8005268:	d508      	bpl.n	800527c <_printf_i+0x14c>
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	6861      	ldr	r1, [r4, #4]
 800526e:	4299      	cmp	r1, r3
 8005270:	bfde      	ittt	le
 8005272:	2330      	movle	r3, #48	; 0x30
 8005274:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005278:	f105 35ff 	addle.w	r5, r5, #4294967295
 800527c:	1b52      	subs	r2, r2, r5
 800527e:	6122      	str	r2, [r4, #16]
 8005280:	f8cd a000 	str.w	sl, [sp]
 8005284:	464b      	mov	r3, r9
 8005286:	aa03      	add	r2, sp, #12
 8005288:	4621      	mov	r1, r4
 800528a:	4640      	mov	r0, r8
 800528c:	f7ff fee2 	bl	8005054 <_printf_common>
 8005290:	3001      	adds	r0, #1
 8005292:	d14c      	bne.n	800532e <_printf_i+0x1fe>
 8005294:	f04f 30ff 	mov.w	r0, #4294967295
 8005298:	b004      	add	sp, #16
 800529a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529e:	4835      	ldr	r0, [pc, #212]	; (8005374 <_printf_i+0x244>)
 80052a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052a4:	6829      	ldr	r1, [r5, #0]
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80052ac:	6029      	str	r1, [r5, #0]
 80052ae:	061d      	lsls	r5, r3, #24
 80052b0:	d514      	bpl.n	80052dc <_printf_i+0x1ac>
 80052b2:	07df      	lsls	r7, r3, #31
 80052b4:	bf44      	itt	mi
 80052b6:	f043 0320 	orrmi.w	r3, r3, #32
 80052ba:	6023      	strmi	r3, [r4, #0]
 80052bc:	b91e      	cbnz	r6, 80052c6 <_printf_i+0x196>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	f023 0320 	bic.w	r3, r3, #32
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	2310      	movs	r3, #16
 80052c8:	e7b0      	b.n	800522c <_printf_i+0xfc>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	f043 0320 	orr.w	r3, r3, #32
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	2378      	movs	r3, #120	; 0x78
 80052d4:	4828      	ldr	r0, [pc, #160]	; (8005378 <_printf_i+0x248>)
 80052d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052da:	e7e3      	b.n	80052a4 <_printf_i+0x174>
 80052dc:	0659      	lsls	r1, r3, #25
 80052de:	bf48      	it	mi
 80052e0:	b2b6      	uxthmi	r6, r6
 80052e2:	e7e6      	b.n	80052b2 <_printf_i+0x182>
 80052e4:	4615      	mov	r5, r2
 80052e6:	e7bb      	b.n	8005260 <_printf_i+0x130>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	6826      	ldr	r6, [r4, #0]
 80052ec:	6961      	ldr	r1, [r4, #20]
 80052ee:	1d18      	adds	r0, r3, #4
 80052f0:	6028      	str	r0, [r5, #0]
 80052f2:	0635      	lsls	r5, r6, #24
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	d501      	bpl.n	80052fc <_printf_i+0x1cc>
 80052f8:	6019      	str	r1, [r3, #0]
 80052fa:	e002      	b.n	8005302 <_printf_i+0x1d2>
 80052fc:	0670      	lsls	r0, r6, #25
 80052fe:	d5fb      	bpl.n	80052f8 <_printf_i+0x1c8>
 8005300:	8019      	strh	r1, [r3, #0]
 8005302:	2300      	movs	r3, #0
 8005304:	6123      	str	r3, [r4, #16]
 8005306:	4615      	mov	r5, r2
 8005308:	e7ba      	b.n	8005280 <_printf_i+0x150>
 800530a:	682b      	ldr	r3, [r5, #0]
 800530c:	1d1a      	adds	r2, r3, #4
 800530e:	602a      	str	r2, [r5, #0]
 8005310:	681d      	ldr	r5, [r3, #0]
 8005312:	6862      	ldr	r2, [r4, #4]
 8005314:	2100      	movs	r1, #0
 8005316:	4628      	mov	r0, r5
 8005318:	f7fa ff82 	bl	8000220 <memchr>
 800531c:	b108      	cbz	r0, 8005322 <_printf_i+0x1f2>
 800531e:	1b40      	subs	r0, r0, r5
 8005320:	6060      	str	r0, [r4, #4]
 8005322:	6863      	ldr	r3, [r4, #4]
 8005324:	6123      	str	r3, [r4, #16]
 8005326:	2300      	movs	r3, #0
 8005328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800532c:	e7a8      	b.n	8005280 <_printf_i+0x150>
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	462a      	mov	r2, r5
 8005332:	4649      	mov	r1, r9
 8005334:	4640      	mov	r0, r8
 8005336:	47d0      	blx	sl
 8005338:	3001      	adds	r0, #1
 800533a:	d0ab      	beq.n	8005294 <_printf_i+0x164>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	079b      	lsls	r3, r3, #30
 8005340:	d413      	bmi.n	800536a <_printf_i+0x23a>
 8005342:	68e0      	ldr	r0, [r4, #12]
 8005344:	9b03      	ldr	r3, [sp, #12]
 8005346:	4298      	cmp	r0, r3
 8005348:	bfb8      	it	lt
 800534a:	4618      	movlt	r0, r3
 800534c:	e7a4      	b.n	8005298 <_printf_i+0x168>
 800534e:	2301      	movs	r3, #1
 8005350:	4632      	mov	r2, r6
 8005352:	4649      	mov	r1, r9
 8005354:	4640      	mov	r0, r8
 8005356:	47d0      	blx	sl
 8005358:	3001      	adds	r0, #1
 800535a:	d09b      	beq.n	8005294 <_printf_i+0x164>
 800535c:	3501      	adds	r5, #1
 800535e:	68e3      	ldr	r3, [r4, #12]
 8005360:	9903      	ldr	r1, [sp, #12]
 8005362:	1a5b      	subs	r3, r3, r1
 8005364:	42ab      	cmp	r3, r5
 8005366:	dcf2      	bgt.n	800534e <_printf_i+0x21e>
 8005368:	e7eb      	b.n	8005342 <_printf_i+0x212>
 800536a:	2500      	movs	r5, #0
 800536c:	f104 0619 	add.w	r6, r4, #25
 8005370:	e7f5      	b.n	800535e <_printf_i+0x22e>
 8005372:	bf00      	nop
 8005374:	08005a29 	.word	0x08005a29
 8005378:	08005a3a 	.word	0x08005a3a

0800537c <_putc_r>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	460d      	mov	r5, r1
 8005380:	4614      	mov	r4, r2
 8005382:	4606      	mov	r6, r0
 8005384:	b118      	cbz	r0, 800538e <_putc_r+0x12>
 8005386:	6983      	ldr	r3, [r0, #24]
 8005388:	b90b      	cbnz	r3, 800538e <_putc_r+0x12>
 800538a:	f7ff fb23 	bl	80049d4 <__sinit>
 800538e:	4b1c      	ldr	r3, [pc, #112]	; (8005400 <_putc_r+0x84>)
 8005390:	429c      	cmp	r4, r3
 8005392:	d124      	bne.n	80053de <_putc_r+0x62>
 8005394:	6874      	ldr	r4, [r6, #4]
 8005396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005398:	07d8      	lsls	r0, r3, #31
 800539a:	d405      	bmi.n	80053a8 <_putc_r+0x2c>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	0599      	lsls	r1, r3, #22
 80053a0:	d402      	bmi.n	80053a8 <_putc_r+0x2c>
 80053a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053a4:	f7ff fbb4 	bl	8004b10 <__retarget_lock_acquire_recursive>
 80053a8:	68a3      	ldr	r3, [r4, #8]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	60a3      	str	r3, [r4, #8]
 80053b0:	da05      	bge.n	80053be <_putc_r+0x42>
 80053b2:	69a2      	ldr	r2, [r4, #24]
 80053b4:	4293      	cmp	r3, r2
 80053b6:	db1c      	blt.n	80053f2 <_putc_r+0x76>
 80053b8:	b2eb      	uxtb	r3, r5
 80053ba:	2b0a      	cmp	r3, #10
 80053bc:	d019      	beq.n	80053f2 <_putc_r+0x76>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	6022      	str	r2, [r4, #0]
 80053c4:	701d      	strb	r5, [r3, #0]
 80053c6:	b2ed      	uxtb	r5, r5
 80053c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053ca:	07da      	lsls	r2, r3, #31
 80053cc:	d405      	bmi.n	80053da <_putc_r+0x5e>
 80053ce:	89a3      	ldrh	r3, [r4, #12]
 80053d0:	059b      	lsls	r3, r3, #22
 80053d2:	d402      	bmi.n	80053da <_putc_r+0x5e>
 80053d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053d6:	f7ff fb9c 	bl	8004b12 <__retarget_lock_release_recursive>
 80053da:	4628      	mov	r0, r5
 80053dc:	bd70      	pop	{r4, r5, r6, pc}
 80053de:	4b09      	ldr	r3, [pc, #36]	; (8005404 <_putc_r+0x88>)
 80053e0:	429c      	cmp	r4, r3
 80053e2:	d101      	bne.n	80053e8 <_putc_r+0x6c>
 80053e4:	68b4      	ldr	r4, [r6, #8]
 80053e6:	e7d6      	b.n	8005396 <_putc_r+0x1a>
 80053e8:	4b07      	ldr	r3, [pc, #28]	; (8005408 <_putc_r+0x8c>)
 80053ea:	429c      	cmp	r4, r3
 80053ec:	bf08      	it	eq
 80053ee:	68f4      	ldreq	r4, [r6, #12]
 80053f0:	e7d1      	b.n	8005396 <_putc_r+0x1a>
 80053f2:	4629      	mov	r1, r5
 80053f4:	4622      	mov	r2, r4
 80053f6:	4630      	mov	r0, r6
 80053f8:	f7ff f912 	bl	8004620 <__swbuf_r>
 80053fc:	4605      	mov	r5, r0
 80053fe:	e7e3      	b.n	80053c8 <_putc_r+0x4c>
 8005400:	080059d8 	.word	0x080059d8
 8005404:	080059f8 	.word	0x080059f8
 8005408:	080059b8 	.word	0x080059b8

0800540c <_sbrk_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4d06      	ldr	r5, [pc, #24]	; (8005428 <_sbrk_r+0x1c>)
 8005410:	2300      	movs	r3, #0
 8005412:	4604      	mov	r4, r0
 8005414:	4608      	mov	r0, r1
 8005416:	602b      	str	r3, [r5, #0]
 8005418:	f7fb fc80 	bl	8000d1c <_sbrk>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_sbrk_r+0x1a>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	b103      	cbz	r3, 8005426 <_sbrk_r+0x1a>
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	2000019c 	.word	0x2000019c

0800542c <__sread>:
 800542c:	b510      	push	{r4, lr}
 800542e:	460c      	mov	r4, r1
 8005430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005434:	f000 f8a0 	bl	8005578 <_read_r>
 8005438:	2800      	cmp	r0, #0
 800543a:	bfab      	itete	ge
 800543c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800543e:	89a3      	ldrhlt	r3, [r4, #12]
 8005440:	181b      	addge	r3, r3, r0
 8005442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005446:	bfac      	ite	ge
 8005448:	6563      	strge	r3, [r4, #84]	; 0x54
 800544a:	81a3      	strhlt	r3, [r4, #12]
 800544c:	bd10      	pop	{r4, pc}

0800544e <__swrite>:
 800544e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005452:	461f      	mov	r7, r3
 8005454:	898b      	ldrh	r3, [r1, #12]
 8005456:	05db      	lsls	r3, r3, #23
 8005458:	4605      	mov	r5, r0
 800545a:	460c      	mov	r4, r1
 800545c:	4616      	mov	r6, r2
 800545e:	d505      	bpl.n	800546c <__swrite+0x1e>
 8005460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005464:	2302      	movs	r3, #2
 8005466:	2200      	movs	r2, #0
 8005468:	f000 f868 	bl	800553c <_lseek_r>
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005476:	81a3      	strh	r3, [r4, #12]
 8005478:	4632      	mov	r2, r6
 800547a:	463b      	mov	r3, r7
 800547c:	4628      	mov	r0, r5
 800547e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005482:	f000 b817 	b.w	80054b4 <_write_r>

08005486 <__sseek>:
 8005486:	b510      	push	{r4, lr}
 8005488:	460c      	mov	r4, r1
 800548a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548e:	f000 f855 	bl	800553c <_lseek_r>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	bf15      	itete	ne
 8005498:	6560      	strne	r0, [r4, #84]	; 0x54
 800549a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800549e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054a2:	81a3      	strheq	r3, [r4, #12]
 80054a4:	bf18      	it	ne
 80054a6:	81a3      	strhne	r3, [r4, #12]
 80054a8:	bd10      	pop	{r4, pc}

080054aa <__sclose>:
 80054aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ae:	f000 b813 	b.w	80054d8 <_close_r>
	...

080054b4 <_write_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4d07      	ldr	r5, [pc, #28]	; (80054d4 <_write_r+0x20>)
 80054b8:	4604      	mov	r4, r0
 80054ba:	4608      	mov	r0, r1
 80054bc:	4611      	mov	r1, r2
 80054be:	2200      	movs	r2, #0
 80054c0:	602a      	str	r2, [r5, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f7fb fbd9 	bl	8000c7a <_write>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_write_r+0x1e>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_write_r+0x1e>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	2000019c 	.word	0x2000019c

080054d8 <_close_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d06      	ldr	r5, [pc, #24]	; (80054f4 <_close_r+0x1c>)
 80054dc:	2300      	movs	r3, #0
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	f7fb fbe5 	bl	8000cb2 <_close>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_close_r+0x1a>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_close_r+0x1a>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	2000019c 	.word	0x2000019c

080054f8 <_fstat_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d07      	ldr	r5, [pc, #28]	; (8005518 <_fstat_r+0x20>)
 80054fc:	2300      	movs	r3, #0
 80054fe:	4604      	mov	r4, r0
 8005500:	4608      	mov	r0, r1
 8005502:	4611      	mov	r1, r2
 8005504:	602b      	str	r3, [r5, #0]
 8005506:	f7fb fbe0 	bl	8000cca <_fstat>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	d102      	bne.n	8005514 <_fstat_r+0x1c>
 800550e:	682b      	ldr	r3, [r5, #0]
 8005510:	b103      	cbz	r3, 8005514 <_fstat_r+0x1c>
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	bd38      	pop	{r3, r4, r5, pc}
 8005516:	bf00      	nop
 8005518:	2000019c 	.word	0x2000019c

0800551c <_isatty_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d06      	ldr	r5, [pc, #24]	; (8005538 <_isatty_r+0x1c>)
 8005520:	2300      	movs	r3, #0
 8005522:	4604      	mov	r4, r0
 8005524:	4608      	mov	r0, r1
 8005526:	602b      	str	r3, [r5, #0]
 8005528:	f7fb fbdf 	bl	8000cea <_isatty>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d102      	bne.n	8005536 <_isatty_r+0x1a>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	b103      	cbz	r3, 8005536 <_isatty_r+0x1a>
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	2000019c 	.word	0x2000019c

0800553c <_lseek_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4d07      	ldr	r5, [pc, #28]	; (800555c <_lseek_r+0x20>)
 8005540:	4604      	mov	r4, r0
 8005542:	4608      	mov	r0, r1
 8005544:	4611      	mov	r1, r2
 8005546:	2200      	movs	r2, #0
 8005548:	602a      	str	r2, [r5, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	f7fb fbd8 	bl	8000d00 <_lseek>
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	d102      	bne.n	800555a <_lseek_r+0x1e>
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	b103      	cbz	r3, 800555a <_lseek_r+0x1e>
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	bd38      	pop	{r3, r4, r5, pc}
 800555c:	2000019c 	.word	0x2000019c

08005560 <__malloc_lock>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__malloc_lock+0x8>)
 8005562:	f7ff bad5 	b.w	8004b10 <__retarget_lock_acquire_recursive>
 8005566:	bf00      	nop
 8005568:	20000190 	.word	0x20000190

0800556c <__malloc_unlock>:
 800556c:	4801      	ldr	r0, [pc, #4]	; (8005574 <__malloc_unlock+0x8>)
 800556e:	f7ff bad0 	b.w	8004b12 <__retarget_lock_release_recursive>
 8005572:	bf00      	nop
 8005574:	20000190 	.word	0x20000190

08005578 <_read_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4d07      	ldr	r5, [pc, #28]	; (8005598 <_read_r+0x20>)
 800557c:	4604      	mov	r4, r0
 800557e:	4608      	mov	r0, r1
 8005580:	4611      	mov	r1, r2
 8005582:	2200      	movs	r2, #0
 8005584:	602a      	str	r2, [r5, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	f7fb fb5a 	bl	8000c40 <_read>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	d102      	bne.n	8005596 <_read_r+0x1e>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	b103      	cbz	r3, 8005596 <_read_r+0x1e>
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	bd38      	pop	{r3, r4, r5, pc}
 8005598:	2000019c 	.word	0x2000019c

0800559c <_init>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr

080055a8 <_fini>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	bf00      	nop
 80055ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ae:	bc08      	pop	{r3}
 80055b0:	469e      	mov	lr, r3
 80055b2:	4770      	bx	lr
