
TP_Capteur_Chaine_de_Mesure_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  0800b190  0800b190  0001b190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba70  0800ba70  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba70  0800ba70  0001ba70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba78  0800ba78  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba78  0800ba78  0001ba78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba7c  0800ba7c  0001ba7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ba80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001e0  0800bc60  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  0800bc60  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ccd  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a5  00000000  00000000  00031edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00034688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00035420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef36  00000000  00000000  000360a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001218d  00000000  00000000  00054fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbaa9  00000000  00000000  00067163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122c0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050dc  00000000  00000000  00122c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b174 	.word	0x0800b174

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800b174 	.word	0x0800b174

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <SearchBMP280>:
 * @param bcom
 *
 * @retval None
 */
void SearchBMP280()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8
	int result;
	uint8_t bcom[MAX_COM_BUF];

	bcom[0] = BMP_WHO_AM_I;
 800104e:	2300      	movs	r3, #0
 8001050:	713b      	strb	r3, [r7, #4]
	printf("Recherche Capteur BMP280\r\n\n");
 8001052:	4816      	ldr	r0, [pc, #88]	; (80010ac <SearchBMP280+0x64>)
 8001054:	f005 fb00 	bl	8006658 <puts>

	result = HAL_I2C_Master_Transmit(&hi2c1, BMP_ADD, bcom, 1, HAL_TIMEOUT); //bcom = addresse de bcom[0]
 8001058:	1d3a      	adds	r2, r7, #4
 800105a:	2303      	movs	r3, #3
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	2118      	movs	r1, #24
 8001062:	4813      	ldr	r0, [pc, #76]	; (80010b0 <SearchBMP280+0x68>)
 8001064:	f001 fc96 	bl	8002994 <HAL_I2C_Master_Transmit>
 8001068:	4603      	mov	r3, r0
 800106a:	60fb      	str	r3, [r7, #12]
		{
			printf("Error I2C Transmit SearchBMP280\r\n");
			Error_Handler();
		}*/

	result = HAL_I2C_Master_Receive(&hi2c1, BMP_ADD, bcom+1, 1, HAL_TIMEOUT);
 800106c:	1d3a      	adds	r2, r7, #4
 800106e:	3201      	adds	r2, #1
 8001070:	2303      	movs	r3, #3
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	2118      	movs	r1, #24
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <SearchBMP280+0x68>)
 800107a:	f001 fd7f 	bl	8002b7c <HAL_I2C_Master_Receive>
 800107e:	4603      	mov	r3, r0
 8001080:	60fb      	str	r3, [r7, #12]
		{
			printf("Error I2C Receive SearchBMP280\r\n");
			Error_Handler();
		}*/

	printf("Registre : %d et contenu %d\r\n\n", bcom[0], bcom[1]);
 8001082:	793b      	ldrb	r3, [r7, #4]
 8001084:	4619      	mov	r1, r3
 8001086:	797b      	ldrb	r3, [r7, #5]
 8001088:	461a      	mov	r2, r3
 800108a:	480a      	ldr	r0, [pc, #40]	; (80010b4 <SearchBMP280+0x6c>)
 800108c:	f005 fa48 	bl	8006520 <iprintf>
	if (bcom[1]==BMP_WHO_AM_I_ID_VAL) printf("Capteur BMP280 trouve\r\n\n");
 8001090:	797b      	ldrb	r3, [r7, #5]
 8001092:	2b48      	cmp	r3, #72	; 0x48
 8001094:	d103      	bne.n	800109e <SearchBMP280+0x56>
 8001096:	4808      	ldr	r0, [pc, #32]	; (80010b8 <SearchBMP280+0x70>)
 8001098:	f005 fade 	bl	8006658 <puts>
	else printf("Error : Capteur non trouve, verifier addresse ID_REG\r\n\n\n");
}
 800109c:	e002      	b.n	80010a4 <SearchBMP280+0x5c>
	else printf("Error : Capteur non trouve, verifier addresse ID_REG\r\n\n\n");
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <SearchBMP280+0x74>)
 80010a0:	f005 fada 	bl	8006658 <puts>
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	0800b190 	.word	0x0800b190
 80010b0:	20000208 	.word	0x20000208
 80010b4:	0800b1ac 	.word	0x0800b1ac
 80010b8:	0800b1cc 	.word	0x0800b1cc
 80010bc:	0800b1e4 	.word	0x0800b1e4

080010c0 <SearchMPU9250>:
 * @param None
 *
 * @retval None
 */
void SearchMPU9250()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af02      	add	r7, sp, #8
	  int result;
	  uint8_t bcom[MAX_COM_BUF];

	  bcom[0] = MPU_ID_REG;
 80010c6:	2375      	movs	r3, #117	; 0x75
 80010c8:	713b      	strb	r3, [r7, #4]
	  //Ici je vais envoyer à l'adresse hardware un handshake pr lui demander la valeur qu'il a à l'adresse WHO_AMI_I
	  printf("Recherche Capteur MPU9250\r\n\n");
 80010ca:	4816      	ldr	r0, [pc, #88]	; (8001124 <SearchMPU9250+0x64>)
 80010cc:	f005 fac4 	bl	8006658 <puts>

	  result = HAL_I2C_Master_Transmit(&hi2c1, MPU_ADDR, bcom, 1, HAL_TIMEOUT); //bcom = addresse de bcom[0]
 80010d0:	1d3a      	adds	r2, r7, #4
 80010d2:	2303      	movs	r3, #3
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	21d0      	movs	r1, #208	; 0xd0
 80010da:	4813      	ldr	r0, [pc, #76]	; (8001128 <SearchMPU9250+0x68>)
 80010dc:	f001 fc5a 	bl	8002994 <HAL_I2C_Master_Transmit>
 80010e0:	4603      	mov	r3, r0
 80010e2:	60fb      	str	r3, [r7, #12]
		{
		  printf("Error I2C Transmit SearchMPU9250\r\n");
		  Error_Handler();
		}*/

	  result = HAL_I2C_Master_Receive(&hi2c1, MPU_ADDR, bcom+1, 1, HAL_TIMEOUT);
 80010e4:	1d3a      	adds	r2, r7, #4
 80010e6:	3201      	adds	r2, #1
 80010e8:	2303      	movs	r3, #3
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	21d0      	movs	r1, #208	; 0xd0
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <SearchMPU9250+0x68>)
 80010f2:	f001 fd43 	bl	8002b7c <HAL_I2C_Master_Receive>
 80010f6:	4603      	mov	r3, r0
 80010f8:	60fb      	str	r3, [r7, #12]
	  {
	  	printf("Error I2C Receive SearchMPU9250\r\n");
	  	Error_Handler();
	  }*/

	  printf("En decimal, Registre : %d et contenu %d\r\n\n", bcom[0], bcom[1]);
 80010fa:	793b      	ldrb	r3, [r7, #4]
 80010fc:	4619      	mov	r1, r3
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	461a      	mov	r2, r3
 8001102:	480a      	ldr	r0, [pc, #40]	; (800112c <SearchMPU9250+0x6c>)
 8001104:	f005 fa0c 	bl	8006520 <iprintf>
	  if (bcom[1]==MPU_WHO_AM_I_ID_VAL) printf("Capteur MPU9250 trouve\r\n\n");
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	2b71      	cmp	r3, #113	; 0x71
 800110c:	d103      	bne.n	8001116 <SearchMPU9250+0x56>
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <SearchMPU9250+0x70>)
 8001110:	f005 faa2 	bl	8006658 <puts>
	  else printf("Error : Capteur non trouve, verifier addresse MPU_ID_REG\r\n\n\n");
}
 8001114:	e002      	b.n	800111c <SearchMPU9250+0x5c>
	  else printf("Error : Capteur non trouve, verifier addresse MPU_ID_REG\r\n\n\n");
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <SearchMPU9250+0x74>)
 8001118:	f005 fa9e 	bl	8006658 <puts>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	0800b21c 	.word	0x0800b21c
 8001128:	20000208 	.word	0x20000208
 800112c:	0800b238 	.word	0x0800b238
 8001130:	0800b264 	.word	0x0800b264
 8001134:	0800b280 	.word	0x0800b280

08001138 <TestSensorOnI2C>:
 * @param None
 *
 * @retval None
 */
void TestSensorOnI2C(int * tab)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	 int u = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

	 printf("debut de lecture du bus I2c\r\n\n");
 8001144:	4818      	ldr	r0, [pc, #96]	; (80011a8 <TestSensorOnI2C+0x70>)
 8001146:	f005 fa87 	bl	8006658 <puts>
	  for(int i =0; i< 256; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	e021      	b.n	8001194 <TestSensorOnI2C+0x5c>
	  {
		  int result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i),2,2);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	b299      	uxth	r1, r3
 8001154:	2302      	movs	r3, #2
 8001156:	2202      	movs	r2, #2
 8001158:	4814      	ldr	r0, [pc, #80]	; (80011ac <TestSensorOnI2C+0x74>)
 800115a:	f002 f833 	bl	80031c4 <HAL_I2C_IsDeviceReady>
 800115e:	4603      	mov	r3, r0
 8001160:	60fb      	str	r3, [r7, #12]
		  if (result != HAL_OK)//HAL_ERROR or HAL_TIMEOUT
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <TestSensorOnI2C+0x36>
		  {
			  printf("."); //No ACKreceived at the address
 8001168:	202e      	movs	r0, #46	; 0x2e
 800116a:	f005 f9f1 	bl	8006550 <putchar>
		  }
		  if (result == HAL_OK)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10c      	bne.n	800118e <TestSensorOnI2C+0x56>
		  {
			  tab[u] = i;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	601a      	str	r2, [r3, #0]
			  u++;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
			  printf("0x%X",i); //Received an ACK at the address
 8001186:	6939      	ldr	r1, [r7, #16]
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <TestSensorOnI2C+0x78>)
 800118a:	f005 f9c9 	bl	8006520 <iprintf>
	  for(int i =0; i< 256; i++)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	3301      	adds	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2bff      	cmp	r3, #255	; 0xff
 8001198:	ddda      	ble.n	8001150 <TestSensorOnI2C+0x18>
		  }
	  }
	  printf("\r\n\nfin de lecture du bus I2C\r\n\n\n");
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <TestSensorOnI2C+0x7c>)
 800119c:	f005 fa5c 	bl	8006658 <puts>
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	0800b2bc 	.word	0x0800b2bc
 80011ac:	20000208 	.word	0x20000208
 80011b0:	0800b2dc 	.word	0x0800b2dc
 80011b4:	0800b2e4 	.word	0x0800b2e4

080011b8 <PrintTab>:
 * @param tab
 *
 * @retval None
 */
void PrintTab(int * tab)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	printf("les adresses detectees sont :\r\n");
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <PrintTab+0x58>)
 80011c2:	f005 fa49 	bl	8006658 <puts>
	for(int i = 0; i<8; i++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	e016      	b.n	80011fa <PrintTab+0x42>
	{
		if(tab[i]!=0) printf("%d\r\n", tab[i]);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <PrintTab+0x36>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <PrintTab+0x5c>)
 80011e8:	f005 f99a 	bl	8006520 <iprintf>
 80011ec:	e002      	b.n	80011f4 <PrintTab+0x3c>
		else printf("NULL\r\n");
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <PrintTab+0x60>)
 80011f0:	f005 fa32 	bl	8006658 <puts>
	for(int i = 0; i<8; i++)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3301      	adds	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	dde5      	ble.n	80011cc <PrintTab+0x14>
	}

	printf("Rappel : \r\nLes adresses paires sont en ecritures\r\n"
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <PrintTab+0x64>)
 8001202:	f005 fa29 	bl	8006658 <puts>
			"les adresses impaires sont en lecture\r\n\n");

}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	0800b304 	.word	0x0800b304
 8001214:	0800b324 	.word	0x0800b324
 8001218:	0800b32c 	.word	0x0800b32c
 800121c:	0800b334 	.word	0x0800b334

08001220 <Init_IMU_10DOF>:
 * @param i2c_handle
 *
 * @retval None
 */
void Init_IMU_10DOF(I2C_HandleTypeDef* i2c_handle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af04      	add	r7, sp, #16
 8001226:	6078      	str	r0, [r7, #4]
	int result;
	uint8_t bcom[MAX_COM_BUF];


	//HW Reset
	printf("debut reset value\r\n");
 8001228:	48a9      	ldr	r0, [pc, #676]	; (80014d0 <Init_IMU_10DOF+0x2b0>)
 800122a:	f005 fa15 	bl	8006658 <puts>

	printf("debut set PLL\r\n");
 800122e:	48a9      	ldr	r0, [pc, #676]	; (80014d4 <Init_IMU_10DOF+0x2b4>)
 8001230:	f005 fa12 	bl	8006658 <puts>
	bcom[0] = 0x02; //choix de la PLL donnant le plus de precision
 8001234:	2302      	movs	r3, #2
 8001236:	733b      	strb	r3, [r7, #12]
	{
		printf("Error I2C Mem Write Init_IMU_10_DOF Reset MPU\r\n");
		Error_Handler();
	}*/

	HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR, PWR_MGMT_1, 1, bcom, 1, HAL_MAX_DELAY);
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	2301      	movs	r3, #1
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	226b      	movs	r2, #107	; 0x6b
 800124c:	21d0      	movs	r1, #208	; 0xd0
 800124e:	48a2      	ldr	r0, [pc, #648]	; (80014d8 <Init_IMU_10DOF+0x2b8>)
 8001250:	f001 fe9e 	bl	8002f90 <HAL_I2C_Mem_Read>
	printf("La valeur de la PLL est : 0x%x\r\n", bcom[0]);
 8001254:	7b3b      	ldrb	r3, [r7, #12]
 8001256:	4619      	mov	r1, r3
 8001258:	48a0      	ldr	r0, [pc, #640]	; (80014dc <Init_IMU_10DOF+0x2bc>)
 800125a:	f005 f961 	bl	8006520 <iprintf>


	printf("Init MPU\r\n");
 800125e:	48a0      	ldr	r0, [pc, #640]	; (80014e0 <Init_IMU_10DOF+0x2c0>)
 8001260:	f005 f9fa 	bl	8006658 <puts>

	bcom[0] = MPU_RESET_VALUE;
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR, PWR_MGMT_1,1, bcom, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2301      	movs	r3, #1
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	226b      	movs	r2, #107	; 0x6b
 800127c:	21d0      	movs	r1, #208	; 0xd0
 800127e:	4896      	ldr	r0, [pc, #600]	; (80014d8 <Init_IMU_10DOF+0x2b8>)
 8001280:	f001 fd72 	bl	8002d68 <HAL_I2C_Mem_Write>
 8001284:	4603      	mov	r3, r0
 8001286:	617b      	str	r3, [r7, #20]
	/*if(result != HAL_OK)
	{
		printf("Error I2C Mem Write Init_IMU_10_DOF Reset MPU\r\n");
		Error_Handler();
	}*/
	result = HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR, PWR_MGMT_1,1, bcom+1, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	3301      	adds	r3, #1
 800128e:	f04f 32ff 	mov.w	r2, #4294967295
 8001292:	9202      	str	r2, [sp, #8]
 8001294:	2201      	movs	r2, #1
 8001296:	9201      	str	r2, [sp, #4]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	226b      	movs	r2, #107	; 0x6b
 800129e:	21d0      	movs	r1, #208	; 0xd0
 80012a0:	488d      	ldr	r0, [pc, #564]	; (80014d8 <Init_IMU_10DOF+0x2b8>)
 80012a2:	f001 fe75 	bl	8002f90 <HAL_I2C_Mem_Read>
 80012a6:	4603      	mov	r3, r0
 80012a8:	617b      	str	r3, [r7, #20]





	printf("\nInit BMP\r\n");
 80012aa:	488e      	ldr	r0, [pc, #568]	; (80014e4 <Init_IMU_10DOF+0x2c4>)
 80012ac:	f005 f9d4 	bl	8006658 <puts>



	bcom[0] = BMP_RESET_VALUE;
 80012b0:	23b6      	movs	r3, #182	; 0xb6
 80012b2:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Mem_Write(&hi2c1, BMP_ADD, PWR_MGMT_1,1, bcom, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	2301      	movs	r3, #1
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	226b      	movs	r2, #107	; 0x6b
 80012c8:	2118      	movs	r1, #24
 80012ca:	4883      	ldr	r0, [pc, #524]	; (80014d8 <Init_IMU_10DOF+0x2b8>)
 80012cc:	f001 fd4c 	bl	8002d68 <HAL_I2C_Mem_Write>
 80012d0:	4603      	mov	r3, r0
 80012d2:	617b      	str	r3, [r7, #20]
	/*if(result != HAL_OK)
	{
		printf("Error I2C Mem Write Init_IMU_10_DOF Reset BMP\r\n");
		Error_Handler();
	}*/
	result = HAL_I2C_Mem_Read(&hi2c1, BMP_ADD, PWR_MGMT_1,1, bcom+1, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	3301      	adds	r3, #1
 80012da:	f04f 32ff 	mov.w	r2, #4294967295
 80012de:	9202      	str	r2, [sp, #8]
 80012e0:	2201      	movs	r2, #1
 80012e2:	9201      	str	r2, [sp, #4]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	226b      	movs	r2, #107	; 0x6b
 80012ea:	2118      	movs	r1, #24
 80012ec:	487a      	ldr	r0, [pc, #488]	; (80014d8 <Init_IMU_10DOF+0x2b8>)
 80012ee:	f001 fe4f 	bl	8002f90 <HAL_I2C_Mem_Read>
 80012f2:	4603      	mov	r3, r0
 80012f4:	617b      	str	r3, [r7, #20]
	{
		printf("Error I2C Mem Read Init_IMU_10_DOF Reset BMP\r\n");
		printf("result = %d\r\n", result);
		Error_Handler();
	}*/
	printf("reset value BMP = 0x%x\r\n",bcom[1]);
 80012f6:	7b7b      	ldrb	r3, [r7, #13]
 80012f8:	4619      	mov	r1, r3
 80012fa:	487b      	ldr	r0, [pc, #492]	; (80014e8 <Init_IMU_10DOF+0x2c8>)
 80012fc:	f005 f910 	bl	8006520 <iprintf>





	printf("\nInit Magneto\r\n");
 8001300:	487a      	ldr	r0, [pc, #488]	; (80014ec <Init_IMU_10DOF+0x2cc>)
 8001302:	f005 f9a9 	bl	8006658 <puts>

	//configuration des registres

	// EN Com I²C avec le magnetometre --> BYPASS-EN
	result = HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR, MPU_INTERNAL_BYPASS_CONFIG,1, bcom, 1, HAL_MAX_DELAY);
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2301      	movs	r3, #1
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	2237      	movs	r2, #55	; 0x37
 800131a:	21d0      	movs	r1, #208	; 0xd0
 800131c:	486e      	ldr	r0, [pc, #440]	; (80014d8 <Init_IMU_10DOF+0x2b8>)
 800131e:	f001 fe37 	bl	8002f90 <HAL_I2C_Mem_Read>
 8001322:	4603      	mov	r3, r0
 8001324:	617b      	str	r3, [r7, #20]
	bcom[0] = bcom[0]|0x02; //on masque l'info pour modifier uniquement les bits qui nous interressent dans le registre
 8001326:	7b3b      	ldrb	r3, [r7, #12]
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR, MPU_INTERNAL_BYPASS_CONFIG,1, bcom, 1, HAL_MAX_DELAY); // on envoi la nouvelle config
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	2301      	movs	r3, #1
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	2237      	movs	r2, #55	; 0x37
 8001344:	21d0      	movs	r1, #208	; 0xd0
 8001346:	4864      	ldr	r0, [pc, #400]	; (80014d8 <Init_IMU_10DOF+0x2b8>)
 8001348:	f001 fd0e 	bl	8002d68 <HAL_I2C_Mem_Write>
 800134c:	4603      	mov	r3, r0
 800134e:	617b      	str	r3, [r7, #20]

	// Config Magnetometre
	bcom[0] = 22;	// 00010110 = 22 --> Output bit setting = 16 and Continuous measurement mode 2
 8001350:	2316      	movs	r3, #22
 8001352:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Mem_Write(&hi2c1, BMP_ADD, MAGNETO_CNTL,1, bcom, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2301      	movs	r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	220a      	movs	r2, #10
 8001368:	2118      	movs	r1, #24
 800136a:	485b      	ldr	r0, [pc, #364]	; (80014d8 <Init_IMU_10DOF+0x2b8>)
 800136c:	f001 fcfc 	bl	8002d68 <HAL_I2C_Mem_Write>
 8001370:	4603      	mov	r3, r0
 8001372:	617b      	str	r3, [r7, #20]
	}
	*/

	//lecture des registres sensibilite
	uint8_t tab_ASA[3]; //car valeures signées
	HAL_I2C_Mem_Read(i2c_handle, BMP_ADD, MAGNETO_ASAX, 1, tab_ASA, 3, HAL_MAX_DELAY);
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	2303      	movs	r3, #3
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	2210      	movs	r2, #16
 8001388:	2118      	movs	r1, #24
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f001 fe00 	bl	8002f90 <HAL_I2C_Mem_Read>
	Asax = ((float)tab_ASA[0] - 128.0) * 0.5 / 128.0 + 1.0;
 8001390:	7a3b      	ldrb	r3, [r7, #8]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139a:	ee17 0a90 	vmov	r0, s15
 800139e:	f7ff f8fb 	bl	8000598 <__aeabi_f2d>
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b52      	ldr	r3, [pc, #328]	; (80014f0 <Init_IMU_10DOF+0x2d0>)
 80013a8:	f7fe ff96 	bl	80002d8 <__aeabi_dsub>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b4e      	ldr	r3, [pc, #312]	; (80014f4 <Init_IMU_10DOF+0x2d4>)
 80013ba:	f7ff f945 	bl	8000648 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <Init_IMU_10DOF+0x2d0>)
 80013cc:	f7ff fa66 	bl	800089c <__aeabi_ddiv>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4b46      	ldr	r3, [pc, #280]	; (80014f8 <Init_IMU_10DOF+0x2d8>)
 80013de:	f7fe ff7d 	bl	80002dc <__adddf3>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff fc25 	bl	8000c38 <__aeabi_d2f>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a42      	ldr	r2, [pc, #264]	; (80014fc <Init_IMU_10DOF+0x2dc>)
 80013f2:	6013      	str	r3, [r2, #0]
	Asay = ((float)tab_ASA[1] - 128.0) * 0.5 / 128.0 + 1.0;
 80013f4:	7a7b      	ldrb	r3, [r7, #9]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013fe:	ee17 0a90 	vmov	r0, s15
 8001402:	f7ff f8c9 	bl	8000598 <__aeabi_f2d>
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <Init_IMU_10DOF+0x2d0>)
 800140c:	f7fe ff64 	bl	80002d8 <__aeabi_dsub>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <Init_IMU_10DOF+0x2d4>)
 800141e:	f7ff f913 	bl	8000648 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <Init_IMU_10DOF+0x2d0>)
 8001430:	f7ff fa34 	bl	800089c <__aeabi_ddiv>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <Init_IMU_10DOF+0x2d8>)
 8001442:	f7fe ff4b 	bl	80002dc <__adddf3>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fbf3 	bl	8000c38 <__aeabi_d2f>
 8001452:	4603      	mov	r3, r0
 8001454:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <Init_IMU_10DOF+0x2e0>)
 8001456:	6013      	str	r3, [r2, #0]
	Asaz = ((float)tab_ASA[2] - 128.0) * 0.5 / 128.0 + 1.0;
 8001458:	7abb      	ldrb	r3, [r7, #10]
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001462:	ee17 0a90 	vmov	r0, s15
 8001466:	f7ff f897 	bl	8000598 <__aeabi_f2d>
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <Init_IMU_10DOF+0x2d0>)
 8001470:	f7fe ff32 	bl	80002d8 <__aeabi_dsub>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <Init_IMU_10DOF+0x2d4>)
 8001482:	f7ff f8e1 	bl	8000648 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <Init_IMU_10DOF+0x2d0>)
 8001494:	f7ff fa02 	bl	800089c <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <Init_IMU_10DOF+0x2d8>)
 80014a6:	f7fe ff19 	bl	80002dc <__adddf3>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fbc1 	bl	8000c38 <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <Init_IMU_10DOF+0x2e4>)
 80014ba:	6013      	str	r3, [r2, #0]


	HAL_Delay(100); //laisse le temps d'effacer tous les registres
 80014bc:	2064      	movs	r0, #100	; 0x64
 80014be:	f000 ff39 	bl	8002334 <HAL_Delay>
	printf("\nfin reset value\r\n\n");
 80014c2:	4811      	ldr	r0, [pc, #68]	; (8001508 <Init_IMU_10DOF+0x2e8>)
 80014c4:	f005 f8c8 	bl	8006658 <puts>


}
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	0800b390 	.word	0x0800b390
 80014d4:	0800b3a4 	.word	0x0800b3a4
 80014d8:	20000208 	.word	0x20000208
 80014dc:	0800b3b4 	.word	0x0800b3b4
 80014e0:	0800b3d8 	.word	0x0800b3d8
 80014e4:	0800b3e4 	.word	0x0800b3e4
 80014e8:	0800b3f0 	.word	0x0800b3f0
 80014ec:	0800b40c 	.word	0x0800b40c
 80014f0:	40600000 	.word	0x40600000
 80014f4:	3fe00000 	.word	0x3fe00000
 80014f8:	3ff00000 	.word	0x3ff00000
 80014fc:	200001fc 	.word	0x200001fc
 8001500:	20000200 	.word	0x20000200
 8001504:	20000204 	.word	0x20000204
 8001508:	0800b41c 	.word	0x0800b41c
 800150c:	00000000 	.word	0x00000000

08001510 <Measure_T>:
 * @param I2C_HandleTypeDef* i2c_handle, double* temp
 *
 * @retval None
 */
void Measure_T(I2C_HandleTypeDef* i2c_handle, double* temp)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af04      	add	r7, sp, #16
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	uint8_t tab_temp[2]; //car valeures non signées

	HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR, TEMP_OUT_H, 1, tab_temp, 2, HAL_MAX_DELAY);
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	2302      	movs	r3, #2
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2301      	movs	r3, #1
 800152c:	2241      	movs	r2, #65	; 0x41
 800152e:	21d0      	movs	r1, #208	; 0xd0
 8001530:	4819      	ldr	r0, [pc, #100]	; (8001598 <Measure_T+0x88>)
 8001532:	f001 fd2d 	bl	8002f90 <HAL_I2C_Mem_Read>
	*temp = (((tab_temp[0]<<8)+tab_temp[1]) - 21.0)/333.87 + 21.0;
 8001536:	7b3b      	ldrb	r3, [r7, #12]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	7b7a      	ldrb	r2, [r7, #13]
 800153c:	4413      	add	r3, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f818 	bl	8000574 <__aeabi_i2d>
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <Measure_T+0x8c>)
 800154a:	f7fe fec5 	bl	80002d8 <__aeabi_dsub>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	a30e      	add	r3, pc, #56	; (adr r3, 8001590 <Measure_T+0x80>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff f99e 	bl	800089c <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <Measure_T+0x8c>)
 800156e:	f7fe feb5 	bl	80002dc <__adddf3>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	e9c1 2300 	strd	r2, r3, [r1]
	printf("temp = %1.1f\r\n", *temp);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	4807      	ldr	r0, [pc, #28]	; (80015a0 <Measure_T+0x90>)
 8001584:	f004 ffcc 	bl	8006520 <iprintf>
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	851eb852 	.word	0x851eb852
 8001594:	4074ddeb 	.word	0x4074ddeb
 8001598:	20000208 	.word	0x20000208
 800159c:	40350000 	.word	0x40350000
 80015a0:	0800b430 	.word	0x0800b430
 80015a4:	00000000 	.word	0x00000000

080015a8 <Measure_A>:

void Measure_A(I2C_HandleTypeDef* i2c_handle, double* accel)
{
 80015a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015ac:	b090      	sub	sp, #64	; 0x40
 80015ae:	af06      	add	r7, sp, #24
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
	uint8_t tab_accel[6]; //car valeures signées

	HAL_I2C_Mem_Read(i2c_handle, MPU_ADDR, ACCEL_XOUT_H, 1, tab_accel, 6, HAL_MAX_DELAY);
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	2306      	movs	r3, #6
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2301      	movs	r3, #1
 80015c6:	223b      	movs	r2, #59	; 0x3b
 80015c8:	21d0      	movs	r1, #208	; 0xd0
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f001 fce0 	bl	8002f90 <HAL_I2C_Mem_Read>

	int16_t Xbrut = ((tab_accel[0]<<8) + tab_accel[1]) ;
 80015d0:	7a3b      	ldrb	r3, [r7, #8]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	7a7b      	ldrb	r3, [r7, #9]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t Ybrut = ((tab_accel[2]<<8) + tab_accel[3]) ;
 80015e2:	7abb      	ldrb	r3, [r7, #10]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	7afb      	ldrb	r3, [r7, #11]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t Zbrut = ((tab_accel[4]<<8) + tab_accel[5]) ;
 80015f4:	7b3b      	ldrb	r3, [r7, #12]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	7b7b      	ldrb	r3, [r7, #13]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4413      	add	r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	847b      	strh	r3, [r7, #34]	; 0x22

	float X = Xbrut / ACCEL_FS_SEL_2G;
 8001606:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffb2 	bl	8000574 <__aeabi_i2d>
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	4b54      	ldr	r3, [pc, #336]	; (8001768 <Measure_A+0x1c0>)
 8001616:	f7ff f941 	bl	800089c <__aeabi_ddiv>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fb09 	bl	8000c38 <__aeabi_d2f>
 8001626:	4603      	mov	r3, r0
 8001628:	61fb      	str	r3, [r7, #28]
	float Y = Ybrut / ACCEL_FS_SEL_2G;
 800162a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ffa0 	bl	8000574 <__aeabi_i2d>
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	4b4b      	ldr	r3, [pc, #300]	; (8001768 <Measure_A+0x1c0>)
 800163a:	f7ff f92f 	bl	800089c <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff faf7 	bl	8000c38 <__aeabi_d2f>
 800164a:	4603      	mov	r3, r0
 800164c:	61bb      	str	r3, [r7, #24]
	float Z = Zbrut / ACCEL_FS_SEL_2G;
 800164e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff8e 	bl	8000574 <__aeabi_i2d>
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b42      	ldr	r3, [pc, #264]	; (8001768 <Measure_A+0x1c0>)
 800165e:	f7ff f91d 	bl	800089c <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fae5 	bl	8000c38 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	617b      	str	r3, [r7, #20]

	float G = sqrt(pow(Xbrut, 2)+pow(Ybrut, 2)+pow(Zbrut, 2))/ ACCEL_FS_SEL_2G;
 8001672:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff7c 	bl	8000574 <__aeabi_i2d>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001760 <Measure_A+0x1b8>
 8001684:	ec43 2b10 	vmov	d0, r2, r3
 8001688:	f008 fe2c 	bl	800a2e4 <pow>
 800168c:	ec55 4b10 	vmov	r4, r5, d0
 8001690:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff6d 	bl	8000574 <__aeabi_i2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001760 <Measure_A+0x1b8>
 80016a2:	ec43 2b10 	vmov	d0, r2, r3
 80016a6:	f008 fe1d 	bl	800a2e4 <pow>
 80016aa:	ec53 2b10 	vmov	r2, r3, d0
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe fe13 	bl	80002dc <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4614      	mov	r4, r2
 80016bc:	461d      	mov	r5, r3
 80016be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff56 	bl	8000574 <__aeabi_i2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8001760 <Measure_A+0x1b8>
 80016d0:	ec43 2b10 	vmov	d0, r2, r3
 80016d4:	f008 fe06 	bl	800a2e4 <pow>
 80016d8:	ec53 2b10 	vmov	r2, r3, d0
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe fdfc 	bl	80002dc <__adddf3>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	ec43 2b17 	vmov	d7, r2, r3
 80016ec:	eeb0 0a47 	vmov.f32	s0, s14
 80016f0:	eef0 0a67 	vmov.f32	s1, s15
 80016f4:	f008 fe66 	bl	800a3c4 <sqrt>
 80016f8:	ec51 0b10 	vmov	r0, r1, d0
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <Measure_A+0x1c0>)
 8001702:	f7ff f8cb 	bl	800089c <__aeabi_ddiv>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff fa93 	bl	8000c38 <__aeabi_d2f>
 8001712:	4603      	mov	r3, r0
 8001714:	613b      	str	r3, [r7, #16]

	printf("X = %f		Y = %f		Z = %f		G = %f\r\n", X,Y,Z,G);
 8001716:	69f8      	ldr	r0, [r7, #28]
 8001718:	f7fe ff3e 	bl	8000598 <__aeabi_f2d>
 800171c:	4682      	mov	sl, r0
 800171e:	468b      	mov	fp, r1
 8001720:	69b8      	ldr	r0, [r7, #24]
 8001722:	f7fe ff39 	bl	8000598 <__aeabi_f2d>
 8001726:	4604      	mov	r4, r0
 8001728:	460d      	mov	r5, r1
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7fe ff34 	bl	8000598 <__aeabi_f2d>
 8001730:	4680      	mov	r8, r0
 8001732:	4689      	mov	r9, r1
 8001734:	6938      	ldr	r0, [r7, #16]
 8001736:	f7fe ff2f 	bl	8000598 <__aeabi_f2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001742:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001746:	e9cd 4500 	strd	r4, r5, [sp]
 800174a:	4652      	mov	r2, sl
 800174c:	465b      	mov	r3, fp
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <Measure_A+0x1c4>)
 8001750:	f004 fee6 	bl	8006520 <iprintf>
}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800175e:	bf00      	nop
 8001760:	00000000 	.word	0x00000000
 8001764:	40000000 	.word	0x40000000
 8001768:	40d00000 	.word	0x40d00000
 800176c:	0800b440 	.word	0x0800b440

08001770 <Measure_G>:

void Measure_G(I2C_HandleTypeDef* i2c_handle, double* gyro)
{
 8001770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001774:	b090      	sub	sp, #64	; 0x40
 8001776:	af06      	add	r7, sp, #24
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
	uint8_t tab_gyro[6]; //car valeures signées

	HAL_I2C_Mem_Read(i2c_handle, MPU_ADDR, GYRO_XOUT_H, 1, tab_gyro, 6, HAL_MAX_DELAY);
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	9302      	str	r3, [sp, #8]
 8001782:	2306      	movs	r3, #6
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2301      	movs	r3, #1
 800178e:	2243      	movs	r2, #67	; 0x43
 8001790:	21d0      	movs	r1, #208	; 0xd0
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f001 fbfc 	bl	8002f90 <HAL_I2C_Mem_Read>

	int16_t Xbrut = ((tab_gyro[0]<<8) + tab_gyro[1]) ;
 8001798:	7a3b      	ldrb	r3, [r7, #8]
 800179a:	b29b      	uxth	r3, r3
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b29a      	uxth	r2, r3
 80017a0:	7a7b      	ldrb	r3, [r7, #9]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t Ybrut = ((tab_gyro[2]<<8) + tab_gyro[3]) ;
 80017aa:	7abb      	ldrb	r3, [r7, #10]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t Zbrut = ((tab_gyro[4]<<8) + tab_gyro[5]) ;
 80017bc:	7b3b      	ldrb	r3, [r7, #12]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	7b7b      	ldrb	r3, [r7, #13]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	847b      	strh	r3, [r7, #34]	; 0x22

	float X = Xbrut / SENSITIVITY_SCALE_FACTOR;
 80017ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fece 	bl	8000574 <__aeabi_i2d>
 80017d8:	a356      	add	r3, pc, #344	; (adr r3, 8001934 <Measure_G+0x1c4>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7ff f85d 	bl	800089c <__aeabi_ddiv>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff fa25 	bl	8000c38 <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	61fb      	str	r3, [r7, #28]
	float Y = Ybrut / SENSITIVITY_SCALE_FACTOR;
 80017f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe febc 	bl	8000574 <__aeabi_i2d>
 80017fc:	a34d      	add	r3, pc, #308	; (adr r3, 8001934 <Measure_G+0x1c4>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7ff f84b 	bl	800089c <__aeabi_ddiv>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff fa13 	bl	8000c38 <__aeabi_d2f>
 8001812:	4603      	mov	r3, r0
 8001814:	61bb      	str	r3, [r7, #24]
	float Z = Zbrut / SENSITIVITY_SCALE_FACTOR;
 8001816:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe feaa 	bl	8000574 <__aeabi_i2d>
 8001820:	a344      	add	r3, pc, #272	; (adr r3, 8001934 <Measure_G+0x1c4>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7ff f839 	bl	800089c <__aeabi_ddiv>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff fa01 	bl	8000c38 <__aeabi_d2f>
 8001836:	4603      	mov	r3, r0
 8001838:	617b      	str	r3, [r7, #20]

	float V = sqrt(pow(Xbrut, 2)+pow(Ybrut, 2)+pow(Zbrut, 2))/ SENSITIVITY_SCALE_FACTOR;
 800183a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe98 	bl	8000574 <__aeabi_i2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001928 <Measure_G+0x1b8>
 800184c:	ec43 2b10 	vmov	d0, r2, r3
 8001850:	f008 fd48 	bl	800a2e4 <pow>
 8001854:	ec55 4b10 	vmov	r4, r5, d0
 8001858:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe89 	bl	8000574 <__aeabi_i2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001928 <Measure_G+0x1b8>
 800186a:	ec43 2b10 	vmov	d0, r2, r3
 800186e:	f008 fd39 	bl	800a2e4 <pow>
 8001872:	ec53 2b10 	vmov	r2, r3, d0
 8001876:	4620      	mov	r0, r4
 8001878:	4629      	mov	r1, r5
 800187a:	f7fe fd2f 	bl	80002dc <__adddf3>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4614      	mov	r4, r2
 8001884:	461d      	mov	r5, r3
 8001886:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe72 	bl	8000574 <__aeabi_i2d>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8001928 <Measure_G+0x1b8>
 8001898:	ec43 2b10 	vmov	d0, r2, r3
 800189c:	f008 fd22 	bl	800a2e4 <pow>
 80018a0:	ec53 2b10 	vmov	r2, r3, d0
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe fd18 	bl	80002dc <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	ec43 2b17 	vmov	d7, r2, r3
 80018b4:	eeb0 0a47 	vmov.f32	s0, s14
 80018b8:	eef0 0a67 	vmov.f32	s1, s15
 80018bc:	f008 fd82 	bl	800a3c4 <sqrt>
 80018c0:	ec51 0b10 	vmov	r0, r1, d0
 80018c4:	a31b      	add	r3, pc, #108	; (adr r3, 8001934 <Measure_G+0x1c4>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe ffe7 	bl	800089c <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f9af 	bl	8000c38 <__aeabi_d2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	613b      	str	r3, [r7, #16]

	printf("Vx = %f		Vy = %f		Vz = %f		V = %f\r\n", X,Y,Z,V);
 80018de:	69f8      	ldr	r0, [r7, #28]
 80018e0:	f7fe fe5a 	bl	8000598 <__aeabi_f2d>
 80018e4:	4682      	mov	sl, r0
 80018e6:	468b      	mov	fp, r1
 80018e8:	69b8      	ldr	r0, [r7, #24]
 80018ea:	f7fe fe55 	bl	8000598 <__aeabi_f2d>
 80018ee:	4604      	mov	r4, r0
 80018f0:	460d      	mov	r5, r1
 80018f2:	6978      	ldr	r0, [r7, #20]
 80018f4:	f7fe fe50 	bl	8000598 <__aeabi_f2d>
 80018f8:	4680      	mov	r8, r0
 80018fa:	4689      	mov	r9, r1
 80018fc:	6938      	ldr	r0, [r7, #16]
 80018fe:	f7fe fe4b 	bl	8000598 <__aeabi_f2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800190a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800190e:	e9cd 4500 	strd	r4, r5, [sp]
 8001912:	4652      	mov	r2, sl
 8001914:	465b      	mov	r3, fp
 8001916:	4806      	ldr	r0, [pc, #24]	; (8001930 <Measure_G+0x1c0>)
 8001918:	f004 fe02 	bl	8006520 <iprintf>

}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001926:	bf00      	nop
 8001928:	00000000 	.word	0x00000000
 800192c:	40000000 	.word	0x40000000
 8001930:	0800b464 	.word	0x0800b464
 8001934:	00000000 	.word	0x00000000
 8001938:	40606000 	.word	0x40606000
 800193c:	00000000 	.word	0x00000000

08001940 <Measure_M>:


void Measure_M(I2C_HandleTypeDef* i2c_handle, double* magneto)
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b090      	sub	sp, #64	; 0x40
 8001946:	af06      	add	r7, sp, #24
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
	uint8_t tab_magneto[6]; //car valeures signées

	HAL_I2C_Mem_Read(i2c_handle, BMP_ADD, MAGNETO_HXL, 1, tab_magneto, 6, HAL_MAX_DELAY);
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	2306      	movs	r3, #6
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2301      	movs	r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	2118      	movs	r1, #24
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f001 fb14 	bl	8002f90 <HAL_I2C_Mem_Read>

	int16_t Xbrut = ((tab_magneto[1]<<8) + tab_magneto[0]) ;
 8001968:	7a7b      	ldrb	r3, [r7, #9]
 800196a:	b29b      	uxth	r3, r3
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	b29a      	uxth	r2, r3
 8001970:	7a3b      	ldrb	r3, [r7, #8]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4413      	add	r3, r2
 8001976:	b29b      	uxth	r3, r3
 8001978:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t Ybrut = ((tab_magneto[3]<<8) + tab_magneto[2]) ;
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	b29b      	uxth	r3, r3
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b29a      	uxth	r2, r3
 8001982:	7abb      	ldrb	r3, [r7, #10]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4413      	add	r3, r2
 8001988:	b29b      	uxth	r3, r3
 800198a:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t Zbrut = ((tab_magneto[5]<<8) + tab_magneto[6]) ;
 800198c:	7b7b      	ldrb	r3, [r7, #13]
 800198e:	b29b      	uxth	r3, r3
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	b29a      	uxth	r2, r3
 8001994:	7bbb      	ldrb	r3, [r7, #14]
 8001996:	b29b      	uxth	r3, r3
 8001998:	4413      	add	r3, r2
 800199a:	b29b      	uxth	r3, r3
 800199c:	847b      	strh	r3, [r7, #34]	; 0x22

	float X = Xbrut * Asax;
 800199e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <Measure_M+0x188>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b4:	edc7 7a07 	vstr	s15, [r7, #28]
	float Y = Ybrut * Asay;
 80019b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c4:	4b41      	ldr	r3, [pc, #260]	; (8001acc <Measure_M+0x18c>)
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ce:	edc7 7a06 	vstr	s15, [r7, #24]
	float Z = Zbrut * Asaz;
 80019d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019de:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <Measure_M+0x190>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e8:	edc7 7a05 	vstr	s15, [r7, #20]

	float M = sqrt(pow(X, 2)+pow(Y, 2)+pow(Z, 2));
 80019ec:	69f8      	ldr	r0, [r7, #28]
 80019ee:	f7fe fdd3 	bl	8000598 <__aeabi_f2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8001ac0 <Measure_M+0x180>
 80019fa:	ec43 2b10 	vmov	d0, r2, r3
 80019fe:	f008 fc71 	bl	800a2e4 <pow>
 8001a02:	ec55 4b10 	vmov	r4, r5, d0
 8001a06:	69b8      	ldr	r0, [r7, #24]
 8001a08:	f7fe fdc6 	bl	8000598 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001ac0 <Measure_M+0x180>
 8001a14:	ec43 2b10 	vmov	d0, r2, r3
 8001a18:	f008 fc64 	bl	800a2e4 <pow>
 8001a1c:	ec53 2b10 	vmov	r2, r3, d0
 8001a20:	4620      	mov	r0, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	f7fe fc5a 	bl	80002dc <__adddf3>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	461d      	mov	r5, r3
 8001a30:	6978      	ldr	r0, [r7, #20]
 8001a32:	f7fe fdb1 	bl	8000598 <__aeabi_f2d>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001ac0 <Measure_M+0x180>
 8001a3e:	ec43 2b10 	vmov	d0, r2, r3
 8001a42:	f008 fc4f 	bl	800a2e4 <pow>
 8001a46:	ec53 2b10 	vmov	r2, r3, d0
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f7fe fc45 	bl	80002dc <__adddf3>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	ec43 2b17 	vmov	d7, r2, r3
 8001a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a5e:	eef0 0a67 	vmov.f32	s1, s15
 8001a62:	f008 fcaf 	bl	800a3c4 <sqrt>
 8001a66:	ec53 2b10 	vmov	r2, r3, d0
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f7ff f8e3 	bl	8000c38 <__aeabi_d2f>
 8001a72:	4603      	mov	r3, r0
 8001a74:	613b      	str	r3, [r7, #16]

	printf("Mx = %f		My = %f		Mz = %f		M = %f\r\n", X,Y,Z,M);
 8001a76:	69f8      	ldr	r0, [r7, #28]
 8001a78:	f7fe fd8e 	bl	8000598 <__aeabi_f2d>
 8001a7c:	4682      	mov	sl, r0
 8001a7e:	468b      	mov	fp, r1
 8001a80:	69b8      	ldr	r0, [r7, #24]
 8001a82:	f7fe fd89 	bl	8000598 <__aeabi_f2d>
 8001a86:	4604      	mov	r4, r0
 8001a88:	460d      	mov	r5, r1
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7fe fd84 	bl	8000598 <__aeabi_f2d>
 8001a90:	4680      	mov	r8, r0
 8001a92:	4689      	mov	r9, r1
 8001a94:	6938      	ldr	r0, [r7, #16]
 8001a96:	f7fe fd7f 	bl	8000598 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001aa2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001aa6:	e9cd 4500 	strd	r4, r5, [sp]
 8001aaa:	4652      	mov	r2, sl
 8001aac:	465b      	mov	r3, fp
 8001aae:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <Measure_M+0x194>)
 8001ab0:	f004 fd36 	bl	8006520 <iprintf>

}
 8001ab4:	bf00      	nop
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001abe:	bf00      	nop
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	40000000 	.word	0x40000000
 8001ac8:	200001fc 	.word	0x200001fc
 8001acc:	20000200 	.word	0x20000200
 8001ad0:	20000204 	.word	0x20000204
 8001ad4:	0800b488 	.word	0x0800b488

08001ad8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <MX_GPIO_Init+0xc4>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a2a      	ldr	r2, [pc, #168]	; (8001b9c <MX_GPIO_Init+0xc4>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <MX_GPIO_Init+0xc4>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b06:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <MX_GPIO_Init+0xc4>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	4a24      	ldr	r2, [pc, #144]	; (8001b9c <MX_GPIO_Init+0xc4>)
 8001b0c:	f043 0320 	orr.w	r3, r3, #32
 8001b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <MX_GPIO_Init+0xc4>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_GPIO_Init+0xc4>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a1e      	ldr	r2, [pc, #120]	; (8001b9c <MX_GPIO_Init+0xc4>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_GPIO_Init+0xc4>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_GPIO_Init+0xc4>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <MX_GPIO_Init+0xc4>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <MX_GPIO_Init+0xc4>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2120      	movs	r1, #32
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f000 fe75 	bl	8002844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480b      	ldr	r0, [pc, #44]	; (8001ba0 <MX_GPIO_Init+0xc8>)
 8001b72:	f000 fce5 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b76:	2320      	movs	r3, #32
 8001b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b90:	f000 fcd6 	bl	8002540 <HAL_GPIO_Init>

}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	48000800 	.word	0x48000800

08001ba4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <MX_I2C1_Init+0x74>)
 8001baa:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <MX_I2C1_Init+0x78>)
 8001bac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <MX_I2C1_Init+0x74>)
 8001bb0:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <MX_I2C1_Init+0x7c>)
 8001bb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <MX_I2C1_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <MX_I2C1_Init+0x74>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <MX_I2C1_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_I2C1_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_I2C1_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_I2C1_Init+0x74>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_I2C1_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bde:	480e      	ldr	r0, [pc, #56]	; (8001c18 <MX_I2C1_Init+0x74>)
 8001be0:	f000 fe48 	bl	8002874 <HAL_I2C_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bea:	f000 f925 	bl	8001e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4809      	ldr	r0, [pc, #36]	; (8001c18 <MX_I2C1_Init+0x74>)
 8001bf2:	f001 ff0f 	bl	8003a14 <HAL_I2CEx_ConfigAnalogFilter>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001bfc:	f000 f91c 	bl	8001e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c00:	2100      	movs	r1, #0
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_I2C1_Init+0x74>)
 8001c04:	f001 ff51 	bl	8003aaa <HAL_I2CEx_ConfigDigitalFilter>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c0e:	f000 f913 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000208 	.word	0x20000208
 8001c1c:	40005400 	.word	0x40005400
 8001c20:	30a0a7fb 	.word	0x30a0a7fb

08001c24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b09a      	sub	sp, #104	; 0x68
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	2244      	movs	r2, #68	; 0x44
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 fde9 	bl	800581c <memset>
  if(i2cHandle->Instance==I2C1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_I2C_MspInit+0xa8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d136      	bne.n	8001cc2 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c54:	2340      	movs	r3, #64	; 0x40
 8001c56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fd57 	bl	8004714 <HAL_RCCEx_PeriphCLKConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c6c:	f000 f8e4 	bl	8001e38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_I2C_MspInit+0xac>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	4a16      	ldr	r2, [pc, #88]	; (8001cd0 <HAL_I2C_MspInit+0xac>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_I2C_MspInit+0xac>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c8c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8e:	2312      	movs	r3, #18
 8001c90:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <HAL_I2C_MspInit+0xb0>)
 8001ca6:	f000 fc4b 	bl	8002540 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_I2C_MspInit+0xac>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_I2C_MspInit+0xac>)
 8001cb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_I2C_MspInit+0xac>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3768      	adds	r7, #104	; 0x68
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40005400 	.word	0x40005400
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	48000400 	.word	0x48000400

08001cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	double temp = 0;
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double accel = 0;
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double gyro = 0;
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double magneto = 0;
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d0e:	f000 faa0 	bl	8002252 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d12:	f000 f845 	bl	8001da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d16:	f7ff fedf 	bl	8001ad8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d1a:	f7ff ff43 	bl	8001ba4 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001d1e:	f000 f9cd 	bl	80020bc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //SIG INIT STM32
  printf("-----------------------------------------------\r\n"
 8001d22:	481b      	ldr	r0, [pc, #108]	; (8001d90 <main+0xb8>)
 8001d24:	f004 fc98 	bl	8006658 <puts>

  // INIT SENSORS

  //Presence capteurs sur le bus I2C

  TestSensorOnI2C(tabI2CAdd);
 8001d28:	481a      	ldr	r0, [pc, #104]	; (8001d94 <main+0xbc>)
 8001d2a:	f7ff fa05 	bl	8001138 <TestSensorOnI2C>

  SearchMPU9250();  		// On cherche le MPU9250
 8001d2e:	f7ff f9c7 	bl	80010c0 <SearchMPU9250>

  SearchBMP280();			// On cherche le BMP280 visible à 0x18 avant Init()
 8001d32:	f7ff f989 	bl	8001048 <SearchBMP280>

  PrintTab(tabI2CAdd); 		// On affiche les valeurs du tableau d'addresse
 8001d36:	4817      	ldr	r0, [pc, #92]	; (8001d94 <main+0xbc>)
 8001d38:	f7ff fa3e 	bl	80011b8 <PrintTab>

  Init_IMU_10DOF(&hi2c1);
 8001d3c:	4816      	ldr	r0, [pc, #88]	; (8001d98 <main+0xc0>)
 8001d3e:	f7ff fa6f 	bl	8001220 <Init_IMU_10DOF>

  SearchBMP280();			// On cherche le BMP280 visible à 0x18 après Init()
 8001d42:	f7ff f981 	bl	8001048 <SearchBMP280>

  TestSensorOnI2C(tabI2CAdd);
 8001d46:	4813      	ldr	r0, [pc, #76]	; (8001d94 <main+0xbc>)
 8001d48:	f7ff f9f6 	bl	8001138 <TestSensorOnI2C>
  PrintTab(tabI2CAdd); 		// On affiche les valeurs du tableau d'addresse
 8001d4c:	4811      	ldr	r0, [pc, #68]	; (8001d94 <main+0xbc>)
 8001d4e:	f7ff fa33 	bl	80011b8 <PrintTab>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Measure_T(&hi2c1,&temp);
 8001d52:	f107 0318 	add.w	r3, r7, #24
 8001d56:	4619      	mov	r1, r3
 8001d58:	480f      	ldr	r0, [pc, #60]	; (8001d98 <main+0xc0>)
 8001d5a:	f7ff fbd9 	bl	8001510 <Measure_T>
	  Measure_A(&hi2c1,&accel);
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	4619      	mov	r1, r3
 8001d64:	480c      	ldr	r0, [pc, #48]	; (8001d98 <main+0xc0>)
 8001d66:	f7ff fc1f 	bl	80015a8 <Measure_A>
	  Measure_G(&hi2c1,&gyro);
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4809      	ldr	r0, [pc, #36]	; (8001d98 <main+0xc0>)
 8001d72:	f7ff fcfd 	bl	8001770 <Measure_G>
	  Measure_M(&hi2c1,&magneto);
 8001d76:	463b      	mov	r3, r7
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4807      	ldr	r0, [pc, #28]	; (8001d98 <main+0xc0>)
 8001d7c:	f7ff fde0 	bl	8001940 <Measure_M>
	  printf("\r\n");
 8001d80:	4806      	ldr	r0, [pc, #24]	; (8001d9c <main+0xc4>)
 8001d82:	f004 fc69 	bl	8006658 <puts>
	  HAL_Delay(1000);
 8001d86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d8a:	f000 fad3 	bl	8002334 <HAL_Delay>
	  Measure_T(&hi2c1,&temp);
 8001d8e:	e7e0      	b.n	8001d52 <main+0x7a>
 8001d90:	0800b4ac 	.word	0x0800b4ac
 8001d94:	20000254 	.word	0x20000254
 8001d98:	20000208 	.word	0x20000208
 8001d9c:	0800b520 	.word	0x0800b520

08001da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b094      	sub	sp, #80	; 0x50
 8001da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da6:	f107 0318 	add.w	r3, r7, #24
 8001daa:	2238      	movs	r2, #56	; 0x38
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 fd34 	bl	800581c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f001 febe 	bl	8003b44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd2:	2340      	movs	r3, #64	; 0x40
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001dde:	2304      	movs	r3, #4
 8001de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001de2:	2355      	movs	r3, #85	; 0x55
 8001de4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de6:	2302      	movs	r3, #2
 8001de8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dea:	2302      	movs	r3, #2
 8001dec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dee:	2302      	movs	r3, #2
 8001df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df2:	f107 0318 	add.w	r3, r7, #24
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 ff58 	bl	8003cac <HAL_RCC_OscConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e02:	f000 f819 	bl	8001e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e06:	230f      	movs	r3, #15
 8001e08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f002 fa5c 	bl	80042dc <HAL_RCC_ClockConfig>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e2a:	f000 f805 	bl	8001e38 <Error_Handler>
  }
}
 8001e2e:	bf00      	nop
 8001e30:	3750      	adds	r7, #80	; 0x50
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  printf("an Error Occur, please Reset system\r\n");
 8001e40:	4801      	ldr	r0, [pc, #4]	; (8001e48 <Error_Handler+0x10>)
 8001e42:	f004 fc09 	bl	8006658 <puts>

  while (1)
 8001e46:	e7fe      	b.n	8001e46 <Error_Handler+0xe>
 8001e48:	0800b524 	.word	0x0800b524

08001e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_MspInit+0x44>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e56:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <HAL_MspInit+0x44>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_MspInit+0x44>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_MspInit+0x44>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <HAL_MspInit+0x44>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6593      	str	r3, [r2, #88]	; 0x58
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_MspInit+0x44>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e82:	f001 ff03 	bl	8003c8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000

08001e94 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001e9c:	1d39      	adds	r1, r7, #4
 8001e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <__io_putchar+0x20>)
 8001ea6:	f002 fe75 	bl	8004b94 <HAL_UART_Transmit>

  return ch;
 8001eaa:	687b      	ldr	r3, [r7, #4]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000278 	.word	0x20000278

08001eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <NMI_Handler+0x4>

08001ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <HardFault_Handler+0x4>

08001ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <MemManage_Handler+0x4>

08001eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <BusFault_Handler+0x4>

08001ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <UsageFault_Handler+0x4>

08001ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f04:	f000 f9f8 	bl	80022f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
	return 1;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_kill>:

int _kill(int pid, int sig)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f26:	f003 fc4f 	bl	80057c8 <__errno>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2216      	movs	r2, #22
 8001f2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_exit>:

void _exit (int status)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ffe7 	bl	8001f1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f4e:	e7fe      	b.n	8001f4e <_exit+0x12>

08001f50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e00a      	b.n	8001f78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f62:	f3af 8000 	nop.w
 8001f66:	4601      	mov	r1, r0
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	60ba      	str	r2, [r7, #8]
 8001f6e:	b2ca      	uxtb	r2, r1
 8001f70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	dbf0      	blt.n	8001f62 <_read+0x12>
	}

return len;
 8001f80:	687b      	ldr	r3, [r7, #4]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e009      	b.n	8001fb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	60ba      	str	r2, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff75 	bl	8001e94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbf1      	blt.n	8001f9c <_write+0x12>
	}
	return len;
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_close>:

int _close(int file)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fea:	605a      	str	r2, [r3, #4]
	return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_isatty>:

int _isatty(int file)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
	return 1;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
	return 0;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f003 fbb4 	bl	80057c8 <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20008000 	.word	0x20008000
 800208c:	00000400 	.word	0x00000400
 8002090:	20000274 	.word	0x20000274
 8002094:	20000320 	.word	0x20000320

08002098 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 80020c2:	4a22      	ldr	r2, [pc, #136]	; (800214c <MX_LPUART1_UART_Init+0x90>)
 80020c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 80020c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80020fe:	4812      	ldr	r0, [pc, #72]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 8002100:	f002 fcf8 	bl	8004af4 <HAL_UART_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800210a:	f7ff fe95 	bl	8001e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800210e:	2100      	movs	r1, #0
 8002110:	480d      	ldr	r0, [pc, #52]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 8002112:	f003 fa8f 	bl	8005634 <HAL_UARTEx_SetTxFifoThreshold>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800211c:	f7ff fe8c 	bl	8001e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002120:	2100      	movs	r1, #0
 8002122:	4809      	ldr	r0, [pc, #36]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 8002124:	f003 fac4 	bl	80056b0 <HAL_UARTEx_SetRxFifoThreshold>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800212e:	f7ff fe83 	bl	8001e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002132:	4805      	ldr	r0, [pc, #20]	; (8002148 <MX_LPUART1_UART_Init+0x8c>)
 8002134:	f003 fa45 	bl	80055c2 <HAL_UARTEx_DisableFifoMode>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800213e:	f7ff fe7b 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000278 	.word	0x20000278
 800214c:	40008000 	.word	0x40008000

08002150 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b09a      	sub	sp, #104	; 0x68
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	2244      	movs	r2, #68	; 0x44
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fb53 	bl	800581c <memset>
  if(uartHandle->Instance==LPUART1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <HAL_UART_MspInit+0xa8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d136      	bne.n	80021ee <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002180:	2320      	movs	r3, #32
 8002182:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	4618      	mov	r0, r3
 800218e:	f002 fac1 	bl	8004714 <HAL_RCCEx_PeriphCLKConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002198:	f7ff fe4e 	bl	8001e38 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_UART_MspInit+0xac>)
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_UART_MspInit+0xac>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_UART_MspInit+0xac>)
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_UART_MspInit+0xac>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b8:	4a10      	ldr	r2, [pc, #64]	; (80021fc <HAL_UART_MspInit+0xac>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <HAL_UART_MspInit+0xac>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80021cc:	230c      	movs	r3, #12
 80021ce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80021dc:	230c      	movs	r3, #12
 80021de:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021e4:	4619      	mov	r1, r3
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ea:	f000 f9a9 	bl	8002540 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80021ee:	bf00      	nop
 80021f0:	3768      	adds	r7, #104	; 0x68
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40008000 	.word	0x40008000
 80021fc:	40021000 	.word	0x40021000

08002200 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002200:	480d      	ldr	r0, [pc, #52]	; (8002238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002202:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002204:	480d      	ldr	r0, [pc, #52]	; (800223c <LoopForever+0x6>)
  ldr r1, =_edata
 8002206:	490e      	ldr	r1, [pc, #56]	; (8002240 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <LoopForever+0xe>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <LoopForever+0x12>)
  ldr r4, =_ebss
 800221c:	4c0b      	ldr	r4, [pc, #44]	; (800224c <LoopForever+0x16>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800222a:	f7ff ff35 	bl	8002098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800222e:	f003 fad1 	bl	80057d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002232:	f7ff fd51 	bl	8001cd8 <main>

08002236 <LoopForever>:

LoopForever:
    b LoopForever
 8002236:	e7fe      	b.n	8002236 <LoopForever>
  ldr   r0, =_estack
 8002238:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800223c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002240:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002244:	0800ba80 	.word	0x0800ba80
  ldr r2, =_sbss
 8002248:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800224c:	2000031c 	.word	0x2000031c

08002250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002250:	e7fe      	b.n	8002250 <ADC1_2_IRQHandler>

08002252 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225c:	2003      	movs	r0, #3
 800225e:	f000 f93d 	bl	80024dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002262:	2000      	movs	r0, #0
 8002264:	f000 f80e 	bl	8002284 <HAL_InitTick>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	71fb      	strb	r3, [r7, #7]
 8002272:	e001      	b.n	8002278 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002274:	f7ff fdea 	bl	8001e4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002278:	79fb      	ldrb	r3, [r7, #7]

}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002290:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_InitTick+0x68>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d022      	beq.n	80022de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_InitTick+0x6c>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_InitTick+0x68>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f93a 	bl	8002526 <HAL_SYSTICK_Config>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10f      	bne.n	80022d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	d809      	bhi.n	80022d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022be:	2200      	movs	r2, #0
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	f04f 30ff 	mov.w	r0, #4294967295
 80022c6:	f000 f914 	bl	80024f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_InitTick+0x70>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	e007      	b.n	80022e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	e004      	b.n	80022e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e001      	b.n	80022e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000008 	.word	0x20000008
 80022f0:	20000000 	.word	0x20000000
 80022f4:	20000004 	.word	0x20000004

080022f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_IncTick+0x1c>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_IncTick+0x20>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4413      	add	r3, r2
 8002306:	4a03      	ldr	r2, [pc, #12]	; (8002314 <HAL_IncTick+0x1c>)
 8002308:	6013      	str	r3, [r2, #0]
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	20000308 	.word	0x20000308
 8002318:	20000008 	.word	0x20000008

0800231c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return uwTick;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_GetTick+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000308 	.word	0x20000308

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff ffee 	bl	800231c <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d004      	beq.n	8002358 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_Delay+0x40>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4413      	add	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002358:	bf00      	nop
 800235a:	f7ff ffdf 	bl	800231c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	429a      	cmp	r2, r3
 8002368:	d8f7      	bhi.n	800235a <HAL_Delay+0x26>
  {
  }
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000008 	.word	0x20000008

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023aa:	4a04      	ldr	r2, [pc, #16]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db0a      	blt.n	8002406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	490c      	ldr	r1, [pc, #48]	; (8002428 <__NVIC_SetPriority+0x4c>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	0112      	lsls	r2, r2, #4
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	440b      	add	r3, r1
 8002400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002404:	e00a      	b.n	800241c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4908      	ldr	r1, [pc, #32]	; (800242c <__NVIC_SetPriority+0x50>)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3b04      	subs	r3, #4
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	440b      	add	r3, r1
 800241a:	761a      	strb	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000e100 	.word	0xe000e100
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f1c3 0307 	rsb	r3, r3, #7
 800244a:	2b04      	cmp	r3, #4
 800244c:	bf28      	it	cs
 800244e:	2304      	movcs	r3, #4
 8002450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3304      	adds	r3, #4
 8002456:	2b06      	cmp	r3, #6
 8002458:	d902      	bls.n	8002460 <NVIC_EncodePriority+0x30>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3b03      	subs	r3, #3
 800245e:	e000      	b.n	8002462 <NVIC_EncodePriority+0x32>
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	401a      	ands	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002478:	f04f 31ff 	mov.w	r1, #4294967295
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43d9      	mvns	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	4313      	orrs	r3, r2
         );
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	; 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a8:	d301      	bcc.n	80024ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024aa:	2301      	movs	r3, #1
 80024ac:	e00f      	b.n	80024ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <SysTick_Config+0x40>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b6:	210f      	movs	r1, #15
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	f7ff ff8e 	bl	80023dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <SysTick_Config+0x40>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <SysTick_Config+0x40>)
 80024c8:	2207      	movs	r2, #7
 80024ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	e000e010 	.word	0xe000e010

080024dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ff47 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff5e 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff90 	bl	8002430 <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5f 	bl	80023dc <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ffb2 	bl	8002498 <SysTick_Config>
 8002534:	4603      	mov	r3, r0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800254e:	e15a      	b.n	8002806 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 814c 	beq.w	8002800 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d005      	beq.n	8002580 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800257c:	2b02      	cmp	r3, #2
 800257e:	d130      	bne.n	80025e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025b6:	2201      	movs	r2, #1
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f003 0201 	and.w	r2, r3, #1
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d017      	beq.n	800261e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d123      	bne.n	8002672 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	08da      	lsrs	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3208      	adds	r2, #8
 8002632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002636:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	08da      	lsrs	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3208      	adds	r2, #8
 800266c:	6939      	ldr	r1, [r7, #16]
 800266e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0203 	and.w	r2, r3, #3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80a6 	beq.w	8002800 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b4:	4b5b      	ldr	r3, [pc, #364]	; (8002824 <HAL_GPIO_Init+0x2e4>)
 80026b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b8:	4a5a      	ldr	r2, [pc, #360]	; (8002824 <HAL_GPIO_Init+0x2e4>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6613      	str	r3, [r2, #96]	; 0x60
 80026c0:	4b58      	ldr	r3, [pc, #352]	; (8002824 <HAL_GPIO_Init+0x2e4>)
 80026c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026cc:	4a56      	ldr	r2, [pc, #344]	; (8002828 <HAL_GPIO_Init+0x2e8>)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026f6:	d01f      	beq.n	8002738 <HAL_GPIO_Init+0x1f8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a4c      	ldr	r2, [pc, #304]	; (800282c <HAL_GPIO_Init+0x2ec>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d019      	beq.n	8002734 <HAL_GPIO_Init+0x1f4>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a4b      	ldr	r2, [pc, #300]	; (8002830 <HAL_GPIO_Init+0x2f0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d013      	beq.n	8002730 <HAL_GPIO_Init+0x1f0>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a4a      	ldr	r2, [pc, #296]	; (8002834 <HAL_GPIO_Init+0x2f4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00d      	beq.n	800272c <HAL_GPIO_Init+0x1ec>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a49      	ldr	r2, [pc, #292]	; (8002838 <HAL_GPIO_Init+0x2f8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d007      	beq.n	8002728 <HAL_GPIO_Init+0x1e8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a48      	ldr	r2, [pc, #288]	; (800283c <HAL_GPIO_Init+0x2fc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d101      	bne.n	8002724 <HAL_GPIO_Init+0x1e4>
 8002720:	2305      	movs	r3, #5
 8002722:	e00a      	b.n	800273a <HAL_GPIO_Init+0x1fa>
 8002724:	2306      	movs	r3, #6
 8002726:	e008      	b.n	800273a <HAL_GPIO_Init+0x1fa>
 8002728:	2304      	movs	r3, #4
 800272a:	e006      	b.n	800273a <HAL_GPIO_Init+0x1fa>
 800272c:	2303      	movs	r3, #3
 800272e:	e004      	b.n	800273a <HAL_GPIO_Init+0x1fa>
 8002730:	2302      	movs	r3, #2
 8002732:	e002      	b.n	800273a <HAL_GPIO_Init+0x1fa>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <HAL_GPIO_Init+0x1fa>
 8002738:	2300      	movs	r3, #0
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	f002 0203 	and.w	r2, r2, #3
 8002740:	0092      	lsls	r2, r2, #2
 8002742:	4093      	lsls	r3, r2
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800274a:	4937      	ldr	r1, [pc, #220]	; (8002828 <HAL_GPIO_Init+0x2e8>)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	089b      	lsrs	r3, r3, #2
 8002750:	3302      	adds	r3, #2
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002758:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_GPIO_Init+0x300>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43db      	mvns	r3, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800277c:	4a30      	ldr	r2, [pc, #192]	; (8002840 <HAL_GPIO_Init+0x300>)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002782:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <HAL_GPIO_Init+0x300>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027a6:	4a26      	ldr	r2, [pc, #152]	; (8002840 <HAL_GPIO_Init+0x300>)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80027ac:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_GPIO_Init+0x300>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027d0:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <HAL_GPIO_Init+0x300>)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027d6:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <HAL_GPIO_Init+0x300>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_GPIO_Init+0x300>)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	f47f ae9d 	bne.w	8002550 <HAL_GPIO_Init+0x10>
  }
}
 8002816:	bf00      	nop
 8002818:	bf00      	nop
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	40021000 	.word	0x40021000
 8002828:	40010000 	.word	0x40010000
 800282c:	48000400 	.word	0x48000400
 8002830:	48000800 	.word	0x48000800
 8002834:	48000c00 	.word	0x48000c00
 8002838:	48001000 	.word	0x48001000
 800283c:	48001400 	.word	0x48001400
 8002840:	40010400 	.word	0x40010400

08002844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
 8002850:	4613      	mov	r3, r2
 8002852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002854:	787b      	ldrb	r3, [r7, #1]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800285a:	887a      	ldrh	r2, [r7, #2]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002860:	e002      	b.n	8002868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e081      	b.n	800298a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff f9c2 	bl	8001c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2224      	movs	r2, #36	; 0x24
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d107      	bne.n	80028ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	e006      	b.n	80028fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d104      	bne.n	800290e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800290c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800291c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002920:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002930:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69d9      	ldr	r1, [r3, #28]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1a      	ldr	r2, [r3, #32]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	461a      	mov	r2, r3
 80029a0:	460b      	mov	r3, r1
 80029a2:	817b      	strh	r3, [r7, #10]
 80029a4:	4613      	mov	r3, r2
 80029a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	f040 80da 	bne.w	8002b6a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_I2C_Master_Transmit+0x30>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e0d3      	b.n	8002b6c <HAL_I2C_Master_Transmit+0x1d8>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029cc:	f7ff fca6 	bl	800231c <HAL_GetTick>
 80029d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2319      	movs	r3, #25
 80029d8:	2201      	movs	r2, #1
 80029da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fdc4 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0be      	b.n	8002b6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2221      	movs	r2, #33	; 0x21
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2210      	movs	r2, #16
 80029fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	893a      	ldrh	r2, [r7, #8]
 8002a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2bff      	cmp	r3, #255	; 0xff
 8002a1e:	d90e      	bls.n	8002a3e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	22ff      	movs	r2, #255	; 0xff
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	8979      	ldrh	r1, [r7, #10]
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 ffba 	bl	80039b0 <I2C_TransferConfig>
 8002a3c:	e06c      	b.n	8002b18 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	8979      	ldrh	r1, [r7, #10]
 8002a50:	4b48      	ldr	r3, [pc, #288]	; (8002b74 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 ffa9 	bl	80039b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a5e:	e05b      	b.n	8002b18 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	6a39      	ldr	r1, [r7, #32]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fdc1 	bl	80035ec <I2C_WaitOnTXISFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e07b      	b.n	8002b6c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d034      	beq.n	8002b18 <HAL_I2C_Master_Transmit+0x184>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d130      	bne.n	8002b18 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	2200      	movs	r2, #0
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fd53 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e04d      	b.n	8002b6c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2bff      	cmp	r3, #255	; 0xff
 8002ad8:	d90e      	bls.n	8002af8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	22ff      	movs	r2, #255	; 0xff
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	8979      	ldrh	r1, [r7, #10]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 ff5d 	bl	80039b0 <I2C_TransferConfig>
 8002af6:	e00f      	b.n	8002b18 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	8979      	ldrh	r1, [r7, #10]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 ff4c 	bl	80039b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d19e      	bne.n	8002a60 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	6a39      	ldr	r1, [r7, #32]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fda0 	bl	800366c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e01a      	b.n	8002b6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b4a:	400b      	ands	r3, r1
 8002b4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	80002000 	.word	0x80002000
 8002b78:	fe00e800 	.word	0xfe00e800

08002b7c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	461a      	mov	r2, r3
 8002b88:	460b      	mov	r3, r1
 8002b8a:	817b      	strh	r3, [r7, #10]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	f040 80db 	bne.w	8002d54 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_I2C_Master_Receive+0x30>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e0d4      	b.n	8002d56 <HAL_I2C_Master_Receive+0x1da>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bb4:	f7ff fbb2 	bl	800231c <HAL_GetTick>
 8002bb8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2319      	movs	r3, #25
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fcd0 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0bf      	b.n	8002d56 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2222      	movs	r2, #34	; 0x22
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2210      	movs	r2, #16
 8002be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	893a      	ldrh	r2, [r7, #8]
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2bff      	cmp	r3, #255	; 0xff
 8002c06:	d90e      	bls.n	8002c26 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	22ff      	movs	r2, #255	; 0xff
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	8979      	ldrh	r1, [r7, #10]
 8002c16:	4b52      	ldr	r3, [pc, #328]	; (8002d60 <HAL_I2C_Master_Receive+0x1e4>)
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fec6 	bl	80039b0 <I2C_TransferConfig>
 8002c24:	e06d      	b.n	8002d02 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	8979      	ldrh	r1, [r7, #10]
 8002c38:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <HAL_I2C_Master_Receive+0x1e4>)
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 feb5 	bl	80039b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002c46:	e05c      	b.n	8002d02 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	6a39      	ldr	r1, [r7, #32]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fd49 	bl	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e07c      	b.n	8002d56 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d034      	beq.n	8002d02 <HAL_I2C_Master_Receive+0x186>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d130      	bne.n	8002d02 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2180      	movs	r1, #128	; 0x80
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fc5e 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e04d      	b.n	8002d56 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2bff      	cmp	r3, #255	; 0xff
 8002cc2:	d90e      	bls.n	8002ce2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	22ff      	movs	r2, #255	; 0xff
 8002cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	8979      	ldrh	r1, [r7, #10]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fe68 	bl	80039b0 <I2C_TransferConfig>
 8002ce0:	e00f      	b.n	8002d02 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	8979      	ldrh	r1, [r7, #10]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fe57 	bl	80039b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d19d      	bne.n	8002c48 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	6a39      	ldr	r1, [r7, #32]
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fcab 	bl	800366c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e01a      	b.n	8002d56 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2220      	movs	r2, #32
 8002d26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <HAL_I2C_Master_Receive+0x1e8>)
 8002d34:	400b      	ands	r3, r1
 8002d36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e000      	b.n	8002d56 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	80002400 	.word	0x80002400
 8002d64:	fe00e800 	.word	0xfe00e800

08002d68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	4608      	mov	r0, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	461a      	mov	r2, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	817b      	strh	r3, [r7, #10]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	813b      	strh	r3, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	f040 80f9 	bne.w	8002f82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_I2C_Mem_Write+0x34>
 8002d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0ed      	b.n	8002f84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_I2C_Mem_Write+0x4e>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0e6      	b.n	8002f84 <HAL_I2C_Mem_Write+0x21c>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dbe:	f7ff faad 	bl	800231c <HAL_GetTick>
 8002dc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2319      	movs	r3, #25
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fbcb 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0d1      	b.n	8002f84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2221      	movs	r2, #33	; 0x21
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2240      	movs	r2, #64	; 0x40
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e08:	88f8      	ldrh	r0, [r7, #6]
 8002e0a:	893a      	ldrh	r2, [r7, #8]
 8002e0c:	8979      	ldrh	r1, [r7, #10]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	4603      	mov	r3, r0
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fadb 	bl	80033d4 <I2C_RequestMemoryWrite>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0a9      	b.n	8002f84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2bff      	cmp	r3, #255	; 0xff
 8002e38:	d90e      	bls.n	8002e58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	22ff      	movs	r2, #255	; 0xff
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	8979      	ldrh	r1, [r7, #10]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fdad 	bl	80039b0 <I2C_TransferConfig>
 8002e56:	e00f      	b.n	8002e78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	8979      	ldrh	r1, [r7, #10]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fd9c 	bl	80039b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fbb5 	bl	80035ec <I2C_WaitOnTXISFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e07b      	b.n	8002f84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d034      	beq.n	8002f30 <HAL_I2C_Mem_Write+0x1c8>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d130      	bne.n	8002f30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 fb47 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e04d      	b.n	8002f84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2bff      	cmp	r3, #255	; 0xff
 8002ef0:	d90e      	bls.n	8002f10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	22ff      	movs	r2, #255	; 0xff
 8002ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	8979      	ldrh	r1, [r7, #10]
 8002f00:	2300      	movs	r3, #0
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 fd51 	bl	80039b0 <I2C_TransferConfig>
 8002f0e:	e00f      	b.n	8002f30 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	8979      	ldrh	r1, [r7, #10]
 8002f22:	2300      	movs	r3, #0
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fd40 	bl	80039b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d19e      	bne.n	8002e78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fb94 	bl	800366c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e01a      	b.n	8002f84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2220      	movs	r2, #32
 8002f54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_I2C_Mem_Write+0x224>)
 8002f62:	400b      	ands	r3, r1
 8002f64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	fe00e800 	.word	0xfe00e800

08002f90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	4608      	mov	r0, r1
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	817b      	strh	r3, [r7, #10]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	813b      	strh	r3, [r7, #8]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	f040 80fd 	bne.w	80031b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_I2C_Mem_Read+0x34>
 8002fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0f1      	b.n	80031b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_I2C_Mem_Read+0x4e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0ea      	b.n	80031b4 <HAL_I2C_Mem_Read+0x224>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fe6:	f7ff f999 	bl	800231c <HAL_GetTick>
 8002fea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2319      	movs	r3, #25
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fab7 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0d5      	b.n	80031b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2222      	movs	r2, #34	; 0x22
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2240      	movs	r2, #64	; 0x40
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003030:	88f8      	ldrh	r0, [r7, #6]
 8003032:	893a      	ldrh	r2, [r7, #8]
 8003034:	8979      	ldrh	r1, [r7, #10]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	4603      	mov	r3, r0
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fa1b 	bl	800347c <I2C_RequestMemoryRead>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0ad      	b.n	80031b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2bff      	cmp	r3, #255	; 0xff
 8003060:	d90e      	bls.n	8003080 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	22ff      	movs	r2, #255	; 0xff
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	b2da      	uxtb	r2, r3
 800306e:	8979      	ldrh	r1, [r7, #10]
 8003070:	4b52      	ldr	r3, [pc, #328]	; (80031bc <HAL_I2C_Mem_Read+0x22c>)
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 fc99 	bl	80039b0 <I2C_TransferConfig>
 800307e:	e00f      	b.n	80030a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	b2da      	uxtb	r2, r3
 8003090:	8979      	ldrh	r1, [r7, #10]
 8003092:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <HAL_I2C_Mem_Read+0x22c>)
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fc88 	bl	80039b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	2200      	movs	r2, #0
 80030a8:	2104      	movs	r1, #4
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fa5e 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e07c      	b.n	80031b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d034      	beq.n	8003160 <HAL_I2C_Mem_Read+0x1d0>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d130      	bne.n	8003160 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	2200      	movs	r2, #0
 8003106:	2180      	movs	r1, #128	; 0x80
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fa2f 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e04d      	b.n	80031b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	2bff      	cmp	r3, #255	; 0xff
 8003120:	d90e      	bls.n	8003140 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	22ff      	movs	r2, #255	; 0xff
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	b2da      	uxtb	r2, r3
 800312e:	8979      	ldrh	r1, [r7, #10]
 8003130:	2300      	movs	r3, #0
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fc39 	bl	80039b0 <I2C_TransferConfig>
 800313e:	e00f      	b.n	8003160 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	b2da      	uxtb	r2, r3
 8003150:	8979      	ldrh	r1, [r7, #10]
 8003152:	2300      	movs	r3, #0
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fc28 	bl	80039b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d19a      	bne.n	80030a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fa7c 	bl	800366c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e01a      	b.n	80031b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2220      	movs	r2, #32
 8003184:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_I2C_Mem_Read+0x230>)
 8003192:	400b      	ands	r3, r1
 8003194:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e000      	b.n	80031b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	80002400 	.word	0x80002400
 80031c0:	fe00e800 	.word	0xfe00e800

080031c4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	460b      	mov	r3, r1
 80031d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	f040 80f1 	bne.w	80033c8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f4:	d101      	bne.n	80031fa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
 80031f8:	e0e7      	b.n	80033ca <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_I2C_IsDeviceReady+0x44>
 8003204:	2302      	movs	r3, #2
 8003206:	e0e0      	b.n	80033ca <HAL_I2C_IsDeviceReady+0x206>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2224      	movs	r2, #36	; 0x24
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_I2C_IsDeviceReady+0x72>
 8003226:	897b      	ldrh	r3, [r7, #10]
 8003228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800322c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003230:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003234:	e004      	b.n	8003240 <HAL_I2C_IsDeviceReady+0x7c>
 8003236:	897b      	ldrh	r3, [r7, #10]
 8003238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800323c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003246:	f7ff f869 	bl	800231c <HAL_GetTick>
 800324a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b20      	cmp	r3, #32
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b10      	cmp	r3, #16
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003278:	e034      	b.n	80032e4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d01a      	beq.n	80032b8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003282:	f7ff f84b 	bl	800231c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <HAL_I2C_IsDeviceReady+0xd4>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10f      	bne.n	80032b8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	f043 0220 	orr.w	r2, r3, #32
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e088      	b.n	80033ca <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b10      	cmp	r3, #16
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80032e4:	7ffb      	ldrb	r3, [r7, #31]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <HAL_I2C_IsDeviceReady+0x12c>
 80032ea:	7fbb      	ldrb	r3, [r7, #30]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0c4      	beq.n	800327a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d01a      	beq.n	8003334 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2200      	movs	r2, #0
 8003306:	2120      	movs	r1, #32
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f92f 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e058      	b.n	80033ca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2220      	movs	r2, #32
 800331e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e04a      	b.n	80033ca <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	2120      	movs	r1, #32
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f914 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e03d      	b.n	80033ca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2210      	movs	r2, #16
 8003354:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2220      	movs	r2, #32
 800335c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d118      	bne.n	8003398 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003374:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2200      	movs	r2, #0
 800337e:	2120      	movs	r1, #32
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f8f3 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e01c      	b.n	80033ca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2220      	movs	r2, #32
 8003396:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	3301      	adds	r3, #1
 800339c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	f63f af3b 	bhi.w	800321e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	4608      	mov	r0, r1
 80033de:	4611      	mov	r1, r2
 80033e0:	461a      	mov	r2, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	817b      	strh	r3, [r7, #10]
 80033e6:	460b      	mov	r3, r1
 80033e8:	813b      	strh	r3, [r7, #8]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	8979      	ldrh	r1, [r7, #10]
 80033f4:	4b20      	ldr	r3, [pc, #128]	; (8003478 <I2C_RequestMemoryWrite+0xa4>)
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 fad7 	bl	80039b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	69b9      	ldr	r1, [r7, #24]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f8f0 	bl	80035ec <I2C_WaitOnTXISFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e02c      	b.n	8003470 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d105      	bne.n	8003428 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800341c:	893b      	ldrh	r3, [r7, #8]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	629a      	str	r2, [r3, #40]	; 0x28
 8003426:	e015      	b.n	8003454 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003428:	893b      	ldrh	r3, [r7, #8]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	b29b      	uxth	r3, r3
 800342e:	b2da      	uxtb	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003436:	69fa      	ldr	r2, [r7, #28]
 8003438:	69b9      	ldr	r1, [r7, #24]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f8d6 	bl	80035ec <I2C_WaitOnTXISFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e012      	b.n	8003470 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800344a:	893b      	ldrh	r3, [r7, #8]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2200      	movs	r2, #0
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f884 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	80002000 	.word	0x80002000

0800347c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	4603      	mov	r3, r0
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	460b      	mov	r3, r1
 8003490:	813b      	strh	r3, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	8979      	ldrh	r1, [r7, #10]
 800349c:	4b20      	ldr	r3, [pc, #128]	; (8003520 <I2C_RequestMemoryRead+0xa4>)
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2300      	movs	r3, #0
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fa84 	bl	80039b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	69b9      	ldr	r1, [r7, #24]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f89d 	bl	80035ec <I2C_WaitOnTXISFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e02c      	b.n	8003516 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034c2:	893b      	ldrh	r3, [r7, #8]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28
 80034cc:	e015      	b.n	80034fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034ce:	893b      	ldrh	r3, [r7, #8]
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	69b9      	ldr	r1, [r7, #24]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f883 	bl	80035ec <I2C_WaitOnTXISFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e012      	b.n	8003516 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034f0:	893b      	ldrh	r3, [r7, #8]
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2200      	movs	r2, #0
 8003502:	2140      	movs	r1, #64	; 0x40
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f831 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	80002000 	.word	0x80002000

08003524 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b02      	cmp	r3, #2
 8003538:	d103      	bne.n	8003542 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2200      	movs	r2, #0
 8003540:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b01      	cmp	r3, #1
 800354e:	d007      	beq.n	8003560 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	619a      	str	r2, [r3, #24]
  }
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357c:	e022      	b.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d01e      	beq.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7fe fec9 	bl	800231c <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d113      	bne.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e00f      	b.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d0cd      	beq.n	800357e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035f8:	e02c      	b.n	8003654 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f8ea 	bl	80037d8 <I2C_IsErrorOccurred>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e02a      	b.n	8003664 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d01e      	beq.n	8003654 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fe fe81 	bl	800231c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d113      	bne.n	8003654 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e007      	b.n	8003664 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d1cb      	bne.n	80035fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003678:	e028      	b.n	80036cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f8aa 	bl	80037d8 <I2C_IsErrorOccurred>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e026      	b.n	80036dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368e:	f7fe fe45 	bl	800231c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d113      	bne.n	80036cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e007      	b.n	80036dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d1cf      	bne.n	800367a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036f0:	e064      	b.n	80037bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f86e 	bl	80037d8 <I2C_IsErrorOccurred>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e062      	b.n	80037cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b20      	cmp	r3, #32
 8003712:	d138      	bne.n	8003786 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d105      	bne.n	800372e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e04e      	b.n	80037cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b10      	cmp	r3, #16
 800373a:	d107      	bne.n	800374c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2210      	movs	r2, #16
 8003742:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2204      	movs	r2, #4
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
 800374a:	e002      	b.n	8003752 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2220      	movs	r2, #32
 8003758:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003766:	400b      	ands	r3, r1
 8003768:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e022      	b.n	80037cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fe fdc9 	bl	800231c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10f      	bne.n	80037bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e007      	b.n	80037cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d193      	bne.n	80036f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	fe00e800 	.word	0xfe00e800

080037d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d075      	beq.n	80038f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2210      	movs	r2, #16
 800380a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800380c:	e056      	b.n	80038bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d052      	beq.n	80038bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003816:	f7fe fd81 	bl	800231c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <I2C_IsErrorOccurred+0x54>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d147      	bne.n	80038bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003836:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800383e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800384a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384e:	d12e      	bne.n	80038ae <I2C_IsErrorOccurred+0xd6>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003856:	d02a      	beq.n	80038ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	2b20      	cmp	r3, #32
 800385c:	d027      	beq.n	80038ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800386c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800386e:	f7fe fd55 	bl	800231c <HAL_GetTick>
 8003872:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003874:	e01b      	b.n	80038ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003876:	f7fe fd51 	bl	800231c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b19      	cmp	r3, #25
 8003882:	d914      	bls.n	80038ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d1dc      	bne.n	8003876 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d003      	beq.n	80038d2 <I2C_IsErrorOccurred+0xfa>
 80038ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d09d      	beq.n	800380e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d103      	bne.n	80038e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2220      	movs	r2, #32
 80038e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	f043 0304 	orr.w	r3, r3, #4
 80038e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003912:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f043 0308 	orr.w	r3, r3, #8
 800392a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003934:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	f043 0302 	orr.w	r3, r3, #2
 800394c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003956:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800395e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01c      	beq.n	80039a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff fddc 	bl	8003524 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <I2C_IsErrorOccurred+0x1d4>)
 8003978:	400b      	ands	r3, r1
 800397a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80039a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3728      	adds	r7, #40	; 0x28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	fe00e800 	.word	0xfe00e800

080039b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	817b      	strh	r3, [r7, #10]
 80039be:	4613      	mov	r3, r2
 80039c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039c2:	897b      	ldrh	r3, [r7, #10]
 80039c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039c8:	7a7b      	ldrb	r3, [r7, #9]
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039d0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	4313      	orrs	r3, r2
 80039da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039de:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	0d5b      	lsrs	r3, r3, #21
 80039ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <I2C_TransferConfig+0x60>)
 80039f0:	430b      	orrs	r3, r1
 80039f2:	43db      	mvns	r3, r3
 80039f4:	ea02 0103 	and.w	r1, r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	03ff63ff 	.word	0x03ff63ff

08003a14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d138      	bne.n	8003a9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e032      	b.n	8003a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2224      	movs	r2, #36	; 0x24
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6819      	ldr	r1, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d139      	bne.n	8003b34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e033      	b.n	8003b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2224      	movs	r2, #36	; 0x24
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0201 	bic.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003afc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e000      	b.n	8003b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
  }
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d141      	bne.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b52:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5e:	d131      	bne.n	8003bc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b60:	4b47      	ldr	r3, [pc, #284]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b66:	4a46      	ldr	r2, [pc, #280]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b70:	4b43      	ldr	r3, [pc, #268]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b78:	4a41      	ldr	r2, [pc, #260]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b80:	4b40      	ldr	r3, [pc, #256]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2232      	movs	r2, #50	; 0x32
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	4a3f      	ldr	r2, [pc, #252]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	0c9b      	lsrs	r3, r3, #18
 8003b92:	3301      	adds	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b96:	e002      	b.n	8003b9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b9e:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003baa:	d102      	bne.n	8003bb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f2      	bne.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bb2:	4b33      	ldr	r3, [pc, #204]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbe:	d158      	bne.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e057      	b.n	8003c74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bc4:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bca:	4a2d      	ldr	r2, [pc, #180]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bd4:	e04d      	b.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bdc:	d141      	bne.n	8003c62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bde:	4b28      	ldr	r3, [pc, #160]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bea:	d131      	bne.n	8003c50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bec:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf2:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bfc:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c04:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2232      	movs	r2, #50	; 0x32
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c18:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1c:	0c9b      	lsrs	r3, r3, #18
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c22:	e002      	b.n	8003c2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c36:	d102      	bne.n	8003c3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f2      	bne.n	8003c24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4a:	d112      	bne.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e011      	b.n	8003c74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c60:	e007      	b.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c6a:	4a05      	ldr	r2, [pc, #20]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40007000 	.word	0x40007000
 8003c84:	20000000 	.word	0x20000000
 8003c88:	431bde83 	.word	0x431bde83

08003c8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c9a:	6093      	str	r3, [r2, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40007000 	.word	0x40007000

08003cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e306      	b.n	80042cc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d075      	beq.n	8003db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cca:	4b97      	ldr	r3, [pc, #604]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd4:	4b94      	ldr	r3, [pc, #592]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b0c      	cmp	r3, #12
 8003ce2:	d102      	bne.n	8003cea <HAL_RCC_OscConfig+0x3e>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d002      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x44>
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d10b      	bne.n	8003d08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf0:	4b8d      	ldr	r3, [pc, #564]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d05b      	beq.n	8003db4 <HAL_RCC_OscConfig+0x108>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d157      	bne.n	8003db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e2e1      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d106      	bne.n	8003d20 <HAL_RCC_OscConfig+0x74>
 8003d12:	4b85      	ldr	r3, [pc, #532]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a84      	ldr	r2, [pc, #528]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e01d      	b.n	8003d5c <HAL_RCC_OscConfig+0xb0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x98>
 8003d2a:	4b7f      	ldr	r3, [pc, #508]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7e      	ldr	r2, [pc, #504]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b7c      	ldr	r3, [pc, #496]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a7b      	ldr	r2, [pc, #492]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e00b      	b.n	8003d5c <HAL_RCC_OscConfig+0xb0>
 8003d44:	4b78      	ldr	r3, [pc, #480]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a77      	ldr	r2, [pc, #476]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	4b75      	ldr	r3, [pc, #468]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a74      	ldr	r2, [pc, #464]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d013      	beq.n	8003d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fe fada 	bl	800231c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fe fad6 	bl	800231c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e2a6      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d7e:	4b6a      	ldr	r3, [pc, #424]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0xc0>
 8003d8a:	e014      	b.n	8003db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe fac6 	bl	800231c <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d94:	f7fe fac2 	bl	800231c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	; 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e292      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003da6:	4b60      	ldr	r3, [pc, #384]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0xe8>
 8003db2:	e000      	b.n	8003db6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d075      	beq.n	8003eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc2:	4b59      	ldr	r3, [pc, #356]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dcc:	4b56      	ldr	r3, [pc, #344]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	d102      	bne.n	8003de2 <HAL_RCC_OscConfig+0x136>
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d002      	beq.n	8003de8 <HAL_RCC_OscConfig+0x13c>
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d11f      	bne.n	8003e28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003de8:	4b4f      	ldr	r3, [pc, #316]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_OscConfig+0x154>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e265      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e00:	4b49      	ldr	r3, [pc, #292]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	4946      	ldr	r1, [pc, #280]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e14:	4b45      	ldr	r3, [pc, #276]	; (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fa33 	bl	8002284 <HAL_InitTick>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d043      	beq.n	8003eac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e251      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d023      	beq.n	8003e78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e30:	4b3d      	ldr	r3, [pc, #244]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a3c      	ldr	r2, [pc, #240]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fa6e 	bl	800231c <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e44:	f7fe fa6a 	bl	800231c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e23a      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e56:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e62:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	061b      	lsls	r3, r3, #24
 8003e70:	492d      	ldr	r1, [pc, #180]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
 8003e76:	e01a      	b.n	8003eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e78:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2a      	ldr	r2, [pc, #168]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fe fa4a 	bl	800231c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8c:	f7fe fa46 	bl	800231c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e216      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e9e:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x1e0>
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d041      	beq.n	8003f3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01c      	beq.n	8003efc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec2:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec8:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fe fa23 	bl	800231c <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eda:	f7fe fa1f 	bl	800231c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e1ef      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eec:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ef      	beq.n	8003eda <HAL_RCC_OscConfig+0x22e>
 8003efa:	e020      	b.n	8003f3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fe fa06 	bl	800231c <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f12:	e00d      	b.n	8003f30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f14:	f7fe fa02 	bl	800231c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d906      	bls.n	8003f30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e1d2      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
 8003f26:	bf00      	nop
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f30:	4b8c      	ldr	r3, [pc, #560]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ea      	bne.n	8003f14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80a6 	beq.w	8004098 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f50:	4b84      	ldr	r3, [pc, #528]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2b4>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x2b6>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	4b7f      	ldr	r3, [pc, #508]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	4a7e      	ldr	r2, [pc, #504]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6593      	str	r3, [r2, #88]	; 0x58
 8003f72:	4b7c      	ldr	r3, [pc, #496]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f82:	4b79      	ldr	r3, [pc, #484]	; (8004168 <HAL_RCC_OscConfig+0x4bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d118      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f8e:	4b76      	ldr	r3, [pc, #472]	; (8004168 <HAL_RCC_OscConfig+0x4bc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a75      	ldr	r2, [pc, #468]	; (8004168 <HAL_RCC_OscConfig+0x4bc>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9a:	f7fe f9bf 	bl	800231c <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa2:	f7fe f9bb 	bl	800231c <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e18b      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb4:	4b6c      	ldr	r3, [pc, #432]	; (8004168 <HAL_RCC_OscConfig+0x4bc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d108      	bne.n	8003fda <HAL_RCC_OscConfig+0x32e>
 8003fc8:	4b66      	ldr	r3, [pc, #408]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	4a65      	ldr	r2, [pc, #404]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fd8:	e024      	b.n	8004024 <HAL_RCC_OscConfig+0x378>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d110      	bne.n	8004004 <HAL_RCC_OscConfig+0x358>
 8003fe2:	4b60      	ldr	r3, [pc, #384]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	4a5e      	ldr	r2, [pc, #376]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003fea:	f043 0304 	orr.w	r3, r3, #4
 8003fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	4a5a      	ldr	r2, [pc, #360]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004002:	e00f      	b.n	8004024 <HAL_RCC_OscConfig+0x378>
 8004004:	4b57      	ldr	r3, [pc, #348]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	4a56      	ldr	r2, [pc, #344]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004014:	4b53      	ldr	r3, [pc, #332]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	4a52      	ldr	r2, [pc, #328]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d016      	beq.n	800405a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fe f976 	bl	800231c <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004034:	f7fe f972 	bl	800231c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e140      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404a:	4b46      	ldr	r3, [pc, #280]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ed      	beq.n	8004034 <HAL_RCC_OscConfig+0x388>
 8004058:	e015      	b.n	8004086 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fe f95f 	bl	800231c <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fe f95b 	bl	800231c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e129      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004078:	4b3a      	ldr	r3, [pc, #232]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1ed      	bne.n	8004062 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004086:	7ffb      	ldrb	r3, [r7, #31]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408c:	4b35      	ldr	r3, [pc, #212]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	4a34      	ldr	r2, [pc, #208]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004096:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d03c      	beq.n	800411e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01c      	beq.n	80040e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040ac:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040b2:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fe f92e 	bl	800231c <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040c4:	f7fe f92a 	bl	800231c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e0fa      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040d6:	4b23      	ldr	r3, [pc, #140]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ef      	beq.n	80040c4 <HAL_RCC_OscConfig+0x418>
 80040e4:	e01b      	b.n	800411e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040e6:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040ec:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f6:	f7fe f911 	bl	800231c <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040fe:	f7fe f90d 	bl	800231c <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e0dd      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ef      	bne.n	80040fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80d1 	beq.w	80042ca <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b0c      	cmp	r3, #12
 8004132:	f000 808b 	beq.w	800424c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d15e      	bne.n	80041fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a08      	ldr	r2, [pc, #32]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004144:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fe f8e7 	bl	800231c <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004150:	e00c      	b.n	800416c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004152:	f7fe f8e3 	bl	800231c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d905      	bls.n	800416c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e0b3      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
 8004164:	40021000 	.word	0x40021000
 8004168:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416c:	4b59      	ldr	r3, [pc, #356]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1ec      	bne.n	8004152 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004178:	4b56      	ldr	r3, [pc, #344]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	4b56      	ldr	r3, [pc, #344]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800417e:	4013      	ands	r3, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6a11      	ldr	r1, [r2, #32]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004188:	3a01      	subs	r2, #1
 800418a:	0112      	lsls	r2, r2, #4
 800418c:	4311      	orrs	r1, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004192:	0212      	lsls	r2, r2, #8
 8004194:	4311      	orrs	r1, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800419a:	0852      	lsrs	r2, r2, #1
 800419c:	3a01      	subs	r2, #1
 800419e:	0552      	lsls	r2, r2, #21
 80041a0:	4311      	orrs	r1, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041a6:	0852      	lsrs	r2, r2, #1
 80041a8:	3a01      	subs	r2, #1
 80041aa:	0652      	lsls	r2, r2, #25
 80041ac:	4311      	orrs	r1, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041b2:	06d2      	lsls	r2, r2, #27
 80041b4:	430a      	orrs	r2, r1
 80041b6:	4947      	ldr	r1, [pc, #284]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041bc:	4b45      	ldr	r3, [pc, #276]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a44      	ldr	r2, [pc, #272]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 80041c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041c8:	4b42      	ldr	r3, [pc, #264]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a41      	ldr	r2, [pc, #260]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 80041ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fe f8a2 	bl	800231c <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fe f89e 	bl	800231c <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e06e      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ee:	4b39      	ldr	r3, [pc, #228]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x530>
 80041fa:	e066      	b.n	80042ca <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4b35      	ldr	r3, [pc, #212]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a34      	ldr	r2, [pc, #208]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 8004202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004206:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004208:	4b32      	ldr	r3, [pc, #200]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4a31      	ldr	r2, [pc, #196]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004214:	4b2f      	ldr	r3, [pc, #188]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a2e      	ldr	r2, [pc, #184]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 800421a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800421e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004222:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fe f87a 	bl	800231c <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422c:	f7fe f876 	bl	800231c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e046      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800423e:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x580>
 800424a:	e03e      	b.n	80042ca <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e039      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004258:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <HAL_RCC_OscConfig+0x628>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 0203 	and.w	r2, r3, #3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	429a      	cmp	r2, r3
 800426a:	d12c      	bne.n	80042c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	3b01      	subs	r3, #1
 8004278:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d123      	bne.n	80042c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d11b      	bne.n	80042c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d113      	bne.n	80042c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	085b      	lsrs	r3, r3, #1
 80042aa:	3b01      	subs	r3, #1
 80042ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d109      	bne.n	80042c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	3b01      	subs	r3, #1
 80042c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d001      	beq.n	80042ca <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000
 80042d8:	019f800c 	.word	0x019f800c

080042dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e11e      	b.n	8004532 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042f4:	4b91      	ldr	r3, [pc, #580]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d910      	bls.n	8004324 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b8e      	ldr	r3, [pc, #568]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 020f 	bic.w	r2, r3, #15
 800430a:	498c      	ldr	r1, [pc, #560]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b8a      	ldr	r3, [pc, #552]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e106      	b.n	8004532 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d073      	beq.n	8004418 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d129      	bne.n	800438c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004338:	4b81      	ldr	r3, [pc, #516]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0f4      	b.n	8004532 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004348:	f000 f99e 	bl	8004688 <RCC_GetSysClockFreqFromPLLSource>
 800434c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4a7c      	ldr	r2, [pc, #496]	; (8004544 <HAL_RCC_ClockConfig+0x268>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d93f      	bls.n	80043d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004356:	4b7a      	ldr	r3, [pc, #488]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800436a:	2b00      	cmp	r3, #0
 800436c:	d033      	beq.n	80043d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004372:	2b00      	cmp	r3, #0
 8004374:	d12f      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004376:	4b72      	ldr	r3, [pc, #456]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800437e:	4a70      	ldr	r2, [pc, #448]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004384:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	e024      	b.n	80043d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004394:	4b6a      	ldr	r3, [pc, #424]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0c6      	b.n	8004532 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a4:	4b66      	ldr	r3, [pc, #408]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0be      	b.n	8004532 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043b4:	f000 f8ce 	bl	8004554 <HAL_RCC_GetSysClockFreq>
 80043b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4a61      	ldr	r2, [pc, #388]	; (8004544 <HAL_RCC_ClockConfig+0x268>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d909      	bls.n	80043d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043c2:	4b5f      	ldr	r3, [pc, #380]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ca:	4a5d      	ldr	r2, [pc, #372]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043d6:	4b5a      	ldr	r3, [pc, #360]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f023 0203 	bic.w	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4957      	ldr	r1, [pc, #348]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e8:	f7fd ff98 	bl	800231c <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f0:	f7fd ff94 	bl	800231c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e095      	b.n	8004532 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	4b4e      	ldr	r3, [pc, #312]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 020c 	and.w	r2, r3, #12
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	429a      	cmp	r2, r3
 8004416:	d1eb      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d023      	beq.n	800446c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004430:	4b43      	ldr	r3, [pc, #268]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4a42      	ldr	r2, [pc, #264]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004436:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800443a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004448:	4b3d      	ldr	r3, [pc, #244]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004450:	4a3b      	ldr	r2, [pc, #236]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004452:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004456:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004458:	4b39      	ldr	r3, [pc, #228]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4936      	ldr	r1, [pc, #216]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004466:	4313      	orrs	r3, r2
 8004468:	608b      	str	r3, [r1, #8]
 800446a:	e008      	b.n	800447e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b80      	cmp	r3, #128	; 0x80
 8004470:	d105      	bne.n	800447e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004472:	4b33      	ldr	r3, [pc, #204]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	4a32      	ldr	r2, [pc, #200]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004478:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800447e:	4b2f      	ldr	r3, [pc, #188]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d21d      	bcs.n	80044c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448c:	4b2b      	ldr	r3, [pc, #172]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f023 020f 	bic.w	r2, r3, #15
 8004494:	4929      	ldr	r1, [pc, #164]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800449c:	f7fd ff3e 	bl	800231c <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a2:	e00a      	b.n	80044ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a4:	f7fd ff3a 	bl	800231c <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e03b      	b.n	8004532 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b20      	ldr	r3, [pc, #128]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1ed      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d4:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4917      	ldr	r1, [pc, #92]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044f2:	4b13      	ldr	r3, [pc, #76]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	490f      	ldr	r1, [pc, #60]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004506:	f000 f825 	bl	8004554 <HAL_RCC_GetSysClockFreq>
 800450a:	4602      	mov	r2, r0
 800450c:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	091b      	lsrs	r3, r3, #4
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	490c      	ldr	r1, [pc, #48]	; (8004548 <HAL_RCC_ClockConfig+0x26c>)
 8004518:	5ccb      	ldrb	r3, [r1, r3]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	fa22 f303 	lsr.w	r3, r2, r3
 8004522:	4a0a      	ldr	r2, [pc, #40]	; (800454c <HAL_RCC_ClockConfig+0x270>)
 8004524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_RCC_ClockConfig+0x274>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fd feaa 	bl	8002284 <HAL_InitTick>
 8004530:	4603      	mov	r3, r0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40022000 	.word	0x40022000
 8004540:	40021000 	.word	0x40021000
 8004544:	04c4b400 	.word	0x04c4b400
 8004548:	0800b54c 	.word	0x0800b54c
 800454c:	20000000 	.word	0x20000000
 8004550:	20000004 	.word	0x20000004

08004554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800455a:	4b2c      	ldr	r3, [pc, #176]	; (800460c <HAL_RCC_GetSysClockFreq+0xb8>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
 8004562:	2b04      	cmp	r3, #4
 8004564:	d102      	bne.n	800456c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004566:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	e047      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800456c:	4b27      	ldr	r3, [pc, #156]	; (800460c <HAL_RCC_GetSysClockFreq+0xb8>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b08      	cmp	r3, #8
 8004576:	d102      	bne.n	800457e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004578:	4b26      	ldr	r3, [pc, #152]	; (8004614 <HAL_RCC_GetSysClockFreq+0xc0>)
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	e03e      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800457e:	4b23      	ldr	r3, [pc, #140]	; (800460c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d136      	bne.n	80045f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_RCC_GetSysClockFreq+0xb8>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004594:	4b1d      	ldr	r3, [pc, #116]	; (800460c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	3301      	adds	r3, #1
 80045a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d10c      	bne.n	80045c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045a8:	4a1a      	ldr	r2, [pc, #104]	; (8004614 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	4a16      	ldr	r2, [pc, #88]	; (800460c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045b2:	68d2      	ldr	r2, [r2, #12]
 80045b4:	0a12      	lsrs	r2, r2, #8
 80045b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	617b      	str	r3, [r7, #20]
      break;
 80045c0:	e00c      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045c2:	4a13      	ldr	r2, [pc, #76]	; (8004610 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	4a10      	ldr	r2, [pc, #64]	; (800460c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045cc:	68d2      	ldr	r2, [r2, #12]
 80045ce:	0a12      	lsrs	r2, r2, #8
 80045d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045d4:	fb02 f303 	mul.w	r3, r2, r3
 80045d8:	617b      	str	r3, [r7, #20]
      break;
 80045da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	0e5b      	lsrs	r3, r3, #25
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	3301      	adds	r3, #1
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	e001      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80045fc:	693b      	ldr	r3, [r7, #16]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	00f42400 	.word	0x00f42400
 8004614:	016e3600 	.word	0x016e3600

08004618 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <HAL_RCC_GetHCLKFreq+0x14>)
 800461e:	681b      	ldr	r3, [r3, #0]
}
 8004620:	4618      	mov	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20000000 	.word	0x20000000

08004630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004634:	f7ff fff0 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 8004638:	4602      	mov	r2, r0
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <HAL_RCC_GetPCLK1Freq+0x24>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	0a1b      	lsrs	r3, r3, #8
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	4904      	ldr	r1, [pc, #16]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004646:	5ccb      	ldrb	r3, [r1, r3]
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	0800b55c 	.word	0x0800b55c

0800465c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004660:	f7ff ffda 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	0adb      	lsrs	r3, r3, #11
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4904      	ldr	r1, [pc, #16]	; (8004684 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000
 8004684:	0800b55c 	.word	0x0800b55c

08004688 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800468e:	4b1e      	ldr	r3, [pc, #120]	; (8004708 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004698:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	3301      	adds	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d10c      	bne.n	80046c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046ac:	4a17      	ldr	r2, [pc, #92]	; (800470c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b4:	4a14      	ldr	r2, [pc, #80]	; (8004708 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046b6:	68d2      	ldr	r2, [r2, #12]
 80046b8:	0a12      	lsrs	r2, r2, #8
 80046ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	617b      	str	r3, [r7, #20]
    break;
 80046c4:	e00c      	b.n	80046e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046c6:	4a12      	ldr	r2, [pc, #72]	; (8004710 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ce:	4a0e      	ldr	r2, [pc, #56]	; (8004708 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046d0:	68d2      	ldr	r2, [r2, #12]
 80046d2:	0a12      	lsrs	r2, r2, #8
 80046d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	617b      	str	r3, [r7, #20]
    break;
 80046de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	0e5b      	lsrs	r3, r3, #25
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	3301      	adds	r3, #1
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80046fa:	687b      	ldr	r3, [r7, #4]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40021000 	.word	0x40021000
 800470c:	016e3600 	.word	0x016e3600
 8004710:	00f42400 	.word	0x00f42400

08004714 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800471c:	2300      	movs	r3, #0
 800471e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004720:	2300      	movs	r3, #0
 8004722:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8098 	beq.w	8004862 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004732:	2300      	movs	r3, #0
 8004734:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004736:	4b43      	ldr	r3, [pc, #268]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10d      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004742:	4b40      	ldr	r3, [pc, #256]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	4a3f      	ldr	r2, [pc, #252]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474c:	6593      	str	r3, [r2, #88]	; 0x58
 800474e:	4b3d      	ldr	r3, [pc, #244]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475a:	2301      	movs	r3, #1
 800475c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800475e:	4b3a      	ldr	r3, [pc, #232]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a39      	ldr	r2, [pc, #228]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004768:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800476a:	f7fd fdd7 	bl	800231c <HAL_GetTick>
 800476e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004770:	e009      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004772:	f7fd fdd3 	bl	800231c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d902      	bls.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	74fb      	strb	r3, [r7, #19]
        break;
 8004784:	e005      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004786:	4b30      	ldr	r3, [pc, #192]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0ef      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004792:	7cfb      	ldrb	r3, [r7, #19]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d159      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004798:	4b2a      	ldr	r3, [pc, #168]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01e      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d019      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047b4:	4b23      	ldr	r3, [pc, #140]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047c0:	4b20      	ldr	r3, [pc, #128]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047d0:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047e0:	4a18      	ldr	r2, [pc, #96]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d016      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f2:	f7fd fd93 	bl	800231c <HAL_GetTick>
 80047f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f8:	e00b      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fa:	f7fd fd8f 	bl	800231c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	f241 3288 	movw	r2, #5000	; 0x1388
 8004808:	4293      	cmp	r3, r2
 800480a:	d902      	bls.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	74fb      	strb	r3, [r7, #19]
            break;
 8004810:	e006      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004812:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0ec      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004826:	4b07      	ldr	r3, [pc, #28]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	4903      	ldr	r1, [pc, #12]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800483c:	e008      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800483e:	7cfb      	ldrb	r3, [r7, #19]
 8004840:	74bb      	strb	r3, [r7, #18]
 8004842:	e005      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004844:	40021000 	.word	0x40021000
 8004848:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484c:	7cfb      	ldrb	r3, [r7, #19]
 800484e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004850:	7c7b      	ldrb	r3, [r7, #17]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d105      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004856:	4ba6      	ldr	r3, [pc, #664]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485a:	4aa5      	ldr	r2, [pc, #660]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800485c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004860:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800486e:	4ba0      	ldr	r3, [pc, #640]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f023 0203 	bic.w	r2, r3, #3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	499c      	ldr	r1, [pc, #624]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004890:	4b97      	ldr	r3, [pc, #604]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	f023 020c 	bic.w	r2, r3, #12
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	4994      	ldr	r1, [pc, #592]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048b2:	4b8f      	ldr	r3, [pc, #572]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	498b      	ldr	r1, [pc, #556]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048d4:	4b86      	ldr	r3, [pc, #536]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	4983      	ldr	r1, [pc, #524]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048f6:	4b7e      	ldr	r3, [pc, #504]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	497a      	ldr	r1, [pc, #488]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004918:	4b75      	ldr	r3, [pc, #468]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	4972      	ldr	r1, [pc, #456]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800493a:	4b6d      	ldr	r3, [pc, #436]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	4969      	ldr	r1, [pc, #420]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800495c:	4b64      	ldr	r3, [pc, #400]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	4961      	ldr	r1, [pc, #388]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800497e:	4b5c      	ldr	r3, [pc, #368]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	4958      	ldr	r1, [pc, #352]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d015      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049a0:	4b53      	ldr	r3, [pc, #332]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	4950      	ldr	r1, [pc, #320]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049be:	d105      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c0:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4a4a      	ldr	r2, [pc, #296]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d015      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049d8:	4b45      	ldr	r3, [pc, #276]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	4942      	ldr	r1, [pc, #264]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f6:	d105      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f8:	4b3d      	ldr	r3, [pc, #244]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4a3c      	ldr	r2, [pc, #240]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a02:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d015      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a10:	4b37      	ldr	r3, [pc, #220]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	4934      	ldr	r1, [pc, #208]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a2e:	d105      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a30:	4b2f      	ldr	r3, [pc, #188]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a2e      	ldr	r2, [pc, #184]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d015      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a48:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a56:	4926      	ldr	r1, [pc, #152]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a66:	d105      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a68:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d015      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a80:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	4918      	ldr	r1, [pc, #96]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a9e:	d105      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa0:	4b13      	ldr	r3, [pc, #76]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4a12      	ldr	r2, [pc, #72]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aaa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d015      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ab8:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	490a      	ldr	r1, [pc, #40]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ad6:	d105      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	4a04      	ldr	r2, [pc, #16]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ae4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000

08004af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e042      	b.n	8004b8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7fd fb19 	bl	8002150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2224      	movs	r2, #36	; 0x24
 8004b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0201 	bic.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f8c2 	bl	8004cc0 <UART_SetConfig>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e022      	b.n	8004b8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fb82 	bl	8005258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fc09 	bl	800539c <UART_CheckIdleState>
 8004b8a:	4603      	mov	r3, r0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	; 0x28
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	f040 8083 	bne.w	8004cb6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_UART_Transmit+0x28>
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e07b      	b.n	8004cb8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_UART_Transmit+0x3a>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e074      	b.n	8004cb8 <HAL_UART_Transmit+0x124>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2221      	movs	r2, #33	; 0x21
 8004be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004be6:	f7fd fb99 	bl	800231c <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	88fa      	ldrh	r2, [r7, #6]
 8004bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c04:	d108      	bne.n	8004c18 <HAL_UART_Transmit+0x84>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e003      	b.n	8004c20 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004c28:	e02c      	b.n	8004c84 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	2180      	movs	r1, #128	; 0x80
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fbfc 	bl	8005432 <UART_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e039      	b.n	8004cb8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e007      	b.n	8004c72 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1cc      	bne.n	8004c2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2200      	movs	r2, #0
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 fbc9 	bl	8005432 <UART_WaitOnFlagUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e006      	b.n	8004cb8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e000      	b.n	8004cb8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
  }
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc4:	b08c      	sub	sp, #48	; 0x30
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4bab      	ldr	r3, [pc, #684]	; (8004f9c <UART_SetConfig+0x2dc>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4aa0      	ldr	r2, [pc, #640]	; (8004fa0 <UART_SetConfig+0x2e0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	f023 010f 	bic.w	r1, r3, #15
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a91      	ldr	r2, [pc, #580]	; (8004fa4 <UART_SetConfig+0x2e4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d125      	bne.n	8004db0 <UART_SetConfig+0xf0>
 8004d64:	4b90      	ldr	r3, [pc, #576]	; (8004fa8 <UART_SetConfig+0x2e8>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d81a      	bhi.n	8004da8 <UART_SetConfig+0xe8>
 8004d72:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <UART_SetConfig+0xb8>)
 8004d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d78:	08004d89 	.word	0x08004d89
 8004d7c:	08004d99 	.word	0x08004d99
 8004d80:	08004d91 	.word	0x08004d91
 8004d84:	08004da1 	.word	0x08004da1
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8e:	e0d6      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004d90:	2302      	movs	r3, #2
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d96:	e0d2      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004d98:	2304      	movs	r3, #4
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9e:	e0ce      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004da0:	2308      	movs	r3, #8
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da6:	e0ca      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004da8:	2310      	movs	r3, #16
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dae:	e0c6      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a7d      	ldr	r2, [pc, #500]	; (8004fac <UART_SetConfig+0x2ec>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d138      	bne.n	8004e2c <UART_SetConfig+0x16c>
 8004dba:	4b7b      	ldr	r3, [pc, #492]	; (8004fa8 <UART_SetConfig+0x2e8>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc0:	f003 030c 	and.w	r3, r3, #12
 8004dc4:	2b0c      	cmp	r3, #12
 8004dc6:	d82d      	bhi.n	8004e24 <UART_SetConfig+0x164>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <UART_SetConfig+0x110>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004e05 	.word	0x08004e05
 8004dd4:	08004e25 	.word	0x08004e25
 8004dd8:	08004e25 	.word	0x08004e25
 8004ddc:	08004e25 	.word	0x08004e25
 8004de0:	08004e15 	.word	0x08004e15
 8004de4:	08004e25 	.word	0x08004e25
 8004de8:	08004e25 	.word	0x08004e25
 8004dec:	08004e25 	.word	0x08004e25
 8004df0:	08004e0d 	.word	0x08004e0d
 8004df4:	08004e25 	.word	0x08004e25
 8004df8:	08004e25 	.word	0x08004e25
 8004dfc:	08004e25 	.word	0x08004e25
 8004e00:	08004e1d 	.word	0x08004e1d
 8004e04:	2300      	movs	r3, #0
 8004e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0a:	e098      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e12:	e094      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004e14:	2304      	movs	r3, #4
 8004e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e1a:	e090      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e22:	e08c      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004e24:	2310      	movs	r3, #16
 8004e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e2a:	e088      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a5f      	ldr	r2, [pc, #380]	; (8004fb0 <UART_SetConfig+0x2f0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d125      	bne.n	8004e82 <UART_SetConfig+0x1c2>
 8004e36:	4b5c      	ldr	r3, [pc, #368]	; (8004fa8 <UART_SetConfig+0x2e8>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e40:	2b30      	cmp	r3, #48	; 0x30
 8004e42:	d016      	beq.n	8004e72 <UART_SetConfig+0x1b2>
 8004e44:	2b30      	cmp	r3, #48	; 0x30
 8004e46:	d818      	bhi.n	8004e7a <UART_SetConfig+0x1ba>
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d00a      	beq.n	8004e62 <UART_SetConfig+0x1a2>
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d814      	bhi.n	8004e7a <UART_SetConfig+0x1ba>
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <UART_SetConfig+0x19a>
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d008      	beq.n	8004e6a <UART_SetConfig+0x1aa>
 8004e58:	e00f      	b.n	8004e7a <UART_SetConfig+0x1ba>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e60:	e06d      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004e62:	2302      	movs	r3, #2
 8004e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e68:	e069      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004e6a:	2304      	movs	r3, #4
 8004e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e70:	e065      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004e72:	2308      	movs	r3, #8
 8004e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e78:	e061      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004e7a:	2310      	movs	r3, #16
 8004e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e80:	e05d      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a4b      	ldr	r2, [pc, #300]	; (8004fb4 <UART_SetConfig+0x2f4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d125      	bne.n	8004ed8 <UART_SetConfig+0x218>
 8004e8c:	4b46      	ldr	r3, [pc, #280]	; (8004fa8 <UART_SetConfig+0x2e8>)
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e96:	2bc0      	cmp	r3, #192	; 0xc0
 8004e98:	d016      	beq.n	8004ec8 <UART_SetConfig+0x208>
 8004e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e9c:	d818      	bhi.n	8004ed0 <UART_SetConfig+0x210>
 8004e9e:	2b80      	cmp	r3, #128	; 0x80
 8004ea0:	d00a      	beq.n	8004eb8 <UART_SetConfig+0x1f8>
 8004ea2:	2b80      	cmp	r3, #128	; 0x80
 8004ea4:	d814      	bhi.n	8004ed0 <UART_SetConfig+0x210>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <UART_SetConfig+0x1f0>
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	d008      	beq.n	8004ec0 <UART_SetConfig+0x200>
 8004eae:	e00f      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eb6:	e042      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ebe:	e03e      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ec6:	e03a      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004ec8:	2308      	movs	r3, #8
 8004eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ece:	e036      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ed6:	e032      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a30      	ldr	r2, [pc, #192]	; (8004fa0 <UART_SetConfig+0x2e0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d12a      	bne.n	8004f38 <UART_SetConfig+0x278>
 8004ee2:	4b31      	ldr	r3, [pc, #196]	; (8004fa8 <UART_SetConfig+0x2e8>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004eec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ef0:	d01a      	beq.n	8004f28 <UART_SetConfig+0x268>
 8004ef2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ef6:	d81b      	bhi.n	8004f30 <UART_SetConfig+0x270>
 8004ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004efc:	d00c      	beq.n	8004f18 <UART_SetConfig+0x258>
 8004efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f02:	d815      	bhi.n	8004f30 <UART_SetConfig+0x270>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <UART_SetConfig+0x250>
 8004f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0c:	d008      	beq.n	8004f20 <UART_SetConfig+0x260>
 8004f0e:	e00f      	b.n	8004f30 <UART_SetConfig+0x270>
 8004f10:	2300      	movs	r3, #0
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f16:	e012      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f1e:	e00e      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004f20:	2304      	movs	r3, #4
 8004f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f26:	e00a      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004f28:	2308      	movs	r3, #8
 8004f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f2e:	e006      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004f30:	2310      	movs	r3, #16
 8004f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f36:	e002      	b.n	8004f3e <UART_SetConfig+0x27e>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <UART_SetConfig+0x2e0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	f040 80a8 	bne.w	800509a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d834      	bhi.n	8004fbc <UART_SetConfig+0x2fc>
 8004f52:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <UART_SetConfig+0x298>)
 8004f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004fbd 	.word	0x08004fbd
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004fbd 	.word	0x08004fbd
 8004f68:	08004f8b 	.word	0x08004f8b
 8004f6c:	08004fbd 	.word	0x08004fbd
 8004f70:	08004fbd 	.word	0x08004fbd
 8004f74:	08004fbd 	.word	0x08004fbd
 8004f78:	08004f93 	.word	0x08004f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7ff fb58 	bl	8004630 <HAL_RCC_GetPCLK1Freq>
 8004f80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f82:	e021      	b.n	8004fc8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <UART_SetConfig+0x2f8>)
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f88:	e01e      	b.n	8004fc8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f8a:	f7ff fae3 	bl	8004554 <HAL_RCC_GetSysClockFreq>
 8004f8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f90:	e01a      	b.n	8004fc8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f98:	e016      	b.n	8004fc8 <UART_SetConfig+0x308>
 8004f9a:	bf00      	nop
 8004f9c:	cfff69f3 	.word	0xcfff69f3
 8004fa0:	40008000 	.word	0x40008000
 8004fa4:	40013800 	.word	0x40013800
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40004400 	.word	0x40004400
 8004fb0:	40004800 	.word	0x40004800
 8004fb4:	40004c00 	.word	0x40004c00
 8004fb8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 812a 	beq.w	8005224 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	4a9e      	ldr	r2, [pc, #632]	; (8005250 <UART_SetConfig+0x590>)
 8004fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d305      	bcc.n	8005000 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d903      	bls.n	8005008 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005006:	e10d      	b.n	8005224 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	2200      	movs	r2, #0
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	60fa      	str	r2, [r7, #12]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	4a8e      	ldr	r2, [pc, #568]	; (8005250 <UART_SetConfig+0x590>)
 8005016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800501a:	b29b      	uxth	r3, r3
 800501c:	2200      	movs	r2, #0
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005026:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800502a:	f7fb fe55 	bl	8000cd8 <__aeabi_uldivmod>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	020b      	lsls	r3, r1, #8
 8005040:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005044:	0202      	lsls	r2, r0, #8
 8005046:	6979      	ldr	r1, [r7, #20]
 8005048:	6849      	ldr	r1, [r1, #4]
 800504a:	0849      	lsrs	r1, r1, #1
 800504c:	2000      	movs	r0, #0
 800504e:	460c      	mov	r4, r1
 8005050:	4605      	mov	r5, r0
 8005052:	eb12 0804 	adds.w	r8, r2, r4
 8005056:	eb43 0905 	adc.w	r9, r3, r5
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	469a      	mov	sl, r3
 8005062:	4693      	mov	fp, r2
 8005064:	4652      	mov	r2, sl
 8005066:	465b      	mov	r3, fp
 8005068:	4640      	mov	r0, r8
 800506a:	4649      	mov	r1, r9
 800506c:	f7fb fe34 	bl	8000cd8 <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4613      	mov	r3, r2
 8005076:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800507e:	d308      	bcc.n	8005092 <UART_SetConfig+0x3d2>
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005086:	d204      	bcs.n	8005092 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6a3a      	ldr	r2, [r7, #32]
 800508e:	60da      	str	r2, [r3, #12]
 8005090:	e0c8      	b.n	8005224 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005098:	e0c4      	b.n	8005224 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a2:	d167      	bne.n	8005174 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80050a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d828      	bhi.n	80050fe <UART_SetConfig+0x43e>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <UART_SetConfig+0x3f4>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050d9 	.word	0x080050d9
 80050b8:	080050e1 	.word	0x080050e1
 80050bc:	080050e9 	.word	0x080050e9
 80050c0:	080050ff 	.word	0x080050ff
 80050c4:	080050ef 	.word	0x080050ef
 80050c8:	080050ff 	.word	0x080050ff
 80050cc:	080050ff 	.word	0x080050ff
 80050d0:	080050ff 	.word	0x080050ff
 80050d4:	080050f7 	.word	0x080050f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d8:	f7ff faaa 	bl	8004630 <HAL_RCC_GetPCLK1Freq>
 80050dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050de:	e014      	b.n	800510a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e0:	f7ff fabc 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 80050e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050e6:	e010      	b.n	800510a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e8:	4b5a      	ldr	r3, [pc, #360]	; (8005254 <UART_SetConfig+0x594>)
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050ec:	e00d      	b.n	800510a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ee:	f7ff fa31 	bl	8004554 <HAL_RCC_GetSysClockFreq>
 80050f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050f4:	e009      	b.n	800510a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050fc:	e005      	b.n	800510a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005108:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 8089 	beq.w	8005224 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	4a4e      	ldr	r2, [pc, #312]	; (8005250 <UART_SetConfig+0x590>)
 8005118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800511c:	461a      	mov	r2, r3
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	fbb3 f3f2 	udiv	r3, r3, r2
 8005124:	005a      	lsls	r2, r3, #1
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	441a      	add	r2, r3
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	fbb2 f3f3 	udiv	r3, r2, r3
 8005136:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	2b0f      	cmp	r3, #15
 800513c:	d916      	bls.n	800516c <UART_SetConfig+0x4ac>
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005144:	d212      	bcs.n	800516c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f023 030f 	bic.w	r3, r3, #15
 800514e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	b29b      	uxth	r3, r3
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	b29a      	uxth	r2, r3
 800515c:	8bfb      	ldrh	r3, [r7, #30]
 800515e:	4313      	orrs	r3, r2
 8005160:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	8bfa      	ldrh	r2, [r7, #30]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	e05b      	b.n	8005224 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005172:	e057      	b.n	8005224 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005174:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005178:	2b08      	cmp	r3, #8
 800517a:	d828      	bhi.n	80051ce <UART_SetConfig+0x50e>
 800517c:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0x4c4>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	080051cf 	.word	0x080051cf
 8005194:	080051bf 	.word	0x080051bf
 8005198:	080051cf 	.word	0x080051cf
 800519c:	080051cf 	.word	0x080051cf
 80051a0:	080051cf 	.word	0x080051cf
 80051a4:	080051c7 	.word	0x080051c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a8:	f7ff fa42 	bl	8004630 <HAL_RCC_GetPCLK1Freq>
 80051ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051ae:	e014      	b.n	80051da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b0:	f7ff fa54 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 80051b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051b6:	e010      	b.n	80051da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b8:	4b26      	ldr	r3, [pc, #152]	; (8005254 <UART_SetConfig+0x594>)
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051bc:	e00d      	b.n	80051da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051be:	f7ff f9c9 	bl	8004554 <HAL_RCC_GetSysClockFreq>
 80051c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051c4:	e009      	b.n	80051da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051cc:	e005      	b.n	80051da <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051d8:	bf00      	nop
    }

    if (pclk != 0U)
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d021      	beq.n	8005224 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	4a1a      	ldr	r2, [pc, #104]	; (8005250 <UART_SetConfig+0x590>)
 80051e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ea:	461a      	mov	r2, r3
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	085b      	lsrs	r3, r3, #1
 80051f8:	441a      	add	r2, r3
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005202:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	2b0f      	cmp	r3, #15
 8005208:	d909      	bls.n	800521e <UART_SetConfig+0x55e>
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005210:	d205      	bcs.n	800521e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	b29a      	uxth	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60da      	str	r2, [r3, #12]
 800521c:	e002      	b.n	8005224 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2201      	movs	r2, #1
 8005228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2201      	movs	r2, #1
 8005230:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2200      	movs	r2, #0
 8005238:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2200      	movs	r2, #0
 800523e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005240:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005244:	4618      	mov	r0, r3
 8005246:	3730      	adds	r7, #48	; 0x30
 8005248:	46bd      	mov	sp, r7
 800524a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524e:	bf00      	nop
 8005250:	0800b564 	.word	0x0800b564
 8005254:	00f42400 	.word	0x00f42400

08005258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01a      	beq.n	800536e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005356:	d10a      	bne.n	800536e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	605a      	str	r2, [r3, #4]
  }
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053ac:	f7fc ffb6 	bl	800231c <HAL_GetTick>
 80053b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d10e      	bne.n	80053de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f82f 	bl	8005432 <UART_WaitOnFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e025      	b.n	800542a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d10e      	bne.n	800540a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f819 	bl	8005432 <UART_WaitOnFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e00f      	b.n	800542a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b09c      	sub	sp, #112	; 0x70
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	603b      	str	r3, [r7, #0]
 800543e:	4613      	mov	r3, r2
 8005440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005442:	e0a9      	b.n	8005598 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	f000 80a5 	beq.w	8005598 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544e:	f7fc ff65 	bl	800231c <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800545a:	429a      	cmp	r2, r3
 800545c:	d302      	bcc.n	8005464 <UART_WaitOnFlagUntilTimeout+0x32>
 800545e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005460:	2b00      	cmp	r3, #0
 8005462:	d140      	bne.n	80054e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005474:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005478:	667b      	str	r3, [r7, #100]	; 0x64
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005484:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e6      	bne.n	8005464 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3308      	adds	r3, #8
 800549c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	663b      	str	r3, [r7, #96]	; 0x60
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80054b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e5      	bne.n	8005496 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e069      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d051      	beq.n	8005598 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005502:	d149      	bne.n	8005598 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800550c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552c:	637b      	str	r3, [r7, #52]	; 0x34
 800552e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e6      	bne.n	800550e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3308      	adds	r3, #8
 8005546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	613b      	str	r3, [r7, #16]
   return(result);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	66bb      	str	r3, [r7, #104]	; 0x68
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3308      	adds	r3, #8
 800555e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005560:	623a      	str	r2, [r7, #32]
 8005562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	69f9      	ldr	r1, [r7, #28]
 8005566:	6a3a      	ldr	r2, [r7, #32]
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	61bb      	str	r3, [r7, #24]
   return(result);
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e5      	bne.n	8005540 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e010      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4013      	ands	r3, r2
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	bf0c      	ite	eq
 80055a8:	2301      	moveq	r3, #1
 80055aa:	2300      	movne	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	f43f af46 	beq.w	8005444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3770      	adds	r7, #112	; 0x70
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e027      	b.n	8005628 <HAL_UARTEx_DisableFifoMode+0x66>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2224      	movs	r2, #36	; 0x24
 80055e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005606:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2220      	movs	r2, #32
 800561a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005648:	2302      	movs	r3, #2
 800564a:	e02d      	b.n	80056a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2224      	movs	r2, #36	; 0x24
 8005658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f84f 	bl	800572c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e02d      	b.n	8005724 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2224      	movs	r2, #36	; 0x24
 80056d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0201 	bic.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f811 	bl	800572c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005738:	2b00      	cmp	r3, #0
 800573a:	d108      	bne.n	800574e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800574c:	e031      	b.n	80057b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800574e:	2308      	movs	r3, #8
 8005750:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005752:	2308      	movs	r3, #8
 8005754:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	0e5b      	lsrs	r3, r3, #25
 800575e:	b2db      	uxtb	r3, r3
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	0f5b      	lsrs	r3, r3, #29
 800576e:	b2db      	uxtb	r3, r3
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005776:	7bbb      	ldrb	r3, [r7, #14]
 8005778:	7b3a      	ldrb	r2, [r7, #12]
 800577a:	4911      	ldr	r1, [pc, #68]	; (80057c0 <UARTEx_SetNbDataToProcess+0x94>)
 800577c:	5c8a      	ldrb	r2, [r1, r2]
 800577e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005782:	7b3a      	ldrb	r2, [r7, #12]
 8005784:	490f      	ldr	r1, [pc, #60]	; (80057c4 <UARTEx_SetNbDataToProcess+0x98>)
 8005786:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005788:	fb93 f3f2 	sdiv	r3, r3, r2
 800578c:	b29a      	uxth	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	7b7a      	ldrb	r2, [r7, #13]
 8005798:	4909      	ldr	r1, [pc, #36]	; (80057c0 <UARTEx_SetNbDataToProcess+0x94>)
 800579a:	5c8a      	ldrb	r2, [r1, r2]
 800579c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057a0:	7b7a      	ldrb	r2, [r7, #13]
 80057a2:	4908      	ldr	r1, [pc, #32]	; (80057c4 <UARTEx_SetNbDataToProcess+0x98>)
 80057a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057b2:	bf00      	nop
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	0800b57c 	.word	0x0800b57c
 80057c4:	0800b584 	.word	0x0800b584

080057c8 <__errno>:
 80057c8:	4b01      	ldr	r3, [pc, #4]	; (80057d0 <__errno+0x8>)
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	2000000c 	.word	0x2000000c

080057d4 <__libc_init_array>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4d0d      	ldr	r5, [pc, #52]	; (800580c <__libc_init_array+0x38>)
 80057d8:	4c0d      	ldr	r4, [pc, #52]	; (8005810 <__libc_init_array+0x3c>)
 80057da:	1b64      	subs	r4, r4, r5
 80057dc:	10a4      	asrs	r4, r4, #2
 80057de:	2600      	movs	r6, #0
 80057e0:	42a6      	cmp	r6, r4
 80057e2:	d109      	bne.n	80057f8 <__libc_init_array+0x24>
 80057e4:	4d0b      	ldr	r5, [pc, #44]	; (8005814 <__libc_init_array+0x40>)
 80057e6:	4c0c      	ldr	r4, [pc, #48]	; (8005818 <__libc_init_array+0x44>)
 80057e8:	f005 fcc4 	bl	800b174 <_init>
 80057ec:	1b64      	subs	r4, r4, r5
 80057ee:	10a4      	asrs	r4, r4, #2
 80057f0:	2600      	movs	r6, #0
 80057f2:	42a6      	cmp	r6, r4
 80057f4:	d105      	bne.n	8005802 <__libc_init_array+0x2e>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fc:	4798      	blx	r3
 80057fe:	3601      	adds	r6, #1
 8005800:	e7ee      	b.n	80057e0 <__libc_init_array+0xc>
 8005802:	f855 3b04 	ldr.w	r3, [r5], #4
 8005806:	4798      	blx	r3
 8005808:	3601      	adds	r6, #1
 800580a:	e7f2      	b.n	80057f2 <__libc_init_array+0x1e>
 800580c:	0800ba78 	.word	0x0800ba78
 8005810:	0800ba78 	.word	0x0800ba78
 8005814:	0800ba78 	.word	0x0800ba78
 8005818:	0800ba7c 	.word	0x0800ba7c

0800581c <memset>:
 800581c:	4402      	add	r2, r0
 800581e:	4603      	mov	r3, r0
 8005820:	4293      	cmp	r3, r2
 8005822:	d100      	bne.n	8005826 <memset+0xa>
 8005824:	4770      	bx	lr
 8005826:	f803 1b01 	strb.w	r1, [r3], #1
 800582a:	e7f9      	b.n	8005820 <memset+0x4>

0800582c <__cvt>:
 800582c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005830:	ec55 4b10 	vmov	r4, r5, d0
 8005834:	2d00      	cmp	r5, #0
 8005836:	460e      	mov	r6, r1
 8005838:	4619      	mov	r1, r3
 800583a:	462b      	mov	r3, r5
 800583c:	bfbb      	ittet	lt
 800583e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005842:	461d      	movlt	r5, r3
 8005844:	2300      	movge	r3, #0
 8005846:	232d      	movlt	r3, #45	; 0x2d
 8005848:	700b      	strb	r3, [r1, #0]
 800584a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800584c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005850:	4691      	mov	r9, r2
 8005852:	f023 0820 	bic.w	r8, r3, #32
 8005856:	bfbc      	itt	lt
 8005858:	4622      	movlt	r2, r4
 800585a:	4614      	movlt	r4, r2
 800585c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005860:	d005      	beq.n	800586e <__cvt+0x42>
 8005862:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005866:	d100      	bne.n	800586a <__cvt+0x3e>
 8005868:	3601      	adds	r6, #1
 800586a:	2102      	movs	r1, #2
 800586c:	e000      	b.n	8005870 <__cvt+0x44>
 800586e:	2103      	movs	r1, #3
 8005870:	ab03      	add	r3, sp, #12
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	ab02      	add	r3, sp, #8
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	ec45 4b10 	vmov	d0, r4, r5
 800587c:	4653      	mov	r3, sl
 800587e:	4632      	mov	r2, r6
 8005880:	f001 ff12 	bl	80076a8 <_dtoa_r>
 8005884:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005888:	4607      	mov	r7, r0
 800588a:	d102      	bne.n	8005892 <__cvt+0x66>
 800588c:	f019 0f01 	tst.w	r9, #1
 8005890:	d022      	beq.n	80058d8 <__cvt+0xac>
 8005892:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005896:	eb07 0906 	add.w	r9, r7, r6
 800589a:	d110      	bne.n	80058be <__cvt+0x92>
 800589c:	783b      	ldrb	r3, [r7, #0]
 800589e:	2b30      	cmp	r3, #48	; 0x30
 80058a0:	d10a      	bne.n	80058b8 <__cvt+0x8c>
 80058a2:	2200      	movs	r2, #0
 80058a4:	2300      	movs	r3, #0
 80058a6:	4620      	mov	r0, r4
 80058a8:	4629      	mov	r1, r5
 80058aa:	f7fb f935 	bl	8000b18 <__aeabi_dcmpeq>
 80058ae:	b918      	cbnz	r0, 80058b8 <__cvt+0x8c>
 80058b0:	f1c6 0601 	rsb	r6, r6, #1
 80058b4:	f8ca 6000 	str.w	r6, [sl]
 80058b8:	f8da 3000 	ldr.w	r3, [sl]
 80058bc:	4499      	add	r9, r3
 80058be:	2200      	movs	r2, #0
 80058c0:	2300      	movs	r3, #0
 80058c2:	4620      	mov	r0, r4
 80058c4:	4629      	mov	r1, r5
 80058c6:	f7fb f927 	bl	8000b18 <__aeabi_dcmpeq>
 80058ca:	b108      	cbz	r0, 80058d0 <__cvt+0xa4>
 80058cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80058d0:	2230      	movs	r2, #48	; 0x30
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	454b      	cmp	r3, r9
 80058d6:	d307      	bcc.n	80058e8 <__cvt+0xbc>
 80058d8:	9b03      	ldr	r3, [sp, #12]
 80058da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058dc:	1bdb      	subs	r3, r3, r7
 80058de:	4638      	mov	r0, r7
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	b004      	add	sp, #16
 80058e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e8:	1c59      	adds	r1, r3, #1
 80058ea:	9103      	str	r1, [sp, #12]
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e7f0      	b.n	80058d2 <__cvt+0xa6>

080058f0 <__exponent>:
 80058f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058f2:	4603      	mov	r3, r0
 80058f4:	2900      	cmp	r1, #0
 80058f6:	bfb8      	it	lt
 80058f8:	4249      	neglt	r1, r1
 80058fa:	f803 2b02 	strb.w	r2, [r3], #2
 80058fe:	bfb4      	ite	lt
 8005900:	222d      	movlt	r2, #45	; 0x2d
 8005902:	222b      	movge	r2, #43	; 0x2b
 8005904:	2909      	cmp	r1, #9
 8005906:	7042      	strb	r2, [r0, #1]
 8005908:	dd2a      	ble.n	8005960 <__exponent+0x70>
 800590a:	f10d 0407 	add.w	r4, sp, #7
 800590e:	46a4      	mov	ip, r4
 8005910:	270a      	movs	r7, #10
 8005912:	46a6      	mov	lr, r4
 8005914:	460a      	mov	r2, r1
 8005916:	fb91 f6f7 	sdiv	r6, r1, r7
 800591a:	fb07 1516 	mls	r5, r7, r6, r1
 800591e:	3530      	adds	r5, #48	; 0x30
 8005920:	2a63      	cmp	r2, #99	; 0x63
 8005922:	f104 34ff 	add.w	r4, r4, #4294967295
 8005926:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800592a:	4631      	mov	r1, r6
 800592c:	dcf1      	bgt.n	8005912 <__exponent+0x22>
 800592e:	3130      	adds	r1, #48	; 0x30
 8005930:	f1ae 0502 	sub.w	r5, lr, #2
 8005934:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005938:	1c44      	adds	r4, r0, #1
 800593a:	4629      	mov	r1, r5
 800593c:	4561      	cmp	r1, ip
 800593e:	d30a      	bcc.n	8005956 <__exponent+0x66>
 8005940:	f10d 0209 	add.w	r2, sp, #9
 8005944:	eba2 020e 	sub.w	r2, r2, lr
 8005948:	4565      	cmp	r5, ip
 800594a:	bf88      	it	hi
 800594c:	2200      	movhi	r2, #0
 800594e:	4413      	add	r3, r2
 8005950:	1a18      	subs	r0, r3, r0
 8005952:	b003      	add	sp, #12
 8005954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800595a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800595e:	e7ed      	b.n	800593c <__exponent+0x4c>
 8005960:	2330      	movs	r3, #48	; 0x30
 8005962:	3130      	adds	r1, #48	; 0x30
 8005964:	7083      	strb	r3, [r0, #2]
 8005966:	70c1      	strb	r1, [r0, #3]
 8005968:	1d03      	adds	r3, r0, #4
 800596a:	e7f1      	b.n	8005950 <__exponent+0x60>

0800596c <_printf_float>:
 800596c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005970:	ed2d 8b02 	vpush	{d8}
 8005974:	b08d      	sub	sp, #52	; 0x34
 8005976:	460c      	mov	r4, r1
 8005978:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800597c:	4616      	mov	r6, r2
 800597e:	461f      	mov	r7, r3
 8005980:	4605      	mov	r5, r0
 8005982:	f003 f9a5 	bl	8008cd0 <_localeconv_r>
 8005986:	f8d0 a000 	ldr.w	sl, [r0]
 800598a:	4650      	mov	r0, sl
 800598c:	f7fa fc48 	bl	8000220 <strlen>
 8005990:	2300      	movs	r3, #0
 8005992:	930a      	str	r3, [sp, #40]	; 0x28
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	9305      	str	r3, [sp, #20]
 8005998:	f8d8 3000 	ldr.w	r3, [r8]
 800599c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059a0:	3307      	adds	r3, #7
 80059a2:	f023 0307 	bic.w	r3, r3, #7
 80059a6:	f103 0208 	add.w	r2, r3, #8
 80059aa:	f8c8 2000 	str.w	r2, [r8]
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80059ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059be:	9307      	str	r3, [sp, #28]
 80059c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80059c4:	ee08 0a10 	vmov	s16, r0
 80059c8:	4b9f      	ldr	r3, [pc, #636]	; (8005c48 <_printf_float+0x2dc>)
 80059ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059ce:	f04f 32ff 	mov.w	r2, #4294967295
 80059d2:	f7fb f8d3 	bl	8000b7c <__aeabi_dcmpun>
 80059d6:	bb88      	cbnz	r0, 8005a3c <_printf_float+0xd0>
 80059d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059dc:	4b9a      	ldr	r3, [pc, #616]	; (8005c48 <_printf_float+0x2dc>)
 80059de:	f04f 32ff 	mov.w	r2, #4294967295
 80059e2:	f7fb f8ad 	bl	8000b40 <__aeabi_dcmple>
 80059e6:	bb48      	cbnz	r0, 8005a3c <_printf_float+0xd0>
 80059e8:	2200      	movs	r2, #0
 80059ea:	2300      	movs	r3, #0
 80059ec:	4640      	mov	r0, r8
 80059ee:	4649      	mov	r1, r9
 80059f0:	f7fb f89c 	bl	8000b2c <__aeabi_dcmplt>
 80059f4:	b110      	cbz	r0, 80059fc <_printf_float+0x90>
 80059f6:	232d      	movs	r3, #45	; 0x2d
 80059f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059fc:	4b93      	ldr	r3, [pc, #588]	; (8005c4c <_printf_float+0x2e0>)
 80059fe:	4894      	ldr	r0, [pc, #592]	; (8005c50 <_printf_float+0x2e4>)
 8005a00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a04:	bf94      	ite	ls
 8005a06:	4698      	movls	r8, r3
 8005a08:	4680      	movhi	r8, r0
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	9b05      	ldr	r3, [sp, #20]
 8005a10:	f023 0204 	bic.w	r2, r3, #4
 8005a14:	6022      	str	r2, [r4, #0]
 8005a16:	f04f 0900 	mov.w	r9, #0
 8005a1a:	9700      	str	r7, [sp, #0]
 8005a1c:	4633      	mov	r3, r6
 8005a1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a20:	4621      	mov	r1, r4
 8005a22:	4628      	mov	r0, r5
 8005a24:	f000 f9d8 	bl	8005dd8 <_printf_common>
 8005a28:	3001      	adds	r0, #1
 8005a2a:	f040 8090 	bne.w	8005b4e <_printf_float+0x1e2>
 8005a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a32:	b00d      	add	sp, #52	; 0x34
 8005a34:	ecbd 8b02 	vpop	{d8}
 8005a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	464b      	mov	r3, r9
 8005a40:	4640      	mov	r0, r8
 8005a42:	4649      	mov	r1, r9
 8005a44:	f7fb f89a 	bl	8000b7c <__aeabi_dcmpun>
 8005a48:	b140      	cbz	r0, 8005a5c <_printf_float+0xf0>
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	bfbc      	itt	lt
 8005a50:	232d      	movlt	r3, #45	; 0x2d
 8005a52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a56:	487f      	ldr	r0, [pc, #508]	; (8005c54 <_printf_float+0x2e8>)
 8005a58:	4b7f      	ldr	r3, [pc, #508]	; (8005c58 <_printf_float+0x2ec>)
 8005a5a:	e7d1      	b.n	8005a00 <_printf_float+0x94>
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a62:	9206      	str	r2, [sp, #24]
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	d13f      	bne.n	8005ae8 <_printf_float+0x17c>
 8005a68:	2306      	movs	r3, #6
 8005a6a:	6063      	str	r3, [r4, #4]
 8005a6c:	9b05      	ldr	r3, [sp, #20]
 8005a6e:	6861      	ldr	r1, [r4, #4]
 8005a70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a74:	2300      	movs	r3, #0
 8005a76:	9303      	str	r3, [sp, #12]
 8005a78:	ab0a      	add	r3, sp, #40	; 0x28
 8005a7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a7e:	ab09      	add	r3, sp, #36	; 0x24
 8005a80:	ec49 8b10 	vmov	d0, r8, r9
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	6022      	str	r2, [r4, #0]
 8005a88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f7ff fecd 	bl	800582c <__cvt>
 8005a92:	9b06      	ldr	r3, [sp, #24]
 8005a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a96:	2b47      	cmp	r3, #71	; 0x47
 8005a98:	4680      	mov	r8, r0
 8005a9a:	d108      	bne.n	8005aae <_printf_float+0x142>
 8005a9c:	1cc8      	adds	r0, r1, #3
 8005a9e:	db02      	blt.n	8005aa6 <_printf_float+0x13a>
 8005aa0:	6863      	ldr	r3, [r4, #4]
 8005aa2:	4299      	cmp	r1, r3
 8005aa4:	dd41      	ble.n	8005b2a <_printf_float+0x1be>
 8005aa6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005aaa:	fa5f fb8b 	uxtb.w	fp, fp
 8005aae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ab2:	d820      	bhi.n	8005af6 <_printf_float+0x18a>
 8005ab4:	3901      	subs	r1, #1
 8005ab6:	465a      	mov	r2, fp
 8005ab8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005abc:	9109      	str	r1, [sp, #36]	; 0x24
 8005abe:	f7ff ff17 	bl	80058f0 <__exponent>
 8005ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ac4:	1813      	adds	r3, r2, r0
 8005ac6:	2a01      	cmp	r2, #1
 8005ac8:	4681      	mov	r9, r0
 8005aca:	6123      	str	r3, [r4, #16]
 8005acc:	dc02      	bgt.n	8005ad4 <_printf_float+0x168>
 8005ace:	6822      	ldr	r2, [r4, #0]
 8005ad0:	07d2      	lsls	r2, r2, #31
 8005ad2:	d501      	bpl.n	8005ad8 <_printf_float+0x16c>
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	6123      	str	r3, [r4, #16]
 8005ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d09c      	beq.n	8005a1a <_printf_float+0xae>
 8005ae0:	232d      	movs	r3, #45	; 0x2d
 8005ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae6:	e798      	b.n	8005a1a <_printf_float+0xae>
 8005ae8:	9a06      	ldr	r2, [sp, #24]
 8005aea:	2a47      	cmp	r2, #71	; 0x47
 8005aec:	d1be      	bne.n	8005a6c <_printf_float+0x100>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1bc      	bne.n	8005a6c <_printf_float+0x100>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e7b9      	b.n	8005a6a <_printf_float+0xfe>
 8005af6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005afa:	d118      	bne.n	8005b2e <_printf_float+0x1c2>
 8005afc:	2900      	cmp	r1, #0
 8005afe:	6863      	ldr	r3, [r4, #4]
 8005b00:	dd0b      	ble.n	8005b1a <_printf_float+0x1ae>
 8005b02:	6121      	str	r1, [r4, #16]
 8005b04:	b913      	cbnz	r3, 8005b0c <_printf_float+0x1a0>
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	07d0      	lsls	r0, r2, #31
 8005b0a:	d502      	bpl.n	8005b12 <_printf_float+0x1a6>
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	440b      	add	r3, r1
 8005b10:	6123      	str	r3, [r4, #16]
 8005b12:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b14:	f04f 0900 	mov.w	r9, #0
 8005b18:	e7de      	b.n	8005ad8 <_printf_float+0x16c>
 8005b1a:	b913      	cbnz	r3, 8005b22 <_printf_float+0x1b6>
 8005b1c:	6822      	ldr	r2, [r4, #0]
 8005b1e:	07d2      	lsls	r2, r2, #31
 8005b20:	d501      	bpl.n	8005b26 <_printf_float+0x1ba>
 8005b22:	3302      	adds	r3, #2
 8005b24:	e7f4      	b.n	8005b10 <_printf_float+0x1a4>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e7f2      	b.n	8005b10 <_printf_float+0x1a4>
 8005b2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b30:	4299      	cmp	r1, r3
 8005b32:	db05      	blt.n	8005b40 <_printf_float+0x1d4>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	6121      	str	r1, [r4, #16]
 8005b38:	07d8      	lsls	r0, r3, #31
 8005b3a:	d5ea      	bpl.n	8005b12 <_printf_float+0x1a6>
 8005b3c:	1c4b      	adds	r3, r1, #1
 8005b3e:	e7e7      	b.n	8005b10 <_printf_float+0x1a4>
 8005b40:	2900      	cmp	r1, #0
 8005b42:	bfd4      	ite	le
 8005b44:	f1c1 0202 	rsble	r2, r1, #2
 8005b48:	2201      	movgt	r2, #1
 8005b4a:	4413      	add	r3, r2
 8005b4c:	e7e0      	b.n	8005b10 <_printf_float+0x1a4>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	055a      	lsls	r2, r3, #21
 8005b52:	d407      	bmi.n	8005b64 <_printf_float+0x1f8>
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	4642      	mov	r2, r8
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b8      	blx	r7
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d12c      	bne.n	8005bbc <_printf_float+0x250>
 8005b62:	e764      	b.n	8005a2e <_printf_float+0xc2>
 8005b64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b68:	f240 80e0 	bls.w	8005d2c <_printf_float+0x3c0>
 8005b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b70:	2200      	movs	r2, #0
 8005b72:	2300      	movs	r3, #0
 8005b74:	f7fa ffd0 	bl	8000b18 <__aeabi_dcmpeq>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d034      	beq.n	8005be6 <_printf_float+0x27a>
 8005b7c:	4a37      	ldr	r2, [pc, #220]	; (8005c5c <_printf_float+0x2f0>)
 8005b7e:	2301      	movs	r3, #1
 8005b80:	4631      	mov	r1, r6
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b8      	blx	r7
 8005b86:	3001      	adds	r0, #1
 8005b88:	f43f af51 	beq.w	8005a2e <_printf_float+0xc2>
 8005b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b90:	429a      	cmp	r2, r3
 8005b92:	db02      	blt.n	8005b9a <_printf_float+0x22e>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	07d8      	lsls	r0, r3, #31
 8005b98:	d510      	bpl.n	8005bbc <_printf_float+0x250>
 8005b9a:	ee18 3a10 	vmov	r3, s16
 8005b9e:	4652      	mov	r2, sl
 8005ba0:	4631      	mov	r1, r6
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	47b8      	blx	r7
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	f43f af41 	beq.w	8005a2e <_printf_float+0xc2>
 8005bac:	f04f 0800 	mov.w	r8, #0
 8005bb0:	f104 091a 	add.w	r9, r4, #26
 8005bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	4543      	cmp	r3, r8
 8005bba:	dc09      	bgt.n	8005bd0 <_printf_float+0x264>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	079b      	lsls	r3, r3, #30
 8005bc0:	f100 8105 	bmi.w	8005dce <_printf_float+0x462>
 8005bc4:	68e0      	ldr	r0, [r4, #12]
 8005bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc8:	4298      	cmp	r0, r3
 8005bca:	bfb8      	it	lt
 8005bcc:	4618      	movlt	r0, r3
 8005bce:	e730      	b.n	8005a32 <_printf_float+0xc6>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	464a      	mov	r2, r9
 8005bd4:	4631      	mov	r1, r6
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	47b8      	blx	r7
 8005bda:	3001      	adds	r0, #1
 8005bdc:	f43f af27 	beq.w	8005a2e <_printf_float+0xc2>
 8005be0:	f108 0801 	add.w	r8, r8, #1
 8005be4:	e7e6      	b.n	8005bb4 <_printf_float+0x248>
 8005be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dc39      	bgt.n	8005c60 <_printf_float+0x2f4>
 8005bec:	4a1b      	ldr	r2, [pc, #108]	; (8005c5c <_printf_float+0x2f0>)
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	47b8      	blx	r7
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	f43f af19 	beq.w	8005a2e <_printf_float+0xc2>
 8005bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c00:	4313      	orrs	r3, r2
 8005c02:	d102      	bne.n	8005c0a <_printf_float+0x29e>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	07d9      	lsls	r1, r3, #31
 8005c08:	d5d8      	bpl.n	8005bbc <_printf_float+0x250>
 8005c0a:	ee18 3a10 	vmov	r3, s16
 8005c0e:	4652      	mov	r2, sl
 8005c10:	4631      	mov	r1, r6
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b8      	blx	r7
 8005c16:	3001      	adds	r0, #1
 8005c18:	f43f af09 	beq.w	8005a2e <_printf_float+0xc2>
 8005c1c:	f04f 0900 	mov.w	r9, #0
 8005c20:	f104 0a1a 	add.w	sl, r4, #26
 8005c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c26:	425b      	negs	r3, r3
 8005c28:	454b      	cmp	r3, r9
 8005c2a:	dc01      	bgt.n	8005c30 <_printf_float+0x2c4>
 8005c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c2e:	e792      	b.n	8005b56 <_printf_float+0x1ea>
 8005c30:	2301      	movs	r3, #1
 8005c32:	4652      	mov	r2, sl
 8005c34:	4631      	mov	r1, r6
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	f43f aef7 	beq.w	8005a2e <_printf_float+0xc2>
 8005c40:	f109 0901 	add.w	r9, r9, #1
 8005c44:	e7ee      	b.n	8005c24 <_printf_float+0x2b8>
 8005c46:	bf00      	nop
 8005c48:	7fefffff 	.word	0x7fefffff
 8005c4c:	0800b590 	.word	0x0800b590
 8005c50:	0800b594 	.word	0x0800b594
 8005c54:	0800b59c 	.word	0x0800b59c
 8005c58:	0800b598 	.word	0x0800b598
 8005c5c:	0800b5a0 	.word	0x0800b5a0
 8005c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c64:	429a      	cmp	r2, r3
 8005c66:	bfa8      	it	ge
 8005c68:	461a      	movge	r2, r3
 8005c6a:	2a00      	cmp	r2, #0
 8005c6c:	4691      	mov	r9, r2
 8005c6e:	dc37      	bgt.n	8005ce0 <_printf_float+0x374>
 8005c70:	f04f 0b00 	mov.w	fp, #0
 8005c74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c78:	f104 021a 	add.w	r2, r4, #26
 8005c7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c7e:	9305      	str	r3, [sp, #20]
 8005c80:	eba3 0309 	sub.w	r3, r3, r9
 8005c84:	455b      	cmp	r3, fp
 8005c86:	dc33      	bgt.n	8005cf0 <_printf_float+0x384>
 8005c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	db3b      	blt.n	8005d08 <_printf_float+0x39c>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	07da      	lsls	r2, r3, #31
 8005c94:	d438      	bmi.n	8005d08 <_printf_float+0x39c>
 8005c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c98:	9a05      	ldr	r2, [sp, #20]
 8005c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c9c:	1a9a      	subs	r2, r3, r2
 8005c9e:	eba3 0901 	sub.w	r9, r3, r1
 8005ca2:	4591      	cmp	r9, r2
 8005ca4:	bfa8      	it	ge
 8005ca6:	4691      	movge	r9, r2
 8005ca8:	f1b9 0f00 	cmp.w	r9, #0
 8005cac:	dc35      	bgt.n	8005d1a <_printf_float+0x3ae>
 8005cae:	f04f 0800 	mov.w	r8, #0
 8005cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cb6:	f104 0a1a 	add.w	sl, r4, #26
 8005cba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	eba3 0309 	sub.w	r3, r3, r9
 8005cc4:	4543      	cmp	r3, r8
 8005cc6:	f77f af79 	ble.w	8005bbc <_printf_float+0x250>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4652      	mov	r2, sl
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f43f aeaa 	beq.w	8005a2e <_printf_float+0xc2>
 8005cda:	f108 0801 	add.w	r8, r8, #1
 8005cde:	e7ec      	b.n	8005cba <_printf_float+0x34e>
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	d1c0      	bne.n	8005c70 <_printf_float+0x304>
 8005cee:	e69e      	b.n	8005a2e <_printf_float+0xc2>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	9205      	str	r2, [sp, #20]
 8005cf8:	47b8      	blx	r7
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	f43f ae97 	beq.w	8005a2e <_printf_float+0xc2>
 8005d00:	9a05      	ldr	r2, [sp, #20]
 8005d02:	f10b 0b01 	add.w	fp, fp, #1
 8005d06:	e7b9      	b.n	8005c7c <_printf_float+0x310>
 8005d08:	ee18 3a10 	vmov	r3, s16
 8005d0c:	4652      	mov	r2, sl
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4628      	mov	r0, r5
 8005d12:	47b8      	blx	r7
 8005d14:	3001      	adds	r0, #1
 8005d16:	d1be      	bne.n	8005c96 <_printf_float+0x32a>
 8005d18:	e689      	b.n	8005a2e <_printf_float+0xc2>
 8005d1a:	9a05      	ldr	r2, [sp, #20]
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	4442      	add	r2, r8
 8005d20:	4631      	mov	r1, r6
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b8      	blx	r7
 8005d26:	3001      	adds	r0, #1
 8005d28:	d1c1      	bne.n	8005cae <_printf_float+0x342>
 8005d2a:	e680      	b.n	8005a2e <_printf_float+0xc2>
 8005d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d2e:	2a01      	cmp	r2, #1
 8005d30:	dc01      	bgt.n	8005d36 <_printf_float+0x3ca>
 8005d32:	07db      	lsls	r3, r3, #31
 8005d34:	d538      	bpl.n	8005da8 <_printf_float+0x43c>
 8005d36:	2301      	movs	r3, #1
 8005d38:	4642      	mov	r2, r8
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	f43f ae74 	beq.w	8005a2e <_printf_float+0xc2>
 8005d46:	ee18 3a10 	vmov	r3, s16
 8005d4a:	4652      	mov	r2, sl
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4628      	mov	r0, r5
 8005d50:	47b8      	blx	r7
 8005d52:	3001      	adds	r0, #1
 8005d54:	f43f ae6b 	beq.w	8005a2e <_printf_float+0xc2>
 8005d58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f7fa feda 	bl	8000b18 <__aeabi_dcmpeq>
 8005d64:	b9d8      	cbnz	r0, 8005d9e <_printf_float+0x432>
 8005d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d68:	f108 0201 	add.w	r2, r8, #1
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b8      	blx	r7
 8005d74:	3001      	adds	r0, #1
 8005d76:	d10e      	bne.n	8005d96 <_printf_float+0x42a>
 8005d78:	e659      	b.n	8005a2e <_printf_float+0xc2>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f ae52 	beq.w	8005a2e <_printf_float+0xc2>
 8005d8a:	f108 0801 	add.w	r8, r8, #1
 8005d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d90:	3b01      	subs	r3, #1
 8005d92:	4543      	cmp	r3, r8
 8005d94:	dcf1      	bgt.n	8005d7a <_printf_float+0x40e>
 8005d96:	464b      	mov	r3, r9
 8005d98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d9c:	e6dc      	b.n	8005b58 <_printf_float+0x1ec>
 8005d9e:	f04f 0800 	mov.w	r8, #0
 8005da2:	f104 0a1a 	add.w	sl, r4, #26
 8005da6:	e7f2      	b.n	8005d8e <_printf_float+0x422>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4642      	mov	r2, r8
 8005dac:	e7df      	b.n	8005d6e <_printf_float+0x402>
 8005dae:	2301      	movs	r3, #1
 8005db0:	464a      	mov	r2, r9
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	f43f ae38 	beq.w	8005a2e <_printf_float+0xc2>
 8005dbe:	f108 0801 	add.w	r8, r8, #1
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dc6:	1a5b      	subs	r3, r3, r1
 8005dc8:	4543      	cmp	r3, r8
 8005dca:	dcf0      	bgt.n	8005dae <_printf_float+0x442>
 8005dcc:	e6fa      	b.n	8005bc4 <_printf_float+0x258>
 8005dce:	f04f 0800 	mov.w	r8, #0
 8005dd2:	f104 0919 	add.w	r9, r4, #25
 8005dd6:	e7f4      	b.n	8005dc2 <_printf_float+0x456>

08005dd8 <_printf_common>:
 8005dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ddc:	4616      	mov	r6, r2
 8005dde:	4699      	mov	r9, r3
 8005de0:	688a      	ldr	r2, [r1, #8]
 8005de2:	690b      	ldr	r3, [r1, #16]
 8005de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005de8:	4293      	cmp	r3, r2
 8005dea:	bfb8      	it	lt
 8005dec:	4613      	movlt	r3, r2
 8005dee:	6033      	str	r3, [r6, #0]
 8005df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005df4:	4607      	mov	r7, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	b10a      	cbz	r2, 8005dfe <_printf_common+0x26>
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	6033      	str	r3, [r6, #0]
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	0699      	lsls	r1, r3, #26
 8005e02:	bf42      	ittt	mi
 8005e04:	6833      	ldrmi	r3, [r6, #0]
 8005e06:	3302      	addmi	r3, #2
 8005e08:	6033      	strmi	r3, [r6, #0]
 8005e0a:	6825      	ldr	r5, [r4, #0]
 8005e0c:	f015 0506 	ands.w	r5, r5, #6
 8005e10:	d106      	bne.n	8005e20 <_printf_common+0x48>
 8005e12:	f104 0a19 	add.w	sl, r4, #25
 8005e16:	68e3      	ldr	r3, [r4, #12]
 8005e18:	6832      	ldr	r2, [r6, #0]
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	42ab      	cmp	r3, r5
 8005e1e:	dc26      	bgt.n	8005e6e <_printf_common+0x96>
 8005e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e24:	1e13      	subs	r3, r2, #0
 8005e26:	6822      	ldr	r2, [r4, #0]
 8005e28:	bf18      	it	ne
 8005e2a:	2301      	movne	r3, #1
 8005e2c:	0692      	lsls	r2, r2, #26
 8005e2e:	d42b      	bmi.n	8005e88 <_printf_common+0xb0>
 8005e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e34:	4649      	mov	r1, r9
 8005e36:	4638      	mov	r0, r7
 8005e38:	47c0      	blx	r8
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d01e      	beq.n	8005e7c <_printf_common+0xa4>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	68e5      	ldr	r5, [r4, #12]
 8005e42:	6832      	ldr	r2, [r6, #0]
 8005e44:	f003 0306 	and.w	r3, r3, #6
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	bf08      	it	eq
 8005e4c:	1aad      	subeq	r5, r5, r2
 8005e4e:	68a3      	ldr	r3, [r4, #8]
 8005e50:	6922      	ldr	r2, [r4, #16]
 8005e52:	bf0c      	ite	eq
 8005e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e58:	2500      	movne	r5, #0
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	bfc4      	itt	gt
 8005e5e:	1a9b      	subgt	r3, r3, r2
 8005e60:	18ed      	addgt	r5, r5, r3
 8005e62:	2600      	movs	r6, #0
 8005e64:	341a      	adds	r4, #26
 8005e66:	42b5      	cmp	r5, r6
 8005e68:	d11a      	bne.n	8005ea0 <_printf_common+0xc8>
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	e008      	b.n	8005e80 <_printf_common+0xa8>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4652      	mov	r2, sl
 8005e72:	4649      	mov	r1, r9
 8005e74:	4638      	mov	r0, r7
 8005e76:	47c0      	blx	r8
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d103      	bne.n	8005e84 <_printf_common+0xac>
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e84:	3501      	adds	r5, #1
 8005e86:	e7c6      	b.n	8005e16 <_printf_common+0x3e>
 8005e88:	18e1      	adds	r1, r4, r3
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	2030      	movs	r0, #48	; 0x30
 8005e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e92:	4422      	add	r2, r4
 8005e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	e7c7      	b.n	8005e30 <_printf_common+0x58>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	47c0      	blx	r8
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d0e6      	beq.n	8005e7c <_printf_common+0xa4>
 8005eae:	3601      	adds	r6, #1
 8005eb0:	e7d9      	b.n	8005e66 <_printf_common+0x8e>
	...

08005eb4 <_printf_i>:
 8005eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb8:	7e0f      	ldrb	r7, [r1, #24]
 8005eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ebc:	2f78      	cmp	r7, #120	; 0x78
 8005ebe:	4691      	mov	r9, r2
 8005ec0:	4680      	mov	r8, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	469a      	mov	sl, r3
 8005ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eca:	d807      	bhi.n	8005edc <_printf_i+0x28>
 8005ecc:	2f62      	cmp	r7, #98	; 0x62
 8005ece:	d80a      	bhi.n	8005ee6 <_printf_i+0x32>
 8005ed0:	2f00      	cmp	r7, #0
 8005ed2:	f000 80d8 	beq.w	8006086 <_printf_i+0x1d2>
 8005ed6:	2f58      	cmp	r7, #88	; 0x58
 8005ed8:	f000 80a3 	beq.w	8006022 <_printf_i+0x16e>
 8005edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ee4:	e03a      	b.n	8005f5c <_printf_i+0xa8>
 8005ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eea:	2b15      	cmp	r3, #21
 8005eec:	d8f6      	bhi.n	8005edc <_printf_i+0x28>
 8005eee:	a101      	add	r1, pc, #4	; (adr r1, 8005ef4 <_printf_i+0x40>)
 8005ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ef4:	08005f4d 	.word	0x08005f4d
 8005ef8:	08005f61 	.word	0x08005f61
 8005efc:	08005edd 	.word	0x08005edd
 8005f00:	08005edd 	.word	0x08005edd
 8005f04:	08005edd 	.word	0x08005edd
 8005f08:	08005edd 	.word	0x08005edd
 8005f0c:	08005f61 	.word	0x08005f61
 8005f10:	08005edd 	.word	0x08005edd
 8005f14:	08005edd 	.word	0x08005edd
 8005f18:	08005edd 	.word	0x08005edd
 8005f1c:	08005edd 	.word	0x08005edd
 8005f20:	0800606d 	.word	0x0800606d
 8005f24:	08005f91 	.word	0x08005f91
 8005f28:	0800604f 	.word	0x0800604f
 8005f2c:	08005edd 	.word	0x08005edd
 8005f30:	08005edd 	.word	0x08005edd
 8005f34:	0800608f 	.word	0x0800608f
 8005f38:	08005edd 	.word	0x08005edd
 8005f3c:	08005f91 	.word	0x08005f91
 8005f40:	08005edd 	.word	0x08005edd
 8005f44:	08005edd 	.word	0x08005edd
 8005f48:	08006057 	.word	0x08006057
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	1d1a      	adds	r2, r3, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	602a      	str	r2, [r5, #0]
 8005f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0a3      	b.n	80060a8 <_printf_i+0x1f4>
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	6829      	ldr	r1, [r5, #0]
 8005f64:	0606      	lsls	r6, r0, #24
 8005f66:	f101 0304 	add.w	r3, r1, #4
 8005f6a:	d50a      	bpl.n	8005f82 <_printf_i+0xce>
 8005f6c:	680e      	ldr	r6, [r1, #0]
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	2e00      	cmp	r6, #0
 8005f72:	da03      	bge.n	8005f7c <_printf_i+0xc8>
 8005f74:	232d      	movs	r3, #45	; 0x2d
 8005f76:	4276      	negs	r6, r6
 8005f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f7c:	485e      	ldr	r0, [pc, #376]	; (80060f8 <_printf_i+0x244>)
 8005f7e:	230a      	movs	r3, #10
 8005f80:	e019      	b.n	8005fb6 <_printf_i+0x102>
 8005f82:	680e      	ldr	r6, [r1, #0]
 8005f84:	602b      	str	r3, [r5, #0]
 8005f86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f8a:	bf18      	it	ne
 8005f8c:	b236      	sxthne	r6, r6
 8005f8e:	e7ef      	b.n	8005f70 <_printf_i+0xbc>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	6820      	ldr	r0, [r4, #0]
 8005f94:	1d19      	adds	r1, r3, #4
 8005f96:	6029      	str	r1, [r5, #0]
 8005f98:	0601      	lsls	r1, r0, #24
 8005f9a:	d501      	bpl.n	8005fa0 <_printf_i+0xec>
 8005f9c:	681e      	ldr	r6, [r3, #0]
 8005f9e:	e002      	b.n	8005fa6 <_printf_i+0xf2>
 8005fa0:	0646      	lsls	r6, r0, #25
 8005fa2:	d5fb      	bpl.n	8005f9c <_printf_i+0xe8>
 8005fa4:	881e      	ldrh	r6, [r3, #0]
 8005fa6:	4854      	ldr	r0, [pc, #336]	; (80060f8 <_printf_i+0x244>)
 8005fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8005faa:	bf0c      	ite	eq
 8005fac:	2308      	moveq	r3, #8
 8005fae:	230a      	movne	r3, #10
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fb6:	6865      	ldr	r5, [r4, #4]
 8005fb8:	60a5      	str	r5, [r4, #8]
 8005fba:	2d00      	cmp	r5, #0
 8005fbc:	bfa2      	ittt	ge
 8005fbe:	6821      	ldrge	r1, [r4, #0]
 8005fc0:	f021 0104 	bicge.w	r1, r1, #4
 8005fc4:	6021      	strge	r1, [r4, #0]
 8005fc6:	b90e      	cbnz	r6, 8005fcc <_printf_i+0x118>
 8005fc8:	2d00      	cmp	r5, #0
 8005fca:	d04d      	beq.n	8006068 <_printf_i+0x1b4>
 8005fcc:	4615      	mov	r5, r2
 8005fce:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fd2:	fb03 6711 	mls	r7, r3, r1, r6
 8005fd6:	5dc7      	ldrb	r7, [r0, r7]
 8005fd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fdc:	4637      	mov	r7, r6
 8005fde:	42bb      	cmp	r3, r7
 8005fe0:	460e      	mov	r6, r1
 8005fe2:	d9f4      	bls.n	8005fce <_printf_i+0x11a>
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d10b      	bne.n	8006000 <_printf_i+0x14c>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	07de      	lsls	r6, r3, #31
 8005fec:	d508      	bpl.n	8006000 <_printf_i+0x14c>
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	6861      	ldr	r1, [r4, #4]
 8005ff2:	4299      	cmp	r1, r3
 8005ff4:	bfde      	ittt	le
 8005ff6:	2330      	movle	r3, #48	; 0x30
 8005ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006000:	1b52      	subs	r2, r2, r5
 8006002:	6122      	str	r2, [r4, #16]
 8006004:	f8cd a000 	str.w	sl, [sp]
 8006008:	464b      	mov	r3, r9
 800600a:	aa03      	add	r2, sp, #12
 800600c:	4621      	mov	r1, r4
 800600e:	4640      	mov	r0, r8
 8006010:	f7ff fee2 	bl	8005dd8 <_printf_common>
 8006014:	3001      	adds	r0, #1
 8006016:	d14c      	bne.n	80060b2 <_printf_i+0x1fe>
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	b004      	add	sp, #16
 800601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006022:	4835      	ldr	r0, [pc, #212]	; (80060f8 <_printf_i+0x244>)
 8006024:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006028:	6829      	ldr	r1, [r5, #0]
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006030:	6029      	str	r1, [r5, #0]
 8006032:	061d      	lsls	r5, r3, #24
 8006034:	d514      	bpl.n	8006060 <_printf_i+0x1ac>
 8006036:	07df      	lsls	r7, r3, #31
 8006038:	bf44      	itt	mi
 800603a:	f043 0320 	orrmi.w	r3, r3, #32
 800603e:	6023      	strmi	r3, [r4, #0]
 8006040:	b91e      	cbnz	r6, 800604a <_printf_i+0x196>
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	f023 0320 	bic.w	r3, r3, #32
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	2310      	movs	r3, #16
 800604c:	e7b0      	b.n	8005fb0 <_printf_i+0xfc>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	f043 0320 	orr.w	r3, r3, #32
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	2378      	movs	r3, #120	; 0x78
 8006058:	4828      	ldr	r0, [pc, #160]	; (80060fc <_printf_i+0x248>)
 800605a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800605e:	e7e3      	b.n	8006028 <_printf_i+0x174>
 8006060:	0659      	lsls	r1, r3, #25
 8006062:	bf48      	it	mi
 8006064:	b2b6      	uxthmi	r6, r6
 8006066:	e7e6      	b.n	8006036 <_printf_i+0x182>
 8006068:	4615      	mov	r5, r2
 800606a:	e7bb      	b.n	8005fe4 <_printf_i+0x130>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	6826      	ldr	r6, [r4, #0]
 8006070:	6961      	ldr	r1, [r4, #20]
 8006072:	1d18      	adds	r0, r3, #4
 8006074:	6028      	str	r0, [r5, #0]
 8006076:	0635      	lsls	r5, r6, #24
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	d501      	bpl.n	8006080 <_printf_i+0x1cc>
 800607c:	6019      	str	r1, [r3, #0]
 800607e:	e002      	b.n	8006086 <_printf_i+0x1d2>
 8006080:	0670      	lsls	r0, r6, #25
 8006082:	d5fb      	bpl.n	800607c <_printf_i+0x1c8>
 8006084:	8019      	strh	r1, [r3, #0]
 8006086:	2300      	movs	r3, #0
 8006088:	6123      	str	r3, [r4, #16]
 800608a:	4615      	mov	r5, r2
 800608c:	e7ba      	b.n	8006004 <_printf_i+0x150>
 800608e:	682b      	ldr	r3, [r5, #0]
 8006090:	1d1a      	adds	r2, r3, #4
 8006092:	602a      	str	r2, [r5, #0]
 8006094:	681d      	ldr	r5, [r3, #0]
 8006096:	6862      	ldr	r2, [r4, #4]
 8006098:	2100      	movs	r1, #0
 800609a:	4628      	mov	r0, r5
 800609c:	f7fa f8c8 	bl	8000230 <memchr>
 80060a0:	b108      	cbz	r0, 80060a6 <_printf_i+0x1f2>
 80060a2:	1b40      	subs	r0, r0, r5
 80060a4:	6060      	str	r0, [r4, #4]
 80060a6:	6863      	ldr	r3, [r4, #4]
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	2300      	movs	r3, #0
 80060ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b0:	e7a8      	b.n	8006004 <_printf_i+0x150>
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	462a      	mov	r2, r5
 80060b6:	4649      	mov	r1, r9
 80060b8:	4640      	mov	r0, r8
 80060ba:	47d0      	blx	sl
 80060bc:	3001      	adds	r0, #1
 80060be:	d0ab      	beq.n	8006018 <_printf_i+0x164>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	079b      	lsls	r3, r3, #30
 80060c4:	d413      	bmi.n	80060ee <_printf_i+0x23a>
 80060c6:	68e0      	ldr	r0, [r4, #12]
 80060c8:	9b03      	ldr	r3, [sp, #12]
 80060ca:	4298      	cmp	r0, r3
 80060cc:	bfb8      	it	lt
 80060ce:	4618      	movlt	r0, r3
 80060d0:	e7a4      	b.n	800601c <_printf_i+0x168>
 80060d2:	2301      	movs	r3, #1
 80060d4:	4632      	mov	r2, r6
 80060d6:	4649      	mov	r1, r9
 80060d8:	4640      	mov	r0, r8
 80060da:	47d0      	blx	sl
 80060dc:	3001      	adds	r0, #1
 80060de:	d09b      	beq.n	8006018 <_printf_i+0x164>
 80060e0:	3501      	adds	r5, #1
 80060e2:	68e3      	ldr	r3, [r4, #12]
 80060e4:	9903      	ldr	r1, [sp, #12]
 80060e6:	1a5b      	subs	r3, r3, r1
 80060e8:	42ab      	cmp	r3, r5
 80060ea:	dcf2      	bgt.n	80060d2 <_printf_i+0x21e>
 80060ec:	e7eb      	b.n	80060c6 <_printf_i+0x212>
 80060ee:	2500      	movs	r5, #0
 80060f0:	f104 0619 	add.w	r6, r4, #25
 80060f4:	e7f5      	b.n	80060e2 <_printf_i+0x22e>
 80060f6:	bf00      	nop
 80060f8:	0800b5a2 	.word	0x0800b5a2
 80060fc:	0800b5b3 	.word	0x0800b5b3

08006100 <_scanf_float>:
 8006100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006104:	b087      	sub	sp, #28
 8006106:	4617      	mov	r7, r2
 8006108:	9303      	str	r3, [sp, #12]
 800610a:	688b      	ldr	r3, [r1, #8]
 800610c:	1e5a      	subs	r2, r3, #1
 800610e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006112:	bf83      	ittte	hi
 8006114:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006118:	195b      	addhi	r3, r3, r5
 800611a:	9302      	strhi	r3, [sp, #8]
 800611c:	2300      	movls	r3, #0
 800611e:	bf86      	itte	hi
 8006120:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006124:	608b      	strhi	r3, [r1, #8]
 8006126:	9302      	strls	r3, [sp, #8]
 8006128:	680b      	ldr	r3, [r1, #0]
 800612a:	468b      	mov	fp, r1
 800612c:	2500      	movs	r5, #0
 800612e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006132:	f84b 3b1c 	str.w	r3, [fp], #28
 8006136:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800613a:	4680      	mov	r8, r0
 800613c:	460c      	mov	r4, r1
 800613e:	465e      	mov	r6, fp
 8006140:	46aa      	mov	sl, r5
 8006142:	46a9      	mov	r9, r5
 8006144:	9501      	str	r5, [sp, #4]
 8006146:	68a2      	ldr	r2, [r4, #8]
 8006148:	b152      	cbz	r2, 8006160 <_scanf_float+0x60>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b4e      	cmp	r3, #78	; 0x4e
 8006150:	d864      	bhi.n	800621c <_scanf_float+0x11c>
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	d83c      	bhi.n	80061d0 <_scanf_float+0xd0>
 8006156:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800615a:	b2c8      	uxtb	r0, r1
 800615c:	280e      	cmp	r0, #14
 800615e:	d93a      	bls.n	80061d6 <_scanf_float+0xd6>
 8006160:	f1b9 0f00 	cmp.w	r9, #0
 8006164:	d003      	beq.n	800616e <_scanf_float+0x6e>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006172:	f1ba 0f01 	cmp.w	sl, #1
 8006176:	f200 8113 	bhi.w	80063a0 <_scanf_float+0x2a0>
 800617a:	455e      	cmp	r6, fp
 800617c:	f200 8105 	bhi.w	800638a <_scanf_float+0x28a>
 8006180:	2501      	movs	r5, #1
 8006182:	4628      	mov	r0, r5
 8006184:	b007      	add	sp, #28
 8006186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800618e:	2a0d      	cmp	r2, #13
 8006190:	d8e6      	bhi.n	8006160 <_scanf_float+0x60>
 8006192:	a101      	add	r1, pc, #4	; (adr r1, 8006198 <_scanf_float+0x98>)
 8006194:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006198:	080062d7 	.word	0x080062d7
 800619c:	08006161 	.word	0x08006161
 80061a0:	08006161 	.word	0x08006161
 80061a4:	08006161 	.word	0x08006161
 80061a8:	08006337 	.word	0x08006337
 80061ac:	0800630f 	.word	0x0800630f
 80061b0:	08006161 	.word	0x08006161
 80061b4:	08006161 	.word	0x08006161
 80061b8:	080062e5 	.word	0x080062e5
 80061bc:	08006161 	.word	0x08006161
 80061c0:	08006161 	.word	0x08006161
 80061c4:	08006161 	.word	0x08006161
 80061c8:	08006161 	.word	0x08006161
 80061cc:	0800629d 	.word	0x0800629d
 80061d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80061d4:	e7db      	b.n	800618e <_scanf_float+0x8e>
 80061d6:	290e      	cmp	r1, #14
 80061d8:	d8c2      	bhi.n	8006160 <_scanf_float+0x60>
 80061da:	a001      	add	r0, pc, #4	; (adr r0, 80061e0 <_scanf_float+0xe0>)
 80061dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80061e0:	0800628f 	.word	0x0800628f
 80061e4:	08006161 	.word	0x08006161
 80061e8:	0800628f 	.word	0x0800628f
 80061ec:	08006323 	.word	0x08006323
 80061f0:	08006161 	.word	0x08006161
 80061f4:	0800623d 	.word	0x0800623d
 80061f8:	08006279 	.word	0x08006279
 80061fc:	08006279 	.word	0x08006279
 8006200:	08006279 	.word	0x08006279
 8006204:	08006279 	.word	0x08006279
 8006208:	08006279 	.word	0x08006279
 800620c:	08006279 	.word	0x08006279
 8006210:	08006279 	.word	0x08006279
 8006214:	08006279 	.word	0x08006279
 8006218:	08006279 	.word	0x08006279
 800621c:	2b6e      	cmp	r3, #110	; 0x6e
 800621e:	d809      	bhi.n	8006234 <_scanf_float+0x134>
 8006220:	2b60      	cmp	r3, #96	; 0x60
 8006222:	d8b2      	bhi.n	800618a <_scanf_float+0x8a>
 8006224:	2b54      	cmp	r3, #84	; 0x54
 8006226:	d077      	beq.n	8006318 <_scanf_float+0x218>
 8006228:	2b59      	cmp	r3, #89	; 0x59
 800622a:	d199      	bne.n	8006160 <_scanf_float+0x60>
 800622c:	2d07      	cmp	r5, #7
 800622e:	d197      	bne.n	8006160 <_scanf_float+0x60>
 8006230:	2508      	movs	r5, #8
 8006232:	e029      	b.n	8006288 <_scanf_float+0x188>
 8006234:	2b74      	cmp	r3, #116	; 0x74
 8006236:	d06f      	beq.n	8006318 <_scanf_float+0x218>
 8006238:	2b79      	cmp	r3, #121	; 0x79
 800623a:	e7f6      	b.n	800622a <_scanf_float+0x12a>
 800623c:	6821      	ldr	r1, [r4, #0]
 800623e:	05c8      	lsls	r0, r1, #23
 8006240:	d51a      	bpl.n	8006278 <_scanf_float+0x178>
 8006242:	9b02      	ldr	r3, [sp, #8]
 8006244:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006248:	6021      	str	r1, [r4, #0]
 800624a:	f109 0901 	add.w	r9, r9, #1
 800624e:	b11b      	cbz	r3, 8006258 <_scanf_float+0x158>
 8006250:	3b01      	subs	r3, #1
 8006252:	3201      	adds	r2, #1
 8006254:	9302      	str	r3, [sp, #8]
 8006256:	60a2      	str	r2, [r4, #8]
 8006258:	68a3      	ldr	r3, [r4, #8]
 800625a:	3b01      	subs	r3, #1
 800625c:	60a3      	str	r3, [r4, #8]
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	3301      	adds	r3, #1
 8006262:	6123      	str	r3, [r4, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3b01      	subs	r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	607b      	str	r3, [r7, #4]
 800626c:	f340 8084 	ble.w	8006378 <_scanf_float+0x278>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	3301      	adds	r3, #1
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	e766      	b.n	8006146 <_scanf_float+0x46>
 8006278:	eb1a 0f05 	cmn.w	sl, r5
 800627c:	f47f af70 	bne.w	8006160 <_scanf_float+0x60>
 8006280:	6822      	ldr	r2, [r4, #0]
 8006282:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006286:	6022      	str	r2, [r4, #0]
 8006288:	f806 3b01 	strb.w	r3, [r6], #1
 800628c:	e7e4      	b.n	8006258 <_scanf_float+0x158>
 800628e:	6822      	ldr	r2, [r4, #0]
 8006290:	0610      	lsls	r0, r2, #24
 8006292:	f57f af65 	bpl.w	8006160 <_scanf_float+0x60>
 8006296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800629a:	e7f4      	b.n	8006286 <_scanf_float+0x186>
 800629c:	f1ba 0f00 	cmp.w	sl, #0
 80062a0:	d10e      	bne.n	80062c0 <_scanf_float+0x1c0>
 80062a2:	f1b9 0f00 	cmp.w	r9, #0
 80062a6:	d10e      	bne.n	80062c6 <_scanf_float+0x1c6>
 80062a8:	6822      	ldr	r2, [r4, #0]
 80062aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062b2:	d108      	bne.n	80062c6 <_scanf_float+0x1c6>
 80062b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062b8:	6022      	str	r2, [r4, #0]
 80062ba:	f04f 0a01 	mov.w	sl, #1
 80062be:	e7e3      	b.n	8006288 <_scanf_float+0x188>
 80062c0:	f1ba 0f02 	cmp.w	sl, #2
 80062c4:	d055      	beq.n	8006372 <_scanf_float+0x272>
 80062c6:	2d01      	cmp	r5, #1
 80062c8:	d002      	beq.n	80062d0 <_scanf_float+0x1d0>
 80062ca:	2d04      	cmp	r5, #4
 80062cc:	f47f af48 	bne.w	8006160 <_scanf_float+0x60>
 80062d0:	3501      	adds	r5, #1
 80062d2:	b2ed      	uxtb	r5, r5
 80062d4:	e7d8      	b.n	8006288 <_scanf_float+0x188>
 80062d6:	f1ba 0f01 	cmp.w	sl, #1
 80062da:	f47f af41 	bne.w	8006160 <_scanf_float+0x60>
 80062de:	f04f 0a02 	mov.w	sl, #2
 80062e2:	e7d1      	b.n	8006288 <_scanf_float+0x188>
 80062e4:	b97d      	cbnz	r5, 8006306 <_scanf_float+0x206>
 80062e6:	f1b9 0f00 	cmp.w	r9, #0
 80062ea:	f47f af3c 	bne.w	8006166 <_scanf_float+0x66>
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062f8:	f47f af39 	bne.w	800616e <_scanf_float+0x6e>
 80062fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006300:	6022      	str	r2, [r4, #0]
 8006302:	2501      	movs	r5, #1
 8006304:	e7c0      	b.n	8006288 <_scanf_float+0x188>
 8006306:	2d03      	cmp	r5, #3
 8006308:	d0e2      	beq.n	80062d0 <_scanf_float+0x1d0>
 800630a:	2d05      	cmp	r5, #5
 800630c:	e7de      	b.n	80062cc <_scanf_float+0x1cc>
 800630e:	2d02      	cmp	r5, #2
 8006310:	f47f af26 	bne.w	8006160 <_scanf_float+0x60>
 8006314:	2503      	movs	r5, #3
 8006316:	e7b7      	b.n	8006288 <_scanf_float+0x188>
 8006318:	2d06      	cmp	r5, #6
 800631a:	f47f af21 	bne.w	8006160 <_scanf_float+0x60>
 800631e:	2507      	movs	r5, #7
 8006320:	e7b2      	b.n	8006288 <_scanf_float+0x188>
 8006322:	6822      	ldr	r2, [r4, #0]
 8006324:	0591      	lsls	r1, r2, #22
 8006326:	f57f af1b 	bpl.w	8006160 <_scanf_float+0x60>
 800632a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800632e:	6022      	str	r2, [r4, #0]
 8006330:	f8cd 9004 	str.w	r9, [sp, #4]
 8006334:	e7a8      	b.n	8006288 <_scanf_float+0x188>
 8006336:	6822      	ldr	r2, [r4, #0]
 8006338:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800633c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006340:	d006      	beq.n	8006350 <_scanf_float+0x250>
 8006342:	0550      	lsls	r0, r2, #21
 8006344:	f57f af0c 	bpl.w	8006160 <_scanf_float+0x60>
 8006348:	f1b9 0f00 	cmp.w	r9, #0
 800634c:	f43f af0f 	beq.w	800616e <_scanf_float+0x6e>
 8006350:	0591      	lsls	r1, r2, #22
 8006352:	bf58      	it	pl
 8006354:	9901      	ldrpl	r1, [sp, #4]
 8006356:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800635a:	bf58      	it	pl
 800635c:	eba9 0101 	subpl.w	r1, r9, r1
 8006360:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006364:	bf58      	it	pl
 8006366:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800636a:	6022      	str	r2, [r4, #0]
 800636c:	f04f 0900 	mov.w	r9, #0
 8006370:	e78a      	b.n	8006288 <_scanf_float+0x188>
 8006372:	f04f 0a03 	mov.w	sl, #3
 8006376:	e787      	b.n	8006288 <_scanf_float+0x188>
 8006378:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800637c:	4639      	mov	r1, r7
 800637e:	4640      	mov	r0, r8
 8006380:	4798      	blx	r3
 8006382:	2800      	cmp	r0, #0
 8006384:	f43f aedf 	beq.w	8006146 <_scanf_float+0x46>
 8006388:	e6ea      	b.n	8006160 <_scanf_float+0x60>
 800638a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800638e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006392:	463a      	mov	r2, r7
 8006394:	4640      	mov	r0, r8
 8006396:	4798      	blx	r3
 8006398:	6923      	ldr	r3, [r4, #16]
 800639a:	3b01      	subs	r3, #1
 800639c:	6123      	str	r3, [r4, #16]
 800639e:	e6ec      	b.n	800617a <_scanf_float+0x7a>
 80063a0:	1e6b      	subs	r3, r5, #1
 80063a2:	2b06      	cmp	r3, #6
 80063a4:	d825      	bhi.n	80063f2 <_scanf_float+0x2f2>
 80063a6:	2d02      	cmp	r5, #2
 80063a8:	d836      	bhi.n	8006418 <_scanf_float+0x318>
 80063aa:	455e      	cmp	r6, fp
 80063ac:	f67f aee8 	bls.w	8006180 <_scanf_float+0x80>
 80063b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063b8:	463a      	mov	r2, r7
 80063ba:	4640      	mov	r0, r8
 80063bc:	4798      	blx	r3
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	6123      	str	r3, [r4, #16]
 80063c4:	e7f1      	b.n	80063aa <_scanf_float+0x2aa>
 80063c6:	9802      	ldr	r0, [sp, #8]
 80063c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80063d0:	9002      	str	r0, [sp, #8]
 80063d2:	463a      	mov	r2, r7
 80063d4:	4640      	mov	r0, r8
 80063d6:	4798      	blx	r3
 80063d8:	6923      	ldr	r3, [r4, #16]
 80063da:	3b01      	subs	r3, #1
 80063dc:	6123      	str	r3, [r4, #16]
 80063de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063e2:	fa5f fa8a 	uxtb.w	sl, sl
 80063e6:	f1ba 0f02 	cmp.w	sl, #2
 80063ea:	d1ec      	bne.n	80063c6 <_scanf_float+0x2c6>
 80063ec:	3d03      	subs	r5, #3
 80063ee:	b2ed      	uxtb	r5, r5
 80063f0:	1b76      	subs	r6, r6, r5
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	05da      	lsls	r2, r3, #23
 80063f6:	d52f      	bpl.n	8006458 <_scanf_float+0x358>
 80063f8:	055b      	lsls	r3, r3, #21
 80063fa:	d510      	bpl.n	800641e <_scanf_float+0x31e>
 80063fc:	455e      	cmp	r6, fp
 80063fe:	f67f aebf 	bls.w	8006180 <_scanf_float+0x80>
 8006402:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006406:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800640a:	463a      	mov	r2, r7
 800640c:	4640      	mov	r0, r8
 800640e:	4798      	blx	r3
 8006410:	6923      	ldr	r3, [r4, #16]
 8006412:	3b01      	subs	r3, #1
 8006414:	6123      	str	r3, [r4, #16]
 8006416:	e7f1      	b.n	80063fc <_scanf_float+0x2fc>
 8006418:	46aa      	mov	sl, r5
 800641a:	9602      	str	r6, [sp, #8]
 800641c:	e7df      	b.n	80063de <_scanf_float+0x2de>
 800641e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	2965      	cmp	r1, #101	; 0x65
 8006426:	f103 33ff 	add.w	r3, r3, #4294967295
 800642a:	f106 35ff 	add.w	r5, r6, #4294967295
 800642e:	6123      	str	r3, [r4, #16]
 8006430:	d00c      	beq.n	800644c <_scanf_float+0x34c>
 8006432:	2945      	cmp	r1, #69	; 0x45
 8006434:	d00a      	beq.n	800644c <_scanf_float+0x34c>
 8006436:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800643a:	463a      	mov	r2, r7
 800643c:	4640      	mov	r0, r8
 800643e:	4798      	blx	r3
 8006440:	6923      	ldr	r3, [r4, #16]
 8006442:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006446:	3b01      	subs	r3, #1
 8006448:	1eb5      	subs	r5, r6, #2
 800644a:	6123      	str	r3, [r4, #16]
 800644c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006450:	463a      	mov	r2, r7
 8006452:	4640      	mov	r0, r8
 8006454:	4798      	blx	r3
 8006456:	462e      	mov	r6, r5
 8006458:	6825      	ldr	r5, [r4, #0]
 800645a:	f015 0510 	ands.w	r5, r5, #16
 800645e:	d159      	bne.n	8006514 <_scanf_float+0x414>
 8006460:	7035      	strb	r5, [r6, #0]
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646c:	d11b      	bne.n	80064a6 <_scanf_float+0x3a6>
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	454b      	cmp	r3, r9
 8006472:	eba3 0209 	sub.w	r2, r3, r9
 8006476:	d123      	bne.n	80064c0 <_scanf_float+0x3c0>
 8006478:	2200      	movs	r2, #0
 800647a:	4659      	mov	r1, fp
 800647c:	4640      	mov	r0, r8
 800647e:	f000 ff3d 	bl	80072fc <_strtod_r>
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	f012 0f02 	tst.w	r2, #2
 800648a:	ec57 6b10 	vmov	r6, r7, d0
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	d021      	beq.n	80064d6 <_scanf_float+0x3d6>
 8006492:	9903      	ldr	r1, [sp, #12]
 8006494:	1d1a      	adds	r2, r3, #4
 8006496:	600a      	str	r2, [r1, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	e9c3 6700 	strd	r6, r7, [r3]
 800649e:	68e3      	ldr	r3, [r4, #12]
 80064a0:	3301      	adds	r3, #1
 80064a2:	60e3      	str	r3, [r4, #12]
 80064a4:	e66d      	b.n	8006182 <_scanf_float+0x82>
 80064a6:	9b04      	ldr	r3, [sp, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0e5      	beq.n	8006478 <_scanf_float+0x378>
 80064ac:	9905      	ldr	r1, [sp, #20]
 80064ae:	230a      	movs	r3, #10
 80064b0:	462a      	mov	r2, r5
 80064b2:	3101      	adds	r1, #1
 80064b4:	4640      	mov	r0, r8
 80064b6:	f000 ffa9 	bl	800740c <_strtol_r>
 80064ba:	9b04      	ldr	r3, [sp, #16]
 80064bc:	9e05      	ldr	r6, [sp, #20]
 80064be:	1ac2      	subs	r2, r0, r3
 80064c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80064c4:	429e      	cmp	r6, r3
 80064c6:	bf28      	it	cs
 80064c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80064cc:	4912      	ldr	r1, [pc, #72]	; (8006518 <_scanf_float+0x418>)
 80064ce:	4630      	mov	r0, r6
 80064d0:	f000 f8d0 	bl	8006674 <siprintf>
 80064d4:	e7d0      	b.n	8006478 <_scanf_float+0x378>
 80064d6:	9903      	ldr	r1, [sp, #12]
 80064d8:	f012 0f04 	tst.w	r2, #4
 80064dc:	f103 0204 	add.w	r2, r3, #4
 80064e0:	600a      	str	r2, [r1, #0]
 80064e2:	d1d9      	bne.n	8006498 <_scanf_float+0x398>
 80064e4:	f8d3 8000 	ldr.w	r8, [r3]
 80064e8:	ee10 2a10 	vmov	r2, s0
 80064ec:	ee10 0a10 	vmov	r0, s0
 80064f0:	463b      	mov	r3, r7
 80064f2:	4639      	mov	r1, r7
 80064f4:	f7fa fb42 	bl	8000b7c <__aeabi_dcmpun>
 80064f8:	b128      	cbz	r0, 8006506 <_scanf_float+0x406>
 80064fa:	4808      	ldr	r0, [pc, #32]	; (800651c <_scanf_float+0x41c>)
 80064fc:	f000 f8b4 	bl	8006668 <nanf>
 8006500:	ed88 0a00 	vstr	s0, [r8]
 8006504:	e7cb      	b.n	800649e <_scanf_float+0x39e>
 8006506:	4630      	mov	r0, r6
 8006508:	4639      	mov	r1, r7
 800650a:	f7fa fb95 	bl	8000c38 <__aeabi_d2f>
 800650e:	f8c8 0000 	str.w	r0, [r8]
 8006512:	e7c4      	b.n	800649e <_scanf_float+0x39e>
 8006514:	2500      	movs	r5, #0
 8006516:	e634      	b.n	8006182 <_scanf_float+0x82>
 8006518:	0800b5c4 	.word	0x0800b5c4
 800651c:	0800ba38 	.word	0x0800ba38

08006520 <iprintf>:
 8006520:	b40f      	push	{r0, r1, r2, r3}
 8006522:	4b0a      	ldr	r3, [pc, #40]	; (800654c <iprintf+0x2c>)
 8006524:	b513      	push	{r0, r1, r4, lr}
 8006526:	681c      	ldr	r4, [r3, #0]
 8006528:	b124      	cbz	r4, 8006534 <iprintf+0x14>
 800652a:	69a3      	ldr	r3, [r4, #24]
 800652c:	b913      	cbnz	r3, 8006534 <iprintf+0x14>
 800652e:	4620      	mov	r0, r4
 8006530:	f001 ffc2 	bl	80084b8 <__sinit>
 8006534:	ab05      	add	r3, sp, #20
 8006536:	9a04      	ldr	r2, [sp, #16]
 8006538:	68a1      	ldr	r1, [r4, #8]
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	4620      	mov	r0, r4
 800653e:	f003 fb99 	bl	8009c74 <_vfiprintf_r>
 8006542:	b002      	add	sp, #8
 8006544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006548:	b004      	add	sp, #16
 800654a:	4770      	bx	lr
 800654c:	2000000c 	.word	0x2000000c

08006550 <putchar>:
 8006550:	4b09      	ldr	r3, [pc, #36]	; (8006578 <putchar+0x28>)
 8006552:	b513      	push	{r0, r1, r4, lr}
 8006554:	681c      	ldr	r4, [r3, #0]
 8006556:	4601      	mov	r1, r0
 8006558:	b134      	cbz	r4, 8006568 <putchar+0x18>
 800655a:	69a3      	ldr	r3, [r4, #24]
 800655c:	b923      	cbnz	r3, 8006568 <putchar+0x18>
 800655e:	9001      	str	r0, [sp, #4]
 8006560:	4620      	mov	r0, r4
 8006562:	f001 ffa9 	bl	80084b8 <__sinit>
 8006566:	9901      	ldr	r1, [sp, #4]
 8006568:	68a2      	ldr	r2, [r4, #8]
 800656a:	4620      	mov	r0, r4
 800656c:	b002      	add	sp, #8
 800656e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006572:	f003 bcaf 	b.w	8009ed4 <_putc_r>
 8006576:	bf00      	nop
 8006578:	2000000c 	.word	0x2000000c

0800657c <_puts_r>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	460e      	mov	r6, r1
 8006580:	4605      	mov	r5, r0
 8006582:	b118      	cbz	r0, 800658c <_puts_r+0x10>
 8006584:	6983      	ldr	r3, [r0, #24]
 8006586:	b90b      	cbnz	r3, 800658c <_puts_r+0x10>
 8006588:	f001 ff96 	bl	80084b8 <__sinit>
 800658c:	69ab      	ldr	r3, [r5, #24]
 800658e:	68ac      	ldr	r4, [r5, #8]
 8006590:	b913      	cbnz	r3, 8006598 <_puts_r+0x1c>
 8006592:	4628      	mov	r0, r5
 8006594:	f001 ff90 	bl	80084b8 <__sinit>
 8006598:	4b2c      	ldr	r3, [pc, #176]	; (800664c <_puts_r+0xd0>)
 800659a:	429c      	cmp	r4, r3
 800659c:	d120      	bne.n	80065e0 <_puts_r+0x64>
 800659e:	686c      	ldr	r4, [r5, #4]
 80065a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065a2:	07db      	lsls	r3, r3, #31
 80065a4:	d405      	bmi.n	80065b2 <_puts_r+0x36>
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	0598      	lsls	r0, r3, #22
 80065aa:	d402      	bmi.n	80065b2 <_puts_r+0x36>
 80065ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ae:	f002 fb94 	bl	8008cda <__retarget_lock_acquire_recursive>
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	0719      	lsls	r1, r3, #28
 80065b6:	d51d      	bpl.n	80065f4 <_puts_r+0x78>
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	b1db      	cbz	r3, 80065f4 <_puts_r+0x78>
 80065bc:	3e01      	subs	r6, #1
 80065be:	68a3      	ldr	r3, [r4, #8]
 80065c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065c4:	3b01      	subs	r3, #1
 80065c6:	60a3      	str	r3, [r4, #8]
 80065c8:	bb39      	cbnz	r1, 800661a <_puts_r+0x9e>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	da38      	bge.n	8006640 <_puts_r+0xc4>
 80065ce:	4622      	mov	r2, r4
 80065d0:	210a      	movs	r1, #10
 80065d2:	4628      	mov	r0, r5
 80065d4:	f000 ff1c 	bl	8007410 <__swbuf_r>
 80065d8:	3001      	adds	r0, #1
 80065da:	d011      	beq.n	8006600 <_puts_r+0x84>
 80065dc:	250a      	movs	r5, #10
 80065de:	e011      	b.n	8006604 <_puts_r+0x88>
 80065e0:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <_puts_r+0xd4>)
 80065e2:	429c      	cmp	r4, r3
 80065e4:	d101      	bne.n	80065ea <_puts_r+0x6e>
 80065e6:	68ac      	ldr	r4, [r5, #8]
 80065e8:	e7da      	b.n	80065a0 <_puts_r+0x24>
 80065ea:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <_puts_r+0xd8>)
 80065ec:	429c      	cmp	r4, r3
 80065ee:	bf08      	it	eq
 80065f0:	68ec      	ldreq	r4, [r5, #12]
 80065f2:	e7d5      	b.n	80065a0 <_puts_r+0x24>
 80065f4:	4621      	mov	r1, r4
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 ff5c 	bl	80074b4 <__swsetup_r>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d0dd      	beq.n	80065bc <_puts_r+0x40>
 8006600:	f04f 35ff 	mov.w	r5, #4294967295
 8006604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006606:	07da      	lsls	r2, r3, #31
 8006608:	d405      	bmi.n	8006616 <_puts_r+0x9a>
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	059b      	lsls	r3, r3, #22
 800660e:	d402      	bmi.n	8006616 <_puts_r+0x9a>
 8006610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006612:	f002 fb63 	bl	8008cdc <__retarget_lock_release_recursive>
 8006616:	4628      	mov	r0, r5
 8006618:	bd70      	pop	{r4, r5, r6, pc}
 800661a:	2b00      	cmp	r3, #0
 800661c:	da04      	bge.n	8006628 <_puts_r+0xac>
 800661e:	69a2      	ldr	r2, [r4, #24]
 8006620:	429a      	cmp	r2, r3
 8006622:	dc06      	bgt.n	8006632 <_puts_r+0xb6>
 8006624:	290a      	cmp	r1, #10
 8006626:	d004      	beq.n	8006632 <_puts_r+0xb6>
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	6022      	str	r2, [r4, #0]
 800662e:	7019      	strb	r1, [r3, #0]
 8006630:	e7c5      	b.n	80065be <_puts_r+0x42>
 8006632:	4622      	mov	r2, r4
 8006634:	4628      	mov	r0, r5
 8006636:	f000 feeb 	bl	8007410 <__swbuf_r>
 800663a:	3001      	adds	r0, #1
 800663c:	d1bf      	bne.n	80065be <_puts_r+0x42>
 800663e:	e7df      	b.n	8006600 <_puts_r+0x84>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	250a      	movs	r5, #10
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	6022      	str	r2, [r4, #0]
 8006648:	701d      	strb	r5, [r3, #0]
 800664a:	e7db      	b.n	8006604 <_puts_r+0x88>
 800664c:	0800b7d4 	.word	0x0800b7d4
 8006650:	0800b7f4 	.word	0x0800b7f4
 8006654:	0800b7b4 	.word	0x0800b7b4

08006658 <puts>:
 8006658:	4b02      	ldr	r3, [pc, #8]	; (8006664 <puts+0xc>)
 800665a:	4601      	mov	r1, r0
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	f7ff bf8d 	b.w	800657c <_puts_r>
 8006662:	bf00      	nop
 8006664:	2000000c 	.word	0x2000000c

08006668 <nanf>:
 8006668:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006670 <nanf+0x8>
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	7fc00000 	.word	0x7fc00000

08006674 <siprintf>:
 8006674:	b40e      	push	{r1, r2, r3}
 8006676:	b500      	push	{lr}
 8006678:	b09c      	sub	sp, #112	; 0x70
 800667a:	ab1d      	add	r3, sp, #116	; 0x74
 800667c:	9002      	str	r0, [sp, #8]
 800667e:	9006      	str	r0, [sp, #24]
 8006680:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006684:	4809      	ldr	r0, [pc, #36]	; (80066ac <siprintf+0x38>)
 8006686:	9107      	str	r1, [sp, #28]
 8006688:	9104      	str	r1, [sp, #16]
 800668a:	4909      	ldr	r1, [pc, #36]	; (80066b0 <siprintf+0x3c>)
 800668c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006690:	9105      	str	r1, [sp, #20]
 8006692:	6800      	ldr	r0, [r0, #0]
 8006694:	9301      	str	r3, [sp, #4]
 8006696:	a902      	add	r1, sp, #8
 8006698:	f003 f9c2 	bl	8009a20 <_svfiprintf_r>
 800669c:	9b02      	ldr	r3, [sp, #8]
 800669e:	2200      	movs	r2, #0
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	b01c      	add	sp, #112	; 0x70
 80066a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066a8:	b003      	add	sp, #12
 80066aa:	4770      	bx	lr
 80066ac:	2000000c 	.word	0x2000000c
 80066b0:	ffff0208 	.word	0xffff0208

080066b4 <sulp>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	4604      	mov	r4, r0
 80066b8:	460d      	mov	r5, r1
 80066ba:	ec45 4b10 	vmov	d0, r4, r5
 80066be:	4616      	mov	r6, r2
 80066c0:	f002 ff0c 	bl	80094dc <__ulp>
 80066c4:	ec51 0b10 	vmov	r0, r1, d0
 80066c8:	b17e      	cbz	r6, 80066ea <sulp+0x36>
 80066ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80066ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	dd09      	ble.n	80066ea <sulp+0x36>
 80066d6:	051b      	lsls	r3, r3, #20
 80066d8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80066dc:	2400      	movs	r4, #0
 80066de:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80066e2:	4622      	mov	r2, r4
 80066e4:	462b      	mov	r3, r5
 80066e6:	f7f9 ffaf 	bl	8000648 <__aeabi_dmul>
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
 80066ec:	0000      	movs	r0, r0
	...

080066f0 <_strtod_l>:
 80066f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	ed2d 8b02 	vpush	{d8}
 80066f8:	b09d      	sub	sp, #116	; 0x74
 80066fa:	461f      	mov	r7, r3
 80066fc:	2300      	movs	r3, #0
 80066fe:	9318      	str	r3, [sp, #96]	; 0x60
 8006700:	4ba2      	ldr	r3, [pc, #648]	; (800698c <_strtod_l+0x29c>)
 8006702:	9213      	str	r2, [sp, #76]	; 0x4c
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	9305      	str	r3, [sp, #20]
 8006708:	4604      	mov	r4, r0
 800670a:	4618      	mov	r0, r3
 800670c:	4688      	mov	r8, r1
 800670e:	f7f9 fd87 	bl	8000220 <strlen>
 8006712:	f04f 0a00 	mov.w	sl, #0
 8006716:	4605      	mov	r5, r0
 8006718:	f04f 0b00 	mov.w	fp, #0
 800671c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006722:	781a      	ldrb	r2, [r3, #0]
 8006724:	2a2b      	cmp	r2, #43	; 0x2b
 8006726:	d04e      	beq.n	80067c6 <_strtod_l+0xd6>
 8006728:	d83b      	bhi.n	80067a2 <_strtod_l+0xb2>
 800672a:	2a0d      	cmp	r2, #13
 800672c:	d834      	bhi.n	8006798 <_strtod_l+0xa8>
 800672e:	2a08      	cmp	r2, #8
 8006730:	d834      	bhi.n	800679c <_strtod_l+0xac>
 8006732:	2a00      	cmp	r2, #0
 8006734:	d03e      	beq.n	80067b4 <_strtod_l+0xc4>
 8006736:	2300      	movs	r3, #0
 8006738:	930a      	str	r3, [sp, #40]	; 0x28
 800673a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800673c:	7833      	ldrb	r3, [r6, #0]
 800673e:	2b30      	cmp	r3, #48	; 0x30
 8006740:	f040 80b0 	bne.w	80068a4 <_strtod_l+0x1b4>
 8006744:	7873      	ldrb	r3, [r6, #1]
 8006746:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800674a:	2b58      	cmp	r3, #88	; 0x58
 800674c:	d168      	bne.n	8006820 <_strtod_l+0x130>
 800674e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	ab18      	add	r3, sp, #96	; 0x60
 8006754:	9702      	str	r7, [sp, #8]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	4a8d      	ldr	r2, [pc, #564]	; (8006990 <_strtod_l+0x2a0>)
 800675a:	ab19      	add	r3, sp, #100	; 0x64
 800675c:	a917      	add	r1, sp, #92	; 0x5c
 800675e:	4620      	mov	r0, r4
 8006760:	f001 ffae 	bl	80086c0 <__gethex>
 8006764:	f010 0707 	ands.w	r7, r0, #7
 8006768:	4605      	mov	r5, r0
 800676a:	d005      	beq.n	8006778 <_strtod_l+0x88>
 800676c:	2f06      	cmp	r7, #6
 800676e:	d12c      	bne.n	80067ca <_strtod_l+0xda>
 8006770:	3601      	adds	r6, #1
 8006772:	2300      	movs	r3, #0
 8006774:	9617      	str	r6, [sp, #92]	; 0x5c
 8006776:	930a      	str	r3, [sp, #40]	; 0x28
 8006778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800677a:	2b00      	cmp	r3, #0
 800677c:	f040 8590 	bne.w	80072a0 <_strtod_l+0xbb0>
 8006780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006782:	b1eb      	cbz	r3, 80067c0 <_strtod_l+0xd0>
 8006784:	4652      	mov	r2, sl
 8006786:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800678a:	ec43 2b10 	vmov	d0, r2, r3
 800678e:	b01d      	add	sp, #116	; 0x74
 8006790:	ecbd 8b02 	vpop	{d8}
 8006794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006798:	2a20      	cmp	r2, #32
 800679a:	d1cc      	bne.n	8006736 <_strtod_l+0x46>
 800679c:	3301      	adds	r3, #1
 800679e:	9317      	str	r3, [sp, #92]	; 0x5c
 80067a0:	e7be      	b.n	8006720 <_strtod_l+0x30>
 80067a2:	2a2d      	cmp	r2, #45	; 0x2d
 80067a4:	d1c7      	bne.n	8006736 <_strtod_l+0x46>
 80067a6:	2201      	movs	r2, #1
 80067a8:	920a      	str	r2, [sp, #40]	; 0x28
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1c2      	bne.n	800673a <_strtod_l+0x4a>
 80067b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f040 856e 	bne.w	800729c <_strtod_l+0xbac>
 80067c0:	4652      	mov	r2, sl
 80067c2:	465b      	mov	r3, fp
 80067c4:	e7e1      	b.n	800678a <_strtod_l+0x9a>
 80067c6:	2200      	movs	r2, #0
 80067c8:	e7ee      	b.n	80067a8 <_strtod_l+0xb8>
 80067ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80067cc:	b13a      	cbz	r2, 80067de <_strtod_l+0xee>
 80067ce:	2135      	movs	r1, #53	; 0x35
 80067d0:	a81a      	add	r0, sp, #104	; 0x68
 80067d2:	f002 ff8e 	bl	80096f2 <__copybits>
 80067d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80067d8:	4620      	mov	r0, r4
 80067da:	f002 fb4d 	bl	8008e78 <_Bfree>
 80067de:	3f01      	subs	r7, #1
 80067e0:	2f04      	cmp	r7, #4
 80067e2:	d806      	bhi.n	80067f2 <_strtod_l+0x102>
 80067e4:	e8df f007 	tbb	[pc, r7]
 80067e8:	1714030a 	.word	0x1714030a
 80067ec:	0a          	.byte	0x0a
 80067ed:	00          	.byte	0x00
 80067ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80067f2:	0728      	lsls	r0, r5, #28
 80067f4:	d5c0      	bpl.n	8006778 <_strtod_l+0x88>
 80067f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80067fa:	e7bd      	b.n	8006778 <_strtod_l+0x88>
 80067fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006800:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006802:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006806:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800680a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800680e:	e7f0      	b.n	80067f2 <_strtod_l+0x102>
 8006810:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006994 <_strtod_l+0x2a4>
 8006814:	e7ed      	b.n	80067f2 <_strtod_l+0x102>
 8006816:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800681a:	f04f 3aff 	mov.w	sl, #4294967295
 800681e:	e7e8      	b.n	80067f2 <_strtod_l+0x102>
 8006820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	9217      	str	r2, [sp, #92]	; 0x5c
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	2b30      	cmp	r3, #48	; 0x30
 800682a:	d0f9      	beq.n	8006820 <_strtod_l+0x130>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0a3      	beq.n	8006778 <_strtod_l+0x88>
 8006830:	2301      	movs	r3, #1
 8006832:	f04f 0900 	mov.w	r9, #0
 8006836:	9304      	str	r3, [sp, #16]
 8006838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800683a:	9308      	str	r3, [sp, #32]
 800683c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006840:	464f      	mov	r7, r9
 8006842:	220a      	movs	r2, #10
 8006844:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006846:	7806      	ldrb	r6, [r0, #0]
 8006848:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800684c:	b2d9      	uxtb	r1, r3
 800684e:	2909      	cmp	r1, #9
 8006850:	d92a      	bls.n	80068a8 <_strtod_l+0x1b8>
 8006852:	9905      	ldr	r1, [sp, #20]
 8006854:	462a      	mov	r2, r5
 8006856:	f003 fbe2 	bl	800a01e <strncmp>
 800685a:	b398      	cbz	r0, 80068c4 <_strtod_l+0x1d4>
 800685c:	2000      	movs	r0, #0
 800685e:	4632      	mov	r2, r6
 8006860:	463d      	mov	r5, r7
 8006862:	9005      	str	r0, [sp, #20]
 8006864:	4603      	mov	r3, r0
 8006866:	2a65      	cmp	r2, #101	; 0x65
 8006868:	d001      	beq.n	800686e <_strtod_l+0x17e>
 800686a:	2a45      	cmp	r2, #69	; 0x45
 800686c:	d118      	bne.n	80068a0 <_strtod_l+0x1b0>
 800686e:	b91d      	cbnz	r5, 8006878 <_strtod_l+0x188>
 8006870:	9a04      	ldr	r2, [sp, #16]
 8006872:	4302      	orrs	r2, r0
 8006874:	d09e      	beq.n	80067b4 <_strtod_l+0xc4>
 8006876:	2500      	movs	r5, #0
 8006878:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800687c:	f108 0201 	add.w	r2, r8, #1
 8006880:	9217      	str	r2, [sp, #92]	; 0x5c
 8006882:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006886:	2a2b      	cmp	r2, #43	; 0x2b
 8006888:	d075      	beq.n	8006976 <_strtod_l+0x286>
 800688a:	2a2d      	cmp	r2, #45	; 0x2d
 800688c:	d07b      	beq.n	8006986 <_strtod_l+0x296>
 800688e:	f04f 0c00 	mov.w	ip, #0
 8006892:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006896:	2909      	cmp	r1, #9
 8006898:	f240 8082 	bls.w	80069a0 <_strtod_l+0x2b0>
 800689c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80068a0:	2600      	movs	r6, #0
 80068a2:	e09d      	b.n	80069e0 <_strtod_l+0x2f0>
 80068a4:	2300      	movs	r3, #0
 80068a6:	e7c4      	b.n	8006832 <_strtod_l+0x142>
 80068a8:	2f08      	cmp	r7, #8
 80068aa:	bfd8      	it	le
 80068ac:	9907      	ldrle	r1, [sp, #28]
 80068ae:	f100 0001 	add.w	r0, r0, #1
 80068b2:	bfda      	itte	le
 80068b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80068b8:	9307      	strle	r3, [sp, #28]
 80068ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 80068be:	3701      	adds	r7, #1
 80068c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80068c2:	e7bf      	b.n	8006844 <_strtod_l+0x154>
 80068c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068c6:	195a      	adds	r2, r3, r5
 80068c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80068ca:	5d5a      	ldrb	r2, [r3, r5]
 80068cc:	2f00      	cmp	r7, #0
 80068ce:	d037      	beq.n	8006940 <_strtod_l+0x250>
 80068d0:	9005      	str	r0, [sp, #20]
 80068d2:	463d      	mov	r5, r7
 80068d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80068d8:	2b09      	cmp	r3, #9
 80068da:	d912      	bls.n	8006902 <_strtod_l+0x212>
 80068dc:	2301      	movs	r3, #1
 80068de:	e7c2      	b.n	8006866 <_strtod_l+0x176>
 80068e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80068e6:	785a      	ldrb	r2, [r3, #1]
 80068e8:	3001      	adds	r0, #1
 80068ea:	2a30      	cmp	r2, #48	; 0x30
 80068ec:	d0f8      	beq.n	80068e0 <_strtod_l+0x1f0>
 80068ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80068f2:	2b08      	cmp	r3, #8
 80068f4:	f200 84d9 	bhi.w	80072aa <_strtod_l+0xbba>
 80068f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068fa:	9005      	str	r0, [sp, #20]
 80068fc:	2000      	movs	r0, #0
 80068fe:	9308      	str	r3, [sp, #32]
 8006900:	4605      	mov	r5, r0
 8006902:	3a30      	subs	r2, #48	; 0x30
 8006904:	f100 0301 	add.w	r3, r0, #1
 8006908:	d014      	beq.n	8006934 <_strtod_l+0x244>
 800690a:	9905      	ldr	r1, [sp, #20]
 800690c:	4419      	add	r1, r3
 800690e:	9105      	str	r1, [sp, #20]
 8006910:	462b      	mov	r3, r5
 8006912:	eb00 0e05 	add.w	lr, r0, r5
 8006916:	210a      	movs	r1, #10
 8006918:	4573      	cmp	r3, lr
 800691a:	d113      	bne.n	8006944 <_strtod_l+0x254>
 800691c:	182b      	adds	r3, r5, r0
 800691e:	2b08      	cmp	r3, #8
 8006920:	f105 0501 	add.w	r5, r5, #1
 8006924:	4405      	add	r5, r0
 8006926:	dc1c      	bgt.n	8006962 <_strtod_l+0x272>
 8006928:	9907      	ldr	r1, [sp, #28]
 800692a:	230a      	movs	r3, #10
 800692c:	fb03 2301 	mla	r3, r3, r1, r2
 8006930:	9307      	str	r3, [sp, #28]
 8006932:	2300      	movs	r3, #0
 8006934:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006936:	1c51      	adds	r1, r2, #1
 8006938:	9117      	str	r1, [sp, #92]	; 0x5c
 800693a:	7852      	ldrb	r2, [r2, #1]
 800693c:	4618      	mov	r0, r3
 800693e:	e7c9      	b.n	80068d4 <_strtod_l+0x1e4>
 8006940:	4638      	mov	r0, r7
 8006942:	e7d2      	b.n	80068ea <_strtod_l+0x1fa>
 8006944:	2b08      	cmp	r3, #8
 8006946:	dc04      	bgt.n	8006952 <_strtod_l+0x262>
 8006948:	9e07      	ldr	r6, [sp, #28]
 800694a:	434e      	muls	r6, r1
 800694c:	9607      	str	r6, [sp, #28]
 800694e:	3301      	adds	r3, #1
 8006950:	e7e2      	b.n	8006918 <_strtod_l+0x228>
 8006952:	f103 0c01 	add.w	ip, r3, #1
 8006956:	f1bc 0f10 	cmp.w	ip, #16
 800695a:	bfd8      	it	le
 800695c:	fb01 f909 	mulle.w	r9, r1, r9
 8006960:	e7f5      	b.n	800694e <_strtod_l+0x25e>
 8006962:	2d10      	cmp	r5, #16
 8006964:	bfdc      	itt	le
 8006966:	230a      	movle	r3, #10
 8006968:	fb03 2909 	mlale	r9, r3, r9, r2
 800696c:	e7e1      	b.n	8006932 <_strtod_l+0x242>
 800696e:	2300      	movs	r3, #0
 8006970:	9305      	str	r3, [sp, #20]
 8006972:	2301      	movs	r3, #1
 8006974:	e77c      	b.n	8006870 <_strtod_l+0x180>
 8006976:	f04f 0c00 	mov.w	ip, #0
 800697a:	f108 0202 	add.w	r2, r8, #2
 800697e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006980:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006984:	e785      	b.n	8006892 <_strtod_l+0x1a2>
 8006986:	f04f 0c01 	mov.w	ip, #1
 800698a:	e7f6      	b.n	800697a <_strtod_l+0x28a>
 800698c:	0800b87c 	.word	0x0800b87c
 8006990:	0800b5cc 	.word	0x0800b5cc
 8006994:	7ff00000 	.word	0x7ff00000
 8006998:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800699a:	1c51      	adds	r1, r2, #1
 800699c:	9117      	str	r1, [sp, #92]	; 0x5c
 800699e:	7852      	ldrb	r2, [r2, #1]
 80069a0:	2a30      	cmp	r2, #48	; 0x30
 80069a2:	d0f9      	beq.n	8006998 <_strtod_l+0x2a8>
 80069a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80069a8:	2908      	cmp	r1, #8
 80069aa:	f63f af79 	bhi.w	80068a0 <_strtod_l+0x1b0>
 80069ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80069b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069b4:	9206      	str	r2, [sp, #24]
 80069b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069b8:	1c51      	adds	r1, r2, #1
 80069ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80069bc:	7852      	ldrb	r2, [r2, #1]
 80069be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80069c2:	2e09      	cmp	r6, #9
 80069c4:	d937      	bls.n	8006a36 <_strtod_l+0x346>
 80069c6:	9e06      	ldr	r6, [sp, #24]
 80069c8:	1b89      	subs	r1, r1, r6
 80069ca:	2908      	cmp	r1, #8
 80069cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80069d0:	dc02      	bgt.n	80069d8 <_strtod_l+0x2e8>
 80069d2:	4576      	cmp	r6, lr
 80069d4:	bfa8      	it	ge
 80069d6:	4676      	movge	r6, lr
 80069d8:	f1bc 0f00 	cmp.w	ip, #0
 80069dc:	d000      	beq.n	80069e0 <_strtod_l+0x2f0>
 80069de:	4276      	negs	r6, r6
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	d14d      	bne.n	8006a80 <_strtod_l+0x390>
 80069e4:	9904      	ldr	r1, [sp, #16]
 80069e6:	4301      	orrs	r1, r0
 80069e8:	f47f aec6 	bne.w	8006778 <_strtod_l+0x88>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f47f aee1 	bne.w	80067b4 <_strtod_l+0xc4>
 80069f2:	2a69      	cmp	r2, #105	; 0x69
 80069f4:	d027      	beq.n	8006a46 <_strtod_l+0x356>
 80069f6:	dc24      	bgt.n	8006a42 <_strtod_l+0x352>
 80069f8:	2a49      	cmp	r2, #73	; 0x49
 80069fa:	d024      	beq.n	8006a46 <_strtod_l+0x356>
 80069fc:	2a4e      	cmp	r2, #78	; 0x4e
 80069fe:	f47f aed9 	bne.w	80067b4 <_strtod_l+0xc4>
 8006a02:	499f      	ldr	r1, [pc, #636]	; (8006c80 <_strtod_l+0x590>)
 8006a04:	a817      	add	r0, sp, #92	; 0x5c
 8006a06:	f002 f8b3 	bl	8008b70 <__match>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	f43f aed2 	beq.w	80067b4 <_strtod_l+0xc4>
 8006a10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b28      	cmp	r3, #40	; 0x28
 8006a16:	d12d      	bne.n	8006a74 <_strtod_l+0x384>
 8006a18:	499a      	ldr	r1, [pc, #616]	; (8006c84 <_strtod_l+0x594>)
 8006a1a:	aa1a      	add	r2, sp, #104	; 0x68
 8006a1c:	a817      	add	r0, sp, #92	; 0x5c
 8006a1e:	f002 f8bb 	bl	8008b98 <__hexnan>
 8006a22:	2805      	cmp	r0, #5
 8006a24:	d126      	bne.n	8006a74 <_strtod_l+0x384>
 8006a26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a28:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006a2c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006a30:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006a34:	e6a0      	b.n	8006778 <_strtod_l+0x88>
 8006a36:	210a      	movs	r1, #10
 8006a38:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006a3c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006a40:	e7b9      	b.n	80069b6 <_strtod_l+0x2c6>
 8006a42:	2a6e      	cmp	r2, #110	; 0x6e
 8006a44:	e7db      	b.n	80069fe <_strtod_l+0x30e>
 8006a46:	4990      	ldr	r1, [pc, #576]	; (8006c88 <_strtod_l+0x598>)
 8006a48:	a817      	add	r0, sp, #92	; 0x5c
 8006a4a:	f002 f891 	bl	8008b70 <__match>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	f43f aeb0 	beq.w	80067b4 <_strtod_l+0xc4>
 8006a54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a56:	498d      	ldr	r1, [pc, #564]	; (8006c8c <_strtod_l+0x59c>)
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	a817      	add	r0, sp, #92	; 0x5c
 8006a5c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a5e:	f002 f887 	bl	8008b70 <__match>
 8006a62:	b910      	cbnz	r0, 8006a6a <_strtod_l+0x37a>
 8006a64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a66:	3301      	adds	r3, #1
 8006a68:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a6a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006c9c <_strtod_l+0x5ac>
 8006a6e:	f04f 0a00 	mov.w	sl, #0
 8006a72:	e681      	b.n	8006778 <_strtod_l+0x88>
 8006a74:	4886      	ldr	r0, [pc, #536]	; (8006c90 <_strtod_l+0x5a0>)
 8006a76:	f003 fa77 	bl	8009f68 <nan>
 8006a7a:	ec5b ab10 	vmov	sl, fp, d0
 8006a7e:	e67b      	b.n	8006778 <_strtod_l+0x88>
 8006a80:	9b05      	ldr	r3, [sp, #20]
 8006a82:	9807      	ldr	r0, [sp, #28]
 8006a84:	1af3      	subs	r3, r6, r3
 8006a86:	2f00      	cmp	r7, #0
 8006a88:	bf08      	it	eq
 8006a8a:	462f      	moveq	r7, r5
 8006a8c:	2d10      	cmp	r5, #16
 8006a8e:	9306      	str	r3, [sp, #24]
 8006a90:	46a8      	mov	r8, r5
 8006a92:	bfa8      	it	ge
 8006a94:	f04f 0810 	movge.w	r8, #16
 8006a98:	f7f9 fd5c 	bl	8000554 <__aeabi_ui2d>
 8006a9c:	2d09      	cmp	r5, #9
 8006a9e:	4682      	mov	sl, r0
 8006aa0:	468b      	mov	fp, r1
 8006aa2:	dd13      	ble.n	8006acc <_strtod_l+0x3dc>
 8006aa4:	4b7b      	ldr	r3, [pc, #492]	; (8006c94 <_strtod_l+0x5a4>)
 8006aa6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006aaa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006aae:	f7f9 fdcb 	bl	8000648 <__aeabi_dmul>
 8006ab2:	4682      	mov	sl, r0
 8006ab4:	4648      	mov	r0, r9
 8006ab6:	468b      	mov	fp, r1
 8006ab8:	f7f9 fd4c 	bl	8000554 <__aeabi_ui2d>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4650      	mov	r0, sl
 8006ac2:	4659      	mov	r1, fp
 8006ac4:	f7f9 fc0a 	bl	80002dc <__adddf3>
 8006ac8:	4682      	mov	sl, r0
 8006aca:	468b      	mov	fp, r1
 8006acc:	2d0f      	cmp	r5, #15
 8006ace:	dc38      	bgt.n	8006b42 <_strtod_l+0x452>
 8006ad0:	9b06      	ldr	r3, [sp, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f43f ae50 	beq.w	8006778 <_strtod_l+0x88>
 8006ad8:	dd24      	ble.n	8006b24 <_strtod_l+0x434>
 8006ada:	2b16      	cmp	r3, #22
 8006adc:	dc0b      	bgt.n	8006af6 <_strtod_l+0x406>
 8006ade:	496d      	ldr	r1, [pc, #436]	; (8006c94 <_strtod_l+0x5a4>)
 8006ae0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae8:	4652      	mov	r2, sl
 8006aea:	465b      	mov	r3, fp
 8006aec:	f7f9 fdac 	bl	8000648 <__aeabi_dmul>
 8006af0:	4682      	mov	sl, r0
 8006af2:	468b      	mov	fp, r1
 8006af4:	e640      	b.n	8006778 <_strtod_l+0x88>
 8006af6:	9a06      	ldr	r2, [sp, #24]
 8006af8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006afc:	4293      	cmp	r3, r2
 8006afe:	db20      	blt.n	8006b42 <_strtod_l+0x452>
 8006b00:	4c64      	ldr	r4, [pc, #400]	; (8006c94 <_strtod_l+0x5a4>)
 8006b02:	f1c5 050f 	rsb	r5, r5, #15
 8006b06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b0a:	4652      	mov	r2, sl
 8006b0c:	465b      	mov	r3, fp
 8006b0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b12:	f7f9 fd99 	bl	8000648 <__aeabi_dmul>
 8006b16:	9b06      	ldr	r3, [sp, #24]
 8006b18:	1b5d      	subs	r5, r3, r5
 8006b1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b22:	e7e3      	b.n	8006aec <_strtod_l+0x3fc>
 8006b24:	9b06      	ldr	r3, [sp, #24]
 8006b26:	3316      	adds	r3, #22
 8006b28:	db0b      	blt.n	8006b42 <_strtod_l+0x452>
 8006b2a:	9b05      	ldr	r3, [sp, #20]
 8006b2c:	1b9e      	subs	r6, r3, r6
 8006b2e:	4b59      	ldr	r3, [pc, #356]	; (8006c94 <_strtod_l+0x5a4>)
 8006b30:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006b34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b38:	4650      	mov	r0, sl
 8006b3a:	4659      	mov	r1, fp
 8006b3c:	f7f9 feae 	bl	800089c <__aeabi_ddiv>
 8006b40:	e7d6      	b.n	8006af0 <_strtod_l+0x400>
 8006b42:	9b06      	ldr	r3, [sp, #24]
 8006b44:	eba5 0808 	sub.w	r8, r5, r8
 8006b48:	4498      	add	r8, r3
 8006b4a:	f1b8 0f00 	cmp.w	r8, #0
 8006b4e:	dd74      	ble.n	8006c3a <_strtod_l+0x54a>
 8006b50:	f018 030f 	ands.w	r3, r8, #15
 8006b54:	d00a      	beq.n	8006b6c <_strtod_l+0x47c>
 8006b56:	494f      	ldr	r1, [pc, #316]	; (8006c94 <_strtod_l+0x5a4>)
 8006b58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b5c:	4652      	mov	r2, sl
 8006b5e:	465b      	mov	r3, fp
 8006b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b64:	f7f9 fd70 	bl	8000648 <__aeabi_dmul>
 8006b68:	4682      	mov	sl, r0
 8006b6a:	468b      	mov	fp, r1
 8006b6c:	f038 080f 	bics.w	r8, r8, #15
 8006b70:	d04f      	beq.n	8006c12 <_strtod_l+0x522>
 8006b72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006b76:	dd22      	ble.n	8006bbe <_strtod_l+0x4ce>
 8006b78:	2500      	movs	r5, #0
 8006b7a:	462e      	mov	r6, r5
 8006b7c:	9507      	str	r5, [sp, #28]
 8006b7e:	9505      	str	r5, [sp, #20]
 8006b80:	2322      	movs	r3, #34	; 0x22
 8006b82:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006c9c <_strtod_l+0x5ac>
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	f04f 0a00 	mov.w	sl, #0
 8006b8c:	9b07      	ldr	r3, [sp, #28]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f43f adf2 	beq.w	8006778 <_strtod_l+0x88>
 8006b94:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006b96:	4620      	mov	r0, r4
 8006b98:	f002 f96e 	bl	8008e78 <_Bfree>
 8006b9c:	9905      	ldr	r1, [sp, #20]
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f002 f96a 	bl	8008e78 <_Bfree>
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f002 f966 	bl	8008e78 <_Bfree>
 8006bac:	9907      	ldr	r1, [sp, #28]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f002 f962 	bl	8008e78 <_Bfree>
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f002 f95e 	bl	8008e78 <_Bfree>
 8006bbc:	e5dc      	b.n	8006778 <_strtod_l+0x88>
 8006bbe:	4b36      	ldr	r3, [pc, #216]	; (8006c98 <_strtod_l+0x5a8>)
 8006bc0:	9304      	str	r3, [sp, #16]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006bc8:	4650      	mov	r0, sl
 8006bca:	4659      	mov	r1, fp
 8006bcc:	4699      	mov	r9, r3
 8006bce:	f1b8 0f01 	cmp.w	r8, #1
 8006bd2:	dc21      	bgt.n	8006c18 <_strtod_l+0x528>
 8006bd4:	b10b      	cbz	r3, 8006bda <_strtod_l+0x4ea>
 8006bd6:	4682      	mov	sl, r0
 8006bd8:	468b      	mov	fp, r1
 8006bda:	4b2f      	ldr	r3, [pc, #188]	; (8006c98 <_strtod_l+0x5a8>)
 8006bdc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006be0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006be4:	4652      	mov	r2, sl
 8006be6:	465b      	mov	r3, fp
 8006be8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006bec:	f7f9 fd2c 	bl	8000648 <__aeabi_dmul>
 8006bf0:	4b2a      	ldr	r3, [pc, #168]	; (8006c9c <_strtod_l+0x5ac>)
 8006bf2:	460a      	mov	r2, r1
 8006bf4:	400b      	ands	r3, r1
 8006bf6:	492a      	ldr	r1, [pc, #168]	; (8006ca0 <_strtod_l+0x5b0>)
 8006bf8:	428b      	cmp	r3, r1
 8006bfa:	4682      	mov	sl, r0
 8006bfc:	d8bc      	bhi.n	8006b78 <_strtod_l+0x488>
 8006bfe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006c02:	428b      	cmp	r3, r1
 8006c04:	bf86      	itte	hi
 8006c06:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006ca4 <_strtod_l+0x5b4>
 8006c0a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006c0e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006c12:	2300      	movs	r3, #0
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	e084      	b.n	8006d22 <_strtod_l+0x632>
 8006c18:	f018 0f01 	tst.w	r8, #1
 8006c1c:	d005      	beq.n	8006c2a <_strtod_l+0x53a>
 8006c1e:	9b04      	ldr	r3, [sp, #16]
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f7f9 fd10 	bl	8000648 <__aeabi_dmul>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	9a04      	ldr	r2, [sp, #16]
 8006c2c:	3208      	adds	r2, #8
 8006c2e:	f109 0901 	add.w	r9, r9, #1
 8006c32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006c36:	9204      	str	r2, [sp, #16]
 8006c38:	e7c9      	b.n	8006bce <_strtod_l+0x4de>
 8006c3a:	d0ea      	beq.n	8006c12 <_strtod_l+0x522>
 8006c3c:	f1c8 0800 	rsb	r8, r8, #0
 8006c40:	f018 020f 	ands.w	r2, r8, #15
 8006c44:	d00a      	beq.n	8006c5c <_strtod_l+0x56c>
 8006c46:	4b13      	ldr	r3, [pc, #76]	; (8006c94 <_strtod_l+0x5a4>)
 8006c48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c4c:	4650      	mov	r0, sl
 8006c4e:	4659      	mov	r1, fp
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	f7f9 fe22 	bl	800089c <__aeabi_ddiv>
 8006c58:	4682      	mov	sl, r0
 8006c5a:	468b      	mov	fp, r1
 8006c5c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006c60:	d0d7      	beq.n	8006c12 <_strtod_l+0x522>
 8006c62:	f1b8 0f1f 	cmp.w	r8, #31
 8006c66:	dd1f      	ble.n	8006ca8 <_strtod_l+0x5b8>
 8006c68:	2500      	movs	r5, #0
 8006c6a:	462e      	mov	r6, r5
 8006c6c:	9507      	str	r5, [sp, #28]
 8006c6e:	9505      	str	r5, [sp, #20]
 8006c70:	2322      	movs	r3, #34	; 0x22
 8006c72:	f04f 0a00 	mov.w	sl, #0
 8006c76:	f04f 0b00 	mov.w	fp, #0
 8006c7a:	6023      	str	r3, [r4, #0]
 8006c7c:	e786      	b.n	8006b8c <_strtod_l+0x49c>
 8006c7e:	bf00      	nop
 8006c80:	0800b59d 	.word	0x0800b59d
 8006c84:	0800b5e0 	.word	0x0800b5e0
 8006c88:	0800b595 	.word	0x0800b595
 8006c8c:	0800b724 	.word	0x0800b724
 8006c90:	0800ba38 	.word	0x0800ba38
 8006c94:	0800b918 	.word	0x0800b918
 8006c98:	0800b8f0 	.word	0x0800b8f0
 8006c9c:	7ff00000 	.word	0x7ff00000
 8006ca0:	7ca00000 	.word	0x7ca00000
 8006ca4:	7fefffff 	.word	0x7fefffff
 8006ca8:	f018 0310 	ands.w	r3, r8, #16
 8006cac:	bf18      	it	ne
 8006cae:	236a      	movne	r3, #106	; 0x6a
 8006cb0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007060 <_strtod_l+0x970>
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	4659      	mov	r1, fp
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f018 0f01 	tst.w	r8, #1
 8006cc0:	d004      	beq.n	8006ccc <_strtod_l+0x5dc>
 8006cc2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006cc6:	f7f9 fcbf 	bl	8000648 <__aeabi_dmul>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006cd0:	f109 0908 	add.w	r9, r9, #8
 8006cd4:	d1f2      	bne.n	8006cbc <_strtod_l+0x5cc>
 8006cd6:	b10b      	cbz	r3, 8006cdc <_strtod_l+0x5ec>
 8006cd8:	4682      	mov	sl, r0
 8006cda:	468b      	mov	fp, r1
 8006cdc:	9b04      	ldr	r3, [sp, #16]
 8006cde:	b1c3      	cbz	r3, 8006d12 <_strtod_l+0x622>
 8006ce0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006ce4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	4659      	mov	r1, fp
 8006cec:	dd11      	ble.n	8006d12 <_strtod_l+0x622>
 8006cee:	2b1f      	cmp	r3, #31
 8006cf0:	f340 8124 	ble.w	8006f3c <_strtod_l+0x84c>
 8006cf4:	2b34      	cmp	r3, #52	; 0x34
 8006cf6:	bfde      	ittt	le
 8006cf8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006cfc:	f04f 33ff 	movle.w	r3, #4294967295
 8006d00:	fa03 f202 	lslle.w	r2, r3, r2
 8006d04:	f04f 0a00 	mov.w	sl, #0
 8006d08:	bfcc      	ite	gt
 8006d0a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006d0e:	ea02 0b01 	andle.w	fp, r2, r1
 8006d12:	2200      	movs	r2, #0
 8006d14:	2300      	movs	r3, #0
 8006d16:	4650      	mov	r0, sl
 8006d18:	4659      	mov	r1, fp
 8006d1a:	f7f9 fefd 	bl	8000b18 <__aeabi_dcmpeq>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d1a2      	bne.n	8006c68 <_strtod_l+0x578>
 8006d22:	9b07      	ldr	r3, [sp, #28]
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	9908      	ldr	r1, [sp, #32]
 8006d28:	462b      	mov	r3, r5
 8006d2a:	463a      	mov	r2, r7
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f002 f90b 	bl	8008f48 <__s2b>
 8006d32:	9007      	str	r0, [sp, #28]
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f43f af1f 	beq.w	8006b78 <_strtod_l+0x488>
 8006d3a:	9b05      	ldr	r3, [sp, #20]
 8006d3c:	1b9e      	subs	r6, r3, r6
 8006d3e:	9b06      	ldr	r3, [sp, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	bfb4      	ite	lt
 8006d44:	4633      	movlt	r3, r6
 8006d46:	2300      	movge	r3, #0
 8006d48:	930c      	str	r3, [sp, #48]	; 0x30
 8006d4a:	9b06      	ldr	r3, [sp, #24]
 8006d4c:	2500      	movs	r5, #0
 8006d4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006d52:	9312      	str	r3, [sp, #72]	; 0x48
 8006d54:	462e      	mov	r6, r5
 8006d56:	9b07      	ldr	r3, [sp, #28]
 8006d58:	4620      	mov	r0, r4
 8006d5a:	6859      	ldr	r1, [r3, #4]
 8006d5c:	f002 f84c 	bl	8008df8 <_Balloc>
 8006d60:	9005      	str	r0, [sp, #20]
 8006d62:	2800      	cmp	r0, #0
 8006d64:	f43f af0c 	beq.w	8006b80 <_strtod_l+0x490>
 8006d68:	9b07      	ldr	r3, [sp, #28]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	3202      	adds	r2, #2
 8006d6e:	f103 010c 	add.w	r1, r3, #12
 8006d72:	0092      	lsls	r2, r2, #2
 8006d74:	300c      	adds	r0, #12
 8006d76:	f002 f831 	bl	8008ddc <memcpy>
 8006d7a:	ec4b ab10 	vmov	d0, sl, fp
 8006d7e:	aa1a      	add	r2, sp, #104	; 0x68
 8006d80:	a919      	add	r1, sp, #100	; 0x64
 8006d82:	4620      	mov	r0, r4
 8006d84:	f002 fc26 	bl	80095d4 <__d2b>
 8006d88:	ec4b ab18 	vmov	d8, sl, fp
 8006d8c:	9018      	str	r0, [sp, #96]	; 0x60
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	f43f aef6 	beq.w	8006b80 <_strtod_l+0x490>
 8006d94:	2101      	movs	r1, #1
 8006d96:	4620      	mov	r0, r4
 8006d98:	f002 f970 	bl	800907c <__i2b>
 8006d9c:	4606      	mov	r6, r0
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	f43f aeee 	beq.w	8006b80 <_strtod_l+0x490>
 8006da4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006da6:	9904      	ldr	r1, [sp, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bfab      	itete	ge
 8006dac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006dae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006db0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006db2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006db6:	bfac      	ite	ge
 8006db8:	eb03 0902 	addge.w	r9, r3, r2
 8006dbc:	1ad7      	sublt	r7, r2, r3
 8006dbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006dc0:	eba3 0801 	sub.w	r8, r3, r1
 8006dc4:	4490      	add	r8, r2
 8006dc6:	4ba1      	ldr	r3, [pc, #644]	; (800704c <_strtod_l+0x95c>)
 8006dc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dcc:	4598      	cmp	r8, r3
 8006dce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006dd2:	f280 80c7 	bge.w	8006f64 <_strtod_l+0x874>
 8006dd6:	eba3 0308 	sub.w	r3, r3, r8
 8006dda:	2b1f      	cmp	r3, #31
 8006ddc:	eba2 0203 	sub.w	r2, r2, r3
 8006de0:	f04f 0101 	mov.w	r1, #1
 8006de4:	f300 80b1 	bgt.w	8006f4a <_strtod_l+0x85a>
 8006de8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dec:	930d      	str	r3, [sp, #52]	; 0x34
 8006dee:	2300      	movs	r3, #0
 8006df0:	9308      	str	r3, [sp, #32]
 8006df2:	eb09 0802 	add.w	r8, r9, r2
 8006df6:	9b04      	ldr	r3, [sp, #16]
 8006df8:	45c1      	cmp	r9, r8
 8006dfa:	4417      	add	r7, r2
 8006dfc:	441f      	add	r7, r3
 8006dfe:	464b      	mov	r3, r9
 8006e00:	bfa8      	it	ge
 8006e02:	4643      	movge	r3, r8
 8006e04:	42bb      	cmp	r3, r7
 8006e06:	bfa8      	it	ge
 8006e08:	463b      	movge	r3, r7
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	bfc2      	ittt	gt
 8006e0e:	eba8 0803 	subgt.w	r8, r8, r3
 8006e12:	1aff      	subgt	r7, r7, r3
 8006e14:	eba9 0903 	subgt.w	r9, r9, r3
 8006e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dd17      	ble.n	8006e4e <_strtod_l+0x75e>
 8006e1e:	4631      	mov	r1, r6
 8006e20:	461a      	mov	r2, r3
 8006e22:	4620      	mov	r0, r4
 8006e24:	f002 f9ea 	bl	80091fc <__pow5mult>
 8006e28:	4606      	mov	r6, r0
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	f43f aea8 	beq.w	8006b80 <_strtod_l+0x490>
 8006e30:	4601      	mov	r1, r0
 8006e32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e34:	4620      	mov	r0, r4
 8006e36:	f002 f937 	bl	80090a8 <__multiply>
 8006e3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	f43f ae9f 	beq.w	8006b80 <_strtod_l+0x490>
 8006e42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e44:	4620      	mov	r0, r4
 8006e46:	f002 f817 	bl	8008e78 <_Bfree>
 8006e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e4c:	9318      	str	r3, [sp, #96]	; 0x60
 8006e4e:	f1b8 0f00 	cmp.w	r8, #0
 8006e52:	f300 808c 	bgt.w	8006f6e <_strtod_l+0x87e>
 8006e56:	9b06      	ldr	r3, [sp, #24]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	dd08      	ble.n	8006e6e <_strtod_l+0x77e>
 8006e5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e5e:	9905      	ldr	r1, [sp, #20]
 8006e60:	4620      	mov	r0, r4
 8006e62:	f002 f9cb 	bl	80091fc <__pow5mult>
 8006e66:	9005      	str	r0, [sp, #20]
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	f43f ae89 	beq.w	8006b80 <_strtod_l+0x490>
 8006e6e:	2f00      	cmp	r7, #0
 8006e70:	dd08      	ble.n	8006e84 <_strtod_l+0x794>
 8006e72:	9905      	ldr	r1, [sp, #20]
 8006e74:	463a      	mov	r2, r7
 8006e76:	4620      	mov	r0, r4
 8006e78:	f002 fa1a 	bl	80092b0 <__lshift>
 8006e7c:	9005      	str	r0, [sp, #20]
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	f43f ae7e 	beq.w	8006b80 <_strtod_l+0x490>
 8006e84:	f1b9 0f00 	cmp.w	r9, #0
 8006e88:	dd08      	ble.n	8006e9c <_strtod_l+0x7ac>
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	464a      	mov	r2, r9
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f002 fa0e 	bl	80092b0 <__lshift>
 8006e94:	4606      	mov	r6, r0
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f43f ae72 	beq.w	8006b80 <_strtod_l+0x490>
 8006e9c:	9a05      	ldr	r2, [sp, #20]
 8006e9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f002 fa91 	bl	80093c8 <__mdiff>
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	f43f ae69 	beq.w	8006b80 <_strtod_l+0x490>
 8006eae:	68c3      	ldr	r3, [r0, #12]
 8006eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60c3      	str	r3, [r0, #12]
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	f002 fa6a 	bl	8009390 <__mcmp>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	da60      	bge.n	8006f82 <_strtod_l+0x892>
 8006ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ec2:	ea53 030a 	orrs.w	r3, r3, sl
 8006ec6:	f040 8082 	bne.w	8006fce <_strtod_l+0x8de>
 8006eca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d17d      	bne.n	8006fce <_strtod_l+0x8de>
 8006ed2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ed6:	0d1b      	lsrs	r3, r3, #20
 8006ed8:	051b      	lsls	r3, r3, #20
 8006eda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006ede:	d976      	bls.n	8006fce <_strtod_l+0x8de>
 8006ee0:	696b      	ldr	r3, [r5, #20]
 8006ee2:	b913      	cbnz	r3, 8006eea <_strtod_l+0x7fa>
 8006ee4:	692b      	ldr	r3, [r5, #16]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	dd71      	ble.n	8006fce <_strtod_l+0x8de>
 8006eea:	4629      	mov	r1, r5
 8006eec:	2201      	movs	r2, #1
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f002 f9de 	bl	80092b0 <__lshift>
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	f002 fa4a 	bl	8009390 <__mcmp>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	dd66      	ble.n	8006fce <_strtod_l+0x8de>
 8006f00:	9904      	ldr	r1, [sp, #16]
 8006f02:	4a53      	ldr	r2, [pc, #332]	; (8007050 <_strtod_l+0x960>)
 8006f04:	465b      	mov	r3, fp
 8006f06:	2900      	cmp	r1, #0
 8006f08:	f000 8081 	beq.w	800700e <_strtod_l+0x91e>
 8006f0c:	ea02 010b 	and.w	r1, r2, fp
 8006f10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006f14:	dc7b      	bgt.n	800700e <_strtod_l+0x91e>
 8006f16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006f1a:	f77f aea9 	ble.w	8006c70 <_strtod_l+0x580>
 8006f1e:	4b4d      	ldr	r3, [pc, #308]	; (8007054 <_strtod_l+0x964>)
 8006f20:	4650      	mov	r0, sl
 8006f22:	4659      	mov	r1, fp
 8006f24:	2200      	movs	r2, #0
 8006f26:	f7f9 fb8f 	bl	8000648 <__aeabi_dmul>
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4303      	orrs	r3, r0
 8006f2e:	bf08      	it	eq
 8006f30:	2322      	moveq	r3, #34	; 0x22
 8006f32:	4682      	mov	sl, r0
 8006f34:	468b      	mov	fp, r1
 8006f36:	bf08      	it	eq
 8006f38:	6023      	streq	r3, [r4, #0]
 8006f3a:	e62b      	b.n	8006b94 <_strtod_l+0x4a4>
 8006f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	ea03 0a0a 	and.w	sl, r3, sl
 8006f48:	e6e3      	b.n	8006d12 <_strtod_l+0x622>
 8006f4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006f4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006f52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006f56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006f5a:	fa01 f308 	lsl.w	r3, r1, r8
 8006f5e:	9308      	str	r3, [sp, #32]
 8006f60:	910d      	str	r1, [sp, #52]	; 0x34
 8006f62:	e746      	b.n	8006df2 <_strtod_l+0x702>
 8006f64:	2300      	movs	r3, #0
 8006f66:	9308      	str	r3, [sp, #32]
 8006f68:	2301      	movs	r3, #1
 8006f6a:	930d      	str	r3, [sp, #52]	; 0x34
 8006f6c:	e741      	b.n	8006df2 <_strtod_l+0x702>
 8006f6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f70:	4642      	mov	r2, r8
 8006f72:	4620      	mov	r0, r4
 8006f74:	f002 f99c 	bl	80092b0 <__lshift>
 8006f78:	9018      	str	r0, [sp, #96]	; 0x60
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	f47f af6b 	bne.w	8006e56 <_strtod_l+0x766>
 8006f80:	e5fe      	b.n	8006b80 <_strtod_l+0x490>
 8006f82:	465f      	mov	r7, fp
 8006f84:	d16e      	bne.n	8007064 <_strtod_l+0x974>
 8006f86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f8c:	b342      	cbz	r2, 8006fe0 <_strtod_l+0x8f0>
 8006f8e:	4a32      	ldr	r2, [pc, #200]	; (8007058 <_strtod_l+0x968>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d128      	bne.n	8006fe6 <_strtod_l+0x8f6>
 8006f94:	9b04      	ldr	r3, [sp, #16]
 8006f96:	4651      	mov	r1, sl
 8006f98:	b1eb      	cbz	r3, 8006fd6 <_strtod_l+0x8e6>
 8006f9a:	4b2d      	ldr	r3, [pc, #180]	; (8007050 <_strtod_l+0x960>)
 8006f9c:	403b      	ands	r3, r7
 8006f9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa6:	d819      	bhi.n	8006fdc <_strtod_l+0x8ec>
 8006fa8:	0d1b      	lsrs	r3, r3, #20
 8006faa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fae:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb2:	4299      	cmp	r1, r3
 8006fb4:	d117      	bne.n	8006fe6 <_strtod_l+0x8f6>
 8006fb6:	4b29      	ldr	r3, [pc, #164]	; (800705c <_strtod_l+0x96c>)
 8006fb8:	429f      	cmp	r7, r3
 8006fba:	d102      	bne.n	8006fc2 <_strtod_l+0x8d2>
 8006fbc:	3101      	adds	r1, #1
 8006fbe:	f43f addf 	beq.w	8006b80 <_strtod_l+0x490>
 8006fc2:	4b23      	ldr	r3, [pc, #140]	; (8007050 <_strtod_l+0x960>)
 8006fc4:	403b      	ands	r3, r7
 8006fc6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006fca:	f04f 0a00 	mov.w	sl, #0
 8006fce:	9b04      	ldr	r3, [sp, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1a4      	bne.n	8006f1e <_strtod_l+0x82e>
 8006fd4:	e5de      	b.n	8006b94 <_strtod_l+0x4a4>
 8006fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fda:	e7ea      	b.n	8006fb2 <_strtod_l+0x8c2>
 8006fdc:	4613      	mov	r3, r2
 8006fde:	e7e8      	b.n	8006fb2 <_strtod_l+0x8c2>
 8006fe0:	ea53 030a 	orrs.w	r3, r3, sl
 8006fe4:	d08c      	beq.n	8006f00 <_strtod_l+0x810>
 8006fe6:	9b08      	ldr	r3, [sp, #32]
 8006fe8:	b1db      	cbz	r3, 8007022 <_strtod_l+0x932>
 8006fea:	423b      	tst	r3, r7
 8006fec:	d0ef      	beq.n	8006fce <_strtod_l+0x8de>
 8006fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ff0:	9a04      	ldr	r2, [sp, #16]
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	b1c3      	cbz	r3, 800702a <_strtod_l+0x93a>
 8006ff8:	f7ff fb5c 	bl	80066b4 <sulp>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	ec51 0b18 	vmov	r0, r1, d8
 8007004:	f7f9 f96a 	bl	80002dc <__adddf3>
 8007008:	4682      	mov	sl, r0
 800700a:	468b      	mov	fp, r1
 800700c:	e7df      	b.n	8006fce <_strtod_l+0x8de>
 800700e:	4013      	ands	r3, r2
 8007010:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007014:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007018:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800701c:	f04f 3aff 	mov.w	sl, #4294967295
 8007020:	e7d5      	b.n	8006fce <_strtod_l+0x8de>
 8007022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007024:	ea13 0f0a 	tst.w	r3, sl
 8007028:	e7e0      	b.n	8006fec <_strtod_l+0x8fc>
 800702a:	f7ff fb43 	bl	80066b4 <sulp>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	ec51 0b18 	vmov	r0, r1, d8
 8007036:	f7f9 f94f 	bl	80002d8 <__aeabi_dsub>
 800703a:	2200      	movs	r2, #0
 800703c:	2300      	movs	r3, #0
 800703e:	4682      	mov	sl, r0
 8007040:	468b      	mov	fp, r1
 8007042:	f7f9 fd69 	bl	8000b18 <__aeabi_dcmpeq>
 8007046:	2800      	cmp	r0, #0
 8007048:	d0c1      	beq.n	8006fce <_strtod_l+0x8de>
 800704a:	e611      	b.n	8006c70 <_strtod_l+0x580>
 800704c:	fffffc02 	.word	0xfffffc02
 8007050:	7ff00000 	.word	0x7ff00000
 8007054:	39500000 	.word	0x39500000
 8007058:	000fffff 	.word	0x000fffff
 800705c:	7fefffff 	.word	0x7fefffff
 8007060:	0800b5f8 	.word	0x0800b5f8
 8007064:	4631      	mov	r1, r6
 8007066:	4628      	mov	r0, r5
 8007068:	f002 fb10 	bl	800968c <__ratio>
 800706c:	ec59 8b10 	vmov	r8, r9, d0
 8007070:	ee10 0a10 	vmov	r0, s0
 8007074:	2200      	movs	r2, #0
 8007076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800707a:	4649      	mov	r1, r9
 800707c:	f7f9 fd60 	bl	8000b40 <__aeabi_dcmple>
 8007080:	2800      	cmp	r0, #0
 8007082:	d07a      	beq.n	800717a <_strtod_l+0xa8a>
 8007084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d04a      	beq.n	8007120 <_strtod_l+0xa30>
 800708a:	4b95      	ldr	r3, [pc, #596]	; (80072e0 <_strtod_l+0xbf0>)
 800708c:	2200      	movs	r2, #0
 800708e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007092:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80072e0 <_strtod_l+0xbf0>
 8007096:	f04f 0800 	mov.w	r8, #0
 800709a:	4b92      	ldr	r3, [pc, #584]	; (80072e4 <_strtod_l+0xbf4>)
 800709c:	403b      	ands	r3, r7
 800709e:	930d      	str	r3, [sp, #52]	; 0x34
 80070a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070a2:	4b91      	ldr	r3, [pc, #580]	; (80072e8 <_strtod_l+0xbf8>)
 80070a4:	429a      	cmp	r2, r3
 80070a6:	f040 80b0 	bne.w	800720a <_strtod_l+0xb1a>
 80070aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80070b2:	ec4b ab10 	vmov	d0, sl, fp
 80070b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80070ba:	f002 fa0f 	bl	80094dc <__ulp>
 80070be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070c2:	ec53 2b10 	vmov	r2, r3, d0
 80070c6:	f7f9 fabf 	bl	8000648 <__aeabi_dmul>
 80070ca:	4652      	mov	r2, sl
 80070cc:	465b      	mov	r3, fp
 80070ce:	f7f9 f905 	bl	80002dc <__adddf3>
 80070d2:	460b      	mov	r3, r1
 80070d4:	4983      	ldr	r1, [pc, #524]	; (80072e4 <_strtod_l+0xbf4>)
 80070d6:	4a85      	ldr	r2, [pc, #532]	; (80072ec <_strtod_l+0xbfc>)
 80070d8:	4019      	ands	r1, r3
 80070da:	4291      	cmp	r1, r2
 80070dc:	4682      	mov	sl, r0
 80070de:	d960      	bls.n	80071a2 <_strtod_l+0xab2>
 80070e0:	ee18 3a90 	vmov	r3, s17
 80070e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d104      	bne.n	80070f6 <_strtod_l+0xa06>
 80070ec:	ee18 3a10 	vmov	r3, s16
 80070f0:	3301      	adds	r3, #1
 80070f2:	f43f ad45 	beq.w	8006b80 <_strtod_l+0x490>
 80070f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80072f8 <_strtod_l+0xc08>
 80070fa:	f04f 3aff 	mov.w	sl, #4294967295
 80070fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007100:	4620      	mov	r0, r4
 8007102:	f001 feb9 	bl	8008e78 <_Bfree>
 8007106:	9905      	ldr	r1, [sp, #20]
 8007108:	4620      	mov	r0, r4
 800710a:	f001 feb5 	bl	8008e78 <_Bfree>
 800710e:	4631      	mov	r1, r6
 8007110:	4620      	mov	r0, r4
 8007112:	f001 feb1 	bl	8008e78 <_Bfree>
 8007116:	4629      	mov	r1, r5
 8007118:	4620      	mov	r0, r4
 800711a:	f001 fead 	bl	8008e78 <_Bfree>
 800711e:	e61a      	b.n	8006d56 <_strtod_l+0x666>
 8007120:	f1ba 0f00 	cmp.w	sl, #0
 8007124:	d11b      	bne.n	800715e <_strtod_l+0xa6e>
 8007126:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800712a:	b9f3      	cbnz	r3, 800716a <_strtod_l+0xa7a>
 800712c:	4b6c      	ldr	r3, [pc, #432]	; (80072e0 <_strtod_l+0xbf0>)
 800712e:	2200      	movs	r2, #0
 8007130:	4640      	mov	r0, r8
 8007132:	4649      	mov	r1, r9
 8007134:	f7f9 fcfa 	bl	8000b2c <__aeabi_dcmplt>
 8007138:	b9d0      	cbnz	r0, 8007170 <_strtod_l+0xa80>
 800713a:	4640      	mov	r0, r8
 800713c:	4649      	mov	r1, r9
 800713e:	4b6c      	ldr	r3, [pc, #432]	; (80072f0 <_strtod_l+0xc00>)
 8007140:	2200      	movs	r2, #0
 8007142:	f7f9 fa81 	bl	8000648 <__aeabi_dmul>
 8007146:	4680      	mov	r8, r0
 8007148:	4689      	mov	r9, r1
 800714a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800714e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007152:	9315      	str	r3, [sp, #84]	; 0x54
 8007154:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007158:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800715c:	e79d      	b.n	800709a <_strtod_l+0x9aa>
 800715e:	f1ba 0f01 	cmp.w	sl, #1
 8007162:	d102      	bne.n	800716a <_strtod_l+0xa7a>
 8007164:	2f00      	cmp	r7, #0
 8007166:	f43f ad83 	beq.w	8006c70 <_strtod_l+0x580>
 800716a:	4b62      	ldr	r3, [pc, #392]	; (80072f4 <_strtod_l+0xc04>)
 800716c:	2200      	movs	r2, #0
 800716e:	e78e      	b.n	800708e <_strtod_l+0x99e>
 8007170:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80072f0 <_strtod_l+0xc00>
 8007174:	f04f 0800 	mov.w	r8, #0
 8007178:	e7e7      	b.n	800714a <_strtod_l+0xa5a>
 800717a:	4b5d      	ldr	r3, [pc, #372]	; (80072f0 <_strtod_l+0xc00>)
 800717c:	4640      	mov	r0, r8
 800717e:	4649      	mov	r1, r9
 8007180:	2200      	movs	r2, #0
 8007182:	f7f9 fa61 	bl	8000648 <__aeabi_dmul>
 8007186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007188:	4680      	mov	r8, r0
 800718a:	4689      	mov	r9, r1
 800718c:	b933      	cbnz	r3, 800719c <_strtod_l+0xaac>
 800718e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007192:	900e      	str	r0, [sp, #56]	; 0x38
 8007194:	930f      	str	r3, [sp, #60]	; 0x3c
 8007196:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800719a:	e7dd      	b.n	8007158 <_strtod_l+0xa68>
 800719c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80071a0:	e7f9      	b.n	8007196 <_strtod_l+0xaa6>
 80071a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80071a6:	9b04      	ldr	r3, [sp, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1a8      	bne.n	80070fe <_strtod_l+0xa0e>
 80071ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80071b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071b2:	0d1b      	lsrs	r3, r3, #20
 80071b4:	051b      	lsls	r3, r3, #20
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d1a1      	bne.n	80070fe <_strtod_l+0xa0e>
 80071ba:	4640      	mov	r0, r8
 80071bc:	4649      	mov	r1, r9
 80071be:	f7f9 fda3 	bl	8000d08 <__aeabi_d2lz>
 80071c2:	f7f9 fa13 	bl	80005ec <__aeabi_l2d>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4640      	mov	r0, r8
 80071cc:	4649      	mov	r1, r9
 80071ce:	f7f9 f883 	bl	80002d8 <__aeabi_dsub>
 80071d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071d8:	ea43 030a 	orr.w	r3, r3, sl
 80071dc:	4313      	orrs	r3, r2
 80071de:	4680      	mov	r8, r0
 80071e0:	4689      	mov	r9, r1
 80071e2:	d055      	beq.n	8007290 <_strtod_l+0xba0>
 80071e4:	a336      	add	r3, pc, #216	; (adr r3, 80072c0 <_strtod_l+0xbd0>)
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	f7f9 fc9f 	bl	8000b2c <__aeabi_dcmplt>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	f47f acd0 	bne.w	8006b94 <_strtod_l+0x4a4>
 80071f4:	a334      	add	r3, pc, #208	; (adr r3, 80072c8 <_strtod_l+0xbd8>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	4640      	mov	r0, r8
 80071fc:	4649      	mov	r1, r9
 80071fe:	f7f9 fcb3 	bl	8000b68 <__aeabi_dcmpgt>
 8007202:	2800      	cmp	r0, #0
 8007204:	f43f af7b 	beq.w	80070fe <_strtod_l+0xa0e>
 8007208:	e4c4      	b.n	8006b94 <_strtod_l+0x4a4>
 800720a:	9b04      	ldr	r3, [sp, #16]
 800720c:	b333      	cbz	r3, 800725c <_strtod_l+0xb6c>
 800720e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007210:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007214:	d822      	bhi.n	800725c <_strtod_l+0xb6c>
 8007216:	a32e      	add	r3, pc, #184	; (adr r3, 80072d0 <_strtod_l+0xbe0>)
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	4640      	mov	r0, r8
 800721e:	4649      	mov	r1, r9
 8007220:	f7f9 fc8e 	bl	8000b40 <__aeabi_dcmple>
 8007224:	b1a0      	cbz	r0, 8007250 <_strtod_l+0xb60>
 8007226:	4649      	mov	r1, r9
 8007228:	4640      	mov	r0, r8
 800722a:	f7f9 fce5 	bl	8000bf8 <__aeabi_d2uiz>
 800722e:	2801      	cmp	r0, #1
 8007230:	bf38      	it	cc
 8007232:	2001      	movcc	r0, #1
 8007234:	f7f9 f98e 	bl	8000554 <__aeabi_ui2d>
 8007238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800723a:	4680      	mov	r8, r0
 800723c:	4689      	mov	r9, r1
 800723e:	bb23      	cbnz	r3, 800728a <_strtod_l+0xb9a>
 8007240:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007244:	9010      	str	r0, [sp, #64]	; 0x40
 8007246:	9311      	str	r3, [sp, #68]	; 0x44
 8007248:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800724c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007252:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007254:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	9309      	str	r3, [sp, #36]	; 0x24
 800725c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007260:	eeb0 0a48 	vmov.f32	s0, s16
 8007264:	eef0 0a68 	vmov.f32	s1, s17
 8007268:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800726c:	f002 f936 	bl	80094dc <__ulp>
 8007270:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007274:	ec53 2b10 	vmov	r2, r3, d0
 8007278:	f7f9 f9e6 	bl	8000648 <__aeabi_dmul>
 800727c:	ec53 2b18 	vmov	r2, r3, d8
 8007280:	f7f9 f82c 	bl	80002dc <__adddf3>
 8007284:	4682      	mov	sl, r0
 8007286:	468b      	mov	fp, r1
 8007288:	e78d      	b.n	80071a6 <_strtod_l+0xab6>
 800728a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800728e:	e7db      	b.n	8007248 <_strtod_l+0xb58>
 8007290:	a311      	add	r3, pc, #68	; (adr r3, 80072d8 <_strtod_l+0xbe8>)
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	f7f9 fc49 	bl	8000b2c <__aeabi_dcmplt>
 800729a:	e7b2      	b.n	8007202 <_strtod_l+0xb12>
 800729c:	2300      	movs	r3, #0
 800729e:	930a      	str	r3, [sp, #40]	; 0x28
 80072a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	f7ff ba6b 	b.w	8006780 <_strtod_l+0x90>
 80072aa:	2a65      	cmp	r2, #101	; 0x65
 80072ac:	f43f ab5f 	beq.w	800696e <_strtod_l+0x27e>
 80072b0:	2a45      	cmp	r2, #69	; 0x45
 80072b2:	f43f ab5c 	beq.w	800696e <_strtod_l+0x27e>
 80072b6:	2301      	movs	r3, #1
 80072b8:	f7ff bb94 	b.w	80069e4 <_strtod_l+0x2f4>
 80072bc:	f3af 8000 	nop.w
 80072c0:	94a03595 	.word	0x94a03595
 80072c4:	3fdfffff 	.word	0x3fdfffff
 80072c8:	35afe535 	.word	0x35afe535
 80072cc:	3fe00000 	.word	0x3fe00000
 80072d0:	ffc00000 	.word	0xffc00000
 80072d4:	41dfffff 	.word	0x41dfffff
 80072d8:	94a03595 	.word	0x94a03595
 80072dc:	3fcfffff 	.word	0x3fcfffff
 80072e0:	3ff00000 	.word	0x3ff00000
 80072e4:	7ff00000 	.word	0x7ff00000
 80072e8:	7fe00000 	.word	0x7fe00000
 80072ec:	7c9fffff 	.word	0x7c9fffff
 80072f0:	3fe00000 	.word	0x3fe00000
 80072f4:	bff00000 	.word	0xbff00000
 80072f8:	7fefffff 	.word	0x7fefffff

080072fc <_strtod_r>:
 80072fc:	4b01      	ldr	r3, [pc, #4]	; (8007304 <_strtod_r+0x8>)
 80072fe:	f7ff b9f7 	b.w	80066f0 <_strtod_l>
 8007302:	bf00      	nop
 8007304:	20000074 	.word	0x20000074

08007308 <_strtol_l.constprop.0>:
 8007308:	2b01      	cmp	r3, #1
 800730a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800730e:	d001      	beq.n	8007314 <_strtol_l.constprop.0+0xc>
 8007310:	2b24      	cmp	r3, #36	; 0x24
 8007312:	d906      	bls.n	8007322 <_strtol_l.constprop.0+0x1a>
 8007314:	f7fe fa58 	bl	80057c8 <__errno>
 8007318:	2316      	movs	r3, #22
 800731a:	6003      	str	r3, [r0, #0]
 800731c:	2000      	movs	r0, #0
 800731e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007322:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007408 <_strtol_l.constprop.0+0x100>
 8007326:	460d      	mov	r5, r1
 8007328:	462e      	mov	r6, r5
 800732a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800732e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007332:	f017 0708 	ands.w	r7, r7, #8
 8007336:	d1f7      	bne.n	8007328 <_strtol_l.constprop.0+0x20>
 8007338:	2c2d      	cmp	r4, #45	; 0x2d
 800733a:	d132      	bne.n	80073a2 <_strtol_l.constprop.0+0x9a>
 800733c:	782c      	ldrb	r4, [r5, #0]
 800733e:	2701      	movs	r7, #1
 8007340:	1cb5      	adds	r5, r6, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d05b      	beq.n	80073fe <_strtol_l.constprop.0+0xf6>
 8007346:	2b10      	cmp	r3, #16
 8007348:	d109      	bne.n	800735e <_strtol_l.constprop.0+0x56>
 800734a:	2c30      	cmp	r4, #48	; 0x30
 800734c:	d107      	bne.n	800735e <_strtol_l.constprop.0+0x56>
 800734e:	782c      	ldrb	r4, [r5, #0]
 8007350:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007354:	2c58      	cmp	r4, #88	; 0x58
 8007356:	d14d      	bne.n	80073f4 <_strtol_l.constprop.0+0xec>
 8007358:	786c      	ldrb	r4, [r5, #1]
 800735a:	2310      	movs	r3, #16
 800735c:	3502      	adds	r5, #2
 800735e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007362:	f108 38ff 	add.w	r8, r8, #4294967295
 8007366:	f04f 0c00 	mov.w	ip, #0
 800736a:	fbb8 f9f3 	udiv	r9, r8, r3
 800736e:	4666      	mov	r6, ip
 8007370:	fb03 8a19 	mls	sl, r3, r9, r8
 8007374:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007378:	f1be 0f09 	cmp.w	lr, #9
 800737c:	d816      	bhi.n	80073ac <_strtol_l.constprop.0+0xa4>
 800737e:	4674      	mov	r4, lr
 8007380:	42a3      	cmp	r3, r4
 8007382:	dd24      	ble.n	80073ce <_strtol_l.constprop.0+0xc6>
 8007384:	f1bc 0f00 	cmp.w	ip, #0
 8007388:	db1e      	blt.n	80073c8 <_strtol_l.constprop.0+0xc0>
 800738a:	45b1      	cmp	r9, r6
 800738c:	d31c      	bcc.n	80073c8 <_strtol_l.constprop.0+0xc0>
 800738e:	d101      	bne.n	8007394 <_strtol_l.constprop.0+0x8c>
 8007390:	45a2      	cmp	sl, r4
 8007392:	db19      	blt.n	80073c8 <_strtol_l.constprop.0+0xc0>
 8007394:	fb06 4603 	mla	r6, r6, r3, r4
 8007398:	f04f 0c01 	mov.w	ip, #1
 800739c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073a0:	e7e8      	b.n	8007374 <_strtol_l.constprop.0+0x6c>
 80073a2:	2c2b      	cmp	r4, #43	; 0x2b
 80073a4:	bf04      	itt	eq
 80073a6:	782c      	ldrbeq	r4, [r5, #0]
 80073a8:	1cb5      	addeq	r5, r6, #2
 80073aa:	e7ca      	b.n	8007342 <_strtol_l.constprop.0+0x3a>
 80073ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80073b0:	f1be 0f19 	cmp.w	lr, #25
 80073b4:	d801      	bhi.n	80073ba <_strtol_l.constprop.0+0xb2>
 80073b6:	3c37      	subs	r4, #55	; 0x37
 80073b8:	e7e2      	b.n	8007380 <_strtol_l.constprop.0+0x78>
 80073ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80073be:	f1be 0f19 	cmp.w	lr, #25
 80073c2:	d804      	bhi.n	80073ce <_strtol_l.constprop.0+0xc6>
 80073c4:	3c57      	subs	r4, #87	; 0x57
 80073c6:	e7db      	b.n	8007380 <_strtol_l.constprop.0+0x78>
 80073c8:	f04f 3cff 	mov.w	ip, #4294967295
 80073cc:	e7e6      	b.n	800739c <_strtol_l.constprop.0+0x94>
 80073ce:	f1bc 0f00 	cmp.w	ip, #0
 80073d2:	da05      	bge.n	80073e0 <_strtol_l.constprop.0+0xd8>
 80073d4:	2322      	movs	r3, #34	; 0x22
 80073d6:	6003      	str	r3, [r0, #0]
 80073d8:	4646      	mov	r6, r8
 80073da:	b942      	cbnz	r2, 80073ee <_strtol_l.constprop.0+0xe6>
 80073dc:	4630      	mov	r0, r6
 80073de:	e79e      	b.n	800731e <_strtol_l.constprop.0+0x16>
 80073e0:	b107      	cbz	r7, 80073e4 <_strtol_l.constprop.0+0xdc>
 80073e2:	4276      	negs	r6, r6
 80073e4:	2a00      	cmp	r2, #0
 80073e6:	d0f9      	beq.n	80073dc <_strtol_l.constprop.0+0xd4>
 80073e8:	f1bc 0f00 	cmp.w	ip, #0
 80073ec:	d000      	beq.n	80073f0 <_strtol_l.constprop.0+0xe8>
 80073ee:	1e69      	subs	r1, r5, #1
 80073f0:	6011      	str	r1, [r2, #0]
 80073f2:	e7f3      	b.n	80073dc <_strtol_l.constprop.0+0xd4>
 80073f4:	2430      	movs	r4, #48	; 0x30
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1b1      	bne.n	800735e <_strtol_l.constprop.0+0x56>
 80073fa:	2308      	movs	r3, #8
 80073fc:	e7af      	b.n	800735e <_strtol_l.constprop.0+0x56>
 80073fe:	2c30      	cmp	r4, #48	; 0x30
 8007400:	d0a5      	beq.n	800734e <_strtol_l.constprop.0+0x46>
 8007402:	230a      	movs	r3, #10
 8007404:	e7ab      	b.n	800735e <_strtol_l.constprop.0+0x56>
 8007406:	bf00      	nop
 8007408:	0800b621 	.word	0x0800b621

0800740c <_strtol_r>:
 800740c:	f7ff bf7c 	b.w	8007308 <_strtol_l.constprop.0>

08007410 <__swbuf_r>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	460e      	mov	r6, r1
 8007414:	4614      	mov	r4, r2
 8007416:	4605      	mov	r5, r0
 8007418:	b118      	cbz	r0, 8007422 <__swbuf_r+0x12>
 800741a:	6983      	ldr	r3, [r0, #24]
 800741c:	b90b      	cbnz	r3, 8007422 <__swbuf_r+0x12>
 800741e:	f001 f84b 	bl	80084b8 <__sinit>
 8007422:	4b21      	ldr	r3, [pc, #132]	; (80074a8 <__swbuf_r+0x98>)
 8007424:	429c      	cmp	r4, r3
 8007426:	d12b      	bne.n	8007480 <__swbuf_r+0x70>
 8007428:	686c      	ldr	r4, [r5, #4]
 800742a:	69a3      	ldr	r3, [r4, #24]
 800742c:	60a3      	str	r3, [r4, #8]
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	071a      	lsls	r2, r3, #28
 8007432:	d52f      	bpl.n	8007494 <__swbuf_r+0x84>
 8007434:	6923      	ldr	r3, [r4, #16]
 8007436:	b36b      	cbz	r3, 8007494 <__swbuf_r+0x84>
 8007438:	6923      	ldr	r3, [r4, #16]
 800743a:	6820      	ldr	r0, [r4, #0]
 800743c:	1ac0      	subs	r0, r0, r3
 800743e:	6963      	ldr	r3, [r4, #20]
 8007440:	b2f6      	uxtb	r6, r6
 8007442:	4283      	cmp	r3, r0
 8007444:	4637      	mov	r7, r6
 8007446:	dc04      	bgt.n	8007452 <__swbuf_r+0x42>
 8007448:	4621      	mov	r1, r4
 800744a:	4628      	mov	r0, r5
 800744c:	f000 ffa0 	bl	8008390 <_fflush_r>
 8007450:	bb30      	cbnz	r0, 80074a0 <__swbuf_r+0x90>
 8007452:	68a3      	ldr	r3, [r4, #8]
 8007454:	3b01      	subs	r3, #1
 8007456:	60a3      	str	r3, [r4, #8]
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	6022      	str	r2, [r4, #0]
 800745e:	701e      	strb	r6, [r3, #0]
 8007460:	6963      	ldr	r3, [r4, #20]
 8007462:	3001      	adds	r0, #1
 8007464:	4283      	cmp	r3, r0
 8007466:	d004      	beq.n	8007472 <__swbuf_r+0x62>
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	07db      	lsls	r3, r3, #31
 800746c:	d506      	bpl.n	800747c <__swbuf_r+0x6c>
 800746e:	2e0a      	cmp	r6, #10
 8007470:	d104      	bne.n	800747c <__swbuf_r+0x6c>
 8007472:	4621      	mov	r1, r4
 8007474:	4628      	mov	r0, r5
 8007476:	f000 ff8b 	bl	8008390 <_fflush_r>
 800747a:	b988      	cbnz	r0, 80074a0 <__swbuf_r+0x90>
 800747c:	4638      	mov	r0, r7
 800747e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007480:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <__swbuf_r+0x9c>)
 8007482:	429c      	cmp	r4, r3
 8007484:	d101      	bne.n	800748a <__swbuf_r+0x7a>
 8007486:	68ac      	ldr	r4, [r5, #8]
 8007488:	e7cf      	b.n	800742a <__swbuf_r+0x1a>
 800748a:	4b09      	ldr	r3, [pc, #36]	; (80074b0 <__swbuf_r+0xa0>)
 800748c:	429c      	cmp	r4, r3
 800748e:	bf08      	it	eq
 8007490:	68ec      	ldreq	r4, [r5, #12]
 8007492:	e7ca      	b.n	800742a <__swbuf_r+0x1a>
 8007494:	4621      	mov	r1, r4
 8007496:	4628      	mov	r0, r5
 8007498:	f000 f80c 	bl	80074b4 <__swsetup_r>
 800749c:	2800      	cmp	r0, #0
 800749e:	d0cb      	beq.n	8007438 <__swbuf_r+0x28>
 80074a0:	f04f 37ff 	mov.w	r7, #4294967295
 80074a4:	e7ea      	b.n	800747c <__swbuf_r+0x6c>
 80074a6:	bf00      	nop
 80074a8:	0800b7d4 	.word	0x0800b7d4
 80074ac:	0800b7f4 	.word	0x0800b7f4
 80074b0:	0800b7b4 	.word	0x0800b7b4

080074b4 <__swsetup_r>:
 80074b4:	4b32      	ldr	r3, [pc, #200]	; (8007580 <__swsetup_r+0xcc>)
 80074b6:	b570      	push	{r4, r5, r6, lr}
 80074b8:	681d      	ldr	r5, [r3, #0]
 80074ba:	4606      	mov	r6, r0
 80074bc:	460c      	mov	r4, r1
 80074be:	b125      	cbz	r5, 80074ca <__swsetup_r+0x16>
 80074c0:	69ab      	ldr	r3, [r5, #24]
 80074c2:	b913      	cbnz	r3, 80074ca <__swsetup_r+0x16>
 80074c4:	4628      	mov	r0, r5
 80074c6:	f000 fff7 	bl	80084b8 <__sinit>
 80074ca:	4b2e      	ldr	r3, [pc, #184]	; (8007584 <__swsetup_r+0xd0>)
 80074cc:	429c      	cmp	r4, r3
 80074ce:	d10f      	bne.n	80074f0 <__swsetup_r+0x3c>
 80074d0:	686c      	ldr	r4, [r5, #4]
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074d8:	0719      	lsls	r1, r3, #28
 80074da:	d42c      	bmi.n	8007536 <__swsetup_r+0x82>
 80074dc:	06dd      	lsls	r5, r3, #27
 80074de:	d411      	bmi.n	8007504 <__swsetup_r+0x50>
 80074e0:	2309      	movs	r3, #9
 80074e2:	6033      	str	r3, [r6, #0]
 80074e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	f04f 30ff 	mov.w	r0, #4294967295
 80074ee:	e03e      	b.n	800756e <__swsetup_r+0xba>
 80074f0:	4b25      	ldr	r3, [pc, #148]	; (8007588 <__swsetup_r+0xd4>)
 80074f2:	429c      	cmp	r4, r3
 80074f4:	d101      	bne.n	80074fa <__swsetup_r+0x46>
 80074f6:	68ac      	ldr	r4, [r5, #8]
 80074f8:	e7eb      	b.n	80074d2 <__swsetup_r+0x1e>
 80074fa:	4b24      	ldr	r3, [pc, #144]	; (800758c <__swsetup_r+0xd8>)
 80074fc:	429c      	cmp	r4, r3
 80074fe:	bf08      	it	eq
 8007500:	68ec      	ldreq	r4, [r5, #12]
 8007502:	e7e6      	b.n	80074d2 <__swsetup_r+0x1e>
 8007504:	0758      	lsls	r0, r3, #29
 8007506:	d512      	bpl.n	800752e <__swsetup_r+0x7a>
 8007508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800750a:	b141      	cbz	r1, 800751e <__swsetup_r+0x6a>
 800750c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007510:	4299      	cmp	r1, r3
 8007512:	d002      	beq.n	800751a <__swsetup_r+0x66>
 8007514:	4630      	mov	r0, r6
 8007516:	f002 f947 	bl	80097a8 <_free_r>
 800751a:	2300      	movs	r3, #0
 800751c:	6363      	str	r3, [r4, #52]	; 0x34
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007524:	81a3      	strh	r3, [r4, #12]
 8007526:	2300      	movs	r3, #0
 8007528:	6063      	str	r3, [r4, #4]
 800752a:	6923      	ldr	r3, [r4, #16]
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	f043 0308 	orr.w	r3, r3, #8
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	b94b      	cbnz	r3, 800754e <__swsetup_r+0x9a>
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007544:	d003      	beq.n	800754e <__swsetup_r+0x9a>
 8007546:	4621      	mov	r1, r4
 8007548:	4630      	mov	r0, r6
 800754a:	f001 fbed 	bl	8008d28 <__smakebuf_r>
 800754e:	89a0      	ldrh	r0, [r4, #12]
 8007550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007554:	f010 0301 	ands.w	r3, r0, #1
 8007558:	d00a      	beq.n	8007570 <__swsetup_r+0xbc>
 800755a:	2300      	movs	r3, #0
 800755c:	60a3      	str	r3, [r4, #8]
 800755e:	6963      	ldr	r3, [r4, #20]
 8007560:	425b      	negs	r3, r3
 8007562:	61a3      	str	r3, [r4, #24]
 8007564:	6923      	ldr	r3, [r4, #16]
 8007566:	b943      	cbnz	r3, 800757a <__swsetup_r+0xc6>
 8007568:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800756c:	d1ba      	bne.n	80074e4 <__swsetup_r+0x30>
 800756e:	bd70      	pop	{r4, r5, r6, pc}
 8007570:	0781      	lsls	r1, r0, #30
 8007572:	bf58      	it	pl
 8007574:	6963      	ldrpl	r3, [r4, #20]
 8007576:	60a3      	str	r3, [r4, #8]
 8007578:	e7f4      	b.n	8007564 <__swsetup_r+0xb0>
 800757a:	2000      	movs	r0, #0
 800757c:	e7f7      	b.n	800756e <__swsetup_r+0xba>
 800757e:	bf00      	nop
 8007580:	2000000c 	.word	0x2000000c
 8007584:	0800b7d4 	.word	0x0800b7d4
 8007588:	0800b7f4 	.word	0x0800b7f4
 800758c:	0800b7b4 	.word	0x0800b7b4

08007590 <quorem>:
 8007590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	6903      	ldr	r3, [r0, #16]
 8007596:	690c      	ldr	r4, [r1, #16]
 8007598:	42a3      	cmp	r3, r4
 800759a:	4607      	mov	r7, r0
 800759c:	f2c0 8081 	blt.w	80076a2 <quorem+0x112>
 80075a0:	3c01      	subs	r4, #1
 80075a2:	f101 0814 	add.w	r8, r1, #20
 80075a6:	f100 0514 	add.w	r5, r0, #20
 80075aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075b8:	3301      	adds	r3, #1
 80075ba:	429a      	cmp	r2, r3
 80075bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80075c8:	d331      	bcc.n	800762e <quorem+0x9e>
 80075ca:	f04f 0e00 	mov.w	lr, #0
 80075ce:	4640      	mov	r0, r8
 80075d0:	46ac      	mov	ip, r5
 80075d2:	46f2      	mov	sl, lr
 80075d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80075d8:	b293      	uxth	r3, r2
 80075da:	fb06 e303 	mla	r3, r6, r3, lr
 80075de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	ebaa 0303 	sub.w	r3, sl, r3
 80075e8:	f8dc a000 	ldr.w	sl, [ip]
 80075ec:	0c12      	lsrs	r2, r2, #16
 80075ee:	fa13 f38a 	uxtah	r3, r3, sl
 80075f2:	fb06 e202 	mla	r2, r6, r2, lr
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	9b00      	ldr	r3, [sp, #0]
 80075fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075fe:	b292      	uxth	r2, r2
 8007600:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007604:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007608:	f8bd 3000 	ldrh.w	r3, [sp]
 800760c:	4581      	cmp	r9, r0
 800760e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007612:	f84c 3b04 	str.w	r3, [ip], #4
 8007616:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800761a:	d2db      	bcs.n	80075d4 <quorem+0x44>
 800761c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007620:	b92b      	cbnz	r3, 800762e <quorem+0x9e>
 8007622:	9b01      	ldr	r3, [sp, #4]
 8007624:	3b04      	subs	r3, #4
 8007626:	429d      	cmp	r5, r3
 8007628:	461a      	mov	r2, r3
 800762a:	d32e      	bcc.n	800768a <quorem+0xfa>
 800762c:	613c      	str	r4, [r7, #16]
 800762e:	4638      	mov	r0, r7
 8007630:	f001 feae 	bl	8009390 <__mcmp>
 8007634:	2800      	cmp	r0, #0
 8007636:	db24      	blt.n	8007682 <quorem+0xf2>
 8007638:	3601      	adds	r6, #1
 800763a:	4628      	mov	r0, r5
 800763c:	f04f 0c00 	mov.w	ip, #0
 8007640:	f858 2b04 	ldr.w	r2, [r8], #4
 8007644:	f8d0 e000 	ldr.w	lr, [r0]
 8007648:	b293      	uxth	r3, r2
 800764a:	ebac 0303 	sub.w	r3, ip, r3
 800764e:	0c12      	lsrs	r2, r2, #16
 8007650:	fa13 f38e 	uxtah	r3, r3, lr
 8007654:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007658:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800765c:	b29b      	uxth	r3, r3
 800765e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007662:	45c1      	cmp	r9, r8
 8007664:	f840 3b04 	str.w	r3, [r0], #4
 8007668:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800766c:	d2e8      	bcs.n	8007640 <quorem+0xb0>
 800766e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007676:	b922      	cbnz	r2, 8007682 <quorem+0xf2>
 8007678:	3b04      	subs	r3, #4
 800767a:	429d      	cmp	r5, r3
 800767c:	461a      	mov	r2, r3
 800767e:	d30a      	bcc.n	8007696 <quorem+0x106>
 8007680:	613c      	str	r4, [r7, #16]
 8007682:	4630      	mov	r0, r6
 8007684:	b003      	add	sp, #12
 8007686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768a:	6812      	ldr	r2, [r2, #0]
 800768c:	3b04      	subs	r3, #4
 800768e:	2a00      	cmp	r2, #0
 8007690:	d1cc      	bne.n	800762c <quorem+0x9c>
 8007692:	3c01      	subs	r4, #1
 8007694:	e7c7      	b.n	8007626 <quorem+0x96>
 8007696:	6812      	ldr	r2, [r2, #0]
 8007698:	3b04      	subs	r3, #4
 800769a:	2a00      	cmp	r2, #0
 800769c:	d1f0      	bne.n	8007680 <quorem+0xf0>
 800769e:	3c01      	subs	r4, #1
 80076a0:	e7eb      	b.n	800767a <quorem+0xea>
 80076a2:	2000      	movs	r0, #0
 80076a4:	e7ee      	b.n	8007684 <quorem+0xf4>
	...

080076a8 <_dtoa_r>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	ed2d 8b04 	vpush	{d8-d9}
 80076b0:	ec57 6b10 	vmov	r6, r7, d0
 80076b4:	b093      	sub	sp, #76	; 0x4c
 80076b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076bc:	9106      	str	r1, [sp, #24]
 80076be:	ee10 aa10 	vmov	sl, s0
 80076c2:	4604      	mov	r4, r0
 80076c4:	9209      	str	r2, [sp, #36]	; 0x24
 80076c6:	930c      	str	r3, [sp, #48]	; 0x30
 80076c8:	46bb      	mov	fp, r7
 80076ca:	b975      	cbnz	r5, 80076ea <_dtoa_r+0x42>
 80076cc:	2010      	movs	r0, #16
 80076ce:	f001 fb6b 	bl	8008da8 <malloc>
 80076d2:	4602      	mov	r2, r0
 80076d4:	6260      	str	r0, [r4, #36]	; 0x24
 80076d6:	b920      	cbnz	r0, 80076e2 <_dtoa_r+0x3a>
 80076d8:	4ba7      	ldr	r3, [pc, #668]	; (8007978 <_dtoa_r+0x2d0>)
 80076da:	21ea      	movs	r1, #234	; 0xea
 80076dc:	48a7      	ldr	r0, [pc, #668]	; (800797c <_dtoa_r+0x2d4>)
 80076de:	f002 fcd1 	bl	800a084 <__assert_func>
 80076e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076e6:	6005      	str	r5, [r0, #0]
 80076e8:	60c5      	str	r5, [r0, #12]
 80076ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076ec:	6819      	ldr	r1, [r3, #0]
 80076ee:	b151      	cbz	r1, 8007706 <_dtoa_r+0x5e>
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	604a      	str	r2, [r1, #4]
 80076f4:	2301      	movs	r3, #1
 80076f6:	4093      	lsls	r3, r2
 80076f8:	608b      	str	r3, [r1, #8]
 80076fa:	4620      	mov	r0, r4
 80076fc:	f001 fbbc 	bl	8008e78 <_Bfree>
 8007700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	1e3b      	subs	r3, r7, #0
 8007708:	bfaa      	itet	ge
 800770a:	2300      	movge	r3, #0
 800770c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007710:	f8c8 3000 	strge.w	r3, [r8]
 8007714:	4b9a      	ldr	r3, [pc, #616]	; (8007980 <_dtoa_r+0x2d8>)
 8007716:	bfbc      	itt	lt
 8007718:	2201      	movlt	r2, #1
 800771a:	f8c8 2000 	strlt.w	r2, [r8]
 800771e:	ea33 030b 	bics.w	r3, r3, fp
 8007722:	d11b      	bne.n	800775c <_dtoa_r+0xb4>
 8007724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007726:	f242 730f 	movw	r3, #9999	; 0x270f
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007730:	4333      	orrs	r3, r6
 8007732:	f000 8592 	beq.w	800825a <_dtoa_r+0xbb2>
 8007736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007738:	b963      	cbnz	r3, 8007754 <_dtoa_r+0xac>
 800773a:	4b92      	ldr	r3, [pc, #584]	; (8007984 <_dtoa_r+0x2dc>)
 800773c:	e022      	b.n	8007784 <_dtoa_r+0xdc>
 800773e:	4b92      	ldr	r3, [pc, #584]	; (8007988 <_dtoa_r+0x2e0>)
 8007740:	9301      	str	r3, [sp, #4]
 8007742:	3308      	adds	r3, #8
 8007744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	9801      	ldr	r0, [sp, #4]
 800774a:	b013      	add	sp, #76	; 0x4c
 800774c:	ecbd 8b04 	vpop	{d8-d9}
 8007750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007754:	4b8b      	ldr	r3, [pc, #556]	; (8007984 <_dtoa_r+0x2dc>)
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	3303      	adds	r3, #3
 800775a:	e7f3      	b.n	8007744 <_dtoa_r+0x9c>
 800775c:	2200      	movs	r2, #0
 800775e:	2300      	movs	r3, #0
 8007760:	4650      	mov	r0, sl
 8007762:	4659      	mov	r1, fp
 8007764:	f7f9 f9d8 	bl	8000b18 <__aeabi_dcmpeq>
 8007768:	ec4b ab19 	vmov	d9, sl, fp
 800776c:	4680      	mov	r8, r0
 800776e:	b158      	cbz	r0, 8007788 <_dtoa_r+0xe0>
 8007770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007772:	2301      	movs	r3, #1
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 856b 	beq.w	8008254 <_dtoa_r+0xbac>
 800777e:	4883      	ldr	r0, [pc, #524]	; (800798c <_dtoa_r+0x2e4>)
 8007780:	6018      	str	r0, [r3, #0]
 8007782:	1e43      	subs	r3, r0, #1
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	e7df      	b.n	8007748 <_dtoa_r+0xa0>
 8007788:	ec4b ab10 	vmov	d0, sl, fp
 800778c:	aa10      	add	r2, sp, #64	; 0x40
 800778e:	a911      	add	r1, sp, #68	; 0x44
 8007790:	4620      	mov	r0, r4
 8007792:	f001 ff1f 	bl	80095d4 <__d2b>
 8007796:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800779a:	ee08 0a10 	vmov	s16, r0
 800779e:	2d00      	cmp	r5, #0
 80077a0:	f000 8084 	beq.w	80078ac <_dtoa_r+0x204>
 80077a4:	ee19 3a90 	vmov	r3, s19
 80077a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80077b0:	4656      	mov	r6, sl
 80077b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80077b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80077be:	4b74      	ldr	r3, [pc, #464]	; (8007990 <_dtoa_r+0x2e8>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	4630      	mov	r0, r6
 80077c4:	4639      	mov	r1, r7
 80077c6:	f7f8 fd87 	bl	80002d8 <__aeabi_dsub>
 80077ca:	a365      	add	r3, pc, #404	; (adr r3, 8007960 <_dtoa_r+0x2b8>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f7f8 ff3a 	bl	8000648 <__aeabi_dmul>
 80077d4:	a364      	add	r3, pc, #400	; (adr r3, 8007968 <_dtoa_r+0x2c0>)
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	f7f8 fd7f 	bl	80002dc <__adddf3>
 80077de:	4606      	mov	r6, r0
 80077e0:	4628      	mov	r0, r5
 80077e2:	460f      	mov	r7, r1
 80077e4:	f7f8 fec6 	bl	8000574 <__aeabi_i2d>
 80077e8:	a361      	add	r3, pc, #388	; (adr r3, 8007970 <_dtoa_r+0x2c8>)
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	f7f8 ff2b 	bl	8000648 <__aeabi_dmul>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4630      	mov	r0, r6
 80077f8:	4639      	mov	r1, r7
 80077fa:	f7f8 fd6f 	bl	80002dc <__adddf3>
 80077fe:	4606      	mov	r6, r0
 8007800:	460f      	mov	r7, r1
 8007802:	f7f9 f9d1 	bl	8000ba8 <__aeabi_d2iz>
 8007806:	2200      	movs	r2, #0
 8007808:	9000      	str	r0, [sp, #0]
 800780a:	2300      	movs	r3, #0
 800780c:	4630      	mov	r0, r6
 800780e:	4639      	mov	r1, r7
 8007810:	f7f9 f98c 	bl	8000b2c <__aeabi_dcmplt>
 8007814:	b150      	cbz	r0, 800782c <_dtoa_r+0x184>
 8007816:	9800      	ldr	r0, [sp, #0]
 8007818:	f7f8 feac 	bl	8000574 <__aeabi_i2d>
 800781c:	4632      	mov	r2, r6
 800781e:	463b      	mov	r3, r7
 8007820:	f7f9 f97a 	bl	8000b18 <__aeabi_dcmpeq>
 8007824:	b910      	cbnz	r0, 800782c <_dtoa_r+0x184>
 8007826:	9b00      	ldr	r3, [sp, #0]
 8007828:	3b01      	subs	r3, #1
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	9b00      	ldr	r3, [sp, #0]
 800782e:	2b16      	cmp	r3, #22
 8007830:	d85a      	bhi.n	80078e8 <_dtoa_r+0x240>
 8007832:	9a00      	ldr	r2, [sp, #0]
 8007834:	4b57      	ldr	r3, [pc, #348]	; (8007994 <_dtoa_r+0x2ec>)
 8007836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	ec51 0b19 	vmov	r0, r1, d9
 8007842:	f7f9 f973 	bl	8000b2c <__aeabi_dcmplt>
 8007846:	2800      	cmp	r0, #0
 8007848:	d050      	beq.n	80078ec <_dtoa_r+0x244>
 800784a:	9b00      	ldr	r3, [sp, #0]
 800784c:	3b01      	subs	r3, #1
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	2300      	movs	r3, #0
 8007852:	930b      	str	r3, [sp, #44]	; 0x2c
 8007854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007856:	1b5d      	subs	r5, r3, r5
 8007858:	1e6b      	subs	r3, r5, #1
 800785a:	9305      	str	r3, [sp, #20]
 800785c:	bf45      	ittet	mi
 800785e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007862:	9304      	strmi	r3, [sp, #16]
 8007864:	2300      	movpl	r3, #0
 8007866:	2300      	movmi	r3, #0
 8007868:	bf4c      	ite	mi
 800786a:	9305      	strmi	r3, [sp, #20]
 800786c:	9304      	strpl	r3, [sp, #16]
 800786e:	9b00      	ldr	r3, [sp, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	db3d      	blt.n	80078f0 <_dtoa_r+0x248>
 8007874:	9b05      	ldr	r3, [sp, #20]
 8007876:	9a00      	ldr	r2, [sp, #0]
 8007878:	920a      	str	r2, [sp, #40]	; 0x28
 800787a:	4413      	add	r3, r2
 800787c:	9305      	str	r3, [sp, #20]
 800787e:	2300      	movs	r3, #0
 8007880:	9307      	str	r3, [sp, #28]
 8007882:	9b06      	ldr	r3, [sp, #24]
 8007884:	2b09      	cmp	r3, #9
 8007886:	f200 8089 	bhi.w	800799c <_dtoa_r+0x2f4>
 800788a:	2b05      	cmp	r3, #5
 800788c:	bfc4      	itt	gt
 800788e:	3b04      	subgt	r3, #4
 8007890:	9306      	strgt	r3, [sp, #24]
 8007892:	9b06      	ldr	r3, [sp, #24]
 8007894:	f1a3 0302 	sub.w	r3, r3, #2
 8007898:	bfcc      	ite	gt
 800789a:	2500      	movgt	r5, #0
 800789c:	2501      	movle	r5, #1
 800789e:	2b03      	cmp	r3, #3
 80078a0:	f200 8087 	bhi.w	80079b2 <_dtoa_r+0x30a>
 80078a4:	e8df f003 	tbb	[pc, r3]
 80078a8:	59383a2d 	.word	0x59383a2d
 80078ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80078b0:	441d      	add	r5, r3
 80078b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	bfc1      	itttt	gt
 80078ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80078c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80078c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078ca:	bfda      	itte	le
 80078cc:	f1c3 0320 	rsble	r3, r3, #32
 80078d0:	fa06 f003 	lslle.w	r0, r6, r3
 80078d4:	4318      	orrgt	r0, r3
 80078d6:	f7f8 fe3d 	bl	8000554 <__aeabi_ui2d>
 80078da:	2301      	movs	r3, #1
 80078dc:	4606      	mov	r6, r0
 80078de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80078e2:	3d01      	subs	r5, #1
 80078e4:	930e      	str	r3, [sp, #56]	; 0x38
 80078e6:	e76a      	b.n	80077be <_dtoa_r+0x116>
 80078e8:	2301      	movs	r3, #1
 80078ea:	e7b2      	b.n	8007852 <_dtoa_r+0x1aa>
 80078ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80078ee:	e7b1      	b.n	8007854 <_dtoa_r+0x1ac>
 80078f0:	9b04      	ldr	r3, [sp, #16]
 80078f2:	9a00      	ldr	r2, [sp, #0]
 80078f4:	1a9b      	subs	r3, r3, r2
 80078f6:	9304      	str	r3, [sp, #16]
 80078f8:	4253      	negs	r3, r2
 80078fa:	9307      	str	r3, [sp, #28]
 80078fc:	2300      	movs	r3, #0
 80078fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007900:	e7bf      	b.n	8007882 <_dtoa_r+0x1da>
 8007902:	2300      	movs	r3, #0
 8007904:	9308      	str	r3, [sp, #32]
 8007906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	dc55      	bgt.n	80079b8 <_dtoa_r+0x310>
 800790c:	2301      	movs	r3, #1
 800790e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007912:	461a      	mov	r2, r3
 8007914:	9209      	str	r2, [sp, #36]	; 0x24
 8007916:	e00c      	b.n	8007932 <_dtoa_r+0x28a>
 8007918:	2301      	movs	r3, #1
 800791a:	e7f3      	b.n	8007904 <_dtoa_r+0x25c>
 800791c:	2300      	movs	r3, #0
 800791e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007920:	9308      	str	r3, [sp, #32]
 8007922:	9b00      	ldr	r3, [sp, #0]
 8007924:	4413      	add	r3, r2
 8007926:	9302      	str	r3, [sp, #8]
 8007928:	3301      	adds	r3, #1
 800792a:	2b01      	cmp	r3, #1
 800792c:	9303      	str	r3, [sp, #12]
 800792e:	bfb8      	it	lt
 8007930:	2301      	movlt	r3, #1
 8007932:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007934:	2200      	movs	r2, #0
 8007936:	6042      	str	r2, [r0, #4]
 8007938:	2204      	movs	r2, #4
 800793a:	f102 0614 	add.w	r6, r2, #20
 800793e:	429e      	cmp	r6, r3
 8007940:	6841      	ldr	r1, [r0, #4]
 8007942:	d93d      	bls.n	80079c0 <_dtoa_r+0x318>
 8007944:	4620      	mov	r0, r4
 8007946:	f001 fa57 	bl	8008df8 <_Balloc>
 800794a:	9001      	str	r0, [sp, #4]
 800794c:	2800      	cmp	r0, #0
 800794e:	d13b      	bne.n	80079c8 <_dtoa_r+0x320>
 8007950:	4b11      	ldr	r3, [pc, #68]	; (8007998 <_dtoa_r+0x2f0>)
 8007952:	4602      	mov	r2, r0
 8007954:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007958:	e6c0      	b.n	80076dc <_dtoa_r+0x34>
 800795a:	2301      	movs	r3, #1
 800795c:	e7df      	b.n	800791e <_dtoa_r+0x276>
 800795e:	bf00      	nop
 8007960:	636f4361 	.word	0x636f4361
 8007964:	3fd287a7 	.word	0x3fd287a7
 8007968:	8b60c8b3 	.word	0x8b60c8b3
 800796c:	3fc68a28 	.word	0x3fc68a28
 8007970:	509f79fb 	.word	0x509f79fb
 8007974:	3fd34413 	.word	0x3fd34413
 8007978:	0800b72e 	.word	0x0800b72e
 800797c:	0800b745 	.word	0x0800b745
 8007980:	7ff00000 	.word	0x7ff00000
 8007984:	0800b72a 	.word	0x0800b72a
 8007988:	0800b721 	.word	0x0800b721
 800798c:	0800b5a1 	.word	0x0800b5a1
 8007990:	3ff80000 	.word	0x3ff80000
 8007994:	0800b918 	.word	0x0800b918
 8007998:	0800b7a0 	.word	0x0800b7a0
 800799c:	2501      	movs	r5, #1
 800799e:	2300      	movs	r3, #0
 80079a0:	9306      	str	r3, [sp, #24]
 80079a2:	9508      	str	r5, [sp, #32]
 80079a4:	f04f 33ff 	mov.w	r3, #4294967295
 80079a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079ac:	2200      	movs	r2, #0
 80079ae:	2312      	movs	r3, #18
 80079b0:	e7b0      	b.n	8007914 <_dtoa_r+0x26c>
 80079b2:	2301      	movs	r3, #1
 80079b4:	9308      	str	r3, [sp, #32]
 80079b6:	e7f5      	b.n	80079a4 <_dtoa_r+0x2fc>
 80079b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079be:	e7b8      	b.n	8007932 <_dtoa_r+0x28a>
 80079c0:	3101      	adds	r1, #1
 80079c2:	6041      	str	r1, [r0, #4]
 80079c4:	0052      	lsls	r2, r2, #1
 80079c6:	e7b8      	b.n	800793a <_dtoa_r+0x292>
 80079c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ca:	9a01      	ldr	r2, [sp, #4]
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	2b0e      	cmp	r3, #14
 80079d2:	f200 809d 	bhi.w	8007b10 <_dtoa_r+0x468>
 80079d6:	2d00      	cmp	r5, #0
 80079d8:	f000 809a 	beq.w	8007b10 <_dtoa_r+0x468>
 80079dc:	9b00      	ldr	r3, [sp, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	dd32      	ble.n	8007a48 <_dtoa_r+0x3a0>
 80079e2:	4ab7      	ldr	r2, [pc, #732]	; (8007cc0 <_dtoa_r+0x618>)
 80079e4:	f003 030f 	and.w	r3, r3, #15
 80079e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079f0:	9b00      	ldr	r3, [sp, #0]
 80079f2:	05d8      	lsls	r0, r3, #23
 80079f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80079f8:	d516      	bpl.n	8007a28 <_dtoa_r+0x380>
 80079fa:	4bb2      	ldr	r3, [pc, #712]	; (8007cc4 <_dtoa_r+0x61c>)
 80079fc:	ec51 0b19 	vmov	r0, r1, d9
 8007a00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a04:	f7f8 ff4a 	bl	800089c <__aeabi_ddiv>
 8007a08:	f007 070f 	and.w	r7, r7, #15
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	468b      	mov	fp, r1
 8007a10:	2503      	movs	r5, #3
 8007a12:	4eac      	ldr	r6, [pc, #688]	; (8007cc4 <_dtoa_r+0x61c>)
 8007a14:	b957      	cbnz	r7, 8007a2c <_dtoa_r+0x384>
 8007a16:	4642      	mov	r2, r8
 8007a18:	464b      	mov	r3, r9
 8007a1a:	4650      	mov	r0, sl
 8007a1c:	4659      	mov	r1, fp
 8007a1e:	f7f8 ff3d 	bl	800089c <__aeabi_ddiv>
 8007a22:	4682      	mov	sl, r0
 8007a24:	468b      	mov	fp, r1
 8007a26:	e028      	b.n	8007a7a <_dtoa_r+0x3d2>
 8007a28:	2502      	movs	r5, #2
 8007a2a:	e7f2      	b.n	8007a12 <_dtoa_r+0x36a>
 8007a2c:	07f9      	lsls	r1, r7, #31
 8007a2e:	d508      	bpl.n	8007a42 <_dtoa_r+0x39a>
 8007a30:	4640      	mov	r0, r8
 8007a32:	4649      	mov	r1, r9
 8007a34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a38:	f7f8 fe06 	bl	8000648 <__aeabi_dmul>
 8007a3c:	3501      	adds	r5, #1
 8007a3e:	4680      	mov	r8, r0
 8007a40:	4689      	mov	r9, r1
 8007a42:	107f      	asrs	r7, r7, #1
 8007a44:	3608      	adds	r6, #8
 8007a46:	e7e5      	b.n	8007a14 <_dtoa_r+0x36c>
 8007a48:	f000 809b 	beq.w	8007b82 <_dtoa_r+0x4da>
 8007a4c:	9b00      	ldr	r3, [sp, #0]
 8007a4e:	4f9d      	ldr	r7, [pc, #628]	; (8007cc4 <_dtoa_r+0x61c>)
 8007a50:	425e      	negs	r6, r3
 8007a52:	4b9b      	ldr	r3, [pc, #620]	; (8007cc0 <_dtoa_r+0x618>)
 8007a54:	f006 020f 	and.w	r2, r6, #15
 8007a58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	ec51 0b19 	vmov	r0, r1, d9
 8007a64:	f7f8 fdf0 	bl	8000648 <__aeabi_dmul>
 8007a68:	1136      	asrs	r6, r6, #4
 8007a6a:	4682      	mov	sl, r0
 8007a6c:	468b      	mov	fp, r1
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2502      	movs	r5, #2
 8007a72:	2e00      	cmp	r6, #0
 8007a74:	d17a      	bne.n	8007b6c <_dtoa_r+0x4c4>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1d3      	bne.n	8007a22 <_dtoa_r+0x37a>
 8007a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 8082 	beq.w	8007b86 <_dtoa_r+0x4de>
 8007a82:	4b91      	ldr	r3, [pc, #580]	; (8007cc8 <_dtoa_r+0x620>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	4650      	mov	r0, sl
 8007a88:	4659      	mov	r1, fp
 8007a8a:	f7f9 f84f 	bl	8000b2c <__aeabi_dcmplt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d079      	beq.n	8007b86 <_dtoa_r+0x4de>
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d076      	beq.n	8007b86 <_dtoa_r+0x4de>
 8007a98:	9b02      	ldr	r3, [sp, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dd36      	ble.n	8007b0c <_dtoa_r+0x464>
 8007a9e:	9b00      	ldr	r3, [sp, #0]
 8007aa0:	4650      	mov	r0, sl
 8007aa2:	4659      	mov	r1, fp
 8007aa4:	1e5f      	subs	r7, r3, #1
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	4b88      	ldr	r3, [pc, #544]	; (8007ccc <_dtoa_r+0x624>)
 8007aaa:	f7f8 fdcd 	bl	8000648 <__aeabi_dmul>
 8007aae:	9e02      	ldr	r6, [sp, #8]
 8007ab0:	4682      	mov	sl, r0
 8007ab2:	468b      	mov	fp, r1
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f7f8 fd5c 	bl	8000574 <__aeabi_i2d>
 8007abc:	4652      	mov	r2, sl
 8007abe:	465b      	mov	r3, fp
 8007ac0:	f7f8 fdc2 	bl	8000648 <__aeabi_dmul>
 8007ac4:	4b82      	ldr	r3, [pc, #520]	; (8007cd0 <_dtoa_r+0x628>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f7f8 fc08 	bl	80002dc <__adddf3>
 8007acc:	46d0      	mov	r8, sl
 8007ace:	46d9      	mov	r9, fp
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ad6:	2e00      	cmp	r6, #0
 8007ad8:	d158      	bne.n	8007b8c <_dtoa_r+0x4e4>
 8007ada:	4b7e      	ldr	r3, [pc, #504]	; (8007cd4 <_dtoa_r+0x62c>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	4640      	mov	r0, r8
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	f7f8 fbf9 	bl	80002d8 <__aeabi_dsub>
 8007ae6:	4652      	mov	r2, sl
 8007ae8:	465b      	mov	r3, fp
 8007aea:	4680      	mov	r8, r0
 8007aec:	4689      	mov	r9, r1
 8007aee:	f7f9 f83b 	bl	8000b68 <__aeabi_dcmpgt>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	f040 8295 	bne.w	8008022 <_dtoa_r+0x97a>
 8007af8:	4652      	mov	r2, sl
 8007afa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007afe:	4640      	mov	r0, r8
 8007b00:	4649      	mov	r1, r9
 8007b02:	f7f9 f813 	bl	8000b2c <__aeabi_dcmplt>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f040 8289 	bne.w	800801e <_dtoa_r+0x976>
 8007b0c:	ec5b ab19 	vmov	sl, fp, d9
 8007b10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f2c0 8148 	blt.w	8007da8 <_dtoa_r+0x700>
 8007b18:	9a00      	ldr	r2, [sp, #0]
 8007b1a:	2a0e      	cmp	r2, #14
 8007b1c:	f300 8144 	bgt.w	8007da8 <_dtoa_r+0x700>
 8007b20:	4b67      	ldr	r3, [pc, #412]	; (8007cc0 <_dtoa_r+0x618>)
 8007b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f280 80d5 	bge.w	8007cdc <_dtoa_r+0x634>
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f300 80d1 	bgt.w	8007cdc <_dtoa_r+0x634>
 8007b3a:	f040 826f 	bne.w	800801c <_dtoa_r+0x974>
 8007b3e:	4b65      	ldr	r3, [pc, #404]	; (8007cd4 <_dtoa_r+0x62c>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	4640      	mov	r0, r8
 8007b44:	4649      	mov	r1, r9
 8007b46:	f7f8 fd7f 	bl	8000648 <__aeabi_dmul>
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	f7f9 f801 	bl	8000b54 <__aeabi_dcmpge>
 8007b52:	9e03      	ldr	r6, [sp, #12]
 8007b54:	4637      	mov	r7, r6
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f040 8245 	bne.w	8007fe6 <_dtoa_r+0x93e>
 8007b5c:	9d01      	ldr	r5, [sp, #4]
 8007b5e:	2331      	movs	r3, #49	; 0x31
 8007b60:	f805 3b01 	strb.w	r3, [r5], #1
 8007b64:	9b00      	ldr	r3, [sp, #0]
 8007b66:	3301      	adds	r3, #1
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	e240      	b.n	8007fee <_dtoa_r+0x946>
 8007b6c:	07f2      	lsls	r2, r6, #31
 8007b6e:	d505      	bpl.n	8007b7c <_dtoa_r+0x4d4>
 8007b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b74:	f7f8 fd68 	bl	8000648 <__aeabi_dmul>
 8007b78:	3501      	adds	r5, #1
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	1076      	asrs	r6, r6, #1
 8007b7e:	3708      	adds	r7, #8
 8007b80:	e777      	b.n	8007a72 <_dtoa_r+0x3ca>
 8007b82:	2502      	movs	r5, #2
 8007b84:	e779      	b.n	8007a7a <_dtoa_r+0x3d2>
 8007b86:	9f00      	ldr	r7, [sp, #0]
 8007b88:	9e03      	ldr	r6, [sp, #12]
 8007b8a:	e794      	b.n	8007ab6 <_dtoa_r+0x40e>
 8007b8c:	9901      	ldr	r1, [sp, #4]
 8007b8e:	4b4c      	ldr	r3, [pc, #304]	; (8007cc0 <_dtoa_r+0x618>)
 8007b90:	4431      	add	r1, r6
 8007b92:	910d      	str	r1, [sp, #52]	; 0x34
 8007b94:	9908      	ldr	r1, [sp, #32]
 8007b96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b9e:	2900      	cmp	r1, #0
 8007ba0:	d043      	beq.n	8007c2a <_dtoa_r+0x582>
 8007ba2:	494d      	ldr	r1, [pc, #308]	; (8007cd8 <_dtoa_r+0x630>)
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	f7f8 fe79 	bl	800089c <__aeabi_ddiv>
 8007baa:	4652      	mov	r2, sl
 8007bac:	465b      	mov	r3, fp
 8007bae:	f7f8 fb93 	bl	80002d8 <__aeabi_dsub>
 8007bb2:	9d01      	ldr	r5, [sp, #4]
 8007bb4:	4682      	mov	sl, r0
 8007bb6:	468b      	mov	fp, r1
 8007bb8:	4649      	mov	r1, r9
 8007bba:	4640      	mov	r0, r8
 8007bbc:	f7f8 fff4 	bl	8000ba8 <__aeabi_d2iz>
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	f7f8 fcd7 	bl	8000574 <__aeabi_i2d>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4640      	mov	r0, r8
 8007bcc:	4649      	mov	r1, r9
 8007bce:	f7f8 fb83 	bl	80002d8 <__aeabi_dsub>
 8007bd2:	3630      	adds	r6, #48	; 0x30
 8007bd4:	f805 6b01 	strb.w	r6, [r5], #1
 8007bd8:	4652      	mov	r2, sl
 8007bda:	465b      	mov	r3, fp
 8007bdc:	4680      	mov	r8, r0
 8007bde:	4689      	mov	r9, r1
 8007be0:	f7f8 ffa4 	bl	8000b2c <__aeabi_dcmplt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d163      	bne.n	8007cb0 <_dtoa_r+0x608>
 8007be8:	4642      	mov	r2, r8
 8007bea:	464b      	mov	r3, r9
 8007bec:	4936      	ldr	r1, [pc, #216]	; (8007cc8 <_dtoa_r+0x620>)
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f7f8 fb72 	bl	80002d8 <__aeabi_dsub>
 8007bf4:	4652      	mov	r2, sl
 8007bf6:	465b      	mov	r3, fp
 8007bf8:	f7f8 ff98 	bl	8000b2c <__aeabi_dcmplt>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f040 80b5 	bne.w	8007d6c <_dtoa_r+0x6c4>
 8007c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c04:	429d      	cmp	r5, r3
 8007c06:	d081      	beq.n	8007b0c <_dtoa_r+0x464>
 8007c08:	4b30      	ldr	r3, [pc, #192]	; (8007ccc <_dtoa_r+0x624>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4650      	mov	r0, sl
 8007c0e:	4659      	mov	r1, fp
 8007c10:	f7f8 fd1a 	bl	8000648 <__aeabi_dmul>
 8007c14:	4b2d      	ldr	r3, [pc, #180]	; (8007ccc <_dtoa_r+0x624>)
 8007c16:	4682      	mov	sl, r0
 8007c18:	468b      	mov	fp, r1
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f7f8 fd12 	bl	8000648 <__aeabi_dmul>
 8007c24:	4680      	mov	r8, r0
 8007c26:	4689      	mov	r9, r1
 8007c28:	e7c6      	b.n	8007bb8 <_dtoa_r+0x510>
 8007c2a:	4650      	mov	r0, sl
 8007c2c:	4659      	mov	r1, fp
 8007c2e:	f7f8 fd0b 	bl	8000648 <__aeabi_dmul>
 8007c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c34:	9d01      	ldr	r5, [sp, #4]
 8007c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c38:	4682      	mov	sl, r0
 8007c3a:	468b      	mov	fp, r1
 8007c3c:	4649      	mov	r1, r9
 8007c3e:	4640      	mov	r0, r8
 8007c40:	f7f8 ffb2 	bl	8000ba8 <__aeabi_d2iz>
 8007c44:	4606      	mov	r6, r0
 8007c46:	f7f8 fc95 	bl	8000574 <__aeabi_i2d>
 8007c4a:	3630      	adds	r6, #48	; 0x30
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4640      	mov	r0, r8
 8007c52:	4649      	mov	r1, r9
 8007c54:	f7f8 fb40 	bl	80002d8 <__aeabi_dsub>
 8007c58:	f805 6b01 	strb.w	r6, [r5], #1
 8007c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c5e:	429d      	cmp	r5, r3
 8007c60:	4680      	mov	r8, r0
 8007c62:	4689      	mov	r9, r1
 8007c64:	f04f 0200 	mov.w	r2, #0
 8007c68:	d124      	bne.n	8007cb4 <_dtoa_r+0x60c>
 8007c6a:	4b1b      	ldr	r3, [pc, #108]	; (8007cd8 <_dtoa_r+0x630>)
 8007c6c:	4650      	mov	r0, sl
 8007c6e:	4659      	mov	r1, fp
 8007c70:	f7f8 fb34 	bl	80002dc <__adddf3>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4640      	mov	r0, r8
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	f7f8 ff74 	bl	8000b68 <__aeabi_dcmpgt>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d173      	bne.n	8007d6c <_dtoa_r+0x6c4>
 8007c84:	4652      	mov	r2, sl
 8007c86:	465b      	mov	r3, fp
 8007c88:	4913      	ldr	r1, [pc, #76]	; (8007cd8 <_dtoa_r+0x630>)
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	f7f8 fb24 	bl	80002d8 <__aeabi_dsub>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4640      	mov	r0, r8
 8007c96:	4649      	mov	r1, r9
 8007c98:	f7f8 ff48 	bl	8000b2c <__aeabi_dcmplt>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	f43f af35 	beq.w	8007b0c <_dtoa_r+0x464>
 8007ca2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ca4:	1e6b      	subs	r3, r5, #1
 8007ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ca8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cac:	2b30      	cmp	r3, #48	; 0x30
 8007cae:	d0f8      	beq.n	8007ca2 <_dtoa_r+0x5fa>
 8007cb0:	9700      	str	r7, [sp, #0]
 8007cb2:	e049      	b.n	8007d48 <_dtoa_r+0x6a0>
 8007cb4:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <_dtoa_r+0x624>)
 8007cb6:	f7f8 fcc7 	bl	8000648 <__aeabi_dmul>
 8007cba:	4680      	mov	r8, r0
 8007cbc:	4689      	mov	r9, r1
 8007cbe:	e7bd      	b.n	8007c3c <_dtoa_r+0x594>
 8007cc0:	0800b918 	.word	0x0800b918
 8007cc4:	0800b8f0 	.word	0x0800b8f0
 8007cc8:	3ff00000 	.word	0x3ff00000
 8007ccc:	40240000 	.word	0x40240000
 8007cd0:	401c0000 	.word	0x401c0000
 8007cd4:	40140000 	.word	0x40140000
 8007cd8:	3fe00000 	.word	0x3fe00000
 8007cdc:	9d01      	ldr	r5, [sp, #4]
 8007cde:	4656      	mov	r6, sl
 8007ce0:	465f      	mov	r7, fp
 8007ce2:	4642      	mov	r2, r8
 8007ce4:	464b      	mov	r3, r9
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4639      	mov	r1, r7
 8007cea:	f7f8 fdd7 	bl	800089c <__aeabi_ddiv>
 8007cee:	f7f8 ff5b 	bl	8000ba8 <__aeabi_d2iz>
 8007cf2:	4682      	mov	sl, r0
 8007cf4:	f7f8 fc3e 	bl	8000574 <__aeabi_i2d>
 8007cf8:	4642      	mov	r2, r8
 8007cfa:	464b      	mov	r3, r9
 8007cfc:	f7f8 fca4 	bl	8000648 <__aeabi_dmul>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4630      	mov	r0, r6
 8007d06:	4639      	mov	r1, r7
 8007d08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007d0c:	f7f8 fae4 	bl	80002d8 <__aeabi_dsub>
 8007d10:	f805 6b01 	strb.w	r6, [r5], #1
 8007d14:	9e01      	ldr	r6, [sp, #4]
 8007d16:	9f03      	ldr	r7, [sp, #12]
 8007d18:	1bae      	subs	r6, r5, r6
 8007d1a:	42b7      	cmp	r7, r6
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	d135      	bne.n	8007d8e <_dtoa_r+0x6e6>
 8007d22:	f7f8 fadb 	bl	80002dc <__adddf3>
 8007d26:	4642      	mov	r2, r8
 8007d28:	464b      	mov	r3, r9
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	460f      	mov	r7, r1
 8007d2e:	f7f8 ff1b 	bl	8000b68 <__aeabi_dcmpgt>
 8007d32:	b9d0      	cbnz	r0, 8007d6a <_dtoa_r+0x6c2>
 8007d34:	4642      	mov	r2, r8
 8007d36:	464b      	mov	r3, r9
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 feec 	bl	8000b18 <__aeabi_dcmpeq>
 8007d40:	b110      	cbz	r0, 8007d48 <_dtoa_r+0x6a0>
 8007d42:	f01a 0f01 	tst.w	sl, #1
 8007d46:	d110      	bne.n	8007d6a <_dtoa_r+0x6c2>
 8007d48:	4620      	mov	r0, r4
 8007d4a:	ee18 1a10 	vmov	r1, s16
 8007d4e:	f001 f893 	bl	8008e78 <_Bfree>
 8007d52:	2300      	movs	r3, #0
 8007d54:	9800      	ldr	r0, [sp, #0]
 8007d56:	702b      	strb	r3, [r5, #0]
 8007d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	6018      	str	r0, [r3, #0]
 8007d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f43f acf1 	beq.w	8007748 <_dtoa_r+0xa0>
 8007d66:	601d      	str	r5, [r3, #0]
 8007d68:	e4ee      	b.n	8007748 <_dtoa_r+0xa0>
 8007d6a:	9f00      	ldr	r7, [sp, #0]
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	461d      	mov	r5, r3
 8007d70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d74:	2a39      	cmp	r2, #57	; 0x39
 8007d76:	d106      	bne.n	8007d86 <_dtoa_r+0x6de>
 8007d78:	9a01      	ldr	r2, [sp, #4]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d1f7      	bne.n	8007d6e <_dtoa_r+0x6c6>
 8007d7e:	9901      	ldr	r1, [sp, #4]
 8007d80:	2230      	movs	r2, #48	; 0x30
 8007d82:	3701      	adds	r7, #1
 8007d84:	700a      	strb	r2, [r1, #0]
 8007d86:	781a      	ldrb	r2, [r3, #0]
 8007d88:	3201      	adds	r2, #1
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	e790      	b.n	8007cb0 <_dtoa_r+0x608>
 8007d8e:	4ba6      	ldr	r3, [pc, #664]	; (8008028 <_dtoa_r+0x980>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	f7f8 fc59 	bl	8000648 <__aeabi_dmul>
 8007d96:	2200      	movs	r2, #0
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	460f      	mov	r7, r1
 8007d9e:	f7f8 febb 	bl	8000b18 <__aeabi_dcmpeq>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d09d      	beq.n	8007ce2 <_dtoa_r+0x63a>
 8007da6:	e7cf      	b.n	8007d48 <_dtoa_r+0x6a0>
 8007da8:	9a08      	ldr	r2, [sp, #32]
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	f000 80d7 	beq.w	8007f5e <_dtoa_r+0x8b6>
 8007db0:	9a06      	ldr	r2, [sp, #24]
 8007db2:	2a01      	cmp	r2, #1
 8007db4:	f300 80ba 	bgt.w	8007f2c <_dtoa_r+0x884>
 8007db8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dba:	2a00      	cmp	r2, #0
 8007dbc:	f000 80b2 	beq.w	8007f24 <_dtoa_r+0x87c>
 8007dc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007dc4:	9e07      	ldr	r6, [sp, #28]
 8007dc6:	9d04      	ldr	r5, [sp, #16]
 8007dc8:	9a04      	ldr	r2, [sp, #16]
 8007dca:	441a      	add	r2, r3
 8007dcc:	9204      	str	r2, [sp, #16]
 8007dce:	9a05      	ldr	r2, [sp, #20]
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	441a      	add	r2, r3
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	9205      	str	r2, [sp, #20]
 8007dd8:	f001 f950 	bl	800907c <__i2b>
 8007ddc:	4607      	mov	r7, r0
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	dd0c      	ble.n	8007dfc <_dtoa_r+0x754>
 8007de2:	9b05      	ldr	r3, [sp, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dd09      	ble.n	8007dfc <_dtoa_r+0x754>
 8007de8:	42ab      	cmp	r3, r5
 8007dea:	9a04      	ldr	r2, [sp, #16]
 8007dec:	bfa8      	it	ge
 8007dee:	462b      	movge	r3, r5
 8007df0:	1ad2      	subs	r2, r2, r3
 8007df2:	9204      	str	r2, [sp, #16]
 8007df4:	9a05      	ldr	r2, [sp, #20]
 8007df6:	1aed      	subs	r5, r5, r3
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	9305      	str	r3, [sp, #20]
 8007dfc:	9b07      	ldr	r3, [sp, #28]
 8007dfe:	b31b      	cbz	r3, 8007e48 <_dtoa_r+0x7a0>
 8007e00:	9b08      	ldr	r3, [sp, #32]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80af 	beq.w	8007f66 <_dtoa_r+0x8be>
 8007e08:	2e00      	cmp	r6, #0
 8007e0a:	dd13      	ble.n	8007e34 <_dtoa_r+0x78c>
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	4632      	mov	r2, r6
 8007e10:	4620      	mov	r0, r4
 8007e12:	f001 f9f3 	bl	80091fc <__pow5mult>
 8007e16:	ee18 2a10 	vmov	r2, s16
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	4607      	mov	r7, r0
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f001 f942 	bl	80090a8 <__multiply>
 8007e24:	ee18 1a10 	vmov	r1, s16
 8007e28:	4680      	mov	r8, r0
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f001 f824 	bl	8008e78 <_Bfree>
 8007e30:	ee08 8a10 	vmov	s16, r8
 8007e34:	9b07      	ldr	r3, [sp, #28]
 8007e36:	1b9a      	subs	r2, r3, r6
 8007e38:	d006      	beq.n	8007e48 <_dtoa_r+0x7a0>
 8007e3a:	ee18 1a10 	vmov	r1, s16
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f001 f9dc 	bl	80091fc <__pow5mult>
 8007e44:	ee08 0a10 	vmov	s16, r0
 8007e48:	2101      	movs	r1, #1
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f001 f916 	bl	800907c <__i2b>
 8007e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	4606      	mov	r6, r0
 8007e56:	f340 8088 	ble.w	8007f6a <_dtoa_r+0x8c2>
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f001 f9cc 	bl	80091fc <__pow5mult>
 8007e64:	9b06      	ldr	r3, [sp, #24]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	4606      	mov	r6, r0
 8007e6a:	f340 8081 	ble.w	8007f70 <_dtoa_r+0x8c8>
 8007e6e:	f04f 0800 	mov.w	r8, #0
 8007e72:	6933      	ldr	r3, [r6, #16]
 8007e74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e78:	6918      	ldr	r0, [r3, #16]
 8007e7a:	f001 f8af 	bl	8008fdc <__hi0bits>
 8007e7e:	f1c0 0020 	rsb	r0, r0, #32
 8007e82:	9b05      	ldr	r3, [sp, #20]
 8007e84:	4418      	add	r0, r3
 8007e86:	f010 001f 	ands.w	r0, r0, #31
 8007e8a:	f000 8092 	beq.w	8007fb2 <_dtoa_r+0x90a>
 8007e8e:	f1c0 0320 	rsb	r3, r0, #32
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	f340 808a 	ble.w	8007fac <_dtoa_r+0x904>
 8007e98:	f1c0 001c 	rsb	r0, r0, #28
 8007e9c:	9b04      	ldr	r3, [sp, #16]
 8007e9e:	4403      	add	r3, r0
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	9b05      	ldr	r3, [sp, #20]
 8007ea4:	4403      	add	r3, r0
 8007ea6:	4405      	add	r5, r0
 8007ea8:	9305      	str	r3, [sp, #20]
 8007eaa:	9b04      	ldr	r3, [sp, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dd07      	ble.n	8007ec0 <_dtoa_r+0x818>
 8007eb0:	ee18 1a10 	vmov	r1, s16
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f001 f9fa 	bl	80092b0 <__lshift>
 8007ebc:	ee08 0a10 	vmov	s16, r0
 8007ec0:	9b05      	ldr	r3, [sp, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	dd05      	ble.n	8007ed2 <_dtoa_r+0x82a>
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f001 f9f0 	bl	80092b0 <__lshift>
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d06e      	beq.n	8007fb6 <_dtoa_r+0x90e>
 8007ed8:	ee18 0a10 	vmov	r0, s16
 8007edc:	4631      	mov	r1, r6
 8007ede:	f001 fa57 	bl	8009390 <__mcmp>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	da67      	bge.n	8007fb6 <_dtoa_r+0x90e>
 8007ee6:	9b00      	ldr	r3, [sp, #0]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	ee18 1a10 	vmov	r1, s16
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	220a      	movs	r2, #10
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f000 ffe1 	bl	8008ebc <__multadd>
 8007efa:	9b08      	ldr	r3, [sp, #32]
 8007efc:	ee08 0a10 	vmov	s16, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 81b1 	beq.w	8008268 <_dtoa_r+0xbc0>
 8007f06:	2300      	movs	r3, #0
 8007f08:	4639      	mov	r1, r7
 8007f0a:	220a      	movs	r2, #10
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f000 ffd5 	bl	8008ebc <__multadd>
 8007f12:	9b02      	ldr	r3, [sp, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	4607      	mov	r7, r0
 8007f18:	f300 808e 	bgt.w	8008038 <_dtoa_r+0x990>
 8007f1c:	9b06      	ldr	r3, [sp, #24]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	dc51      	bgt.n	8007fc6 <_dtoa_r+0x91e>
 8007f22:	e089      	b.n	8008038 <_dtoa_r+0x990>
 8007f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f2a:	e74b      	b.n	8007dc4 <_dtoa_r+0x71c>
 8007f2c:	9b03      	ldr	r3, [sp, #12]
 8007f2e:	1e5e      	subs	r6, r3, #1
 8007f30:	9b07      	ldr	r3, [sp, #28]
 8007f32:	42b3      	cmp	r3, r6
 8007f34:	bfbf      	itttt	lt
 8007f36:	9b07      	ldrlt	r3, [sp, #28]
 8007f38:	9607      	strlt	r6, [sp, #28]
 8007f3a:	1af2      	sublt	r2, r6, r3
 8007f3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f3e:	bfb6      	itet	lt
 8007f40:	189b      	addlt	r3, r3, r2
 8007f42:	1b9e      	subge	r6, r3, r6
 8007f44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f46:	9b03      	ldr	r3, [sp, #12]
 8007f48:	bfb8      	it	lt
 8007f4a:	2600      	movlt	r6, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bfb7      	itett	lt
 8007f50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007f54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007f58:	1a9d      	sublt	r5, r3, r2
 8007f5a:	2300      	movlt	r3, #0
 8007f5c:	e734      	b.n	8007dc8 <_dtoa_r+0x720>
 8007f5e:	9e07      	ldr	r6, [sp, #28]
 8007f60:	9d04      	ldr	r5, [sp, #16]
 8007f62:	9f08      	ldr	r7, [sp, #32]
 8007f64:	e73b      	b.n	8007dde <_dtoa_r+0x736>
 8007f66:	9a07      	ldr	r2, [sp, #28]
 8007f68:	e767      	b.n	8007e3a <_dtoa_r+0x792>
 8007f6a:	9b06      	ldr	r3, [sp, #24]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	dc18      	bgt.n	8007fa2 <_dtoa_r+0x8fa>
 8007f70:	f1ba 0f00 	cmp.w	sl, #0
 8007f74:	d115      	bne.n	8007fa2 <_dtoa_r+0x8fa>
 8007f76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f7a:	b993      	cbnz	r3, 8007fa2 <_dtoa_r+0x8fa>
 8007f7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f80:	0d1b      	lsrs	r3, r3, #20
 8007f82:	051b      	lsls	r3, r3, #20
 8007f84:	b183      	cbz	r3, 8007fa8 <_dtoa_r+0x900>
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	9304      	str	r3, [sp, #16]
 8007f8c:	9b05      	ldr	r3, [sp, #20]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	9305      	str	r3, [sp, #20]
 8007f92:	f04f 0801 	mov.w	r8, #1
 8007f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f47f af6a 	bne.w	8007e72 <_dtoa_r+0x7ca>
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	e76f      	b.n	8007e82 <_dtoa_r+0x7da>
 8007fa2:	f04f 0800 	mov.w	r8, #0
 8007fa6:	e7f6      	b.n	8007f96 <_dtoa_r+0x8ee>
 8007fa8:	4698      	mov	r8, r3
 8007faa:	e7f4      	b.n	8007f96 <_dtoa_r+0x8ee>
 8007fac:	f43f af7d 	beq.w	8007eaa <_dtoa_r+0x802>
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	301c      	adds	r0, #28
 8007fb4:	e772      	b.n	8007e9c <_dtoa_r+0x7f4>
 8007fb6:	9b03      	ldr	r3, [sp, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dc37      	bgt.n	800802c <_dtoa_r+0x984>
 8007fbc:	9b06      	ldr	r3, [sp, #24]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	dd34      	ble.n	800802c <_dtoa_r+0x984>
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	9302      	str	r3, [sp, #8]
 8007fc6:	9b02      	ldr	r3, [sp, #8]
 8007fc8:	b96b      	cbnz	r3, 8007fe6 <_dtoa_r+0x93e>
 8007fca:	4631      	mov	r1, r6
 8007fcc:	2205      	movs	r2, #5
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 ff74 	bl	8008ebc <__multadd>
 8007fd4:	4601      	mov	r1, r0
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	ee18 0a10 	vmov	r0, s16
 8007fdc:	f001 f9d8 	bl	8009390 <__mcmp>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	f73f adbb 	bgt.w	8007b5c <_dtoa_r+0x4b4>
 8007fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe8:	9d01      	ldr	r5, [sp, #4]
 8007fea:	43db      	mvns	r3, r3
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f000 ff3f 	bl	8008e78 <_Bfree>
 8007ffa:	2f00      	cmp	r7, #0
 8007ffc:	f43f aea4 	beq.w	8007d48 <_dtoa_r+0x6a0>
 8008000:	f1b8 0f00 	cmp.w	r8, #0
 8008004:	d005      	beq.n	8008012 <_dtoa_r+0x96a>
 8008006:	45b8      	cmp	r8, r7
 8008008:	d003      	beq.n	8008012 <_dtoa_r+0x96a>
 800800a:	4641      	mov	r1, r8
 800800c:	4620      	mov	r0, r4
 800800e:	f000 ff33 	bl	8008e78 <_Bfree>
 8008012:	4639      	mov	r1, r7
 8008014:	4620      	mov	r0, r4
 8008016:	f000 ff2f 	bl	8008e78 <_Bfree>
 800801a:	e695      	b.n	8007d48 <_dtoa_r+0x6a0>
 800801c:	2600      	movs	r6, #0
 800801e:	4637      	mov	r7, r6
 8008020:	e7e1      	b.n	8007fe6 <_dtoa_r+0x93e>
 8008022:	9700      	str	r7, [sp, #0]
 8008024:	4637      	mov	r7, r6
 8008026:	e599      	b.n	8007b5c <_dtoa_r+0x4b4>
 8008028:	40240000 	.word	0x40240000
 800802c:	9b08      	ldr	r3, [sp, #32]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 80ca 	beq.w	80081c8 <_dtoa_r+0xb20>
 8008034:	9b03      	ldr	r3, [sp, #12]
 8008036:	9302      	str	r3, [sp, #8]
 8008038:	2d00      	cmp	r5, #0
 800803a:	dd05      	ble.n	8008048 <_dtoa_r+0x9a0>
 800803c:	4639      	mov	r1, r7
 800803e:	462a      	mov	r2, r5
 8008040:	4620      	mov	r0, r4
 8008042:	f001 f935 	bl	80092b0 <__lshift>
 8008046:	4607      	mov	r7, r0
 8008048:	f1b8 0f00 	cmp.w	r8, #0
 800804c:	d05b      	beq.n	8008106 <_dtoa_r+0xa5e>
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4620      	mov	r0, r4
 8008052:	f000 fed1 	bl	8008df8 <_Balloc>
 8008056:	4605      	mov	r5, r0
 8008058:	b928      	cbnz	r0, 8008066 <_dtoa_r+0x9be>
 800805a:	4b87      	ldr	r3, [pc, #540]	; (8008278 <_dtoa_r+0xbd0>)
 800805c:	4602      	mov	r2, r0
 800805e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008062:	f7ff bb3b 	b.w	80076dc <_dtoa_r+0x34>
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	3202      	adds	r2, #2
 800806a:	0092      	lsls	r2, r2, #2
 800806c:	f107 010c 	add.w	r1, r7, #12
 8008070:	300c      	adds	r0, #12
 8008072:	f000 feb3 	bl	8008ddc <memcpy>
 8008076:	2201      	movs	r2, #1
 8008078:	4629      	mov	r1, r5
 800807a:	4620      	mov	r0, r4
 800807c:	f001 f918 	bl	80092b0 <__lshift>
 8008080:	9b01      	ldr	r3, [sp, #4]
 8008082:	f103 0901 	add.w	r9, r3, #1
 8008086:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800808a:	4413      	add	r3, r2
 800808c:	9305      	str	r3, [sp, #20]
 800808e:	f00a 0301 	and.w	r3, sl, #1
 8008092:	46b8      	mov	r8, r7
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	4607      	mov	r7, r0
 8008098:	4631      	mov	r1, r6
 800809a:	ee18 0a10 	vmov	r0, s16
 800809e:	f7ff fa77 	bl	8007590 <quorem>
 80080a2:	4641      	mov	r1, r8
 80080a4:	9002      	str	r0, [sp, #8]
 80080a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080aa:	ee18 0a10 	vmov	r0, s16
 80080ae:	f001 f96f 	bl	8009390 <__mcmp>
 80080b2:	463a      	mov	r2, r7
 80080b4:	9003      	str	r0, [sp, #12]
 80080b6:	4631      	mov	r1, r6
 80080b8:	4620      	mov	r0, r4
 80080ba:	f001 f985 	bl	80093c8 <__mdiff>
 80080be:	68c2      	ldr	r2, [r0, #12]
 80080c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80080c4:	4605      	mov	r5, r0
 80080c6:	bb02      	cbnz	r2, 800810a <_dtoa_r+0xa62>
 80080c8:	4601      	mov	r1, r0
 80080ca:	ee18 0a10 	vmov	r0, s16
 80080ce:	f001 f95f 	bl	8009390 <__mcmp>
 80080d2:	4602      	mov	r2, r0
 80080d4:	4629      	mov	r1, r5
 80080d6:	4620      	mov	r0, r4
 80080d8:	9207      	str	r2, [sp, #28]
 80080da:	f000 fecd 	bl	8008e78 <_Bfree>
 80080de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80080e2:	ea43 0102 	orr.w	r1, r3, r2
 80080e6:	9b04      	ldr	r3, [sp, #16]
 80080e8:	430b      	orrs	r3, r1
 80080ea:	464d      	mov	r5, r9
 80080ec:	d10f      	bne.n	800810e <_dtoa_r+0xa66>
 80080ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080f2:	d02a      	beq.n	800814a <_dtoa_r+0xaa2>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	dd02      	ble.n	8008100 <_dtoa_r+0xa58>
 80080fa:	9b02      	ldr	r3, [sp, #8]
 80080fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008100:	f88b a000 	strb.w	sl, [fp]
 8008104:	e775      	b.n	8007ff2 <_dtoa_r+0x94a>
 8008106:	4638      	mov	r0, r7
 8008108:	e7ba      	b.n	8008080 <_dtoa_r+0x9d8>
 800810a:	2201      	movs	r2, #1
 800810c:	e7e2      	b.n	80080d4 <_dtoa_r+0xa2c>
 800810e:	9b03      	ldr	r3, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	db04      	blt.n	800811e <_dtoa_r+0xa76>
 8008114:	9906      	ldr	r1, [sp, #24]
 8008116:	430b      	orrs	r3, r1
 8008118:	9904      	ldr	r1, [sp, #16]
 800811a:	430b      	orrs	r3, r1
 800811c:	d122      	bne.n	8008164 <_dtoa_r+0xabc>
 800811e:	2a00      	cmp	r2, #0
 8008120:	ddee      	ble.n	8008100 <_dtoa_r+0xa58>
 8008122:	ee18 1a10 	vmov	r1, s16
 8008126:	2201      	movs	r2, #1
 8008128:	4620      	mov	r0, r4
 800812a:	f001 f8c1 	bl	80092b0 <__lshift>
 800812e:	4631      	mov	r1, r6
 8008130:	ee08 0a10 	vmov	s16, r0
 8008134:	f001 f92c 	bl	8009390 <__mcmp>
 8008138:	2800      	cmp	r0, #0
 800813a:	dc03      	bgt.n	8008144 <_dtoa_r+0xa9c>
 800813c:	d1e0      	bne.n	8008100 <_dtoa_r+0xa58>
 800813e:	f01a 0f01 	tst.w	sl, #1
 8008142:	d0dd      	beq.n	8008100 <_dtoa_r+0xa58>
 8008144:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008148:	d1d7      	bne.n	80080fa <_dtoa_r+0xa52>
 800814a:	2339      	movs	r3, #57	; 0x39
 800814c:	f88b 3000 	strb.w	r3, [fp]
 8008150:	462b      	mov	r3, r5
 8008152:	461d      	mov	r5, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800815a:	2a39      	cmp	r2, #57	; 0x39
 800815c:	d071      	beq.n	8008242 <_dtoa_r+0xb9a>
 800815e:	3201      	adds	r2, #1
 8008160:	701a      	strb	r2, [r3, #0]
 8008162:	e746      	b.n	8007ff2 <_dtoa_r+0x94a>
 8008164:	2a00      	cmp	r2, #0
 8008166:	dd07      	ble.n	8008178 <_dtoa_r+0xad0>
 8008168:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800816c:	d0ed      	beq.n	800814a <_dtoa_r+0xaa2>
 800816e:	f10a 0301 	add.w	r3, sl, #1
 8008172:	f88b 3000 	strb.w	r3, [fp]
 8008176:	e73c      	b.n	8007ff2 <_dtoa_r+0x94a>
 8008178:	9b05      	ldr	r3, [sp, #20]
 800817a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800817e:	4599      	cmp	r9, r3
 8008180:	d047      	beq.n	8008212 <_dtoa_r+0xb6a>
 8008182:	ee18 1a10 	vmov	r1, s16
 8008186:	2300      	movs	r3, #0
 8008188:	220a      	movs	r2, #10
 800818a:	4620      	mov	r0, r4
 800818c:	f000 fe96 	bl	8008ebc <__multadd>
 8008190:	45b8      	cmp	r8, r7
 8008192:	ee08 0a10 	vmov	s16, r0
 8008196:	f04f 0300 	mov.w	r3, #0
 800819a:	f04f 020a 	mov.w	r2, #10
 800819e:	4641      	mov	r1, r8
 80081a0:	4620      	mov	r0, r4
 80081a2:	d106      	bne.n	80081b2 <_dtoa_r+0xb0a>
 80081a4:	f000 fe8a 	bl	8008ebc <__multadd>
 80081a8:	4680      	mov	r8, r0
 80081aa:	4607      	mov	r7, r0
 80081ac:	f109 0901 	add.w	r9, r9, #1
 80081b0:	e772      	b.n	8008098 <_dtoa_r+0x9f0>
 80081b2:	f000 fe83 	bl	8008ebc <__multadd>
 80081b6:	4639      	mov	r1, r7
 80081b8:	4680      	mov	r8, r0
 80081ba:	2300      	movs	r3, #0
 80081bc:	220a      	movs	r2, #10
 80081be:	4620      	mov	r0, r4
 80081c0:	f000 fe7c 	bl	8008ebc <__multadd>
 80081c4:	4607      	mov	r7, r0
 80081c6:	e7f1      	b.n	80081ac <_dtoa_r+0xb04>
 80081c8:	9b03      	ldr	r3, [sp, #12]
 80081ca:	9302      	str	r3, [sp, #8]
 80081cc:	9d01      	ldr	r5, [sp, #4]
 80081ce:	ee18 0a10 	vmov	r0, s16
 80081d2:	4631      	mov	r1, r6
 80081d4:	f7ff f9dc 	bl	8007590 <quorem>
 80081d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081dc:	9b01      	ldr	r3, [sp, #4]
 80081de:	f805 ab01 	strb.w	sl, [r5], #1
 80081e2:	1aea      	subs	r2, r5, r3
 80081e4:	9b02      	ldr	r3, [sp, #8]
 80081e6:	4293      	cmp	r3, r2
 80081e8:	dd09      	ble.n	80081fe <_dtoa_r+0xb56>
 80081ea:	ee18 1a10 	vmov	r1, s16
 80081ee:	2300      	movs	r3, #0
 80081f0:	220a      	movs	r2, #10
 80081f2:	4620      	mov	r0, r4
 80081f4:	f000 fe62 	bl	8008ebc <__multadd>
 80081f8:	ee08 0a10 	vmov	s16, r0
 80081fc:	e7e7      	b.n	80081ce <_dtoa_r+0xb26>
 80081fe:	9b02      	ldr	r3, [sp, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	bfc8      	it	gt
 8008204:	461d      	movgt	r5, r3
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	bfd8      	it	le
 800820a:	2501      	movle	r5, #1
 800820c:	441d      	add	r5, r3
 800820e:	f04f 0800 	mov.w	r8, #0
 8008212:	ee18 1a10 	vmov	r1, s16
 8008216:	2201      	movs	r2, #1
 8008218:	4620      	mov	r0, r4
 800821a:	f001 f849 	bl	80092b0 <__lshift>
 800821e:	4631      	mov	r1, r6
 8008220:	ee08 0a10 	vmov	s16, r0
 8008224:	f001 f8b4 	bl	8009390 <__mcmp>
 8008228:	2800      	cmp	r0, #0
 800822a:	dc91      	bgt.n	8008150 <_dtoa_r+0xaa8>
 800822c:	d102      	bne.n	8008234 <_dtoa_r+0xb8c>
 800822e:	f01a 0f01 	tst.w	sl, #1
 8008232:	d18d      	bne.n	8008150 <_dtoa_r+0xaa8>
 8008234:	462b      	mov	r3, r5
 8008236:	461d      	mov	r5, r3
 8008238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800823c:	2a30      	cmp	r2, #48	; 0x30
 800823e:	d0fa      	beq.n	8008236 <_dtoa_r+0xb8e>
 8008240:	e6d7      	b.n	8007ff2 <_dtoa_r+0x94a>
 8008242:	9a01      	ldr	r2, [sp, #4]
 8008244:	429a      	cmp	r2, r3
 8008246:	d184      	bne.n	8008152 <_dtoa_r+0xaaa>
 8008248:	9b00      	ldr	r3, [sp, #0]
 800824a:	3301      	adds	r3, #1
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	2331      	movs	r3, #49	; 0x31
 8008250:	7013      	strb	r3, [r2, #0]
 8008252:	e6ce      	b.n	8007ff2 <_dtoa_r+0x94a>
 8008254:	4b09      	ldr	r3, [pc, #36]	; (800827c <_dtoa_r+0xbd4>)
 8008256:	f7ff ba95 	b.w	8007784 <_dtoa_r+0xdc>
 800825a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800825c:	2b00      	cmp	r3, #0
 800825e:	f47f aa6e 	bne.w	800773e <_dtoa_r+0x96>
 8008262:	4b07      	ldr	r3, [pc, #28]	; (8008280 <_dtoa_r+0xbd8>)
 8008264:	f7ff ba8e 	b.w	8007784 <_dtoa_r+0xdc>
 8008268:	9b02      	ldr	r3, [sp, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	dcae      	bgt.n	80081cc <_dtoa_r+0xb24>
 800826e:	9b06      	ldr	r3, [sp, #24]
 8008270:	2b02      	cmp	r3, #2
 8008272:	f73f aea8 	bgt.w	8007fc6 <_dtoa_r+0x91e>
 8008276:	e7a9      	b.n	80081cc <_dtoa_r+0xb24>
 8008278:	0800b7a0 	.word	0x0800b7a0
 800827c:	0800b5a0 	.word	0x0800b5a0
 8008280:	0800b721 	.word	0x0800b721

08008284 <__sflush_r>:
 8008284:	898a      	ldrh	r2, [r1, #12]
 8008286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800828a:	4605      	mov	r5, r0
 800828c:	0710      	lsls	r0, r2, #28
 800828e:	460c      	mov	r4, r1
 8008290:	d458      	bmi.n	8008344 <__sflush_r+0xc0>
 8008292:	684b      	ldr	r3, [r1, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	dc05      	bgt.n	80082a4 <__sflush_r+0x20>
 8008298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800829a:	2b00      	cmp	r3, #0
 800829c:	dc02      	bgt.n	80082a4 <__sflush_r+0x20>
 800829e:	2000      	movs	r0, #0
 80082a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	d0f9      	beq.n	800829e <__sflush_r+0x1a>
 80082aa:	2300      	movs	r3, #0
 80082ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082b0:	682f      	ldr	r7, [r5, #0]
 80082b2:	602b      	str	r3, [r5, #0]
 80082b4:	d032      	beq.n	800831c <__sflush_r+0x98>
 80082b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	075a      	lsls	r2, r3, #29
 80082bc:	d505      	bpl.n	80082ca <__sflush_r+0x46>
 80082be:	6863      	ldr	r3, [r4, #4]
 80082c0:	1ac0      	subs	r0, r0, r3
 80082c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082c4:	b10b      	cbz	r3, 80082ca <__sflush_r+0x46>
 80082c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082c8:	1ac0      	subs	r0, r0, r3
 80082ca:	2300      	movs	r3, #0
 80082cc:	4602      	mov	r2, r0
 80082ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082d0:	6a21      	ldr	r1, [r4, #32]
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b0      	blx	r6
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	d106      	bne.n	80082ea <__sflush_r+0x66>
 80082dc:	6829      	ldr	r1, [r5, #0]
 80082de:	291d      	cmp	r1, #29
 80082e0:	d82c      	bhi.n	800833c <__sflush_r+0xb8>
 80082e2:	4a2a      	ldr	r2, [pc, #168]	; (800838c <__sflush_r+0x108>)
 80082e4:	40ca      	lsrs	r2, r1
 80082e6:	07d6      	lsls	r6, r2, #31
 80082e8:	d528      	bpl.n	800833c <__sflush_r+0xb8>
 80082ea:	2200      	movs	r2, #0
 80082ec:	6062      	str	r2, [r4, #4]
 80082ee:	04d9      	lsls	r1, r3, #19
 80082f0:	6922      	ldr	r2, [r4, #16]
 80082f2:	6022      	str	r2, [r4, #0]
 80082f4:	d504      	bpl.n	8008300 <__sflush_r+0x7c>
 80082f6:	1c42      	adds	r2, r0, #1
 80082f8:	d101      	bne.n	80082fe <__sflush_r+0x7a>
 80082fa:	682b      	ldr	r3, [r5, #0]
 80082fc:	b903      	cbnz	r3, 8008300 <__sflush_r+0x7c>
 80082fe:	6560      	str	r0, [r4, #84]	; 0x54
 8008300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008302:	602f      	str	r7, [r5, #0]
 8008304:	2900      	cmp	r1, #0
 8008306:	d0ca      	beq.n	800829e <__sflush_r+0x1a>
 8008308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800830c:	4299      	cmp	r1, r3
 800830e:	d002      	beq.n	8008316 <__sflush_r+0x92>
 8008310:	4628      	mov	r0, r5
 8008312:	f001 fa49 	bl	80097a8 <_free_r>
 8008316:	2000      	movs	r0, #0
 8008318:	6360      	str	r0, [r4, #52]	; 0x34
 800831a:	e7c1      	b.n	80082a0 <__sflush_r+0x1c>
 800831c:	6a21      	ldr	r1, [r4, #32]
 800831e:	2301      	movs	r3, #1
 8008320:	4628      	mov	r0, r5
 8008322:	47b0      	blx	r6
 8008324:	1c41      	adds	r1, r0, #1
 8008326:	d1c7      	bne.n	80082b8 <__sflush_r+0x34>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0c4      	beq.n	80082b8 <__sflush_r+0x34>
 800832e:	2b1d      	cmp	r3, #29
 8008330:	d001      	beq.n	8008336 <__sflush_r+0xb2>
 8008332:	2b16      	cmp	r3, #22
 8008334:	d101      	bne.n	800833a <__sflush_r+0xb6>
 8008336:	602f      	str	r7, [r5, #0]
 8008338:	e7b1      	b.n	800829e <__sflush_r+0x1a>
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	e7ad      	b.n	80082a0 <__sflush_r+0x1c>
 8008344:	690f      	ldr	r7, [r1, #16]
 8008346:	2f00      	cmp	r7, #0
 8008348:	d0a9      	beq.n	800829e <__sflush_r+0x1a>
 800834a:	0793      	lsls	r3, r2, #30
 800834c:	680e      	ldr	r6, [r1, #0]
 800834e:	bf08      	it	eq
 8008350:	694b      	ldreq	r3, [r1, #20]
 8008352:	600f      	str	r7, [r1, #0]
 8008354:	bf18      	it	ne
 8008356:	2300      	movne	r3, #0
 8008358:	eba6 0807 	sub.w	r8, r6, r7
 800835c:	608b      	str	r3, [r1, #8]
 800835e:	f1b8 0f00 	cmp.w	r8, #0
 8008362:	dd9c      	ble.n	800829e <__sflush_r+0x1a>
 8008364:	6a21      	ldr	r1, [r4, #32]
 8008366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008368:	4643      	mov	r3, r8
 800836a:	463a      	mov	r2, r7
 800836c:	4628      	mov	r0, r5
 800836e:	47b0      	blx	r6
 8008370:	2800      	cmp	r0, #0
 8008372:	dc06      	bgt.n	8008382 <__sflush_r+0xfe>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	e78e      	b.n	80082a0 <__sflush_r+0x1c>
 8008382:	4407      	add	r7, r0
 8008384:	eba8 0800 	sub.w	r8, r8, r0
 8008388:	e7e9      	b.n	800835e <__sflush_r+0xda>
 800838a:	bf00      	nop
 800838c:	20400001 	.word	0x20400001

08008390 <_fflush_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	690b      	ldr	r3, [r1, #16]
 8008394:	4605      	mov	r5, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b913      	cbnz	r3, 80083a0 <_fflush_r+0x10>
 800839a:	2500      	movs	r5, #0
 800839c:	4628      	mov	r0, r5
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	b118      	cbz	r0, 80083aa <_fflush_r+0x1a>
 80083a2:	6983      	ldr	r3, [r0, #24]
 80083a4:	b90b      	cbnz	r3, 80083aa <_fflush_r+0x1a>
 80083a6:	f000 f887 	bl	80084b8 <__sinit>
 80083aa:	4b14      	ldr	r3, [pc, #80]	; (80083fc <_fflush_r+0x6c>)
 80083ac:	429c      	cmp	r4, r3
 80083ae:	d11b      	bne.n	80083e8 <_fflush_r+0x58>
 80083b0:	686c      	ldr	r4, [r5, #4]
 80083b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0ef      	beq.n	800839a <_fflush_r+0xa>
 80083ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083bc:	07d0      	lsls	r0, r2, #31
 80083be:	d404      	bmi.n	80083ca <_fflush_r+0x3a>
 80083c0:	0599      	lsls	r1, r3, #22
 80083c2:	d402      	bmi.n	80083ca <_fflush_r+0x3a>
 80083c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083c6:	f000 fc88 	bl	8008cda <__retarget_lock_acquire_recursive>
 80083ca:	4628      	mov	r0, r5
 80083cc:	4621      	mov	r1, r4
 80083ce:	f7ff ff59 	bl	8008284 <__sflush_r>
 80083d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083d4:	07da      	lsls	r2, r3, #31
 80083d6:	4605      	mov	r5, r0
 80083d8:	d4e0      	bmi.n	800839c <_fflush_r+0xc>
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	059b      	lsls	r3, r3, #22
 80083de:	d4dd      	bmi.n	800839c <_fflush_r+0xc>
 80083e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083e2:	f000 fc7b 	bl	8008cdc <__retarget_lock_release_recursive>
 80083e6:	e7d9      	b.n	800839c <_fflush_r+0xc>
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <_fflush_r+0x70>)
 80083ea:	429c      	cmp	r4, r3
 80083ec:	d101      	bne.n	80083f2 <_fflush_r+0x62>
 80083ee:	68ac      	ldr	r4, [r5, #8]
 80083f0:	e7df      	b.n	80083b2 <_fflush_r+0x22>
 80083f2:	4b04      	ldr	r3, [pc, #16]	; (8008404 <_fflush_r+0x74>)
 80083f4:	429c      	cmp	r4, r3
 80083f6:	bf08      	it	eq
 80083f8:	68ec      	ldreq	r4, [r5, #12]
 80083fa:	e7da      	b.n	80083b2 <_fflush_r+0x22>
 80083fc:	0800b7d4 	.word	0x0800b7d4
 8008400:	0800b7f4 	.word	0x0800b7f4
 8008404:	0800b7b4 	.word	0x0800b7b4

08008408 <std>:
 8008408:	2300      	movs	r3, #0
 800840a:	b510      	push	{r4, lr}
 800840c:	4604      	mov	r4, r0
 800840e:	e9c0 3300 	strd	r3, r3, [r0]
 8008412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008416:	6083      	str	r3, [r0, #8]
 8008418:	8181      	strh	r1, [r0, #12]
 800841a:	6643      	str	r3, [r0, #100]	; 0x64
 800841c:	81c2      	strh	r2, [r0, #14]
 800841e:	6183      	str	r3, [r0, #24]
 8008420:	4619      	mov	r1, r3
 8008422:	2208      	movs	r2, #8
 8008424:	305c      	adds	r0, #92	; 0x5c
 8008426:	f7fd f9f9 	bl	800581c <memset>
 800842a:	4b05      	ldr	r3, [pc, #20]	; (8008440 <std+0x38>)
 800842c:	6263      	str	r3, [r4, #36]	; 0x24
 800842e:	4b05      	ldr	r3, [pc, #20]	; (8008444 <std+0x3c>)
 8008430:	62a3      	str	r3, [r4, #40]	; 0x28
 8008432:	4b05      	ldr	r3, [pc, #20]	; (8008448 <std+0x40>)
 8008434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008436:	4b05      	ldr	r3, [pc, #20]	; (800844c <std+0x44>)
 8008438:	6224      	str	r4, [r4, #32]
 800843a:	6323      	str	r3, [r4, #48]	; 0x30
 800843c:	bd10      	pop	{r4, pc}
 800843e:	bf00      	nop
 8008440:	08009f99 	.word	0x08009f99
 8008444:	08009fbb 	.word	0x08009fbb
 8008448:	08009ff3 	.word	0x08009ff3
 800844c:	0800a017 	.word	0x0800a017

08008450 <_cleanup_r>:
 8008450:	4901      	ldr	r1, [pc, #4]	; (8008458 <_cleanup_r+0x8>)
 8008452:	f000 b8af 	b.w	80085b4 <_fwalk_reent>
 8008456:	bf00      	nop
 8008458:	08008391 	.word	0x08008391

0800845c <__sfmoreglue>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	2268      	movs	r2, #104	; 0x68
 8008460:	1e4d      	subs	r5, r1, #1
 8008462:	4355      	muls	r5, r2
 8008464:	460e      	mov	r6, r1
 8008466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800846a:	f001 fa09 	bl	8009880 <_malloc_r>
 800846e:	4604      	mov	r4, r0
 8008470:	b140      	cbz	r0, 8008484 <__sfmoreglue+0x28>
 8008472:	2100      	movs	r1, #0
 8008474:	e9c0 1600 	strd	r1, r6, [r0]
 8008478:	300c      	adds	r0, #12
 800847a:	60a0      	str	r0, [r4, #8]
 800847c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008480:	f7fd f9cc 	bl	800581c <memset>
 8008484:	4620      	mov	r0, r4
 8008486:	bd70      	pop	{r4, r5, r6, pc}

08008488 <__sfp_lock_acquire>:
 8008488:	4801      	ldr	r0, [pc, #4]	; (8008490 <__sfp_lock_acquire+0x8>)
 800848a:	f000 bc26 	b.w	8008cda <__retarget_lock_acquire_recursive>
 800848e:	bf00      	nop
 8008490:	2000030d 	.word	0x2000030d

08008494 <__sfp_lock_release>:
 8008494:	4801      	ldr	r0, [pc, #4]	; (800849c <__sfp_lock_release+0x8>)
 8008496:	f000 bc21 	b.w	8008cdc <__retarget_lock_release_recursive>
 800849a:	bf00      	nop
 800849c:	2000030d 	.word	0x2000030d

080084a0 <__sinit_lock_acquire>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__sinit_lock_acquire+0x8>)
 80084a2:	f000 bc1a 	b.w	8008cda <__retarget_lock_acquire_recursive>
 80084a6:	bf00      	nop
 80084a8:	2000030e 	.word	0x2000030e

080084ac <__sinit_lock_release>:
 80084ac:	4801      	ldr	r0, [pc, #4]	; (80084b4 <__sinit_lock_release+0x8>)
 80084ae:	f000 bc15 	b.w	8008cdc <__retarget_lock_release_recursive>
 80084b2:	bf00      	nop
 80084b4:	2000030e 	.word	0x2000030e

080084b8 <__sinit>:
 80084b8:	b510      	push	{r4, lr}
 80084ba:	4604      	mov	r4, r0
 80084bc:	f7ff fff0 	bl	80084a0 <__sinit_lock_acquire>
 80084c0:	69a3      	ldr	r3, [r4, #24]
 80084c2:	b11b      	cbz	r3, 80084cc <__sinit+0x14>
 80084c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084c8:	f7ff bff0 	b.w	80084ac <__sinit_lock_release>
 80084cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084d0:	6523      	str	r3, [r4, #80]	; 0x50
 80084d2:	4b13      	ldr	r3, [pc, #76]	; (8008520 <__sinit+0x68>)
 80084d4:	4a13      	ldr	r2, [pc, #76]	; (8008524 <__sinit+0x6c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80084da:	42a3      	cmp	r3, r4
 80084dc:	bf04      	itt	eq
 80084de:	2301      	moveq	r3, #1
 80084e0:	61a3      	streq	r3, [r4, #24]
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 f820 	bl	8008528 <__sfp>
 80084e8:	6060      	str	r0, [r4, #4]
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 f81c 	bl	8008528 <__sfp>
 80084f0:	60a0      	str	r0, [r4, #8]
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 f818 	bl	8008528 <__sfp>
 80084f8:	2200      	movs	r2, #0
 80084fa:	60e0      	str	r0, [r4, #12]
 80084fc:	2104      	movs	r1, #4
 80084fe:	6860      	ldr	r0, [r4, #4]
 8008500:	f7ff ff82 	bl	8008408 <std>
 8008504:	68a0      	ldr	r0, [r4, #8]
 8008506:	2201      	movs	r2, #1
 8008508:	2109      	movs	r1, #9
 800850a:	f7ff ff7d 	bl	8008408 <std>
 800850e:	68e0      	ldr	r0, [r4, #12]
 8008510:	2202      	movs	r2, #2
 8008512:	2112      	movs	r1, #18
 8008514:	f7ff ff78 	bl	8008408 <std>
 8008518:	2301      	movs	r3, #1
 800851a:	61a3      	str	r3, [r4, #24]
 800851c:	e7d2      	b.n	80084c4 <__sinit+0xc>
 800851e:	bf00      	nop
 8008520:	0800b58c 	.word	0x0800b58c
 8008524:	08008451 	.word	0x08008451

08008528 <__sfp>:
 8008528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852a:	4607      	mov	r7, r0
 800852c:	f7ff ffac 	bl	8008488 <__sfp_lock_acquire>
 8008530:	4b1e      	ldr	r3, [pc, #120]	; (80085ac <__sfp+0x84>)
 8008532:	681e      	ldr	r6, [r3, #0]
 8008534:	69b3      	ldr	r3, [r6, #24]
 8008536:	b913      	cbnz	r3, 800853e <__sfp+0x16>
 8008538:	4630      	mov	r0, r6
 800853a:	f7ff ffbd 	bl	80084b8 <__sinit>
 800853e:	3648      	adds	r6, #72	; 0x48
 8008540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008544:	3b01      	subs	r3, #1
 8008546:	d503      	bpl.n	8008550 <__sfp+0x28>
 8008548:	6833      	ldr	r3, [r6, #0]
 800854a:	b30b      	cbz	r3, 8008590 <__sfp+0x68>
 800854c:	6836      	ldr	r6, [r6, #0]
 800854e:	e7f7      	b.n	8008540 <__sfp+0x18>
 8008550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008554:	b9d5      	cbnz	r5, 800858c <__sfp+0x64>
 8008556:	4b16      	ldr	r3, [pc, #88]	; (80085b0 <__sfp+0x88>)
 8008558:	60e3      	str	r3, [r4, #12]
 800855a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800855e:	6665      	str	r5, [r4, #100]	; 0x64
 8008560:	f000 fbba 	bl	8008cd8 <__retarget_lock_init_recursive>
 8008564:	f7ff ff96 	bl	8008494 <__sfp_lock_release>
 8008568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800856c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008570:	6025      	str	r5, [r4, #0]
 8008572:	61a5      	str	r5, [r4, #24]
 8008574:	2208      	movs	r2, #8
 8008576:	4629      	mov	r1, r5
 8008578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800857c:	f7fd f94e 	bl	800581c <memset>
 8008580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008588:	4620      	mov	r0, r4
 800858a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800858c:	3468      	adds	r4, #104	; 0x68
 800858e:	e7d9      	b.n	8008544 <__sfp+0x1c>
 8008590:	2104      	movs	r1, #4
 8008592:	4638      	mov	r0, r7
 8008594:	f7ff ff62 	bl	800845c <__sfmoreglue>
 8008598:	4604      	mov	r4, r0
 800859a:	6030      	str	r0, [r6, #0]
 800859c:	2800      	cmp	r0, #0
 800859e:	d1d5      	bne.n	800854c <__sfp+0x24>
 80085a0:	f7ff ff78 	bl	8008494 <__sfp_lock_release>
 80085a4:	230c      	movs	r3, #12
 80085a6:	603b      	str	r3, [r7, #0]
 80085a8:	e7ee      	b.n	8008588 <__sfp+0x60>
 80085aa:	bf00      	nop
 80085ac:	0800b58c 	.word	0x0800b58c
 80085b0:	ffff0001 	.word	0xffff0001

080085b4 <_fwalk_reent>:
 80085b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b8:	4606      	mov	r6, r0
 80085ba:	4688      	mov	r8, r1
 80085bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085c0:	2700      	movs	r7, #0
 80085c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085c6:	f1b9 0901 	subs.w	r9, r9, #1
 80085ca:	d505      	bpl.n	80085d8 <_fwalk_reent+0x24>
 80085cc:	6824      	ldr	r4, [r4, #0]
 80085ce:	2c00      	cmp	r4, #0
 80085d0:	d1f7      	bne.n	80085c2 <_fwalk_reent+0xe>
 80085d2:	4638      	mov	r0, r7
 80085d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d8:	89ab      	ldrh	r3, [r5, #12]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d907      	bls.n	80085ee <_fwalk_reent+0x3a>
 80085de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085e2:	3301      	adds	r3, #1
 80085e4:	d003      	beq.n	80085ee <_fwalk_reent+0x3a>
 80085e6:	4629      	mov	r1, r5
 80085e8:	4630      	mov	r0, r6
 80085ea:	47c0      	blx	r8
 80085ec:	4307      	orrs	r7, r0
 80085ee:	3568      	adds	r5, #104	; 0x68
 80085f0:	e7e9      	b.n	80085c6 <_fwalk_reent+0x12>

080085f2 <rshift>:
 80085f2:	6903      	ldr	r3, [r0, #16]
 80085f4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80085f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085fc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008600:	f100 0414 	add.w	r4, r0, #20
 8008604:	dd45      	ble.n	8008692 <rshift+0xa0>
 8008606:	f011 011f 	ands.w	r1, r1, #31
 800860a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800860e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008612:	d10c      	bne.n	800862e <rshift+0x3c>
 8008614:	f100 0710 	add.w	r7, r0, #16
 8008618:	4629      	mov	r1, r5
 800861a:	42b1      	cmp	r1, r6
 800861c:	d334      	bcc.n	8008688 <rshift+0x96>
 800861e:	1a9b      	subs	r3, r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	1eea      	subs	r2, r5, #3
 8008624:	4296      	cmp	r6, r2
 8008626:	bf38      	it	cc
 8008628:	2300      	movcc	r3, #0
 800862a:	4423      	add	r3, r4
 800862c:	e015      	b.n	800865a <rshift+0x68>
 800862e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008632:	f1c1 0820 	rsb	r8, r1, #32
 8008636:	40cf      	lsrs	r7, r1
 8008638:	f105 0e04 	add.w	lr, r5, #4
 800863c:	46a1      	mov	r9, r4
 800863e:	4576      	cmp	r6, lr
 8008640:	46f4      	mov	ip, lr
 8008642:	d815      	bhi.n	8008670 <rshift+0x7e>
 8008644:	1a9a      	subs	r2, r3, r2
 8008646:	0092      	lsls	r2, r2, #2
 8008648:	3a04      	subs	r2, #4
 800864a:	3501      	adds	r5, #1
 800864c:	42ae      	cmp	r6, r5
 800864e:	bf38      	it	cc
 8008650:	2200      	movcc	r2, #0
 8008652:	18a3      	adds	r3, r4, r2
 8008654:	50a7      	str	r7, [r4, r2]
 8008656:	b107      	cbz	r7, 800865a <rshift+0x68>
 8008658:	3304      	adds	r3, #4
 800865a:	1b1a      	subs	r2, r3, r4
 800865c:	42a3      	cmp	r3, r4
 800865e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008662:	bf08      	it	eq
 8008664:	2300      	moveq	r3, #0
 8008666:	6102      	str	r2, [r0, #16]
 8008668:	bf08      	it	eq
 800866a:	6143      	streq	r3, [r0, #20]
 800866c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008670:	f8dc c000 	ldr.w	ip, [ip]
 8008674:	fa0c fc08 	lsl.w	ip, ip, r8
 8008678:	ea4c 0707 	orr.w	r7, ip, r7
 800867c:	f849 7b04 	str.w	r7, [r9], #4
 8008680:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008684:	40cf      	lsrs	r7, r1
 8008686:	e7da      	b.n	800863e <rshift+0x4c>
 8008688:	f851 cb04 	ldr.w	ip, [r1], #4
 800868c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008690:	e7c3      	b.n	800861a <rshift+0x28>
 8008692:	4623      	mov	r3, r4
 8008694:	e7e1      	b.n	800865a <rshift+0x68>

08008696 <__hexdig_fun>:
 8008696:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800869a:	2b09      	cmp	r3, #9
 800869c:	d802      	bhi.n	80086a4 <__hexdig_fun+0xe>
 800869e:	3820      	subs	r0, #32
 80086a0:	b2c0      	uxtb	r0, r0
 80086a2:	4770      	bx	lr
 80086a4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80086a8:	2b05      	cmp	r3, #5
 80086aa:	d801      	bhi.n	80086b0 <__hexdig_fun+0x1a>
 80086ac:	3847      	subs	r0, #71	; 0x47
 80086ae:	e7f7      	b.n	80086a0 <__hexdig_fun+0xa>
 80086b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80086b4:	2b05      	cmp	r3, #5
 80086b6:	d801      	bhi.n	80086bc <__hexdig_fun+0x26>
 80086b8:	3827      	subs	r0, #39	; 0x27
 80086ba:	e7f1      	b.n	80086a0 <__hexdig_fun+0xa>
 80086bc:	2000      	movs	r0, #0
 80086be:	4770      	bx	lr

080086c0 <__gethex>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	ed2d 8b02 	vpush	{d8}
 80086c8:	b089      	sub	sp, #36	; 0x24
 80086ca:	ee08 0a10 	vmov	s16, r0
 80086ce:	9304      	str	r3, [sp, #16]
 80086d0:	4bb4      	ldr	r3, [pc, #720]	; (80089a4 <__gethex+0x2e4>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	4618      	mov	r0, r3
 80086d8:	468b      	mov	fp, r1
 80086da:	4690      	mov	r8, r2
 80086dc:	f7f7 fda0 	bl	8000220 <strlen>
 80086e0:	9b01      	ldr	r3, [sp, #4]
 80086e2:	f8db 2000 	ldr.w	r2, [fp]
 80086e6:	4403      	add	r3, r0
 80086e8:	4682      	mov	sl, r0
 80086ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80086ee:	9305      	str	r3, [sp, #20]
 80086f0:	1c93      	adds	r3, r2, #2
 80086f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80086f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80086fa:	32fe      	adds	r2, #254	; 0xfe
 80086fc:	18d1      	adds	r1, r2, r3
 80086fe:	461f      	mov	r7, r3
 8008700:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008704:	9100      	str	r1, [sp, #0]
 8008706:	2830      	cmp	r0, #48	; 0x30
 8008708:	d0f8      	beq.n	80086fc <__gethex+0x3c>
 800870a:	f7ff ffc4 	bl	8008696 <__hexdig_fun>
 800870e:	4604      	mov	r4, r0
 8008710:	2800      	cmp	r0, #0
 8008712:	d13a      	bne.n	800878a <__gethex+0xca>
 8008714:	9901      	ldr	r1, [sp, #4]
 8008716:	4652      	mov	r2, sl
 8008718:	4638      	mov	r0, r7
 800871a:	f001 fc80 	bl	800a01e <strncmp>
 800871e:	4605      	mov	r5, r0
 8008720:	2800      	cmp	r0, #0
 8008722:	d168      	bne.n	80087f6 <__gethex+0x136>
 8008724:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008728:	eb07 060a 	add.w	r6, r7, sl
 800872c:	f7ff ffb3 	bl	8008696 <__hexdig_fun>
 8008730:	2800      	cmp	r0, #0
 8008732:	d062      	beq.n	80087fa <__gethex+0x13a>
 8008734:	4633      	mov	r3, r6
 8008736:	7818      	ldrb	r0, [r3, #0]
 8008738:	2830      	cmp	r0, #48	; 0x30
 800873a:	461f      	mov	r7, r3
 800873c:	f103 0301 	add.w	r3, r3, #1
 8008740:	d0f9      	beq.n	8008736 <__gethex+0x76>
 8008742:	f7ff ffa8 	bl	8008696 <__hexdig_fun>
 8008746:	2301      	movs	r3, #1
 8008748:	fab0 f480 	clz	r4, r0
 800874c:	0964      	lsrs	r4, r4, #5
 800874e:	4635      	mov	r5, r6
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	463a      	mov	r2, r7
 8008754:	4616      	mov	r6, r2
 8008756:	3201      	adds	r2, #1
 8008758:	7830      	ldrb	r0, [r6, #0]
 800875a:	f7ff ff9c 	bl	8008696 <__hexdig_fun>
 800875e:	2800      	cmp	r0, #0
 8008760:	d1f8      	bne.n	8008754 <__gethex+0x94>
 8008762:	9901      	ldr	r1, [sp, #4]
 8008764:	4652      	mov	r2, sl
 8008766:	4630      	mov	r0, r6
 8008768:	f001 fc59 	bl	800a01e <strncmp>
 800876c:	b980      	cbnz	r0, 8008790 <__gethex+0xd0>
 800876e:	b94d      	cbnz	r5, 8008784 <__gethex+0xc4>
 8008770:	eb06 050a 	add.w	r5, r6, sl
 8008774:	462a      	mov	r2, r5
 8008776:	4616      	mov	r6, r2
 8008778:	3201      	adds	r2, #1
 800877a:	7830      	ldrb	r0, [r6, #0]
 800877c:	f7ff ff8b 	bl	8008696 <__hexdig_fun>
 8008780:	2800      	cmp	r0, #0
 8008782:	d1f8      	bne.n	8008776 <__gethex+0xb6>
 8008784:	1bad      	subs	r5, r5, r6
 8008786:	00ad      	lsls	r5, r5, #2
 8008788:	e004      	b.n	8008794 <__gethex+0xd4>
 800878a:	2400      	movs	r4, #0
 800878c:	4625      	mov	r5, r4
 800878e:	e7e0      	b.n	8008752 <__gethex+0x92>
 8008790:	2d00      	cmp	r5, #0
 8008792:	d1f7      	bne.n	8008784 <__gethex+0xc4>
 8008794:	7833      	ldrb	r3, [r6, #0]
 8008796:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800879a:	2b50      	cmp	r3, #80	; 0x50
 800879c:	d13b      	bne.n	8008816 <__gethex+0x156>
 800879e:	7873      	ldrb	r3, [r6, #1]
 80087a0:	2b2b      	cmp	r3, #43	; 0x2b
 80087a2:	d02c      	beq.n	80087fe <__gethex+0x13e>
 80087a4:	2b2d      	cmp	r3, #45	; 0x2d
 80087a6:	d02e      	beq.n	8008806 <__gethex+0x146>
 80087a8:	1c71      	adds	r1, r6, #1
 80087aa:	f04f 0900 	mov.w	r9, #0
 80087ae:	7808      	ldrb	r0, [r1, #0]
 80087b0:	f7ff ff71 	bl	8008696 <__hexdig_fun>
 80087b4:	1e43      	subs	r3, r0, #1
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b18      	cmp	r3, #24
 80087ba:	d82c      	bhi.n	8008816 <__gethex+0x156>
 80087bc:	f1a0 0210 	sub.w	r2, r0, #16
 80087c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80087c4:	f7ff ff67 	bl	8008696 <__hexdig_fun>
 80087c8:	1e43      	subs	r3, r0, #1
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b18      	cmp	r3, #24
 80087ce:	d91d      	bls.n	800880c <__gethex+0x14c>
 80087d0:	f1b9 0f00 	cmp.w	r9, #0
 80087d4:	d000      	beq.n	80087d8 <__gethex+0x118>
 80087d6:	4252      	negs	r2, r2
 80087d8:	4415      	add	r5, r2
 80087da:	f8cb 1000 	str.w	r1, [fp]
 80087de:	b1e4      	cbz	r4, 800881a <__gethex+0x15a>
 80087e0:	9b00      	ldr	r3, [sp, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bf14      	ite	ne
 80087e6:	2700      	movne	r7, #0
 80087e8:	2706      	moveq	r7, #6
 80087ea:	4638      	mov	r0, r7
 80087ec:	b009      	add	sp, #36	; 0x24
 80087ee:	ecbd 8b02 	vpop	{d8}
 80087f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f6:	463e      	mov	r6, r7
 80087f8:	4625      	mov	r5, r4
 80087fa:	2401      	movs	r4, #1
 80087fc:	e7ca      	b.n	8008794 <__gethex+0xd4>
 80087fe:	f04f 0900 	mov.w	r9, #0
 8008802:	1cb1      	adds	r1, r6, #2
 8008804:	e7d3      	b.n	80087ae <__gethex+0xee>
 8008806:	f04f 0901 	mov.w	r9, #1
 800880a:	e7fa      	b.n	8008802 <__gethex+0x142>
 800880c:	230a      	movs	r3, #10
 800880e:	fb03 0202 	mla	r2, r3, r2, r0
 8008812:	3a10      	subs	r2, #16
 8008814:	e7d4      	b.n	80087c0 <__gethex+0x100>
 8008816:	4631      	mov	r1, r6
 8008818:	e7df      	b.n	80087da <__gethex+0x11a>
 800881a:	1bf3      	subs	r3, r6, r7
 800881c:	3b01      	subs	r3, #1
 800881e:	4621      	mov	r1, r4
 8008820:	2b07      	cmp	r3, #7
 8008822:	dc0b      	bgt.n	800883c <__gethex+0x17c>
 8008824:	ee18 0a10 	vmov	r0, s16
 8008828:	f000 fae6 	bl	8008df8 <_Balloc>
 800882c:	4604      	mov	r4, r0
 800882e:	b940      	cbnz	r0, 8008842 <__gethex+0x182>
 8008830:	4b5d      	ldr	r3, [pc, #372]	; (80089a8 <__gethex+0x2e8>)
 8008832:	4602      	mov	r2, r0
 8008834:	21de      	movs	r1, #222	; 0xde
 8008836:	485d      	ldr	r0, [pc, #372]	; (80089ac <__gethex+0x2ec>)
 8008838:	f001 fc24 	bl	800a084 <__assert_func>
 800883c:	3101      	adds	r1, #1
 800883e:	105b      	asrs	r3, r3, #1
 8008840:	e7ee      	b.n	8008820 <__gethex+0x160>
 8008842:	f100 0914 	add.w	r9, r0, #20
 8008846:	f04f 0b00 	mov.w	fp, #0
 800884a:	f1ca 0301 	rsb	r3, sl, #1
 800884e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008852:	f8cd b000 	str.w	fp, [sp]
 8008856:	9306      	str	r3, [sp, #24]
 8008858:	42b7      	cmp	r7, r6
 800885a:	d340      	bcc.n	80088de <__gethex+0x21e>
 800885c:	9802      	ldr	r0, [sp, #8]
 800885e:	9b00      	ldr	r3, [sp, #0]
 8008860:	f840 3b04 	str.w	r3, [r0], #4
 8008864:	eba0 0009 	sub.w	r0, r0, r9
 8008868:	1080      	asrs	r0, r0, #2
 800886a:	0146      	lsls	r6, r0, #5
 800886c:	6120      	str	r0, [r4, #16]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fbb4 	bl	8008fdc <__hi0bits>
 8008874:	1a30      	subs	r0, r6, r0
 8008876:	f8d8 6000 	ldr.w	r6, [r8]
 800887a:	42b0      	cmp	r0, r6
 800887c:	dd63      	ble.n	8008946 <__gethex+0x286>
 800887e:	1b87      	subs	r7, r0, r6
 8008880:	4639      	mov	r1, r7
 8008882:	4620      	mov	r0, r4
 8008884:	f000 ff58 	bl	8009738 <__any_on>
 8008888:	4682      	mov	sl, r0
 800888a:	b1a8      	cbz	r0, 80088b8 <__gethex+0x1f8>
 800888c:	1e7b      	subs	r3, r7, #1
 800888e:	1159      	asrs	r1, r3, #5
 8008890:	f003 021f 	and.w	r2, r3, #31
 8008894:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008898:	f04f 0a01 	mov.w	sl, #1
 800889c:	fa0a f202 	lsl.w	r2, sl, r2
 80088a0:	420a      	tst	r2, r1
 80088a2:	d009      	beq.n	80088b8 <__gethex+0x1f8>
 80088a4:	4553      	cmp	r3, sl
 80088a6:	dd05      	ble.n	80088b4 <__gethex+0x1f4>
 80088a8:	1eb9      	subs	r1, r7, #2
 80088aa:	4620      	mov	r0, r4
 80088ac:	f000 ff44 	bl	8009738 <__any_on>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d145      	bne.n	8008940 <__gethex+0x280>
 80088b4:	f04f 0a02 	mov.w	sl, #2
 80088b8:	4639      	mov	r1, r7
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7ff fe99 	bl	80085f2 <rshift>
 80088c0:	443d      	add	r5, r7
 80088c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088c6:	42ab      	cmp	r3, r5
 80088c8:	da4c      	bge.n	8008964 <__gethex+0x2a4>
 80088ca:	ee18 0a10 	vmov	r0, s16
 80088ce:	4621      	mov	r1, r4
 80088d0:	f000 fad2 	bl	8008e78 <_Bfree>
 80088d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088d6:	2300      	movs	r3, #0
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	27a3      	movs	r7, #163	; 0xa3
 80088dc:	e785      	b.n	80087ea <__gethex+0x12a>
 80088de:	1e73      	subs	r3, r6, #1
 80088e0:	9a05      	ldr	r2, [sp, #20]
 80088e2:	9303      	str	r3, [sp, #12]
 80088e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d019      	beq.n	8008920 <__gethex+0x260>
 80088ec:	f1bb 0f20 	cmp.w	fp, #32
 80088f0:	d107      	bne.n	8008902 <__gethex+0x242>
 80088f2:	9b02      	ldr	r3, [sp, #8]
 80088f4:	9a00      	ldr	r2, [sp, #0]
 80088f6:	f843 2b04 	str.w	r2, [r3], #4
 80088fa:	9302      	str	r3, [sp, #8]
 80088fc:	2300      	movs	r3, #0
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	469b      	mov	fp, r3
 8008902:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008906:	f7ff fec6 	bl	8008696 <__hexdig_fun>
 800890a:	9b00      	ldr	r3, [sp, #0]
 800890c:	f000 000f 	and.w	r0, r0, #15
 8008910:	fa00 f00b 	lsl.w	r0, r0, fp
 8008914:	4303      	orrs	r3, r0
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	f10b 0b04 	add.w	fp, fp, #4
 800891c:	9b03      	ldr	r3, [sp, #12]
 800891e:	e00d      	b.n	800893c <__gethex+0x27c>
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	9a06      	ldr	r2, [sp, #24]
 8008924:	4413      	add	r3, r2
 8008926:	42bb      	cmp	r3, r7
 8008928:	d3e0      	bcc.n	80088ec <__gethex+0x22c>
 800892a:	4618      	mov	r0, r3
 800892c:	9901      	ldr	r1, [sp, #4]
 800892e:	9307      	str	r3, [sp, #28]
 8008930:	4652      	mov	r2, sl
 8008932:	f001 fb74 	bl	800a01e <strncmp>
 8008936:	9b07      	ldr	r3, [sp, #28]
 8008938:	2800      	cmp	r0, #0
 800893a:	d1d7      	bne.n	80088ec <__gethex+0x22c>
 800893c:	461e      	mov	r6, r3
 800893e:	e78b      	b.n	8008858 <__gethex+0x198>
 8008940:	f04f 0a03 	mov.w	sl, #3
 8008944:	e7b8      	b.n	80088b8 <__gethex+0x1f8>
 8008946:	da0a      	bge.n	800895e <__gethex+0x29e>
 8008948:	1a37      	subs	r7, r6, r0
 800894a:	4621      	mov	r1, r4
 800894c:	ee18 0a10 	vmov	r0, s16
 8008950:	463a      	mov	r2, r7
 8008952:	f000 fcad 	bl	80092b0 <__lshift>
 8008956:	1bed      	subs	r5, r5, r7
 8008958:	4604      	mov	r4, r0
 800895a:	f100 0914 	add.w	r9, r0, #20
 800895e:	f04f 0a00 	mov.w	sl, #0
 8008962:	e7ae      	b.n	80088c2 <__gethex+0x202>
 8008964:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008968:	42a8      	cmp	r0, r5
 800896a:	dd72      	ble.n	8008a52 <__gethex+0x392>
 800896c:	1b45      	subs	r5, r0, r5
 800896e:	42ae      	cmp	r6, r5
 8008970:	dc36      	bgt.n	80089e0 <__gethex+0x320>
 8008972:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008976:	2b02      	cmp	r3, #2
 8008978:	d02a      	beq.n	80089d0 <__gethex+0x310>
 800897a:	2b03      	cmp	r3, #3
 800897c:	d02c      	beq.n	80089d8 <__gethex+0x318>
 800897e:	2b01      	cmp	r3, #1
 8008980:	d11c      	bne.n	80089bc <__gethex+0x2fc>
 8008982:	42ae      	cmp	r6, r5
 8008984:	d11a      	bne.n	80089bc <__gethex+0x2fc>
 8008986:	2e01      	cmp	r6, #1
 8008988:	d112      	bne.n	80089b0 <__gethex+0x2f0>
 800898a:	9a04      	ldr	r2, [sp, #16]
 800898c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	2301      	movs	r3, #1
 8008994:	6123      	str	r3, [r4, #16]
 8008996:	f8c9 3000 	str.w	r3, [r9]
 800899a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800899c:	2762      	movs	r7, #98	; 0x62
 800899e:	601c      	str	r4, [r3, #0]
 80089a0:	e723      	b.n	80087ea <__gethex+0x12a>
 80089a2:	bf00      	nop
 80089a4:	0800b87c 	.word	0x0800b87c
 80089a8:	0800b7a0 	.word	0x0800b7a0
 80089ac:	0800b814 	.word	0x0800b814
 80089b0:	1e71      	subs	r1, r6, #1
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 fec0 	bl	8009738 <__any_on>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d1e6      	bne.n	800898a <__gethex+0x2ca>
 80089bc:	ee18 0a10 	vmov	r0, s16
 80089c0:	4621      	mov	r1, r4
 80089c2:	f000 fa59 	bl	8008e78 <_Bfree>
 80089c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089c8:	2300      	movs	r3, #0
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	2750      	movs	r7, #80	; 0x50
 80089ce:	e70c      	b.n	80087ea <__gethex+0x12a>
 80089d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1f2      	bne.n	80089bc <__gethex+0x2fc>
 80089d6:	e7d8      	b.n	800898a <__gethex+0x2ca>
 80089d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1d5      	bne.n	800898a <__gethex+0x2ca>
 80089de:	e7ed      	b.n	80089bc <__gethex+0x2fc>
 80089e0:	1e6f      	subs	r7, r5, #1
 80089e2:	f1ba 0f00 	cmp.w	sl, #0
 80089e6:	d131      	bne.n	8008a4c <__gethex+0x38c>
 80089e8:	b127      	cbz	r7, 80089f4 <__gethex+0x334>
 80089ea:	4639      	mov	r1, r7
 80089ec:	4620      	mov	r0, r4
 80089ee:	f000 fea3 	bl	8009738 <__any_on>
 80089f2:	4682      	mov	sl, r0
 80089f4:	117b      	asrs	r3, r7, #5
 80089f6:	2101      	movs	r1, #1
 80089f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80089fc:	f007 071f 	and.w	r7, r7, #31
 8008a00:	fa01 f707 	lsl.w	r7, r1, r7
 8008a04:	421f      	tst	r7, r3
 8008a06:	4629      	mov	r1, r5
 8008a08:	4620      	mov	r0, r4
 8008a0a:	bf18      	it	ne
 8008a0c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008a10:	1b76      	subs	r6, r6, r5
 8008a12:	f7ff fdee 	bl	80085f2 <rshift>
 8008a16:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008a1a:	2702      	movs	r7, #2
 8008a1c:	f1ba 0f00 	cmp.w	sl, #0
 8008a20:	d048      	beq.n	8008ab4 <__gethex+0x3f4>
 8008a22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d015      	beq.n	8008a56 <__gethex+0x396>
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d017      	beq.n	8008a5e <__gethex+0x39e>
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d109      	bne.n	8008a46 <__gethex+0x386>
 8008a32:	f01a 0f02 	tst.w	sl, #2
 8008a36:	d006      	beq.n	8008a46 <__gethex+0x386>
 8008a38:	f8d9 0000 	ldr.w	r0, [r9]
 8008a3c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008a40:	f01a 0f01 	tst.w	sl, #1
 8008a44:	d10e      	bne.n	8008a64 <__gethex+0x3a4>
 8008a46:	f047 0710 	orr.w	r7, r7, #16
 8008a4a:	e033      	b.n	8008ab4 <__gethex+0x3f4>
 8008a4c:	f04f 0a01 	mov.w	sl, #1
 8008a50:	e7d0      	b.n	80089f4 <__gethex+0x334>
 8008a52:	2701      	movs	r7, #1
 8008a54:	e7e2      	b.n	8008a1c <__gethex+0x35c>
 8008a56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a58:	f1c3 0301 	rsb	r3, r3, #1
 8008a5c:	9315      	str	r3, [sp, #84]	; 0x54
 8008a5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0f0      	beq.n	8008a46 <__gethex+0x386>
 8008a64:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a68:	f104 0314 	add.w	r3, r4, #20
 8008a6c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008a70:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008a74:	f04f 0c00 	mov.w	ip, #0
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a7e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008a82:	d01c      	beq.n	8008abe <__gethex+0x3fe>
 8008a84:	3201      	adds	r2, #1
 8008a86:	6002      	str	r2, [r0, #0]
 8008a88:	2f02      	cmp	r7, #2
 8008a8a:	f104 0314 	add.w	r3, r4, #20
 8008a8e:	d13f      	bne.n	8008b10 <__gethex+0x450>
 8008a90:	f8d8 2000 	ldr.w	r2, [r8]
 8008a94:	3a01      	subs	r2, #1
 8008a96:	42b2      	cmp	r2, r6
 8008a98:	d10a      	bne.n	8008ab0 <__gethex+0x3f0>
 8008a9a:	1171      	asrs	r1, r6, #5
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008aa2:	f006 061f 	and.w	r6, r6, #31
 8008aa6:	fa02 f606 	lsl.w	r6, r2, r6
 8008aaa:	421e      	tst	r6, r3
 8008aac:	bf18      	it	ne
 8008aae:	4617      	movne	r7, r2
 8008ab0:	f047 0720 	orr.w	r7, r7, #32
 8008ab4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ab6:	601c      	str	r4, [r3, #0]
 8008ab8:	9b04      	ldr	r3, [sp, #16]
 8008aba:	601d      	str	r5, [r3, #0]
 8008abc:	e695      	b.n	80087ea <__gethex+0x12a>
 8008abe:	4299      	cmp	r1, r3
 8008ac0:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ac4:	d8d8      	bhi.n	8008a78 <__gethex+0x3b8>
 8008ac6:	68a3      	ldr	r3, [r4, #8]
 8008ac8:	459b      	cmp	fp, r3
 8008aca:	db19      	blt.n	8008b00 <__gethex+0x440>
 8008acc:	6861      	ldr	r1, [r4, #4]
 8008ace:	ee18 0a10 	vmov	r0, s16
 8008ad2:	3101      	adds	r1, #1
 8008ad4:	f000 f990 	bl	8008df8 <_Balloc>
 8008ad8:	4681      	mov	r9, r0
 8008ada:	b918      	cbnz	r0, 8008ae4 <__gethex+0x424>
 8008adc:	4b1a      	ldr	r3, [pc, #104]	; (8008b48 <__gethex+0x488>)
 8008ade:	4602      	mov	r2, r0
 8008ae0:	2184      	movs	r1, #132	; 0x84
 8008ae2:	e6a8      	b.n	8008836 <__gethex+0x176>
 8008ae4:	6922      	ldr	r2, [r4, #16]
 8008ae6:	3202      	adds	r2, #2
 8008ae8:	f104 010c 	add.w	r1, r4, #12
 8008aec:	0092      	lsls	r2, r2, #2
 8008aee:	300c      	adds	r0, #12
 8008af0:	f000 f974 	bl	8008ddc <memcpy>
 8008af4:	4621      	mov	r1, r4
 8008af6:	ee18 0a10 	vmov	r0, s16
 8008afa:	f000 f9bd 	bl	8008e78 <_Bfree>
 8008afe:	464c      	mov	r4, r9
 8008b00:	6923      	ldr	r3, [r4, #16]
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b08:	6122      	str	r2, [r4, #16]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	615a      	str	r2, [r3, #20]
 8008b0e:	e7bb      	b.n	8008a88 <__gethex+0x3c8>
 8008b10:	6922      	ldr	r2, [r4, #16]
 8008b12:	455a      	cmp	r2, fp
 8008b14:	dd0b      	ble.n	8008b2e <__gethex+0x46e>
 8008b16:	2101      	movs	r1, #1
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f7ff fd6a 	bl	80085f2 <rshift>
 8008b1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b22:	3501      	adds	r5, #1
 8008b24:	42ab      	cmp	r3, r5
 8008b26:	f6ff aed0 	blt.w	80088ca <__gethex+0x20a>
 8008b2a:	2701      	movs	r7, #1
 8008b2c:	e7c0      	b.n	8008ab0 <__gethex+0x3f0>
 8008b2e:	f016 061f 	ands.w	r6, r6, #31
 8008b32:	d0fa      	beq.n	8008b2a <__gethex+0x46a>
 8008b34:	4453      	add	r3, sl
 8008b36:	f1c6 0620 	rsb	r6, r6, #32
 8008b3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008b3e:	f000 fa4d 	bl	8008fdc <__hi0bits>
 8008b42:	42b0      	cmp	r0, r6
 8008b44:	dbe7      	blt.n	8008b16 <__gethex+0x456>
 8008b46:	e7f0      	b.n	8008b2a <__gethex+0x46a>
 8008b48:	0800b7a0 	.word	0x0800b7a0

08008b4c <L_shift>:
 8008b4c:	f1c2 0208 	rsb	r2, r2, #8
 8008b50:	0092      	lsls	r2, r2, #2
 8008b52:	b570      	push	{r4, r5, r6, lr}
 8008b54:	f1c2 0620 	rsb	r6, r2, #32
 8008b58:	6843      	ldr	r3, [r0, #4]
 8008b5a:	6804      	ldr	r4, [r0, #0]
 8008b5c:	fa03 f506 	lsl.w	r5, r3, r6
 8008b60:	432c      	orrs	r4, r5
 8008b62:	40d3      	lsrs	r3, r2
 8008b64:	6004      	str	r4, [r0, #0]
 8008b66:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b6a:	4288      	cmp	r0, r1
 8008b6c:	d3f4      	bcc.n	8008b58 <L_shift+0xc>
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}

08008b70 <__match>:
 8008b70:	b530      	push	{r4, r5, lr}
 8008b72:	6803      	ldr	r3, [r0, #0]
 8008b74:	3301      	adds	r3, #1
 8008b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b7a:	b914      	cbnz	r4, 8008b82 <__match+0x12>
 8008b7c:	6003      	str	r3, [r0, #0]
 8008b7e:	2001      	movs	r0, #1
 8008b80:	bd30      	pop	{r4, r5, pc}
 8008b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008b8a:	2d19      	cmp	r5, #25
 8008b8c:	bf98      	it	ls
 8008b8e:	3220      	addls	r2, #32
 8008b90:	42a2      	cmp	r2, r4
 8008b92:	d0f0      	beq.n	8008b76 <__match+0x6>
 8008b94:	2000      	movs	r0, #0
 8008b96:	e7f3      	b.n	8008b80 <__match+0x10>

08008b98 <__hexnan>:
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	680b      	ldr	r3, [r1, #0]
 8008b9e:	115e      	asrs	r6, r3, #5
 8008ba0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ba4:	f013 031f 	ands.w	r3, r3, #31
 8008ba8:	b087      	sub	sp, #28
 8008baa:	bf18      	it	ne
 8008bac:	3604      	addne	r6, #4
 8008bae:	2500      	movs	r5, #0
 8008bb0:	1f37      	subs	r7, r6, #4
 8008bb2:	4690      	mov	r8, r2
 8008bb4:	6802      	ldr	r2, [r0, #0]
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	4682      	mov	sl, r0
 8008bba:	f846 5c04 	str.w	r5, [r6, #-4]
 8008bbe:	46b9      	mov	r9, r7
 8008bc0:	463c      	mov	r4, r7
 8008bc2:	9502      	str	r5, [sp, #8]
 8008bc4:	46ab      	mov	fp, r5
 8008bc6:	7851      	ldrb	r1, [r2, #1]
 8008bc8:	1c53      	adds	r3, r2, #1
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	b341      	cbz	r1, 8008c20 <__hexnan+0x88>
 8008bce:	4608      	mov	r0, r1
 8008bd0:	9205      	str	r2, [sp, #20]
 8008bd2:	9104      	str	r1, [sp, #16]
 8008bd4:	f7ff fd5f 	bl	8008696 <__hexdig_fun>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d14f      	bne.n	8008c7c <__hexnan+0xe4>
 8008bdc:	9904      	ldr	r1, [sp, #16]
 8008bde:	9a05      	ldr	r2, [sp, #20]
 8008be0:	2920      	cmp	r1, #32
 8008be2:	d818      	bhi.n	8008c16 <__hexnan+0x7e>
 8008be4:	9b02      	ldr	r3, [sp, #8]
 8008be6:	459b      	cmp	fp, r3
 8008be8:	dd13      	ble.n	8008c12 <__hexnan+0x7a>
 8008bea:	454c      	cmp	r4, r9
 8008bec:	d206      	bcs.n	8008bfc <__hexnan+0x64>
 8008bee:	2d07      	cmp	r5, #7
 8008bf0:	dc04      	bgt.n	8008bfc <__hexnan+0x64>
 8008bf2:	462a      	mov	r2, r5
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f7ff ffa8 	bl	8008b4c <L_shift>
 8008bfc:	4544      	cmp	r4, r8
 8008bfe:	d950      	bls.n	8008ca2 <__hexnan+0x10a>
 8008c00:	2300      	movs	r3, #0
 8008c02:	f1a4 0904 	sub.w	r9, r4, #4
 8008c06:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c0a:	f8cd b008 	str.w	fp, [sp, #8]
 8008c0e:	464c      	mov	r4, r9
 8008c10:	461d      	mov	r5, r3
 8008c12:	9a03      	ldr	r2, [sp, #12]
 8008c14:	e7d7      	b.n	8008bc6 <__hexnan+0x2e>
 8008c16:	2929      	cmp	r1, #41	; 0x29
 8008c18:	d156      	bne.n	8008cc8 <__hexnan+0x130>
 8008c1a:	3202      	adds	r2, #2
 8008c1c:	f8ca 2000 	str.w	r2, [sl]
 8008c20:	f1bb 0f00 	cmp.w	fp, #0
 8008c24:	d050      	beq.n	8008cc8 <__hexnan+0x130>
 8008c26:	454c      	cmp	r4, r9
 8008c28:	d206      	bcs.n	8008c38 <__hexnan+0xa0>
 8008c2a:	2d07      	cmp	r5, #7
 8008c2c:	dc04      	bgt.n	8008c38 <__hexnan+0xa0>
 8008c2e:	462a      	mov	r2, r5
 8008c30:	4649      	mov	r1, r9
 8008c32:	4620      	mov	r0, r4
 8008c34:	f7ff ff8a 	bl	8008b4c <L_shift>
 8008c38:	4544      	cmp	r4, r8
 8008c3a:	d934      	bls.n	8008ca6 <__hexnan+0x10e>
 8008c3c:	f1a8 0204 	sub.w	r2, r8, #4
 8008c40:	4623      	mov	r3, r4
 8008c42:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c46:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c4a:	429f      	cmp	r7, r3
 8008c4c:	d2f9      	bcs.n	8008c42 <__hexnan+0xaa>
 8008c4e:	1b3b      	subs	r3, r7, r4
 8008c50:	f023 0303 	bic.w	r3, r3, #3
 8008c54:	3304      	adds	r3, #4
 8008c56:	3401      	adds	r4, #1
 8008c58:	3e03      	subs	r6, #3
 8008c5a:	42b4      	cmp	r4, r6
 8008c5c:	bf88      	it	hi
 8008c5e:	2304      	movhi	r3, #4
 8008c60:	4443      	add	r3, r8
 8008c62:	2200      	movs	r2, #0
 8008c64:	f843 2b04 	str.w	r2, [r3], #4
 8008c68:	429f      	cmp	r7, r3
 8008c6a:	d2fb      	bcs.n	8008c64 <__hexnan+0xcc>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	b91b      	cbnz	r3, 8008c78 <__hexnan+0xe0>
 8008c70:	4547      	cmp	r7, r8
 8008c72:	d127      	bne.n	8008cc4 <__hexnan+0x12c>
 8008c74:	2301      	movs	r3, #1
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	2005      	movs	r0, #5
 8008c7a:	e026      	b.n	8008cca <__hexnan+0x132>
 8008c7c:	3501      	adds	r5, #1
 8008c7e:	2d08      	cmp	r5, #8
 8008c80:	f10b 0b01 	add.w	fp, fp, #1
 8008c84:	dd06      	ble.n	8008c94 <__hexnan+0xfc>
 8008c86:	4544      	cmp	r4, r8
 8008c88:	d9c3      	bls.n	8008c12 <__hexnan+0x7a>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c90:	2501      	movs	r5, #1
 8008c92:	3c04      	subs	r4, #4
 8008c94:	6822      	ldr	r2, [r4, #0]
 8008c96:	f000 000f 	and.w	r0, r0, #15
 8008c9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008c9e:	6022      	str	r2, [r4, #0]
 8008ca0:	e7b7      	b.n	8008c12 <__hexnan+0x7a>
 8008ca2:	2508      	movs	r5, #8
 8008ca4:	e7b5      	b.n	8008c12 <__hexnan+0x7a>
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0df      	beq.n	8008c6c <__hexnan+0xd4>
 8008cac:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb0:	f1c3 0320 	rsb	r3, r3, #32
 8008cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008cbc:	401a      	ands	r2, r3
 8008cbe:	f846 2c04 	str.w	r2, [r6, #-4]
 8008cc2:	e7d3      	b.n	8008c6c <__hexnan+0xd4>
 8008cc4:	3f04      	subs	r7, #4
 8008cc6:	e7d1      	b.n	8008c6c <__hexnan+0xd4>
 8008cc8:	2004      	movs	r0, #4
 8008cca:	b007      	add	sp, #28
 8008ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008cd0 <_localeconv_r>:
 8008cd0:	4800      	ldr	r0, [pc, #0]	; (8008cd4 <_localeconv_r+0x4>)
 8008cd2:	4770      	bx	lr
 8008cd4:	20000164 	.word	0x20000164

08008cd8 <__retarget_lock_init_recursive>:
 8008cd8:	4770      	bx	lr

08008cda <__retarget_lock_acquire_recursive>:
 8008cda:	4770      	bx	lr

08008cdc <__retarget_lock_release_recursive>:
 8008cdc:	4770      	bx	lr

08008cde <__swhatbuf_r>:
 8008cde:	b570      	push	{r4, r5, r6, lr}
 8008ce0:	460e      	mov	r6, r1
 8008ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce6:	2900      	cmp	r1, #0
 8008ce8:	b096      	sub	sp, #88	; 0x58
 8008cea:	4614      	mov	r4, r2
 8008cec:	461d      	mov	r5, r3
 8008cee:	da08      	bge.n	8008d02 <__swhatbuf_r+0x24>
 8008cf0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	602a      	str	r2, [r5, #0]
 8008cf8:	061a      	lsls	r2, r3, #24
 8008cfa:	d410      	bmi.n	8008d1e <__swhatbuf_r+0x40>
 8008cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d00:	e00e      	b.n	8008d20 <__swhatbuf_r+0x42>
 8008d02:	466a      	mov	r2, sp
 8008d04:	f001 f9fe 	bl	800a104 <_fstat_r>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	dbf1      	blt.n	8008cf0 <__swhatbuf_r+0x12>
 8008d0c:	9a01      	ldr	r2, [sp, #4]
 8008d0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d16:	425a      	negs	r2, r3
 8008d18:	415a      	adcs	r2, r3
 8008d1a:	602a      	str	r2, [r5, #0]
 8008d1c:	e7ee      	b.n	8008cfc <__swhatbuf_r+0x1e>
 8008d1e:	2340      	movs	r3, #64	; 0x40
 8008d20:	2000      	movs	r0, #0
 8008d22:	6023      	str	r3, [r4, #0]
 8008d24:	b016      	add	sp, #88	; 0x58
 8008d26:	bd70      	pop	{r4, r5, r6, pc}

08008d28 <__smakebuf_r>:
 8008d28:	898b      	ldrh	r3, [r1, #12]
 8008d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d2c:	079d      	lsls	r5, r3, #30
 8008d2e:	4606      	mov	r6, r0
 8008d30:	460c      	mov	r4, r1
 8008d32:	d507      	bpl.n	8008d44 <__smakebuf_r+0x1c>
 8008d34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	6123      	str	r3, [r4, #16]
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	6163      	str	r3, [r4, #20]
 8008d40:	b002      	add	sp, #8
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
 8008d44:	ab01      	add	r3, sp, #4
 8008d46:	466a      	mov	r2, sp
 8008d48:	f7ff ffc9 	bl	8008cde <__swhatbuf_r>
 8008d4c:	9900      	ldr	r1, [sp, #0]
 8008d4e:	4605      	mov	r5, r0
 8008d50:	4630      	mov	r0, r6
 8008d52:	f000 fd95 	bl	8009880 <_malloc_r>
 8008d56:	b948      	cbnz	r0, 8008d6c <__smakebuf_r+0x44>
 8008d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d5c:	059a      	lsls	r2, r3, #22
 8008d5e:	d4ef      	bmi.n	8008d40 <__smakebuf_r+0x18>
 8008d60:	f023 0303 	bic.w	r3, r3, #3
 8008d64:	f043 0302 	orr.w	r3, r3, #2
 8008d68:	81a3      	strh	r3, [r4, #12]
 8008d6a:	e7e3      	b.n	8008d34 <__smakebuf_r+0xc>
 8008d6c:	4b0d      	ldr	r3, [pc, #52]	; (8008da4 <__smakebuf_r+0x7c>)
 8008d6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	6020      	str	r0, [r4, #0]
 8008d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d78:	81a3      	strh	r3, [r4, #12]
 8008d7a:	9b00      	ldr	r3, [sp, #0]
 8008d7c:	6163      	str	r3, [r4, #20]
 8008d7e:	9b01      	ldr	r3, [sp, #4]
 8008d80:	6120      	str	r0, [r4, #16]
 8008d82:	b15b      	cbz	r3, 8008d9c <__smakebuf_r+0x74>
 8008d84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f001 f9cd 	bl	800a128 <_isatty_r>
 8008d8e:	b128      	cbz	r0, 8008d9c <__smakebuf_r+0x74>
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	f023 0303 	bic.w	r3, r3, #3
 8008d96:	f043 0301 	orr.w	r3, r3, #1
 8008d9a:	81a3      	strh	r3, [r4, #12]
 8008d9c:	89a0      	ldrh	r0, [r4, #12]
 8008d9e:	4305      	orrs	r5, r0
 8008da0:	81a5      	strh	r5, [r4, #12]
 8008da2:	e7cd      	b.n	8008d40 <__smakebuf_r+0x18>
 8008da4:	08008451 	.word	0x08008451

08008da8 <malloc>:
 8008da8:	4b02      	ldr	r3, [pc, #8]	; (8008db4 <malloc+0xc>)
 8008daa:	4601      	mov	r1, r0
 8008dac:	6818      	ldr	r0, [r3, #0]
 8008dae:	f000 bd67 	b.w	8009880 <_malloc_r>
 8008db2:	bf00      	nop
 8008db4:	2000000c 	.word	0x2000000c

08008db8 <__ascii_mbtowc>:
 8008db8:	b082      	sub	sp, #8
 8008dba:	b901      	cbnz	r1, 8008dbe <__ascii_mbtowc+0x6>
 8008dbc:	a901      	add	r1, sp, #4
 8008dbe:	b142      	cbz	r2, 8008dd2 <__ascii_mbtowc+0x1a>
 8008dc0:	b14b      	cbz	r3, 8008dd6 <__ascii_mbtowc+0x1e>
 8008dc2:	7813      	ldrb	r3, [r2, #0]
 8008dc4:	600b      	str	r3, [r1, #0]
 8008dc6:	7812      	ldrb	r2, [r2, #0]
 8008dc8:	1e10      	subs	r0, r2, #0
 8008dca:	bf18      	it	ne
 8008dcc:	2001      	movne	r0, #1
 8008dce:	b002      	add	sp, #8
 8008dd0:	4770      	bx	lr
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	e7fb      	b.n	8008dce <__ascii_mbtowc+0x16>
 8008dd6:	f06f 0001 	mvn.w	r0, #1
 8008dda:	e7f8      	b.n	8008dce <__ascii_mbtowc+0x16>

08008ddc <memcpy>:
 8008ddc:	440a      	add	r2, r1
 8008dde:	4291      	cmp	r1, r2
 8008de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008de4:	d100      	bne.n	8008de8 <memcpy+0xc>
 8008de6:	4770      	bx	lr
 8008de8:	b510      	push	{r4, lr}
 8008dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008df2:	4291      	cmp	r1, r2
 8008df4:	d1f9      	bne.n	8008dea <memcpy+0xe>
 8008df6:	bd10      	pop	{r4, pc}

08008df8 <_Balloc>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	460d      	mov	r5, r1
 8008e00:	b976      	cbnz	r6, 8008e20 <_Balloc+0x28>
 8008e02:	2010      	movs	r0, #16
 8008e04:	f7ff ffd0 	bl	8008da8 <malloc>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	6260      	str	r0, [r4, #36]	; 0x24
 8008e0c:	b920      	cbnz	r0, 8008e18 <_Balloc+0x20>
 8008e0e:	4b18      	ldr	r3, [pc, #96]	; (8008e70 <_Balloc+0x78>)
 8008e10:	4818      	ldr	r0, [pc, #96]	; (8008e74 <_Balloc+0x7c>)
 8008e12:	2166      	movs	r1, #102	; 0x66
 8008e14:	f001 f936 	bl	800a084 <__assert_func>
 8008e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e1c:	6006      	str	r6, [r0, #0]
 8008e1e:	60c6      	str	r6, [r0, #12]
 8008e20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e22:	68f3      	ldr	r3, [r6, #12]
 8008e24:	b183      	cbz	r3, 8008e48 <_Balloc+0x50>
 8008e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e2e:	b9b8      	cbnz	r0, 8008e60 <_Balloc+0x68>
 8008e30:	2101      	movs	r1, #1
 8008e32:	fa01 f605 	lsl.w	r6, r1, r5
 8008e36:	1d72      	adds	r2, r6, #5
 8008e38:	0092      	lsls	r2, r2, #2
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fc9d 	bl	800977a <_calloc_r>
 8008e40:	b160      	cbz	r0, 8008e5c <_Balloc+0x64>
 8008e42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e46:	e00e      	b.n	8008e66 <_Balloc+0x6e>
 8008e48:	2221      	movs	r2, #33	; 0x21
 8008e4a:	2104      	movs	r1, #4
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f000 fc94 	bl	800977a <_calloc_r>
 8008e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e54:	60f0      	str	r0, [r6, #12]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e4      	bne.n	8008e26 <_Balloc+0x2e>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	6802      	ldr	r2, [r0, #0]
 8008e62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e66:	2300      	movs	r3, #0
 8008e68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e6c:	e7f7      	b.n	8008e5e <_Balloc+0x66>
 8008e6e:	bf00      	nop
 8008e70:	0800b72e 	.word	0x0800b72e
 8008e74:	0800b890 	.word	0x0800b890

08008e78 <_Bfree>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	b976      	cbnz	r6, 8008ea0 <_Bfree+0x28>
 8008e82:	2010      	movs	r0, #16
 8008e84:	f7ff ff90 	bl	8008da8 <malloc>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	6268      	str	r0, [r5, #36]	; 0x24
 8008e8c:	b920      	cbnz	r0, 8008e98 <_Bfree+0x20>
 8008e8e:	4b09      	ldr	r3, [pc, #36]	; (8008eb4 <_Bfree+0x3c>)
 8008e90:	4809      	ldr	r0, [pc, #36]	; (8008eb8 <_Bfree+0x40>)
 8008e92:	218a      	movs	r1, #138	; 0x8a
 8008e94:	f001 f8f6 	bl	800a084 <__assert_func>
 8008e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e9c:	6006      	str	r6, [r0, #0]
 8008e9e:	60c6      	str	r6, [r0, #12]
 8008ea0:	b13c      	cbz	r4, 8008eb2 <_Bfree+0x3a>
 8008ea2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ea4:	6862      	ldr	r2, [r4, #4]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008eac:	6021      	str	r1, [r4, #0]
 8008eae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	0800b72e 	.word	0x0800b72e
 8008eb8:	0800b890 	.word	0x0800b890

08008ebc <__multadd>:
 8008ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec0:	690d      	ldr	r5, [r1, #16]
 8008ec2:	4607      	mov	r7, r0
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	461e      	mov	r6, r3
 8008ec8:	f101 0c14 	add.w	ip, r1, #20
 8008ecc:	2000      	movs	r0, #0
 8008ece:	f8dc 3000 	ldr.w	r3, [ip]
 8008ed2:	b299      	uxth	r1, r3
 8008ed4:	fb02 6101 	mla	r1, r2, r1, r6
 8008ed8:	0c1e      	lsrs	r6, r3, #16
 8008eda:	0c0b      	lsrs	r3, r1, #16
 8008edc:	fb02 3306 	mla	r3, r2, r6, r3
 8008ee0:	b289      	uxth	r1, r1
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ee8:	4285      	cmp	r5, r0
 8008eea:	f84c 1b04 	str.w	r1, [ip], #4
 8008eee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ef2:	dcec      	bgt.n	8008ece <__multadd+0x12>
 8008ef4:	b30e      	cbz	r6, 8008f3a <__multadd+0x7e>
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	dc19      	bgt.n	8008f30 <__multadd+0x74>
 8008efc:	6861      	ldr	r1, [r4, #4]
 8008efe:	4638      	mov	r0, r7
 8008f00:	3101      	adds	r1, #1
 8008f02:	f7ff ff79 	bl	8008df8 <_Balloc>
 8008f06:	4680      	mov	r8, r0
 8008f08:	b928      	cbnz	r0, 8008f16 <__multadd+0x5a>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	4b0c      	ldr	r3, [pc, #48]	; (8008f40 <__multadd+0x84>)
 8008f0e:	480d      	ldr	r0, [pc, #52]	; (8008f44 <__multadd+0x88>)
 8008f10:	21b5      	movs	r1, #181	; 0xb5
 8008f12:	f001 f8b7 	bl	800a084 <__assert_func>
 8008f16:	6922      	ldr	r2, [r4, #16]
 8008f18:	3202      	adds	r2, #2
 8008f1a:	f104 010c 	add.w	r1, r4, #12
 8008f1e:	0092      	lsls	r2, r2, #2
 8008f20:	300c      	adds	r0, #12
 8008f22:	f7ff ff5b 	bl	8008ddc <memcpy>
 8008f26:	4621      	mov	r1, r4
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7ff ffa5 	bl	8008e78 <_Bfree>
 8008f2e:	4644      	mov	r4, r8
 8008f30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f34:	3501      	adds	r5, #1
 8008f36:	615e      	str	r6, [r3, #20]
 8008f38:	6125      	str	r5, [r4, #16]
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f40:	0800b7a0 	.word	0x0800b7a0
 8008f44:	0800b890 	.word	0x0800b890

08008f48 <__s2b>:
 8008f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	4615      	mov	r5, r2
 8008f50:	461f      	mov	r7, r3
 8008f52:	2209      	movs	r2, #9
 8008f54:	3308      	adds	r3, #8
 8008f56:	4606      	mov	r6, r0
 8008f58:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	2201      	movs	r2, #1
 8008f60:	429a      	cmp	r2, r3
 8008f62:	db09      	blt.n	8008f78 <__s2b+0x30>
 8008f64:	4630      	mov	r0, r6
 8008f66:	f7ff ff47 	bl	8008df8 <_Balloc>
 8008f6a:	b940      	cbnz	r0, 8008f7e <__s2b+0x36>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	4b19      	ldr	r3, [pc, #100]	; (8008fd4 <__s2b+0x8c>)
 8008f70:	4819      	ldr	r0, [pc, #100]	; (8008fd8 <__s2b+0x90>)
 8008f72:	21ce      	movs	r1, #206	; 0xce
 8008f74:	f001 f886 	bl	800a084 <__assert_func>
 8008f78:	0052      	lsls	r2, r2, #1
 8008f7a:	3101      	adds	r1, #1
 8008f7c:	e7f0      	b.n	8008f60 <__s2b+0x18>
 8008f7e:	9b08      	ldr	r3, [sp, #32]
 8008f80:	6143      	str	r3, [r0, #20]
 8008f82:	2d09      	cmp	r5, #9
 8008f84:	f04f 0301 	mov.w	r3, #1
 8008f88:	6103      	str	r3, [r0, #16]
 8008f8a:	dd16      	ble.n	8008fba <__s2b+0x72>
 8008f8c:	f104 0909 	add.w	r9, r4, #9
 8008f90:	46c8      	mov	r8, r9
 8008f92:	442c      	add	r4, r5
 8008f94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f98:	4601      	mov	r1, r0
 8008f9a:	3b30      	subs	r3, #48	; 0x30
 8008f9c:	220a      	movs	r2, #10
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7ff ff8c 	bl	8008ebc <__multadd>
 8008fa4:	45a0      	cmp	r8, r4
 8008fa6:	d1f5      	bne.n	8008f94 <__s2b+0x4c>
 8008fa8:	f1a5 0408 	sub.w	r4, r5, #8
 8008fac:	444c      	add	r4, r9
 8008fae:	1b2d      	subs	r5, r5, r4
 8008fb0:	1963      	adds	r3, r4, r5
 8008fb2:	42bb      	cmp	r3, r7
 8008fb4:	db04      	blt.n	8008fc0 <__s2b+0x78>
 8008fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fba:	340a      	adds	r4, #10
 8008fbc:	2509      	movs	r5, #9
 8008fbe:	e7f6      	b.n	8008fae <__s2b+0x66>
 8008fc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fc4:	4601      	mov	r1, r0
 8008fc6:	3b30      	subs	r3, #48	; 0x30
 8008fc8:	220a      	movs	r2, #10
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7ff ff76 	bl	8008ebc <__multadd>
 8008fd0:	e7ee      	b.n	8008fb0 <__s2b+0x68>
 8008fd2:	bf00      	nop
 8008fd4:	0800b7a0 	.word	0x0800b7a0
 8008fd8:	0800b890 	.word	0x0800b890

08008fdc <__hi0bits>:
 8008fdc:	0c03      	lsrs	r3, r0, #16
 8008fde:	041b      	lsls	r3, r3, #16
 8008fe0:	b9d3      	cbnz	r3, 8009018 <__hi0bits+0x3c>
 8008fe2:	0400      	lsls	r0, r0, #16
 8008fe4:	2310      	movs	r3, #16
 8008fe6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008fea:	bf04      	itt	eq
 8008fec:	0200      	lsleq	r0, r0, #8
 8008fee:	3308      	addeq	r3, #8
 8008ff0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ff4:	bf04      	itt	eq
 8008ff6:	0100      	lsleq	r0, r0, #4
 8008ff8:	3304      	addeq	r3, #4
 8008ffa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ffe:	bf04      	itt	eq
 8009000:	0080      	lsleq	r0, r0, #2
 8009002:	3302      	addeq	r3, #2
 8009004:	2800      	cmp	r0, #0
 8009006:	db05      	blt.n	8009014 <__hi0bits+0x38>
 8009008:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800900c:	f103 0301 	add.w	r3, r3, #1
 8009010:	bf08      	it	eq
 8009012:	2320      	moveq	r3, #32
 8009014:	4618      	mov	r0, r3
 8009016:	4770      	bx	lr
 8009018:	2300      	movs	r3, #0
 800901a:	e7e4      	b.n	8008fe6 <__hi0bits+0xa>

0800901c <__lo0bits>:
 800901c:	6803      	ldr	r3, [r0, #0]
 800901e:	f013 0207 	ands.w	r2, r3, #7
 8009022:	4601      	mov	r1, r0
 8009024:	d00b      	beq.n	800903e <__lo0bits+0x22>
 8009026:	07da      	lsls	r2, r3, #31
 8009028:	d423      	bmi.n	8009072 <__lo0bits+0x56>
 800902a:	0798      	lsls	r0, r3, #30
 800902c:	bf49      	itett	mi
 800902e:	085b      	lsrmi	r3, r3, #1
 8009030:	089b      	lsrpl	r3, r3, #2
 8009032:	2001      	movmi	r0, #1
 8009034:	600b      	strmi	r3, [r1, #0]
 8009036:	bf5c      	itt	pl
 8009038:	600b      	strpl	r3, [r1, #0]
 800903a:	2002      	movpl	r0, #2
 800903c:	4770      	bx	lr
 800903e:	b298      	uxth	r0, r3
 8009040:	b9a8      	cbnz	r0, 800906e <__lo0bits+0x52>
 8009042:	0c1b      	lsrs	r3, r3, #16
 8009044:	2010      	movs	r0, #16
 8009046:	b2da      	uxtb	r2, r3
 8009048:	b90a      	cbnz	r2, 800904e <__lo0bits+0x32>
 800904a:	3008      	adds	r0, #8
 800904c:	0a1b      	lsrs	r3, r3, #8
 800904e:	071a      	lsls	r2, r3, #28
 8009050:	bf04      	itt	eq
 8009052:	091b      	lsreq	r3, r3, #4
 8009054:	3004      	addeq	r0, #4
 8009056:	079a      	lsls	r2, r3, #30
 8009058:	bf04      	itt	eq
 800905a:	089b      	lsreq	r3, r3, #2
 800905c:	3002      	addeq	r0, #2
 800905e:	07da      	lsls	r2, r3, #31
 8009060:	d403      	bmi.n	800906a <__lo0bits+0x4e>
 8009062:	085b      	lsrs	r3, r3, #1
 8009064:	f100 0001 	add.w	r0, r0, #1
 8009068:	d005      	beq.n	8009076 <__lo0bits+0x5a>
 800906a:	600b      	str	r3, [r1, #0]
 800906c:	4770      	bx	lr
 800906e:	4610      	mov	r0, r2
 8009070:	e7e9      	b.n	8009046 <__lo0bits+0x2a>
 8009072:	2000      	movs	r0, #0
 8009074:	4770      	bx	lr
 8009076:	2020      	movs	r0, #32
 8009078:	4770      	bx	lr
	...

0800907c <__i2b>:
 800907c:	b510      	push	{r4, lr}
 800907e:	460c      	mov	r4, r1
 8009080:	2101      	movs	r1, #1
 8009082:	f7ff feb9 	bl	8008df8 <_Balloc>
 8009086:	4602      	mov	r2, r0
 8009088:	b928      	cbnz	r0, 8009096 <__i2b+0x1a>
 800908a:	4b05      	ldr	r3, [pc, #20]	; (80090a0 <__i2b+0x24>)
 800908c:	4805      	ldr	r0, [pc, #20]	; (80090a4 <__i2b+0x28>)
 800908e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009092:	f000 fff7 	bl	800a084 <__assert_func>
 8009096:	2301      	movs	r3, #1
 8009098:	6144      	str	r4, [r0, #20]
 800909a:	6103      	str	r3, [r0, #16]
 800909c:	bd10      	pop	{r4, pc}
 800909e:	bf00      	nop
 80090a0:	0800b7a0 	.word	0x0800b7a0
 80090a4:	0800b890 	.word	0x0800b890

080090a8 <__multiply>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	4691      	mov	r9, r2
 80090ae:	690a      	ldr	r2, [r1, #16]
 80090b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	bfb8      	it	lt
 80090b8:	460b      	movlt	r3, r1
 80090ba:	460c      	mov	r4, r1
 80090bc:	bfbc      	itt	lt
 80090be:	464c      	movlt	r4, r9
 80090c0:	4699      	movlt	r9, r3
 80090c2:	6927      	ldr	r7, [r4, #16]
 80090c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090c8:	68a3      	ldr	r3, [r4, #8]
 80090ca:	6861      	ldr	r1, [r4, #4]
 80090cc:	eb07 060a 	add.w	r6, r7, sl
 80090d0:	42b3      	cmp	r3, r6
 80090d2:	b085      	sub	sp, #20
 80090d4:	bfb8      	it	lt
 80090d6:	3101      	addlt	r1, #1
 80090d8:	f7ff fe8e 	bl	8008df8 <_Balloc>
 80090dc:	b930      	cbnz	r0, 80090ec <__multiply+0x44>
 80090de:	4602      	mov	r2, r0
 80090e0:	4b44      	ldr	r3, [pc, #272]	; (80091f4 <__multiply+0x14c>)
 80090e2:	4845      	ldr	r0, [pc, #276]	; (80091f8 <__multiply+0x150>)
 80090e4:	f240 115d 	movw	r1, #349	; 0x15d
 80090e8:	f000 ffcc 	bl	800a084 <__assert_func>
 80090ec:	f100 0514 	add.w	r5, r0, #20
 80090f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090f4:	462b      	mov	r3, r5
 80090f6:	2200      	movs	r2, #0
 80090f8:	4543      	cmp	r3, r8
 80090fa:	d321      	bcc.n	8009140 <__multiply+0x98>
 80090fc:	f104 0314 	add.w	r3, r4, #20
 8009100:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009104:	f109 0314 	add.w	r3, r9, #20
 8009108:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800910c:	9202      	str	r2, [sp, #8]
 800910e:	1b3a      	subs	r2, r7, r4
 8009110:	3a15      	subs	r2, #21
 8009112:	f022 0203 	bic.w	r2, r2, #3
 8009116:	3204      	adds	r2, #4
 8009118:	f104 0115 	add.w	r1, r4, #21
 800911c:	428f      	cmp	r7, r1
 800911e:	bf38      	it	cc
 8009120:	2204      	movcc	r2, #4
 8009122:	9201      	str	r2, [sp, #4]
 8009124:	9a02      	ldr	r2, [sp, #8]
 8009126:	9303      	str	r3, [sp, #12]
 8009128:	429a      	cmp	r2, r3
 800912a:	d80c      	bhi.n	8009146 <__multiply+0x9e>
 800912c:	2e00      	cmp	r6, #0
 800912e:	dd03      	ble.n	8009138 <__multiply+0x90>
 8009130:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009134:	2b00      	cmp	r3, #0
 8009136:	d05a      	beq.n	80091ee <__multiply+0x146>
 8009138:	6106      	str	r6, [r0, #16]
 800913a:	b005      	add	sp, #20
 800913c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009140:	f843 2b04 	str.w	r2, [r3], #4
 8009144:	e7d8      	b.n	80090f8 <__multiply+0x50>
 8009146:	f8b3 a000 	ldrh.w	sl, [r3]
 800914a:	f1ba 0f00 	cmp.w	sl, #0
 800914e:	d024      	beq.n	800919a <__multiply+0xf2>
 8009150:	f104 0e14 	add.w	lr, r4, #20
 8009154:	46a9      	mov	r9, r5
 8009156:	f04f 0c00 	mov.w	ip, #0
 800915a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800915e:	f8d9 1000 	ldr.w	r1, [r9]
 8009162:	fa1f fb82 	uxth.w	fp, r2
 8009166:	b289      	uxth	r1, r1
 8009168:	fb0a 110b 	mla	r1, sl, fp, r1
 800916c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009170:	f8d9 2000 	ldr.w	r2, [r9]
 8009174:	4461      	add	r1, ip
 8009176:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800917a:	fb0a c20b 	mla	r2, sl, fp, ip
 800917e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009182:	b289      	uxth	r1, r1
 8009184:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009188:	4577      	cmp	r7, lr
 800918a:	f849 1b04 	str.w	r1, [r9], #4
 800918e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009192:	d8e2      	bhi.n	800915a <__multiply+0xb2>
 8009194:	9a01      	ldr	r2, [sp, #4]
 8009196:	f845 c002 	str.w	ip, [r5, r2]
 800919a:	9a03      	ldr	r2, [sp, #12]
 800919c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091a0:	3304      	adds	r3, #4
 80091a2:	f1b9 0f00 	cmp.w	r9, #0
 80091a6:	d020      	beq.n	80091ea <__multiply+0x142>
 80091a8:	6829      	ldr	r1, [r5, #0]
 80091aa:	f104 0c14 	add.w	ip, r4, #20
 80091ae:	46ae      	mov	lr, r5
 80091b0:	f04f 0a00 	mov.w	sl, #0
 80091b4:	f8bc b000 	ldrh.w	fp, [ip]
 80091b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091bc:	fb09 220b 	mla	r2, r9, fp, r2
 80091c0:	4492      	add	sl, r2
 80091c2:	b289      	uxth	r1, r1
 80091c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80091c8:	f84e 1b04 	str.w	r1, [lr], #4
 80091cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80091d0:	f8be 1000 	ldrh.w	r1, [lr]
 80091d4:	0c12      	lsrs	r2, r2, #16
 80091d6:	fb09 1102 	mla	r1, r9, r2, r1
 80091da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80091de:	4567      	cmp	r7, ip
 80091e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091e4:	d8e6      	bhi.n	80091b4 <__multiply+0x10c>
 80091e6:	9a01      	ldr	r2, [sp, #4]
 80091e8:	50a9      	str	r1, [r5, r2]
 80091ea:	3504      	adds	r5, #4
 80091ec:	e79a      	b.n	8009124 <__multiply+0x7c>
 80091ee:	3e01      	subs	r6, #1
 80091f0:	e79c      	b.n	800912c <__multiply+0x84>
 80091f2:	bf00      	nop
 80091f4:	0800b7a0 	.word	0x0800b7a0
 80091f8:	0800b890 	.word	0x0800b890

080091fc <__pow5mult>:
 80091fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009200:	4615      	mov	r5, r2
 8009202:	f012 0203 	ands.w	r2, r2, #3
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	d007      	beq.n	800921c <__pow5mult+0x20>
 800920c:	4c25      	ldr	r4, [pc, #148]	; (80092a4 <__pow5mult+0xa8>)
 800920e:	3a01      	subs	r2, #1
 8009210:	2300      	movs	r3, #0
 8009212:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009216:	f7ff fe51 	bl	8008ebc <__multadd>
 800921a:	4607      	mov	r7, r0
 800921c:	10ad      	asrs	r5, r5, #2
 800921e:	d03d      	beq.n	800929c <__pow5mult+0xa0>
 8009220:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009222:	b97c      	cbnz	r4, 8009244 <__pow5mult+0x48>
 8009224:	2010      	movs	r0, #16
 8009226:	f7ff fdbf 	bl	8008da8 <malloc>
 800922a:	4602      	mov	r2, r0
 800922c:	6270      	str	r0, [r6, #36]	; 0x24
 800922e:	b928      	cbnz	r0, 800923c <__pow5mult+0x40>
 8009230:	4b1d      	ldr	r3, [pc, #116]	; (80092a8 <__pow5mult+0xac>)
 8009232:	481e      	ldr	r0, [pc, #120]	; (80092ac <__pow5mult+0xb0>)
 8009234:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009238:	f000 ff24 	bl	800a084 <__assert_func>
 800923c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009240:	6004      	str	r4, [r0, #0]
 8009242:	60c4      	str	r4, [r0, #12]
 8009244:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009248:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800924c:	b94c      	cbnz	r4, 8009262 <__pow5mult+0x66>
 800924e:	f240 2171 	movw	r1, #625	; 0x271
 8009252:	4630      	mov	r0, r6
 8009254:	f7ff ff12 	bl	800907c <__i2b>
 8009258:	2300      	movs	r3, #0
 800925a:	f8c8 0008 	str.w	r0, [r8, #8]
 800925e:	4604      	mov	r4, r0
 8009260:	6003      	str	r3, [r0, #0]
 8009262:	f04f 0900 	mov.w	r9, #0
 8009266:	07eb      	lsls	r3, r5, #31
 8009268:	d50a      	bpl.n	8009280 <__pow5mult+0x84>
 800926a:	4639      	mov	r1, r7
 800926c:	4622      	mov	r2, r4
 800926e:	4630      	mov	r0, r6
 8009270:	f7ff ff1a 	bl	80090a8 <__multiply>
 8009274:	4639      	mov	r1, r7
 8009276:	4680      	mov	r8, r0
 8009278:	4630      	mov	r0, r6
 800927a:	f7ff fdfd 	bl	8008e78 <_Bfree>
 800927e:	4647      	mov	r7, r8
 8009280:	106d      	asrs	r5, r5, #1
 8009282:	d00b      	beq.n	800929c <__pow5mult+0xa0>
 8009284:	6820      	ldr	r0, [r4, #0]
 8009286:	b938      	cbnz	r0, 8009298 <__pow5mult+0x9c>
 8009288:	4622      	mov	r2, r4
 800928a:	4621      	mov	r1, r4
 800928c:	4630      	mov	r0, r6
 800928e:	f7ff ff0b 	bl	80090a8 <__multiply>
 8009292:	6020      	str	r0, [r4, #0]
 8009294:	f8c0 9000 	str.w	r9, [r0]
 8009298:	4604      	mov	r4, r0
 800929a:	e7e4      	b.n	8009266 <__pow5mult+0x6a>
 800929c:	4638      	mov	r0, r7
 800929e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a2:	bf00      	nop
 80092a4:	0800b9e0 	.word	0x0800b9e0
 80092a8:	0800b72e 	.word	0x0800b72e
 80092ac:	0800b890 	.word	0x0800b890

080092b0 <__lshift>:
 80092b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b4:	460c      	mov	r4, r1
 80092b6:	6849      	ldr	r1, [r1, #4]
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092be:	68a3      	ldr	r3, [r4, #8]
 80092c0:	4607      	mov	r7, r0
 80092c2:	4691      	mov	r9, r2
 80092c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092c8:	f108 0601 	add.w	r6, r8, #1
 80092cc:	42b3      	cmp	r3, r6
 80092ce:	db0b      	blt.n	80092e8 <__lshift+0x38>
 80092d0:	4638      	mov	r0, r7
 80092d2:	f7ff fd91 	bl	8008df8 <_Balloc>
 80092d6:	4605      	mov	r5, r0
 80092d8:	b948      	cbnz	r0, 80092ee <__lshift+0x3e>
 80092da:	4602      	mov	r2, r0
 80092dc:	4b2a      	ldr	r3, [pc, #168]	; (8009388 <__lshift+0xd8>)
 80092de:	482b      	ldr	r0, [pc, #172]	; (800938c <__lshift+0xdc>)
 80092e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092e4:	f000 fece 	bl	800a084 <__assert_func>
 80092e8:	3101      	adds	r1, #1
 80092ea:	005b      	lsls	r3, r3, #1
 80092ec:	e7ee      	b.n	80092cc <__lshift+0x1c>
 80092ee:	2300      	movs	r3, #0
 80092f0:	f100 0114 	add.w	r1, r0, #20
 80092f4:	f100 0210 	add.w	r2, r0, #16
 80092f8:	4618      	mov	r0, r3
 80092fa:	4553      	cmp	r3, sl
 80092fc:	db37      	blt.n	800936e <__lshift+0xbe>
 80092fe:	6920      	ldr	r0, [r4, #16]
 8009300:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009304:	f104 0314 	add.w	r3, r4, #20
 8009308:	f019 091f 	ands.w	r9, r9, #31
 800930c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009310:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009314:	d02f      	beq.n	8009376 <__lshift+0xc6>
 8009316:	f1c9 0e20 	rsb	lr, r9, #32
 800931a:	468a      	mov	sl, r1
 800931c:	f04f 0c00 	mov.w	ip, #0
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	fa02 f209 	lsl.w	r2, r2, r9
 8009326:	ea42 020c 	orr.w	r2, r2, ip
 800932a:	f84a 2b04 	str.w	r2, [sl], #4
 800932e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009332:	4298      	cmp	r0, r3
 8009334:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009338:	d8f2      	bhi.n	8009320 <__lshift+0x70>
 800933a:	1b03      	subs	r3, r0, r4
 800933c:	3b15      	subs	r3, #21
 800933e:	f023 0303 	bic.w	r3, r3, #3
 8009342:	3304      	adds	r3, #4
 8009344:	f104 0215 	add.w	r2, r4, #21
 8009348:	4290      	cmp	r0, r2
 800934a:	bf38      	it	cc
 800934c:	2304      	movcc	r3, #4
 800934e:	f841 c003 	str.w	ip, [r1, r3]
 8009352:	f1bc 0f00 	cmp.w	ip, #0
 8009356:	d001      	beq.n	800935c <__lshift+0xac>
 8009358:	f108 0602 	add.w	r6, r8, #2
 800935c:	3e01      	subs	r6, #1
 800935e:	4638      	mov	r0, r7
 8009360:	612e      	str	r6, [r5, #16]
 8009362:	4621      	mov	r1, r4
 8009364:	f7ff fd88 	bl	8008e78 <_Bfree>
 8009368:	4628      	mov	r0, r5
 800936a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009372:	3301      	adds	r3, #1
 8009374:	e7c1      	b.n	80092fa <__lshift+0x4a>
 8009376:	3904      	subs	r1, #4
 8009378:	f853 2b04 	ldr.w	r2, [r3], #4
 800937c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009380:	4298      	cmp	r0, r3
 8009382:	d8f9      	bhi.n	8009378 <__lshift+0xc8>
 8009384:	e7ea      	b.n	800935c <__lshift+0xac>
 8009386:	bf00      	nop
 8009388:	0800b7a0 	.word	0x0800b7a0
 800938c:	0800b890 	.word	0x0800b890

08009390 <__mcmp>:
 8009390:	b530      	push	{r4, r5, lr}
 8009392:	6902      	ldr	r2, [r0, #16]
 8009394:	690c      	ldr	r4, [r1, #16]
 8009396:	1b12      	subs	r2, r2, r4
 8009398:	d10e      	bne.n	80093b8 <__mcmp+0x28>
 800939a:	f100 0314 	add.w	r3, r0, #20
 800939e:	3114      	adds	r1, #20
 80093a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80093ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093b0:	42a5      	cmp	r5, r4
 80093b2:	d003      	beq.n	80093bc <__mcmp+0x2c>
 80093b4:	d305      	bcc.n	80093c2 <__mcmp+0x32>
 80093b6:	2201      	movs	r2, #1
 80093b8:	4610      	mov	r0, r2
 80093ba:	bd30      	pop	{r4, r5, pc}
 80093bc:	4283      	cmp	r3, r0
 80093be:	d3f3      	bcc.n	80093a8 <__mcmp+0x18>
 80093c0:	e7fa      	b.n	80093b8 <__mcmp+0x28>
 80093c2:	f04f 32ff 	mov.w	r2, #4294967295
 80093c6:	e7f7      	b.n	80093b8 <__mcmp+0x28>

080093c8 <__mdiff>:
 80093c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	460c      	mov	r4, r1
 80093ce:	4606      	mov	r6, r0
 80093d0:	4611      	mov	r1, r2
 80093d2:	4620      	mov	r0, r4
 80093d4:	4690      	mov	r8, r2
 80093d6:	f7ff ffdb 	bl	8009390 <__mcmp>
 80093da:	1e05      	subs	r5, r0, #0
 80093dc:	d110      	bne.n	8009400 <__mdiff+0x38>
 80093de:	4629      	mov	r1, r5
 80093e0:	4630      	mov	r0, r6
 80093e2:	f7ff fd09 	bl	8008df8 <_Balloc>
 80093e6:	b930      	cbnz	r0, 80093f6 <__mdiff+0x2e>
 80093e8:	4b3a      	ldr	r3, [pc, #232]	; (80094d4 <__mdiff+0x10c>)
 80093ea:	4602      	mov	r2, r0
 80093ec:	f240 2132 	movw	r1, #562	; 0x232
 80093f0:	4839      	ldr	r0, [pc, #228]	; (80094d8 <__mdiff+0x110>)
 80093f2:	f000 fe47 	bl	800a084 <__assert_func>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	bfa4      	itt	ge
 8009402:	4643      	movge	r3, r8
 8009404:	46a0      	movge	r8, r4
 8009406:	4630      	mov	r0, r6
 8009408:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800940c:	bfa6      	itte	ge
 800940e:	461c      	movge	r4, r3
 8009410:	2500      	movge	r5, #0
 8009412:	2501      	movlt	r5, #1
 8009414:	f7ff fcf0 	bl	8008df8 <_Balloc>
 8009418:	b920      	cbnz	r0, 8009424 <__mdiff+0x5c>
 800941a:	4b2e      	ldr	r3, [pc, #184]	; (80094d4 <__mdiff+0x10c>)
 800941c:	4602      	mov	r2, r0
 800941e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009422:	e7e5      	b.n	80093f0 <__mdiff+0x28>
 8009424:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009428:	6926      	ldr	r6, [r4, #16]
 800942a:	60c5      	str	r5, [r0, #12]
 800942c:	f104 0914 	add.w	r9, r4, #20
 8009430:	f108 0514 	add.w	r5, r8, #20
 8009434:	f100 0e14 	add.w	lr, r0, #20
 8009438:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800943c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009440:	f108 0210 	add.w	r2, r8, #16
 8009444:	46f2      	mov	sl, lr
 8009446:	2100      	movs	r1, #0
 8009448:	f859 3b04 	ldr.w	r3, [r9], #4
 800944c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009450:	fa1f f883 	uxth.w	r8, r3
 8009454:	fa11 f18b 	uxtah	r1, r1, fp
 8009458:	0c1b      	lsrs	r3, r3, #16
 800945a:	eba1 0808 	sub.w	r8, r1, r8
 800945e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009462:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009466:	fa1f f888 	uxth.w	r8, r8
 800946a:	1419      	asrs	r1, r3, #16
 800946c:	454e      	cmp	r6, r9
 800946e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009472:	f84a 3b04 	str.w	r3, [sl], #4
 8009476:	d8e7      	bhi.n	8009448 <__mdiff+0x80>
 8009478:	1b33      	subs	r3, r6, r4
 800947a:	3b15      	subs	r3, #21
 800947c:	f023 0303 	bic.w	r3, r3, #3
 8009480:	3304      	adds	r3, #4
 8009482:	3415      	adds	r4, #21
 8009484:	42a6      	cmp	r6, r4
 8009486:	bf38      	it	cc
 8009488:	2304      	movcc	r3, #4
 800948a:	441d      	add	r5, r3
 800948c:	4473      	add	r3, lr
 800948e:	469e      	mov	lr, r3
 8009490:	462e      	mov	r6, r5
 8009492:	4566      	cmp	r6, ip
 8009494:	d30e      	bcc.n	80094b4 <__mdiff+0xec>
 8009496:	f10c 0203 	add.w	r2, ip, #3
 800949a:	1b52      	subs	r2, r2, r5
 800949c:	f022 0203 	bic.w	r2, r2, #3
 80094a0:	3d03      	subs	r5, #3
 80094a2:	45ac      	cmp	ip, r5
 80094a4:	bf38      	it	cc
 80094a6:	2200      	movcc	r2, #0
 80094a8:	441a      	add	r2, r3
 80094aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80094ae:	b17b      	cbz	r3, 80094d0 <__mdiff+0x108>
 80094b0:	6107      	str	r7, [r0, #16]
 80094b2:	e7a3      	b.n	80093fc <__mdiff+0x34>
 80094b4:	f856 8b04 	ldr.w	r8, [r6], #4
 80094b8:	fa11 f288 	uxtah	r2, r1, r8
 80094bc:	1414      	asrs	r4, r2, #16
 80094be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094c2:	b292      	uxth	r2, r2
 80094c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80094c8:	f84e 2b04 	str.w	r2, [lr], #4
 80094cc:	1421      	asrs	r1, r4, #16
 80094ce:	e7e0      	b.n	8009492 <__mdiff+0xca>
 80094d0:	3f01      	subs	r7, #1
 80094d2:	e7ea      	b.n	80094aa <__mdiff+0xe2>
 80094d4:	0800b7a0 	.word	0x0800b7a0
 80094d8:	0800b890 	.word	0x0800b890

080094dc <__ulp>:
 80094dc:	b082      	sub	sp, #8
 80094de:	ed8d 0b00 	vstr	d0, [sp]
 80094e2:	9b01      	ldr	r3, [sp, #4]
 80094e4:	4912      	ldr	r1, [pc, #72]	; (8009530 <__ulp+0x54>)
 80094e6:	4019      	ands	r1, r3
 80094e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80094ec:	2900      	cmp	r1, #0
 80094ee:	dd05      	ble.n	80094fc <__ulp+0x20>
 80094f0:	2200      	movs	r2, #0
 80094f2:	460b      	mov	r3, r1
 80094f4:	ec43 2b10 	vmov	d0, r2, r3
 80094f8:	b002      	add	sp, #8
 80094fa:	4770      	bx	lr
 80094fc:	4249      	negs	r1, r1
 80094fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009502:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009506:	f04f 0200 	mov.w	r2, #0
 800950a:	f04f 0300 	mov.w	r3, #0
 800950e:	da04      	bge.n	800951a <__ulp+0x3e>
 8009510:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009514:	fa41 f300 	asr.w	r3, r1, r0
 8009518:	e7ec      	b.n	80094f4 <__ulp+0x18>
 800951a:	f1a0 0114 	sub.w	r1, r0, #20
 800951e:	291e      	cmp	r1, #30
 8009520:	bfda      	itte	le
 8009522:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009526:	fa20 f101 	lsrle.w	r1, r0, r1
 800952a:	2101      	movgt	r1, #1
 800952c:	460a      	mov	r2, r1
 800952e:	e7e1      	b.n	80094f4 <__ulp+0x18>
 8009530:	7ff00000 	.word	0x7ff00000

08009534 <__b2d>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	6905      	ldr	r5, [r0, #16]
 8009538:	f100 0714 	add.w	r7, r0, #20
 800953c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009540:	1f2e      	subs	r6, r5, #4
 8009542:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009546:	4620      	mov	r0, r4
 8009548:	f7ff fd48 	bl	8008fdc <__hi0bits>
 800954c:	f1c0 0320 	rsb	r3, r0, #32
 8009550:	280a      	cmp	r0, #10
 8009552:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80095d0 <__b2d+0x9c>
 8009556:	600b      	str	r3, [r1, #0]
 8009558:	dc14      	bgt.n	8009584 <__b2d+0x50>
 800955a:	f1c0 0e0b 	rsb	lr, r0, #11
 800955e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009562:	42b7      	cmp	r7, r6
 8009564:	ea41 030c 	orr.w	r3, r1, ip
 8009568:	bf34      	ite	cc
 800956a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800956e:	2100      	movcs	r1, #0
 8009570:	3015      	adds	r0, #21
 8009572:	fa04 f000 	lsl.w	r0, r4, r0
 8009576:	fa21 f10e 	lsr.w	r1, r1, lr
 800957a:	ea40 0201 	orr.w	r2, r0, r1
 800957e:	ec43 2b10 	vmov	d0, r2, r3
 8009582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009584:	42b7      	cmp	r7, r6
 8009586:	bf3a      	itte	cc
 8009588:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800958c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009590:	2100      	movcs	r1, #0
 8009592:	380b      	subs	r0, #11
 8009594:	d017      	beq.n	80095c6 <__b2d+0x92>
 8009596:	f1c0 0c20 	rsb	ip, r0, #32
 800959a:	fa04 f500 	lsl.w	r5, r4, r0
 800959e:	42be      	cmp	r6, r7
 80095a0:	fa21 f40c 	lsr.w	r4, r1, ip
 80095a4:	ea45 0504 	orr.w	r5, r5, r4
 80095a8:	bf8c      	ite	hi
 80095aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80095ae:	2400      	movls	r4, #0
 80095b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80095b4:	fa01 f000 	lsl.w	r0, r1, r0
 80095b8:	fa24 f40c 	lsr.w	r4, r4, ip
 80095bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80095c0:	ea40 0204 	orr.w	r2, r0, r4
 80095c4:	e7db      	b.n	800957e <__b2d+0x4a>
 80095c6:	ea44 030c 	orr.w	r3, r4, ip
 80095ca:	460a      	mov	r2, r1
 80095cc:	e7d7      	b.n	800957e <__b2d+0x4a>
 80095ce:	bf00      	nop
 80095d0:	3ff00000 	.word	0x3ff00000

080095d4 <__d2b>:
 80095d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095d8:	4689      	mov	r9, r1
 80095da:	2101      	movs	r1, #1
 80095dc:	ec57 6b10 	vmov	r6, r7, d0
 80095e0:	4690      	mov	r8, r2
 80095e2:	f7ff fc09 	bl	8008df8 <_Balloc>
 80095e6:	4604      	mov	r4, r0
 80095e8:	b930      	cbnz	r0, 80095f8 <__d2b+0x24>
 80095ea:	4602      	mov	r2, r0
 80095ec:	4b25      	ldr	r3, [pc, #148]	; (8009684 <__d2b+0xb0>)
 80095ee:	4826      	ldr	r0, [pc, #152]	; (8009688 <__d2b+0xb4>)
 80095f0:	f240 310a 	movw	r1, #778	; 0x30a
 80095f4:	f000 fd46 	bl	800a084 <__assert_func>
 80095f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80095fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009600:	bb35      	cbnz	r5, 8009650 <__d2b+0x7c>
 8009602:	2e00      	cmp	r6, #0
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	d028      	beq.n	800965a <__d2b+0x86>
 8009608:	4668      	mov	r0, sp
 800960a:	9600      	str	r6, [sp, #0]
 800960c:	f7ff fd06 	bl	800901c <__lo0bits>
 8009610:	9900      	ldr	r1, [sp, #0]
 8009612:	b300      	cbz	r0, 8009656 <__d2b+0x82>
 8009614:	9a01      	ldr	r2, [sp, #4]
 8009616:	f1c0 0320 	rsb	r3, r0, #32
 800961a:	fa02 f303 	lsl.w	r3, r2, r3
 800961e:	430b      	orrs	r3, r1
 8009620:	40c2      	lsrs	r2, r0
 8009622:	6163      	str	r3, [r4, #20]
 8009624:	9201      	str	r2, [sp, #4]
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	61a3      	str	r3, [r4, #24]
 800962a:	2b00      	cmp	r3, #0
 800962c:	bf14      	ite	ne
 800962e:	2202      	movne	r2, #2
 8009630:	2201      	moveq	r2, #1
 8009632:	6122      	str	r2, [r4, #16]
 8009634:	b1d5      	cbz	r5, 800966c <__d2b+0x98>
 8009636:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800963a:	4405      	add	r5, r0
 800963c:	f8c9 5000 	str.w	r5, [r9]
 8009640:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009644:	f8c8 0000 	str.w	r0, [r8]
 8009648:	4620      	mov	r0, r4
 800964a:	b003      	add	sp, #12
 800964c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009654:	e7d5      	b.n	8009602 <__d2b+0x2e>
 8009656:	6161      	str	r1, [r4, #20]
 8009658:	e7e5      	b.n	8009626 <__d2b+0x52>
 800965a:	a801      	add	r0, sp, #4
 800965c:	f7ff fcde 	bl	800901c <__lo0bits>
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	6163      	str	r3, [r4, #20]
 8009664:	2201      	movs	r2, #1
 8009666:	6122      	str	r2, [r4, #16]
 8009668:	3020      	adds	r0, #32
 800966a:	e7e3      	b.n	8009634 <__d2b+0x60>
 800966c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009674:	f8c9 0000 	str.w	r0, [r9]
 8009678:	6918      	ldr	r0, [r3, #16]
 800967a:	f7ff fcaf 	bl	8008fdc <__hi0bits>
 800967e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009682:	e7df      	b.n	8009644 <__d2b+0x70>
 8009684:	0800b7a0 	.word	0x0800b7a0
 8009688:	0800b890 	.word	0x0800b890

0800968c <__ratio>:
 800968c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	4688      	mov	r8, r1
 8009692:	4669      	mov	r1, sp
 8009694:	4681      	mov	r9, r0
 8009696:	f7ff ff4d 	bl	8009534 <__b2d>
 800969a:	a901      	add	r1, sp, #4
 800969c:	4640      	mov	r0, r8
 800969e:	ec55 4b10 	vmov	r4, r5, d0
 80096a2:	f7ff ff47 	bl	8009534 <__b2d>
 80096a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80096ae:	eba3 0c02 	sub.w	ip, r3, r2
 80096b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80096b6:	1a9b      	subs	r3, r3, r2
 80096b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80096bc:	ec51 0b10 	vmov	r0, r1, d0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	bfd6      	itet	le
 80096c4:	460a      	movle	r2, r1
 80096c6:	462a      	movgt	r2, r5
 80096c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80096cc:	468b      	mov	fp, r1
 80096ce:	462f      	mov	r7, r5
 80096d0:	bfd4      	ite	le
 80096d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80096d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80096da:	4620      	mov	r0, r4
 80096dc:	ee10 2a10 	vmov	r2, s0
 80096e0:	465b      	mov	r3, fp
 80096e2:	4639      	mov	r1, r7
 80096e4:	f7f7 f8da 	bl	800089c <__aeabi_ddiv>
 80096e8:	ec41 0b10 	vmov	d0, r0, r1
 80096ec:	b003      	add	sp, #12
 80096ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096f2 <__copybits>:
 80096f2:	3901      	subs	r1, #1
 80096f4:	b570      	push	{r4, r5, r6, lr}
 80096f6:	1149      	asrs	r1, r1, #5
 80096f8:	6914      	ldr	r4, [r2, #16]
 80096fa:	3101      	adds	r1, #1
 80096fc:	f102 0314 	add.w	r3, r2, #20
 8009700:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009704:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009708:	1f05      	subs	r5, r0, #4
 800970a:	42a3      	cmp	r3, r4
 800970c:	d30c      	bcc.n	8009728 <__copybits+0x36>
 800970e:	1aa3      	subs	r3, r4, r2
 8009710:	3b11      	subs	r3, #17
 8009712:	f023 0303 	bic.w	r3, r3, #3
 8009716:	3211      	adds	r2, #17
 8009718:	42a2      	cmp	r2, r4
 800971a:	bf88      	it	hi
 800971c:	2300      	movhi	r3, #0
 800971e:	4418      	add	r0, r3
 8009720:	2300      	movs	r3, #0
 8009722:	4288      	cmp	r0, r1
 8009724:	d305      	bcc.n	8009732 <__copybits+0x40>
 8009726:	bd70      	pop	{r4, r5, r6, pc}
 8009728:	f853 6b04 	ldr.w	r6, [r3], #4
 800972c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009730:	e7eb      	b.n	800970a <__copybits+0x18>
 8009732:	f840 3b04 	str.w	r3, [r0], #4
 8009736:	e7f4      	b.n	8009722 <__copybits+0x30>

08009738 <__any_on>:
 8009738:	f100 0214 	add.w	r2, r0, #20
 800973c:	6900      	ldr	r0, [r0, #16]
 800973e:	114b      	asrs	r3, r1, #5
 8009740:	4298      	cmp	r0, r3
 8009742:	b510      	push	{r4, lr}
 8009744:	db11      	blt.n	800976a <__any_on+0x32>
 8009746:	dd0a      	ble.n	800975e <__any_on+0x26>
 8009748:	f011 011f 	ands.w	r1, r1, #31
 800974c:	d007      	beq.n	800975e <__any_on+0x26>
 800974e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009752:	fa24 f001 	lsr.w	r0, r4, r1
 8009756:	fa00 f101 	lsl.w	r1, r0, r1
 800975a:	428c      	cmp	r4, r1
 800975c:	d10b      	bne.n	8009776 <__any_on+0x3e>
 800975e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009762:	4293      	cmp	r3, r2
 8009764:	d803      	bhi.n	800976e <__any_on+0x36>
 8009766:	2000      	movs	r0, #0
 8009768:	bd10      	pop	{r4, pc}
 800976a:	4603      	mov	r3, r0
 800976c:	e7f7      	b.n	800975e <__any_on+0x26>
 800976e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009772:	2900      	cmp	r1, #0
 8009774:	d0f5      	beq.n	8009762 <__any_on+0x2a>
 8009776:	2001      	movs	r0, #1
 8009778:	e7f6      	b.n	8009768 <__any_on+0x30>

0800977a <_calloc_r>:
 800977a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800977c:	fba1 2402 	umull	r2, r4, r1, r2
 8009780:	b94c      	cbnz	r4, 8009796 <_calloc_r+0x1c>
 8009782:	4611      	mov	r1, r2
 8009784:	9201      	str	r2, [sp, #4]
 8009786:	f000 f87b 	bl	8009880 <_malloc_r>
 800978a:	9a01      	ldr	r2, [sp, #4]
 800978c:	4605      	mov	r5, r0
 800978e:	b930      	cbnz	r0, 800979e <_calloc_r+0x24>
 8009790:	4628      	mov	r0, r5
 8009792:	b003      	add	sp, #12
 8009794:	bd30      	pop	{r4, r5, pc}
 8009796:	220c      	movs	r2, #12
 8009798:	6002      	str	r2, [r0, #0]
 800979a:	2500      	movs	r5, #0
 800979c:	e7f8      	b.n	8009790 <_calloc_r+0x16>
 800979e:	4621      	mov	r1, r4
 80097a0:	f7fc f83c 	bl	800581c <memset>
 80097a4:	e7f4      	b.n	8009790 <_calloc_r+0x16>
	...

080097a8 <_free_r>:
 80097a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097aa:	2900      	cmp	r1, #0
 80097ac:	d044      	beq.n	8009838 <_free_r+0x90>
 80097ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097b2:	9001      	str	r0, [sp, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f1a1 0404 	sub.w	r4, r1, #4
 80097ba:	bfb8      	it	lt
 80097bc:	18e4      	addlt	r4, r4, r3
 80097be:	f000 fcef 	bl	800a1a0 <__malloc_lock>
 80097c2:	4a1e      	ldr	r2, [pc, #120]	; (800983c <_free_r+0x94>)
 80097c4:	9801      	ldr	r0, [sp, #4]
 80097c6:	6813      	ldr	r3, [r2, #0]
 80097c8:	b933      	cbnz	r3, 80097d8 <_free_r+0x30>
 80097ca:	6063      	str	r3, [r4, #4]
 80097cc:	6014      	str	r4, [r2, #0]
 80097ce:	b003      	add	sp, #12
 80097d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097d4:	f000 bcea 	b.w	800a1ac <__malloc_unlock>
 80097d8:	42a3      	cmp	r3, r4
 80097da:	d908      	bls.n	80097ee <_free_r+0x46>
 80097dc:	6825      	ldr	r5, [r4, #0]
 80097de:	1961      	adds	r1, r4, r5
 80097e0:	428b      	cmp	r3, r1
 80097e2:	bf01      	itttt	eq
 80097e4:	6819      	ldreq	r1, [r3, #0]
 80097e6:	685b      	ldreq	r3, [r3, #4]
 80097e8:	1949      	addeq	r1, r1, r5
 80097ea:	6021      	streq	r1, [r4, #0]
 80097ec:	e7ed      	b.n	80097ca <_free_r+0x22>
 80097ee:	461a      	mov	r2, r3
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	b10b      	cbz	r3, 80097f8 <_free_r+0x50>
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	d9fa      	bls.n	80097ee <_free_r+0x46>
 80097f8:	6811      	ldr	r1, [r2, #0]
 80097fa:	1855      	adds	r5, r2, r1
 80097fc:	42a5      	cmp	r5, r4
 80097fe:	d10b      	bne.n	8009818 <_free_r+0x70>
 8009800:	6824      	ldr	r4, [r4, #0]
 8009802:	4421      	add	r1, r4
 8009804:	1854      	adds	r4, r2, r1
 8009806:	42a3      	cmp	r3, r4
 8009808:	6011      	str	r1, [r2, #0]
 800980a:	d1e0      	bne.n	80097ce <_free_r+0x26>
 800980c:	681c      	ldr	r4, [r3, #0]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	6053      	str	r3, [r2, #4]
 8009812:	4421      	add	r1, r4
 8009814:	6011      	str	r1, [r2, #0]
 8009816:	e7da      	b.n	80097ce <_free_r+0x26>
 8009818:	d902      	bls.n	8009820 <_free_r+0x78>
 800981a:	230c      	movs	r3, #12
 800981c:	6003      	str	r3, [r0, #0]
 800981e:	e7d6      	b.n	80097ce <_free_r+0x26>
 8009820:	6825      	ldr	r5, [r4, #0]
 8009822:	1961      	adds	r1, r4, r5
 8009824:	428b      	cmp	r3, r1
 8009826:	bf04      	itt	eq
 8009828:	6819      	ldreq	r1, [r3, #0]
 800982a:	685b      	ldreq	r3, [r3, #4]
 800982c:	6063      	str	r3, [r4, #4]
 800982e:	bf04      	itt	eq
 8009830:	1949      	addeq	r1, r1, r5
 8009832:	6021      	streq	r1, [r4, #0]
 8009834:	6054      	str	r4, [r2, #4]
 8009836:	e7ca      	b.n	80097ce <_free_r+0x26>
 8009838:	b003      	add	sp, #12
 800983a:	bd30      	pop	{r4, r5, pc}
 800983c:	20000310 	.word	0x20000310

08009840 <sbrk_aligned>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	4e0e      	ldr	r6, [pc, #56]	; (800987c <sbrk_aligned+0x3c>)
 8009844:	460c      	mov	r4, r1
 8009846:	6831      	ldr	r1, [r6, #0]
 8009848:	4605      	mov	r5, r0
 800984a:	b911      	cbnz	r1, 8009852 <sbrk_aligned+0x12>
 800984c:	f000 fb94 	bl	8009f78 <_sbrk_r>
 8009850:	6030      	str	r0, [r6, #0]
 8009852:	4621      	mov	r1, r4
 8009854:	4628      	mov	r0, r5
 8009856:	f000 fb8f 	bl	8009f78 <_sbrk_r>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d00a      	beq.n	8009874 <sbrk_aligned+0x34>
 800985e:	1cc4      	adds	r4, r0, #3
 8009860:	f024 0403 	bic.w	r4, r4, #3
 8009864:	42a0      	cmp	r0, r4
 8009866:	d007      	beq.n	8009878 <sbrk_aligned+0x38>
 8009868:	1a21      	subs	r1, r4, r0
 800986a:	4628      	mov	r0, r5
 800986c:	f000 fb84 	bl	8009f78 <_sbrk_r>
 8009870:	3001      	adds	r0, #1
 8009872:	d101      	bne.n	8009878 <sbrk_aligned+0x38>
 8009874:	f04f 34ff 	mov.w	r4, #4294967295
 8009878:	4620      	mov	r0, r4
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	20000314 	.word	0x20000314

08009880 <_malloc_r>:
 8009880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009884:	1ccd      	adds	r5, r1, #3
 8009886:	f025 0503 	bic.w	r5, r5, #3
 800988a:	3508      	adds	r5, #8
 800988c:	2d0c      	cmp	r5, #12
 800988e:	bf38      	it	cc
 8009890:	250c      	movcc	r5, #12
 8009892:	2d00      	cmp	r5, #0
 8009894:	4607      	mov	r7, r0
 8009896:	db01      	blt.n	800989c <_malloc_r+0x1c>
 8009898:	42a9      	cmp	r1, r5
 800989a:	d905      	bls.n	80098a8 <_malloc_r+0x28>
 800989c:	230c      	movs	r3, #12
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	2600      	movs	r6, #0
 80098a2:	4630      	mov	r0, r6
 80098a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a8:	4e2e      	ldr	r6, [pc, #184]	; (8009964 <_malloc_r+0xe4>)
 80098aa:	f000 fc79 	bl	800a1a0 <__malloc_lock>
 80098ae:	6833      	ldr	r3, [r6, #0]
 80098b0:	461c      	mov	r4, r3
 80098b2:	bb34      	cbnz	r4, 8009902 <_malloc_r+0x82>
 80098b4:	4629      	mov	r1, r5
 80098b6:	4638      	mov	r0, r7
 80098b8:	f7ff ffc2 	bl	8009840 <sbrk_aligned>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	4604      	mov	r4, r0
 80098c0:	d14d      	bne.n	800995e <_malloc_r+0xde>
 80098c2:	6834      	ldr	r4, [r6, #0]
 80098c4:	4626      	mov	r6, r4
 80098c6:	2e00      	cmp	r6, #0
 80098c8:	d140      	bne.n	800994c <_malloc_r+0xcc>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	4631      	mov	r1, r6
 80098ce:	4638      	mov	r0, r7
 80098d0:	eb04 0803 	add.w	r8, r4, r3
 80098d4:	f000 fb50 	bl	8009f78 <_sbrk_r>
 80098d8:	4580      	cmp	r8, r0
 80098da:	d13a      	bne.n	8009952 <_malloc_r+0xd2>
 80098dc:	6821      	ldr	r1, [r4, #0]
 80098de:	3503      	adds	r5, #3
 80098e0:	1a6d      	subs	r5, r5, r1
 80098e2:	f025 0503 	bic.w	r5, r5, #3
 80098e6:	3508      	adds	r5, #8
 80098e8:	2d0c      	cmp	r5, #12
 80098ea:	bf38      	it	cc
 80098ec:	250c      	movcc	r5, #12
 80098ee:	4629      	mov	r1, r5
 80098f0:	4638      	mov	r0, r7
 80098f2:	f7ff ffa5 	bl	8009840 <sbrk_aligned>
 80098f6:	3001      	adds	r0, #1
 80098f8:	d02b      	beq.n	8009952 <_malloc_r+0xd2>
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	442b      	add	r3, r5
 80098fe:	6023      	str	r3, [r4, #0]
 8009900:	e00e      	b.n	8009920 <_malloc_r+0xa0>
 8009902:	6822      	ldr	r2, [r4, #0]
 8009904:	1b52      	subs	r2, r2, r5
 8009906:	d41e      	bmi.n	8009946 <_malloc_r+0xc6>
 8009908:	2a0b      	cmp	r2, #11
 800990a:	d916      	bls.n	800993a <_malloc_r+0xba>
 800990c:	1961      	adds	r1, r4, r5
 800990e:	42a3      	cmp	r3, r4
 8009910:	6025      	str	r5, [r4, #0]
 8009912:	bf18      	it	ne
 8009914:	6059      	strne	r1, [r3, #4]
 8009916:	6863      	ldr	r3, [r4, #4]
 8009918:	bf08      	it	eq
 800991a:	6031      	streq	r1, [r6, #0]
 800991c:	5162      	str	r2, [r4, r5]
 800991e:	604b      	str	r3, [r1, #4]
 8009920:	4638      	mov	r0, r7
 8009922:	f104 060b 	add.w	r6, r4, #11
 8009926:	f000 fc41 	bl	800a1ac <__malloc_unlock>
 800992a:	f026 0607 	bic.w	r6, r6, #7
 800992e:	1d23      	adds	r3, r4, #4
 8009930:	1af2      	subs	r2, r6, r3
 8009932:	d0b6      	beq.n	80098a2 <_malloc_r+0x22>
 8009934:	1b9b      	subs	r3, r3, r6
 8009936:	50a3      	str	r3, [r4, r2]
 8009938:	e7b3      	b.n	80098a2 <_malloc_r+0x22>
 800993a:	6862      	ldr	r2, [r4, #4]
 800993c:	42a3      	cmp	r3, r4
 800993e:	bf0c      	ite	eq
 8009940:	6032      	streq	r2, [r6, #0]
 8009942:	605a      	strne	r2, [r3, #4]
 8009944:	e7ec      	b.n	8009920 <_malloc_r+0xa0>
 8009946:	4623      	mov	r3, r4
 8009948:	6864      	ldr	r4, [r4, #4]
 800994a:	e7b2      	b.n	80098b2 <_malloc_r+0x32>
 800994c:	4634      	mov	r4, r6
 800994e:	6876      	ldr	r6, [r6, #4]
 8009950:	e7b9      	b.n	80098c6 <_malloc_r+0x46>
 8009952:	230c      	movs	r3, #12
 8009954:	603b      	str	r3, [r7, #0]
 8009956:	4638      	mov	r0, r7
 8009958:	f000 fc28 	bl	800a1ac <__malloc_unlock>
 800995c:	e7a1      	b.n	80098a2 <_malloc_r+0x22>
 800995e:	6025      	str	r5, [r4, #0]
 8009960:	e7de      	b.n	8009920 <_malloc_r+0xa0>
 8009962:	bf00      	nop
 8009964:	20000310 	.word	0x20000310

08009968 <__ssputs_r>:
 8009968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800996c:	688e      	ldr	r6, [r1, #8]
 800996e:	429e      	cmp	r6, r3
 8009970:	4682      	mov	sl, r0
 8009972:	460c      	mov	r4, r1
 8009974:	4690      	mov	r8, r2
 8009976:	461f      	mov	r7, r3
 8009978:	d838      	bhi.n	80099ec <__ssputs_r+0x84>
 800997a:	898a      	ldrh	r2, [r1, #12]
 800997c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009980:	d032      	beq.n	80099e8 <__ssputs_r+0x80>
 8009982:	6825      	ldr	r5, [r4, #0]
 8009984:	6909      	ldr	r1, [r1, #16]
 8009986:	eba5 0901 	sub.w	r9, r5, r1
 800998a:	6965      	ldr	r5, [r4, #20]
 800998c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009994:	3301      	adds	r3, #1
 8009996:	444b      	add	r3, r9
 8009998:	106d      	asrs	r5, r5, #1
 800999a:	429d      	cmp	r5, r3
 800999c:	bf38      	it	cc
 800999e:	461d      	movcc	r5, r3
 80099a0:	0553      	lsls	r3, r2, #21
 80099a2:	d531      	bpl.n	8009a08 <__ssputs_r+0xa0>
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7ff ff6b 	bl	8009880 <_malloc_r>
 80099aa:	4606      	mov	r6, r0
 80099ac:	b950      	cbnz	r0, 80099c4 <__ssputs_r+0x5c>
 80099ae:	230c      	movs	r3, #12
 80099b0:	f8ca 3000 	str.w	r3, [sl]
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ba:	81a3      	strh	r3, [r4, #12]
 80099bc:	f04f 30ff 	mov.w	r0, #4294967295
 80099c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c4:	6921      	ldr	r1, [r4, #16]
 80099c6:	464a      	mov	r2, r9
 80099c8:	f7ff fa08 	bl	8008ddc <memcpy>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	6126      	str	r6, [r4, #16]
 80099da:	6165      	str	r5, [r4, #20]
 80099dc:	444e      	add	r6, r9
 80099de:	eba5 0509 	sub.w	r5, r5, r9
 80099e2:	6026      	str	r6, [r4, #0]
 80099e4:	60a5      	str	r5, [r4, #8]
 80099e6:	463e      	mov	r6, r7
 80099e8:	42be      	cmp	r6, r7
 80099ea:	d900      	bls.n	80099ee <__ssputs_r+0x86>
 80099ec:	463e      	mov	r6, r7
 80099ee:	6820      	ldr	r0, [r4, #0]
 80099f0:	4632      	mov	r2, r6
 80099f2:	4641      	mov	r1, r8
 80099f4:	f000 fbba 	bl	800a16c <memmove>
 80099f8:	68a3      	ldr	r3, [r4, #8]
 80099fa:	1b9b      	subs	r3, r3, r6
 80099fc:	60a3      	str	r3, [r4, #8]
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	4433      	add	r3, r6
 8009a02:	6023      	str	r3, [r4, #0]
 8009a04:	2000      	movs	r0, #0
 8009a06:	e7db      	b.n	80099c0 <__ssputs_r+0x58>
 8009a08:	462a      	mov	r2, r5
 8009a0a:	f000 fbd5 	bl	800a1b8 <_realloc_r>
 8009a0e:	4606      	mov	r6, r0
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d1e1      	bne.n	80099d8 <__ssputs_r+0x70>
 8009a14:	6921      	ldr	r1, [r4, #16]
 8009a16:	4650      	mov	r0, sl
 8009a18:	f7ff fec6 	bl	80097a8 <_free_r>
 8009a1c:	e7c7      	b.n	80099ae <__ssputs_r+0x46>
	...

08009a20 <_svfiprintf_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	4698      	mov	r8, r3
 8009a26:	898b      	ldrh	r3, [r1, #12]
 8009a28:	061b      	lsls	r3, r3, #24
 8009a2a:	b09d      	sub	sp, #116	; 0x74
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	460d      	mov	r5, r1
 8009a30:	4614      	mov	r4, r2
 8009a32:	d50e      	bpl.n	8009a52 <_svfiprintf_r+0x32>
 8009a34:	690b      	ldr	r3, [r1, #16]
 8009a36:	b963      	cbnz	r3, 8009a52 <_svfiprintf_r+0x32>
 8009a38:	2140      	movs	r1, #64	; 0x40
 8009a3a:	f7ff ff21 	bl	8009880 <_malloc_r>
 8009a3e:	6028      	str	r0, [r5, #0]
 8009a40:	6128      	str	r0, [r5, #16]
 8009a42:	b920      	cbnz	r0, 8009a4e <_svfiprintf_r+0x2e>
 8009a44:	230c      	movs	r3, #12
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4c:	e0d1      	b.n	8009bf2 <_svfiprintf_r+0x1d2>
 8009a4e:	2340      	movs	r3, #64	; 0x40
 8009a50:	616b      	str	r3, [r5, #20]
 8009a52:	2300      	movs	r3, #0
 8009a54:	9309      	str	r3, [sp, #36]	; 0x24
 8009a56:	2320      	movs	r3, #32
 8009a58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a60:	2330      	movs	r3, #48	; 0x30
 8009a62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c0c <_svfiprintf_r+0x1ec>
 8009a66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a6a:	f04f 0901 	mov.w	r9, #1
 8009a6e:	4623      	mov	r3, r4
 8009a70:	469a      	mov	sl, r3
 8009a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a76:	b10a      	cbz	r2, 8009a7c <_svfiprintf_r+0x5c>
 8009a78:	2a25      	cmp	r2, #37	; 0x25
 8009a7a:	d1f9      	bne.n	8009a70 <_svfiprintf_r+0x50>
 8009a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a80:	d00b      	beq.n	8009a9a <_svfiprintf_r+0x7a>
 8009a82:	465b      	mov	r3, fp
 8009a84:	4622      	mov	r2, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ff6d 	bl	8009968 <__ssputs_r>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	f000 80aa 	beq.w	8009be8 <_svfiprintf_r+0x1c8>
 8009a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a96:	445a      	add	r2, fp
 8009a98:	9209      	str	r2, [sp, #36]	; 0x24
 8009a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 80a2 	beq.w	8009be8 <_svfiprintf_r+0x1c8>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aae:	f10a 0a01 	add.w	sl, sl, #1
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	9307      	str	r3, [sp, #28]
 8009ab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aba:	931a      	str	r3, [sp, #104]	; 0x68
 8009abc:	4654      	mov	r4, sl
 8009abe:	2205      	movs	r2, #5
 8009ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac4:	4851      	ldr	r0, [pc, #324]	; (8009c0c <_svfiprintf_r+0x1ec>)
 8009ac6:	f7f6 fbb3 	bl	8000230 <memchr>
 8009aca:	9a04      	ldr	r2, [sp, #16]
 8009acc:	b9d8      	cbnz	r0, 8009b06 <_svfiprintf_r+0xe6>
 8009ace:	06d0      	lsls	r0, r2, #27
 8009ad0:	bf44      	itt	mi
 8009ad2:	2320      	movmi	r3, #32
 8009ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ad8:	0711      	lsls	r1, r2, #28
 8009ada:	bf44      	itt	mi
 8009adc:	232b      	movmi	r3, #43	; 0x2b
 8009ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae8:	d015      	beq.n	8009b16 <_svfiprintf_r+0xf6>
 8009aea:	9a07      	ldr	r2, [sp, #28]
 8009aec:	4654      	mov	r4, sl
 8009aee:	2000      	movs	r0, #0
 8009af0:	f04f 0c0a 	mov.w	ip, #10
 8009af4:	4621      	mov	r1, r4
 8009af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009afa:	3b30      	subs	r3, #48	; 0x30
 8009afc:	2b09      	cmp	r3, #9
 8009afe:	d94e      	bls.n	8009b9e <_svfiprintf_r+0x17e>
 8009b00:	b1b0      	cbz	r0, 8009b30 <_svfiprintf_r+0x110>
 8009b02:	9207      	str	r2, [sp, #28]
 8009b04:	e014      	b.n	8009b30 <_svfiprintf_r+0x110>
 8009b06:	eba0 0308 	sub.w	r3, r0, r8
 8009b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	9304      	str	r3, [sp, #16]
 8009b12:	46a2      	mov	sl, r4
 8009b14:	e7d2      	b.n	8009abc <_svfiprintf_r+0x9c>
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	1d19      	adds	r1, r3, #4
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	9103      	str	r1, [sp, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bfbb      	ittet	lt
 8009b22:	425b      	neglt	r3, r3
 8009b24:	f042 0202 	orrlt.w	r2, r2, #2
 8009b28:	9307      	strge	r3, [sp, #28]
 8009b2a:	9307      	strlt	r3, [sp, #28]
 8009b2c:	bfb8      	it	lt
 8009b2e:	9204      	strlt	r2, [sp, #16]
 8009b30:	7823      	ldrb	r3, [r4, #0]
 8009b32:	2b2e      	cmp	r3, #46	; 0x2e
 8009b34:	d10c      	bne.n	8009b50 <_svfiprintf_r+0x130>
 8009b36:	7863      	ldrb	r3, [r4, #1]
 8009b38:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3a:	d135      	bne.n	8009ba8 <_svfiprintf_r+0x188>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	1d1a      	adds	r2, r3, #4
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	9203      	str	r2, [sp, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	bfb8      	it	lt
 8009b48:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b4c:	3402      	adds	r4, #2
 8009b4e:	9305      	str	r3, [sp, #20]
 8009b50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c1c <_svfiprintf_r+0x1fc>
 8009b54:	7821      	ldrb	r1, [r4, #0]
 8009b56:	2203      	movs	r2, #3
 8009b58:	4650      	mov	r0, sl
 8009b5a:	f7f6 fb69 	bl	8000230 <memchr>
 8009b5e:	b140      	cbz	r0, 8009b72 <_svfiprintf_r+0x152>
 8009b60:	2340      	movs	r3, #64	; 0x40
 8009b62:	eba0 000a 	sub.w	r0, r0, sl
 8009b66:	fa03 f000 	lsl.w	r0, r3, r0
 8009b6a:	9b04      	ldr	r3, [sp, #16]
 8009b6c:	4303      	orrs	r3, r0
 8009b6e:	3401      	adds	r4, #1
 8009b70:	9304      	str	r3, [sp, #16]
 8009b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b76:	4826      	ldr	r0, [pc, #152]	; (8009c10 <_svfiprintf_r+0x1f0>)
 8009b78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b7c:	2206      	movs	r2, #6
 8009b7e:	f7f6 fb57 	bl	8000230 <memchr>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d038      	beq.n	8009bf8 <_svfiprintf_r+0x1d8>
 8009b86:	4b23      	ldr	r3, [pc, #140]	; (8009c14 <_svfiprintf_r+0x1f4>)
 8009b88:	bb1b      	cbnz	r3, 8009bd2 <_svfiprintf_r+0x1b2>
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	3307      	adds	r3, #7
 8009b8e:	f023 0307 	bic.w	r3, r3, #7
 8009b92:	3308      	adds	r3, #8
 8009b94:	9303      	str	r3, [sp, #12]
 8009b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b98:	4433      	add	r3, r6
 8009b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b9c:	e767      	b.n	8009a6e <_svfiprintf_r+0x4e>
 8009b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	e7a5      	b.n	8009af4 <_svfiprintf_r+0xd4>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	3401      	adds	r4, #1
 8009bac:	9305      	str	r3, [sp, #20]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	f04f 0c0a 	mov.w	ip, #10
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bba:	3a30      	subs	r2, #48	; 0x30
 8009bbc:	2a09      	cmp	r2, #9
 8009bbe:	d903      	bls.n	8009bc8 <_svfiprintf_r+0x1a8>
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0c5      	beq.n	8009b50 <_svfiprintf_r+0x130>
 8009bc4:	9105      	str	r1, [sp, #20]
 8009bc6:	e7c3      	b.n	8009b50 <_svfiprintf_r+0x130>
 8009bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bcc:	4604      	mov	r4, r0
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e7f0      	b.n	8009bb4 <_svfiprintf_r+0x194>
 8009bd2:	ab03      	add	r3, sp, #12
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <_svfiprintf_r+0x1f8>)
 8009bda:	a904      	add	r1, sp, #16
 8009bdc:	4638      	mov	r0, r7
 8009bde:	f7fb fec5 	bl	800596c <_printf_float>
 8009be2:	1c42      	adds	r2, r0, #1
 8009be4:	4606      	mov	r6, r0
 8009be6:	d1d6      	bne.n	8009b96 <_svfiprintf_r+0x176>
 8009be8:	89ab      	ldrh	r3, [r5, #12]
 8009bea:	065b      	lsls	r3, r3, #25
 8009bec:	f53f af2c 	bmi.w	8009a48 <_svfiprintf_r+0x28>
 8009bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bf2:	b01d      	add	sp, #116	; 0x74
 8009bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf8:	ab03      	add	r3, sp, #12
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <_svfiprintf_r+0x1f8>)
 8009c00:	a904      	add	r1, sp, #16
 8009c02:	4638      	mov	r0, r7
 8009c04:	f7fc f956 	bl	8005eb4 <_printf_i>
 8009c08:	e7eb      	b.n	8009be2 <_svfiprintf_r+0x1c2>
 8009c0a:	bf00      	nop
 8009c0c:	0800b9ec 	.word	0x0800b9ec
 8009c10:	0800b9f6 	.word	0x0800b9f6
 8009c14:	0800596d 	.word	0x0800596d
 8009c18:	08009969 	.word	0x08009969
 8009c1c:	0800b9f2 	.word	0x0800b9f2

08009c20 <__sfputc_r>:
 8009c20:	6893      	ldr	r3, [r2, #8]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	b410      	push	{r4}
 8009c28:	6093      	str	r3, [r2, #8]
 8009c2a:	da08      	bge.n	8009c3e <__sfputc_r+0x1e>
 8009c2c:	6994      	ldr	r4, [r2, #24]
 8009c2e:	42a3      	cmp	r3, r4
 8009c30:	db01      	blt.n	8009c36 <__sfputc_r+0x16>
 8009c32:	290a      	cmp	r1, #10
 8009c34:	d103      	bne.n	8009c3e <__sfputc_r+0x1e>
 8009c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c3a:	f7fd bbe9 	b.w	8007410 <__swbuf_r>
 8009c3e:	6813      	ldr	r3, [r2, #0]
 8009c40:	1c58      	adds	r0, r3, #1
 8009c42:	6010      	str	r0, [r2, #0]
 8009c44:	7019      	strb	r1, [r3, #0]
 8009c46:	4608      	mov	r0, r1
 8009c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <__sfputs_r>:
 8009c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c50:	4606      	mov	r6, r0
 8009c52:	460f      	mov	r7, r1
 8009c54:	4614      	mov	r4, r2
 8009c56:	18d5      	adds	r5, r2, r3
 8009c58:	42ac      	cmp	r4, r5
 8009c5a:	d101      	bne.n	8009c60 <__sfputs_r+0x12>
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	e007      	b.n	8009c70 <__sfputs_r+0x22>
 8009c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c64:	463a      	mov	r2, r7
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7ff ffda 	bl	8009c20 <__sfputc_r>
 8009c6c:	1c43      	adds	r3, r0, #1
 8009c6e:	d1f3      	bne.n	8009c58 <__sfputs_r+0xa>
 8009c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c74 <_vfiprintf_r>:
 8009c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c78:	460d      	mov	r5, r1
 8009c7a:	b09d      	sub	sp, #116	; 0x74
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	4698      	mov	r8, r3
 8009c80:	4606      	mov	r6, r0
 8009c82:	b118      	cbz	r0, 8009c8c <_vfiprintf_r+0x18>
 8009c84:	6983      	ldr	r3, [r0, #24]
 8009c86:	b90b      	cbnz	r3, 8009c8c <_vfiprintf_r+0x18>
 8009c88:	f7fe fc16 	bl	80084b8 <__sinit>
 8009c8c:	4b89      	ldr	r3, [pc, #548]	; (8009eb4 <_vfiprintf_r+0x240>)
 8009c8e:	429d      	cmp	r5, r3
 8009c90:	d11b      	bne.n	8009cca <_vfiprintf_r+0x56>
 8009c92:	6875      	ldr	r5, [r6, #4]
 8009c94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c96:	07d9      	lsls	r1, r3, #31
 8009c98:	d405      	bmi.n	8009ca6 <_vfiprintf_r+0x32>
 8009c9a:	89ab      	ldrh	r3, [r5, #12]
 8009c9c:	059a      	lsls	r2, r3, #22
 8009c9e:	d402      	bmi.n	8009ca6 <_vfiprintf_r+0x32>
 8009ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ca2:	f7ff f81a 	bl	8008cda <__retarget_lock_acquire_recursive>
 8009ca6:	89ab      	ldrh	r3, [r5, #12]
 8009ca8:	071b      	lsls	r3, r3, #28
 8009caa:	d501      	bpl.n	8009cb0 <_vfiprintf_r+0x3c>
 8009cac:	692b      	ldr	r3, [r5, #16]
 8009cae:	b9eb      	cbnz	r3, 8009cec <_vfiprintf_r+0x78>
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7fd fbfe 	bl	80074b4 <__swsetup_r>
 8009cb8:	b1c0      	cbz	r0, 8009cec <_vfiprintf_r+0x78>
 8009cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cbc:	07dc      	lsls	r4, r3, #31
 8009cbe:	d50e      	bpl.n	8009cde <_vfiprintf_r+0x6a>
 8009cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc4:	b01d      	add	sp, #116	; 0x74
 8009cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cca:	4b7b      	ldr	r3, [pc, #492]	; (8009eb8 <_vfiprintf_r+0x244>)
 8009ccc:	429d      	cmp	r5, r3
 8009cce:	d101      	bne.n	8009cd4 <_vfiprintf_r+0x60>
 8009cd0:	68b5      	ldr	r5, [r6, #8]
 8009cd2:	e7df      	b.n	8009c94 <_vfiprintf_r+0x20>
 8009cd4:	4b79      	ldr	r3, [pc, #484]	; (8009ebc <_vfiprintf_r+0x248>)
 8009cd6:	429d      	cmp	r5, r3
 8009cd8:	bf08      	it	eq
 8009cda:	68f5      	ldreq	r5, [r6, #12]
 8009cdc:	e7da      	b.n	8009c94 <_vfiprintf_r+0x20>
 8009cde:	89ab      	ldrh	r3, [r5, #12]
 8009ce0:	0598      	lsls	r0, r3, #22
 8009ce2:	d4ed      	bmi.n	8009cc0 <_vfiprintf_r+0x4c>
 8009ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ce6:	f7fe fff9 	bl	8008cdc <__retarget_lock_release_recursive>
 8009cea:	e7e9      	b.n	8009cc0 <_vfiprintf_r+0x4c>
 8009cec:	2300      	movs	r3, #0
 8009cee:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf0:	2320      	movs	r3, #32
 8009cf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cfa:	2330      	movs	r3, #48	; 0x30
 8009cfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ec0 <_vfiprintf_r+0x24c>
 8009d00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d04:	f04f 0901 	mov.w	r9, #1
 8009d08:	4623      	mov	r3, r4
 8009d0a:	469a      	mov	sl, r3
 8009d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d10:	b10a      	cbz	r2, 8009d16 <_vfiprintf_r+0xa2>
 8009d12:	2a25      	cmp	r2, #37	; 0x25
 8009d14:	d1f9      	bne.n	8009d0a <_vfiprintf_r+0x96>
 8009d16:	ebba 0b04 	subs.w	fp, sl, r4
 8009d1a:	d00b      	beq.n	8009d34 <_vfiprintf_r+0xc0>
 8009d1c:	465b      	mov	r3, fp
 8009d1e:	4622      	mov	r2, r4
 8009d20:	4629      	mov	r1, r5
 8009d22:	4630      	mov	r0, r6
 8009d24:	f7ff ff93 	bl	8009c4e <__sfputs_r>
 8009d28:	3001      	adds	r0, #1
 8009d2a:	f000 80aa 	beq.w	8009e82 <_vfiprintf_r+0x20e>
 8009d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d30:	445a      	add	r2, fp
 8009d32:	9209      	str	r2, [sp, #36]	; 0x24
 8009d34:	f89a 3000 	ldrb.w	r3, [sl]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 80a2 	beq.w	8009e82 <_vfiprintf_r+0x20e>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f04f 32ff 	mov.w	r2, #4294967295
 8009d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d48:	f10a 0a01 	add.w	sl, sl, #1
 8009d4c:	9304      	str	r3, [sp, #16]
 8009d4e:	9307      	str	r3, [sp, #28]
 8009d50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d54:	931a      	str	r3, [sp, #104]	; 0x68
 8009d56:	4654      	mov	r4, sl
 8009d58:	2205      	movs	r2, #5
 8009d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d5e:	4858      	ldr	r0, [pc, #352]	; (8009ec0 <_vfiprintf_r+0x24c>)
 8009d60:	f7f6 fa66 	bl	8000230 <memchr>
 8009d64:	9a04      	ldr	r2, [sp, #16]
 8009d66:	b9d8      	cbnz	r0, 8009da0 <_vfiprintf_r+0x12c>
 8009d68:	06d1      	lsls	r1, r2, #27
 8009d6a:	bf44      	itt	mi
 8009d6c:	2320      	movmi	r3, #32
 8009d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d72:	0713      	lsls	r3, r2, #28
 8009d74:	bf44      	itt	mi
 8009d76:	232b      	movmi	r3, #43	; 0x2b
 8009d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d80:	2b2a      	cmp	r3, #42	; 0x2a
 8009d82:	d015      	beq.n	8009db0 <_vfiprintf_r+0x13c>
 8009d84:	9a07      	ldr	r2, [sp, #28]
 8009d86:	4654      	mov	r4, sl
 8009d88:	2000      	movs	r0, #0
 8009d8a:	f04f 0c0a 	mov.w	ip, #10
 8009d8e:	4621      	mov	r1, r4
 8009d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d94:	3b30      	subs	r3, #48	; 0x30
 8009d96:	2b09      	cmp	r3, #9
 8009d98:	d94e      	bls.n	8009e38 <_vfiprintf_r+0x1c4>
 8009d9a:	b1b0      	cbz	r0, 8009dca <_vfiprintf_r+0x156>
 8009d9c:	9207      	str	r2, [sp, #28]
 8009d9e:	e014      	b.n	8009dca <_vfiprintf_r+0x156>
 8009da0:	eba0 0308 	sub.w	r3, r0, r8
 8009da4:	fa09 f303 	lsl.w	r3, r9, r3
 8009da8:	4313      	orrs	r3, r2
 8009daa:	9304      	str	r3, [sp, #16]
 8009dac:	46a2      	mov	sl, r4
 8009dae:	e7d2      	b.n	8009d56 <_vfiprintf_r+0xe2>
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	1d19      	adds	r1, r3, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	9103      	str	r1, [sp, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	bfbb      	ittet	lt
 8009dbc:	425b      	neglt	r3, r3
 8009dbe:	f042 0202 	orrlt.w	r2, r2, #2
 8009dc2:	9307      	strge	r3, [sp, #28]
 8009dc4:	9307      	strlt	r3, [sp, #28]
 8009dc6:	bfb8      	it	lt
 8009dc8:	9204      	strlt	r2, [sp, #16]
 8009dca:	7823      	ldrb	r3, [r4, #0]
 8009dcc:	2b2e      	cmp	r3, #46	; 0x2e
 8009dce:	d10c      	bne.n	8009dea <_vfiprintf_r+0x176>
 8009dd0:	7863      	ldrb	r3, [r4, #1]
 8009dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8009dd4:	d135      	bne.n	8009e42 <_vfiprintf_r+0x1ce>
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	1d1a      	adds	r2, r3, #4
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	9203      	str	r2, [sp, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bfb8      	it	lt
 8009de2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009de6:	3402      	adds	r4, #2
 8009de8:	9305      	str	r3, [sp, #20]
 8009dea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ed0 <_vfiprintf_r+0x25c>
 8009dee:	7821      	ldrb	r1, [r4, #0]
 8009df0:	2203      	movs	r2, #3
 8009df2:	4650      	mov	r0, sl
 8009df4:	f7f6 fa1c 	bl	8000230 <memchr>
 8009df8:	b140      	cbz	r0, 8009e0c <_vfiprintf_r+0x198>
 8009dfa:	2340      	movs	r3, #64	; 0x40
 8009dfc:	eba0 000a 	sub.w	r0, r0, sl
 8009e00:	fa03 f000 	lsl.w	r0, r3, r0
 8009e04:	9b04      	ldr	r3, [sp, #16]
 8009e06:	4303      	orrs	r3, r0
 8009e08:	3401      	adds	r4, #1
 8009e0a:	9304      	str	r3, [sp, #16]
 8009e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e10:	482c      	ldr	r0, [pc, #176]	; (8009ec4 <_vfiprintf_r+0x250>)
 8009e12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e16:	2206      	movs	r2, #6
 8009e18:	f7f6 fa0a 	bl	8000230 <memchr>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d03f      	beq.n	8009ea0 <_vfiprintf_r+0x22c>
 8009e20:	4b29      	ldr	r3, [pc, #164]	; (8009ec8 <_vfiprintf_r+0x254>)
 8009e22:	bb1b      	cbnz	r3, 8009e6c <_vfiprintf_r+0x1f8>
 8009e24:	9b03      	ldr	r3, [sp, #12]
 8009e26:	3307      	adds	r3, #7
 8009e28:	f023 0307 	bic.w	r3, r3, #7
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	9303      	str	r3, [sp, #12]
 8009e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e32:	443b      	add	r3, r7
 8009e34:	9309      	str	r3, [sp, #36]	; 0x24
 8009e36:	e767      	b.n	8009d08 <_vfiprintf_r+0x94>
 8009e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	2001      	movs	r0, #1
 8009e40:	e7a5      	b.n	8009d8e <_vfiprintf_r+0x11a>
 8009e42:	2300      	movs	r3, #0
 8009e44:	3401      	adds	r4, #1
 8009e46:	9305      	str	r3, [sp, #20]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	f04f 0c0a 	mov.w	ip, #10
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e54:	3a30      	subs	r2, #48	; 0x30
 8009e56:	2a09      	cmp	r2, #9
 8009e58:	d903      	bls.n	8009e62 <_vfiprintf_r+0x1ee>
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d0c5      	beq.n	8009dea <_vfiprintf_r+0x176>
 8009e5e:	9105      	str	r1, [sp, #20]
 8009e60:	e7c3      	b.n	8009dea <_vfiprintf_r+0x176>
 8009e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e66:	4604      	mov	r4, r0
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e7f0      	b.n	8009e4e <_vfiprintf_r+0x1da>
 8009e6c:	ab03      	add	r3, sp, #12
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	462a      	mov	r2, r5
 8009e72:	4b16      	ldr	r3, [pc, #88]	; (8009ecc <_vfiprintf_r+0x258>)
 8009e74:	a904      	add	r1, sp, #16
 8009e76:	4630      	mov	r0, r6
 8009e78:	f7fb fd78 	bl	800596c <_printf_float>
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	1c78      	adds	r0, r7, #1
 8009e80:	d1d6      	bne.n	8009e30 <_vfiprintf_r+0x1bc>
 8009e82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e84:	07d9      	lsls	r1, r3, #31
 8009e86:	d405      	bmi.n	8009e94 <_vfiprintf_r+0x220>
 8009e88:	89ab      	ldrh	r3, [r5, #12]
 8009e8a:	059a      	lsls	r2, r3, #22
 8009e8c:	d402      	bmi.n	8009e94 <_vfiprintf_r+0x220>
 8009e8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e90:	f7fe ff24 	bl	8008cdc <__retarget_lock_release_recursive>
 8009e94:	89ab      	ldrh	r3, [r5, #12]
 8009e96:	065b      	lsls	r3, r3, #25
 8009e98:	f53f af12 	bmi.w	8009cc0 <_vfiprintf_r+0x4c>
 8009e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e9e:	e711      	b.n	8009cc4 <_vfiprintf_r+0x50>
 8009ea0:	ab03      	add	r3, sp, #12
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	462a      	mov	r2, r5
 8009ea6:	4b09      	ldr	r3, [pc, #36]	; (8009ecc <_vfiprintf_r+0x258>)
 8009ea8:	a904      	add	r1, sp, #16
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f7fc f802 	bl	8005eb4 <_printf_i>
 8009eb0:	e7e4      	b.n	8009e7c <_vfiprintf_r+0x208>
 8009eb2:	bf00      	nop
 8009eb4:	0800b7d4 	.word	0x0800b7d4
 8009eb8:	0800b7f4 	.word	0x0800b7f4
 8009ebc:	0800b7b4 	.word	0x0800b7b4
 8009ec0:	0800b9ec 	.word	0x0800b9ec
 8009ec4:	0800b9f6 	.word	0x0800b9f6
 8009ec8:	0800596d 	.word	0x0800596d
 8009ecc:	08009c4f 	.word	0x08009c4f
 8009ed0:	0800b9f2 	.word	0x0800b9f2

08009ed4 <_putc_r>:
 8009ed4:	b570      	push	{r4, r5, r6, lr}
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	4614      	mov	r4, r2
 8009eda:	4606      	mov	r6, r0
 8009edc:	b118      	cbz	r0, 8009ee6 <_putc_r+0x12>
 8009ede:	6983      	ldr	r3, [r0, #24]
 8009ee0:	b90b      	cbnz	r3, 8009ee6 <_putc_r+0x12>
 8009ee2:	f7fe fae9 	bl	80084b8 <__sinit>
 8009ee6:	4b1c      	ldr	r3, [pc, #112]	; (8009f58 <_putc_r+0x84>)
 8009ee8:	429c      	cmp	r4, r3
 8009eea:	d124      	bne.n	8009f36 <_putc_r+0x62>
 8009eec:	6874      	ldr	r4, [r6, #4]
 8009eee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ef0:	07d8      	lsls	r0, r3, #31
 8009ef2:	d405      	bmi.n	8009f00 <_putc_r+0x2c>
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	0599      	lsls	r1, r3, #22
 8009ef8:	d402      	bmi.n	8009f00 <_putc_r+0x2c>
 8009efa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009efc:	f7fe feed 	bl	8008cda <__retarget_lock_acquire_recursive>
 8009f00:	68a3      	ldr	r3, [r4, #8]
 8009f02:	3b01      	subs	r3, #1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	60a3      	str	r3, [r4, #8]
 8009f08:	da05      	bge.n	8009f16 <_putc_r+0x42>
 8009f0a:	69a2      	ldr	r2, [r4, #24]
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	db1c      	blt.n	8009f4a <_putc_r+0x76>
 8009f10:	b2eb      	uxtb	r3, r5
 8009f12:	2b0a      	cmp	r3, #10
 8009f14:	d019      	beq.n	8009f4a <_putc_r+0x76>
 8009f16:	6823      	ldr	r3, [r4, #0]
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	6022      	str	r2, [r4, #0]
 8009f1c:	701d      	strb	r5, [r3, #0]
 8009f1e:	b2ed      	uxtb	r5, r5
 8009f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f22:	07da      	lsls	r2, r3, #31
 8009f24:	d405      	bmi.n	8009f32 <_putc_r+0x5e>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	059b      	lsls	r3, r3, #22
 8009f2a:	d402      	bmi.n	8009f32 <_putc_r+0x5e>
 8009f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f2e:	f7fe fed5 	bl	8008cdc <__retarget_lock_release_recursive>
 8009f32:	4628      	mov	r0, r5
 8009f34:	bd70      	pop	{r4, r5, r6, pc}
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <_putc_r+0x88>)
 8009f38:	429c      	cmp	r4, r3
 8009f3a:	d101      	bne.n	8009f40 <_putc_r+0x6c>
 8009f3c:	68b4      	ldr	r4, [r6, #8]
 8009f3e:	e7d6      	b.n	8009eee <_putc_r+0x1a>
 8009f40:	4b07      	ldr	r3, [pc, #28]	; (8009f60 <_putc_r+0x8c>)
 8009f42:	429c      	cmp	r4, r3
 8009f44:	bf08      	it	eq
 8009f46:	68f4      	ldreq	r4, [r6, #12]
 8009f48:	e7d1      	b.n	8009eee <_putc_r+0x1a>
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f7fd fa5e 	bl	8007410 <__swbuf_r>
 8009f54:	4605      	mov	r5, r0
 8009f56:	e7e3      	b.n	8009f20 <_putc_r+0x4c>
 8009f58:	0800b7d4 	.word	0x0800b7d4
 8009f5c:	0800b7f4 	.word	0x0800b7f4
 8009f60:	0800b7b4 	.word	0x0800b7b4
 8009f64:	00000000 	.word	0x00000000

08009f68 <nan>:
 8009f68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009f70 <nan+0x8>
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	00000000 	.word	0x00000000
 8009f74:	7ff80000 	.word	0x7ff80000

08009f78 <_sbrk_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4d06      	ldr	r5, [pc, #24]	; (8009f94 <_sbrk_r+0x1c>)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	602b      	str	r3, [r5, #0]
 8009f84:	f7f8 f852 	bl	800202c <_sbrk>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d102      	bne.n	8009f92 <_sbrk_r+0x1a>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	b103      	cbz	r3, 8009f92 <_sbrk_r+0x1a>
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	20000318 	.word	0x20000318

08009f98 <__sread>:
 8009f98:	b510      	push	{r4, lr}
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa0:	f000 f93a 	bl	800a218 <_read_r>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	bfab      	itete	ge
 8009fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009faa:	89a3      	ldrhlt	r3, [r4, #12]
 8009fac:	181b      	addge	r3, r3, r0
 8009fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fb2:	bfac      	ite	ge
 8009fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fb6:	81a3      	strhlt	r3, [r4, #12]
 8009fb8:	bd10      	pop	{r4, pc}

08009fba <__swrite>:
 8009fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fbe:	461f      	mov	r7, r3
 8009fc0:	898b      	ldrh	r3, [r1, #12]
 8009fc2:	05db      	lsls	r3, r3, #23
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	4616      	mov	r6, r2
 8009fca:	d505      	bpl.n	8009fd8 <__swrite+0x1e>
 8009fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f000 f8b8 	bl	800a148 <_lseek_r>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fe2:	81a3      	strh	r3, [r4, #12]
 8009fe4:	4632      	mov	r2, r6
 8009fe6:	463b      	mov	r3, r7
 8009fe8:	4628      	mov	r0, r5
 8009fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fee:	f000 b837 	b.w	800a060 <_write_r>

08009ff2 <__sseek>:
 8009ff2:	b510      	push	{r4, lr}
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ffa:	f000 f8a5 	bl	800a148 <_lseek_r>
 8009ffe:	1c43      	adds	r3, r0, #1
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	bf15      	itete	ne
 800a004:	6560      	strne	r0, [r4, #84]	; 0x54
 800a006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a00a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a00e:	81a3      	strheq	r3, [r4, #12]
 800a010:	bf18      	it	ne
 800a012:	81a3      	strhne	r3, [r4, #12]
 800a014:	bd10      	pop	{r4, pc}

0800a016 <__sclose>:
 800a016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a01a:	f000 b851 	b.w	800a0c0 <_close_r>

0800a01e <strncmp>:
 800a01e:	b510      	push	{r4, lr}
 800a020:	b17a      	cbz	r2, 800a042 <strncmp+0x24>
 800a022:	4603      	mov	r3, r0
 800a024:	3901      	subs	r1, #1
 800a026:	1884      	adds	r4, r0, r2
 800a028:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a02c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a030:	4290      	cmp	r0, r2
 800a032:	d101      	bne.n	800a038 <strncmp+0x1a>
 800a034:	42a3      	cmp	r3, r4
 800a036:	d101      	bne.n	800a03c <strncmp+0x1e>
 800a038:	1a80      	subs	r0, r0, r2
 800a03a:	bd10      	pop	{r4, pc}
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d1f3      	bne.n	800a028 <strncmp+0xa>
 800a040:	e7fa      	b.n	800a038 <strncmp+0x1a>
 800a042:	4610      	mov	r0, r2
 800a044:	e7f9      	b.n	800a03a <strncmp+0x1c>

0800a046 <__ascii_wctomb>:
 800a046:	b149      	cbz	r1, 800a05c <__ascii_wctomb+0x16>
 800a048:	2aff      	cmp	r2, #255	; 0xff
 800a04a:	bf85      	ittet	hi
 800a04c:	238a      	movhi	r3, #138	; 0x8a
 800a04e:	6003      	strhi	r3, [r0, #0]
 800a050:	700a      	strbls	r2, [r1, #0]
 800a052:	f04f 30ff 	movhi.w	r0, #4294967295
 800a056:	bf98      	it	ls
 800a058:	2001      	movls	r0, #1
 800a05a:	4770      	bx	lr
 800a05c:	4608      	mov	r0, r1
 800a05e:	4770      	bx	lr

0800a060 <_write_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4d07      	ldr	r5, [pc, #28]	; (800a080 <_write_r+0x20>)
 800a064:	4604      	mov	r4, r0
 800a066:	4608      	mov	r0, r1
 800a068:	4611      	mov	r1, r2
 800a06a:	2200      	movs	r2, #0
 800a06c:	602a      	str	r2, [r5, #0]
 800a06e:	461a      	mov	r2, r3
 800a070:	f7f7 ff8b 	bl	8001f8a <_write>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d102      	bne.n	800a07e <_write_r+0x1e>
 800a078:	682b      	ldr	r3, [r5, #0]
 800a07a:	b103      	cbz	r3, 800a07e <_write_r+0x1e>
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	20000318 	.word	0x20000318

0800a084 <__assert_func>:
 800a084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a086:	4614      	mov	r4, r2
 800a088:	461a      	mov	r2, r3
 800a08a:	4b09      	ldr	r3, [pc, #36]	; (800a0b0 <__assert_func+0x2c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4605      	mov	r5, r0
 800a090:	68d8      	ldr	r0, [r3, #12]
 800a092:	b14c      	cbz	r4, 800a0a8 <__assert_func+0x24>
 800a094:	4b07      	ldr	r3, [pc, #28]	; (800a0b4 <__assert_func+0x30>)
 800a096:	9100      	str	r1, [sp, #0]
 800a098:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a09c:	4906      	ldr	r1, [pc, #24]	; (800a0b8 <__assert_func+0x34>)
 800a09e:	462b      	mov	r3, r5
 800a0a0:	f000 f81e 	bl	800a0e0 <fiprintf>
 800a0a4:	f000 f8ca 	bl	800a23c <abort>
 800a0a8:	4b04      	ldr	r3, [pc, #16]	; (800a0bc <__assert_func+0x38>)
 800a0aa:	461c      	mov	r4, r3
 800a0ac:	e7f3      	b.n	800a096 <__assert_func+0x12>
 800a0ae:	bf00      	nop
 800a0b0:	2000000c 	.word	0x2000000c
 800a0b4:	0800b9fd 	.word	0x0800b9fd
 800a0b8:	0800ba0a 	.word	0x0800ba0a
 800a0bc:	0800ba38 	.word	0x0800ba38

0800a0c0 <_close_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d06      	ldr	r5, [pc, #24]	; (800a0dc <_close_r+0x1c>)
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	602b      	str	r3, [r5, #0]
 800a0cc:	f7f7 ff79 	bl	8001fc2 <_close>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_close_r+0x1a>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_close_r+0x1a>
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	20000318 	.word	0x20000318

0800a0e0 <fiprintf>:
 800a0e0:	b40e      	push	{r1, r2, r3}
 800a0e2:	b503      	push	{r0, r1, lr}
 800a0e4:	4601      	mov	r1, r0
 800a0e6:	ab03      	add	r3, sp, #12
 800a0e8:	4805      	ldr	r0, [pc, #20]	; (800a100 <fiprintf+0x20>)
 800a0ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ee:	6800      	ldr	r0, [r0, #0]
 800a0f0:	9301      	str	r3, [sp, #4]
 800a0f2:	f7ff fdbf 	bl	8009c74 <_vfiprintf_r>
 800a0f6:	b002      	add	sp, #8
 800a0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0fc:	b003      	add	sp, #12
 800a0fe:	4770      	bx	lr
 800a100:	2000000c 	.word	0x2000000c

0800a104 <_fstat_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d07      	ldr	r5, [pc, #28]	; (800a124 <_fstat_r+0x20>)
 800a108:	2300      	movs	r3, #0
 800a10a:	4604      	mov	r4, r0
 800a10c:	4608      	mov	r0, r1
 800a10e:	4611      	mov	r1, r2
 800a110:	602b      	str	r3, [r5, #0]
 800a112:	f7f7 ff62 	bl	8001fda <_fstat>
 800a116:	1c43      	adds	r3, r0, #1
 800a118:	d102      	bne.n	800a120 <_fstat_r+0x1c>
 800a11a:	682b      	ldr	r3, [r5, #0]
 800a11c:	b103      	cbz	r3, 800a120 <_fstat_r+0x1c>
 800a11e:	6023      	str	r3, [r4, #0]
 800a120:	bd38      	pop	{r3, r4, r5, pc}
 800a122:	bf00      	nop
 800a124:	20000318 	.word	0x20000318

0800a128 <_isatty_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	4d06      	ldr	r5, [pc, #24]	; (800a144 <_isatty_r+0x1c>)
 800a12c:	2300      	movs	r3, #0
 800a12e:	4604      	mov	r4, r0
 800a130:	4608      	mov	r0, r1
 800a132:	602b      	str	r3, [r5, #0]
 800a134:	f7f7 ff61 	bl	8001ffa <_isatty>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d102      	bne.n	800a142 <_isatty_r+0x1a>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	b103      	cbz	r3, 800a142 <_isatty_r+0x1a>
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	20000318 	.word	0x20000318

0800a148 <_lseek_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	4d07      	ldr	r5, [pc, #28]	; (800a168 <_lseek_r+0x20>)
 800a14c:	4604      	mov	r4, r0
 800a14e:	4608      	mov	r0, r1
 800a150:	4611      	mov	r1, r2
 800a152:	2200      	movs	r2, #0
 800a154:	602a      	str	r2, [r5, #0]
 800a156:	461a      	mov	r2, r3
 800a158:	f7f7 ff5a 	bl	8002010 <_lseek>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	d102      	bne.n	800a166 <_lseek_r+0x1e>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	b103      	cbz	r3, 800a166 <_lseek_r+0x1e>
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	20000318 	.word	0x20000318

0800a16c <memmove>:
 800a16c:	4288      	cmp	r0, r1
 800a16e:	b510      	push	{r4, lr}
 800a170:	eb01 0402 	add.w	r4, r1, r2
 800a174:	d902      	bls.n	800a17c <memmove+0x10>
 800a176:	4284      	cmp	r4, r0
 800a178:	4623      	mov	r3, r4
 800a17a:	d807      	bhi.n	800a18c <memmove+0x20>
 800a17c:	1e43      	subs	r3, r0, #1
 800a17e:	42a1      	cmp	r1, r4
 800a180:	d008      	beq.n	800a194 <memmove+0x28>
 800a182:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a18a:	e7f8      	b.n	800a17e <memmove+0x12>
 800a18c:	4402      	add	r2, r0
 800a18e:	4601      	mov	r1, r0
 800a190:	428a      	cmp	r2, r1
 800a192:	d100      	bne.n	800a196 <memmove+0x2a>
 800a194:	bd10      	pop	{r4, pc}
 800a196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a19a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a19e:	e7f7      	b.n	800a190 <memmove+0x24>

0800a1a0 <__malloc_lock>:
 800a1a0:	4801      	ldr	r0, [pc, #4]	; (800a1a8 <__malloc_lock+0x8>)
 800a1a2:	f7fe bd9a 	b.w	8008cda <__retarget_lock_acquire_recursive>
 800a1a6:	bf00      	nop
 800a1a8:	2000030c 	.word	0x2000030c

0800a1ac <__malloc_unlock>:
 800a1ac:	4801      	ldr	r0, [pc, #4]	; (800a1b4 <__malloc_unlock+0x8>)
 800a1ae:	f7fe bd95 	b.w	8008cdc <__retarget_lock_release_recursive>
 800a1b2:	bf00      	nop
 800a1b4:	2000030c 	.word	0x2000030c

0800a1b8 <_realloc_r>:
 800a1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1bc:	4680      	mov	r8, r0
 800a1be:	4614      	mov	r4, r2
 800a1c0:	460e      	mov	r6, r1
 800a1c2:	b921      	cbnz	r1, 800a1ce <_realloc_r+0x16>
 800a1c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	f7ff bb59 	b.w	8009880 <_malloc_r>
 800a1ce:	b92a      	cbnz	r2, 800a1dc <_realloc_r+0x24>
 800a1d0:	f7ff faea 	bl	80097a8 <_free_r>
 800a1d4:	4625      	mov	r5, r4
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1dc:	f000 f835 	bl	800a24a <_malloc_usable_size_r>
 800a1e0:	4284      	cmp	r4, r0
 800a1e2:	4607      	mov	r7, r0
 800a1e4:	d802      	bhi.n	800a1ec <_realloc_r+0x34>
 800a1e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1ea:	d812      	bhi.n	800a212 <_realloc_r+0x5a>
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	f7ff fb46 	bl	8009880 <_malloc_r>
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d0ed      	beq.n	800a1d6 <_realloc_r+0x1e>
 800a1fa:	42bc      	cmp	r4, r7
 800a1fc:	4622      	mov	r2, r4
 800a1fe:	4631      	mov	r1, r6
 800a200:	bf28      	it	cs
 800a202:	463a      	movcs	r2, r7
 800a204:	f7fe fdea 	bl	8008ddc <memcpy>
 800a208:	4631      	mov	r1, r6
 800a20a:	4640      	mov	r0, r8
 800a20c:	f7ff facc 	bl	80097a8 <_free_r>
 800a210:	e7e1      	b.n	800a1d6 <_realloc_r+0x1e>
 800a212:	4635      	mov	r5, r6
 800a214:	e7df      	b.n	800a1d6 <_realloc_r+0x1e>
	...

0800a218 <_read_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4d07      	ldr	r5, [pc, #28]	; (800a238 <_read_r+0x20>)
 800a21c:	4604      	mov	r4, r0
 800a21e:	4608      	mov	r0, r1
 800a220:	4611      	mov	r1, r2
 800a222:	2200      	movs	r2, #0
 800a224:	602a      	str	r2, [r5, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	f7f7 fe92 	bl	8001f50 <_read>
 800a22c:	1c43      	adds	r3, r0, #1
 800a22e:	d102      	bne.n	800a236 <_read_r+0x1e>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	b103      	cbz	r3, 800a236 <_read_r+0x1e>
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	bd38      	pop	{r3, r4, r5, pc}
 800a238:	20000318 	.word	0x20000318

0800a23c <abort>:
 800a23c:	b508      	push	{r3, lr}
 800a23e:	2006      	movs	r0, #6
 800a240:	f000 f834 	bl	800a2ac <raise>
 800a244:	2001      	movs	r0, #1
 800a246:	f7f7 fe79 	bl	8001f3c <_exit>

0800a24a <_malloc_usable_size_r>:
 800a24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a24e:	1f18      	subs	r0, r3, #4
 800a250:	2b00      	cmp	r3, #0
 800a252:	bfbc      	itt	lt
 800a254:	580b      	ldrlt	r3, [r1, r0]
 800a256:	18c0      	addlt	r0, r0, r3
 800a258:	4770      	bx	lr

0800a25a <_raise_r>:
 800a25a:	291f      	cmp	r1, #31
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4604      	mov	r4, r0
 800a260:	460d      	mov	r5, r1
 800a262:	d904      	bls.n	800a26e <_raise_r+0x14>
 800a264:	2316      	movs	r3, #22
 800a266:	6003      	str	r3, [r0, #0]
 800a268:	f04f 30ff 	mov.w	r0, #4294967295
 800a26c:	bd38      	pop	{r3, r4, r5, pc}
 800a26e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a270:	b112      	cbz	r2, 800a278 <_raise_r+0x1e>
 800a272:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a276:	b94b      	cbnz	r3, 800a28c <_raise_r+0x32>
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 f831 	bl	800a2e0 <_getpid_r>
 800a27e:	462a      	mov	r2, r5
 800a280:	4601      	mov	r1, r0
 800a282:	4620      	mov	r0, r4
 800a284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a288:	f000 b818 	b.w	800a2bc <_kill_r>
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d00a      	beq.n	800a2a6 <_raise_r+0x4c>
 800a290:	1c59      	adds	r1, r3, #1
 800a292:	d103      	bne.n	800a29c <_raise_r+0x42>
 800a294:	2316      	movs	r3, #22
 800a296:	6003      	str	r3, [r0, #0]
 800a298:	2001      	movs	r0, #1
 800a29a:	e7e7      	b.n	800a26c <_raise_r+0x12>
 800a29c:	2400      	movs	r4, #0
 800a29e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	4798      	blx	r3
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	e7e0      	b.n	800a26c <_raise_r+0x12>
	...

0800a2ac <raise>:
 800a2ac:	4b02      	ldr	r3, [pc, #8]	; (800a2b8 <raise+0xc>)
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	f7ff bfd2 	b.w	800a25a <_raise_r>
 800a2b6:	bf00      	nop
 800a2b8:	2000000c 	.word	0x2000000c

0800a2bc <_kill_r>:
 800a2bc:	b538      	push	{r3, r4, r5, lr}
 800a2be:	4d07      	ldr	r5, [pc, #28]	; (800a2dc <_kill_r+0x20>)
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	4608      	mov	r0, r1
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	602b      	str	r3, [r5, #0]
 800a2ca:	f7f7 fe27 	bl	8001f1c <_kill>
 800a2ce:	1c43      	adds	r3, r0, #1
 800a2d0:	d102      	bne.n	800a2d8 <_kill_r+0x1c>
 800a2d2:	682b      	ldr	r3, [r5, #0]
 800a2d4:	b103      	cbz	r3, 800a2d8 <_kill_r+0x1c>
 800a2d6:	6023      	str	r3, [r4, #0]
 800a2d8:	bd38      	pop	{r3, r4, r5, pc}
 800a2da:	bf00      	nop
 800a2dc:	20000318 	.word	0x20000318

0800a2e0 <_getpid_r>:
 800a2e0:	f7f7 be14 	b.w	8001f0c <_getpid>

0800a2e4 <pow>:
 800a2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e6:	ed2d 8b02 	vpush	{d8}
 800a2ea:	eeb0 8a40 	vmov.f32	s16, s0
 800a2ee:	eef0 8a60 	vmov.f32	s17, s1
 800a2f2:	ec55 4b11 	vmov	r4, r5, d1
 800a2f6:	f000 f893 	bl	800a420 <__ieee754_pow>
 800a2fa:	4622      	mov	r2, r4
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	4620      	mov	r0, r4
 800a300:	4629      	mov	r1, r5
 800a302:	ec57 6b10 	vmov	r6, r7, d0
 800a306:	f7f6 fc39 	bl	8000b7c <__aeabi_dcmpun>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d13b      	bne.n	800a386 <pow+0xa2>
 800a30e:	ec51 0b18 	vmov	r0, r1, d8
 800a312:	2200      	movs	r2, #0
 800a314:	2300      	movs	r3, #0
 800a316:	f7f6 fbff 	bl	8000b18 <__aeabi_dcmpeq>
 800a31a:	b1b8      	cbz	r0, 800a34c <pow+0x68>
 800a31c:	2200      	movs	r2, #0
 800a31e:	2300      	movs	r3, #0
 800a320:	4620      	mov	r0, r4
 800a322:	4629      	mov	r1, r5
 800a324:	f7f6 fbf8 	bl	8000b18 <__aeabi_dcmpeq>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d146      	bne.n	800a3ba <pow+0xd6>
 800a32c:	ec45 4b10 	vmov	d0, r4, r5
 800a330:	f000 fe8f 	bl	800b052 <finite>
 800a334:	b338      	cbz	r0, 800a386 <pow+0xa2>
 800a336:	2200      	movs	r2, #0
 800a338:	2300      	movs	r3, #0
 800a33a:	4620      	mov	r0, r4
 800a33c:	4629      	mov	r1, r5
 800a33e:	f7f6 fbf5 	bl	8000b2c <__aeabi_dcmplt>
 800a342:	b300      	cbz	r0, 800a386 <pow+0xa2>
 800a344:	f7fb fa40 	bl	80057c8 <__errno>
 800a348:	2322      	movs	r3, #34	; 0x22
 800a34a:	e01b      	b.n	800a384 <pow+0xa0>
 800a34c:	ec47 6b10 	vmov	d0, r6, r7
 800a350:	f000 fe7f 	bl	800b052 <finite>
 800a354:	b9e0      	cbnz	r0, 800a390 <pow+0xac>
 800a356:	eeb0 0a48 	vmov.f32	s0, s16
 800a35a:	eef0 0a68 	vmov.f32	s1, s17
 800a35e:	f000 fe78 	bl	800b052 <finite>
 800a362:	b1a8      	cbz	r0, 800a390 <pow+0xac>
 800a364:	ec45 4b10 	vmov	d0, r4, r5
 800a368:	f000 fe73 	bl	800b052 <finite>
 800a36c:	b180      	cbz	r0, 800a390 <pow+0xac>
 800a36e:	4632      	mov	r2, r6
 800a370:	463b      	mov	r3, r7
 800a372:	4630      	mov	r0, r6
 800a374:	4639      	mov	r1, r7
 800a376:	f7f6 fc01 	bl	8000b7c <__aeabi_dcmpun>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d0e2      	beq.n	800a344 <pow+0x60>
 800a37e:	f7fb fa23 	bl	80057c8 <__errno>
 800a382:	2321      	movs	r3, #33	; 0x21
 800a384:	6003      	str	r3, [r0, #0]
 800a386:	ecbd 8b02 	vpop	{d8}
 800a38a:	ec47 6b10 	vmov	d0, r6, r7
 800a38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a390:	2200      	movs	r2, #0
 800a392:	2300      	movs	r3, #0
 800a394:	4630      	mov	r0, r6
 800a396:	4639      	mov	r1, r7
 800a398:	f7f6 fbbe 	bl	8000b18 <__aeabi_dcmpeq>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d0f2      	beq.n	800a386 <pow+0xa2>
 800a3a0:	eeb0 0a48 	vmov.f32	s0, s16
 800a3a4:	eef0 0a68 	vmov.f32	s1, s17
 800a3a8:	f000 fe53 	bl	800b052 <finite>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	d0ea      	beq.n	800a386 <pow+0xa2>
 800a3b0:	ec45 4b10 	vmov	d0, r4, r5
 800a3b4:	f000 fe4d 	bl	800b052 <finite>
 800a3b8:	e7c3      	b.n	800a342 <pow+0x5e>
 800a3ba:	4f01      	ldr	r7, [pc, #4]	; (800a3c0 <pow+0xdc>)
 800a3bc:	2600      	movs	r6, #0
 800a3be:	e7e2      	b.n	800a386 <pow+0xa2>
 800a3c0:	3ff00000 	.word	0x3ff00000

0800a3c4 <sqrt>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	ed2d 8b02 	vpush	{d8}
 800a3ca:	ec55 4b10 	vmov	r4, r5, d0
 800a3ce:	f000 fd55 	bl	800ae7c <__ieee754_sqrt>
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	462b      	mov	r3, r5
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	4629      	mov	r1, r5
 800a3da:	eeb0 8a40 	vmov.f32	s16, s0
 800a3de:	eef0 8a60 	vmov.f32	s17, s1
 800a3e2:	f7f6 fbcb 	bl	8000b7c <__aeabi_dcmpun>
 800a3e6:	b990      	cbnz	r0, 800a40e <sqrt+0x4a>
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	4629      	mov	r1, r5
 800a3f0:	f7f6 fb9c 	bl	8000b2c <__aeabi_dcmplt>
 800a3f4:	b158      	cbz	r0, 800a40e <sqrt+0x4a>
 800a3f6:	f7fb f9e7 	bl	80057c8 <__errno>
 800a3fa:	2321      	movs	r3, #33	; 0x21
 800a3fc:	6003      	str	r3, [r0, #0]
 800a3fe:	2200      	movs	r2, #0
 800a400:	2300      	movs	r3, #0
 800a402:	4610      	mov	r0, r2
 800a404:	4619      	mov	r1, r3
 800a406:	f7f6 fa49 	bl	800089c <__aeabi_ddiv>
 800a40a:	ec41 0b18 	vmov	d8, r0, r1
 800a40e:	eeb0 0a48 	vmov.f32	s0, s16
 800a412:	eef0 0a68 	vmov.f32	s1, s17
 800a416:	ecbd 8b02 	vpop	{d8}
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	0000      	movs	r0, r0
	...

0800a420 <__ieee754_pow>:
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a424:	ed2d 8b06 	vpush	{d8-d10}
 800a428:	b089      	sub	sp, #36	; 0x24
 800a42a:	ed8d 1b00 	vstr	d1, [sp]
 800a42e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a432:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a436:	ea58 0102 	orrs.w	r1, r8, r2
 800a43a:	ec57 6b10 	vmov	r6, r7, d0
 800a43e:	d115      	bne.n	800a46c <__ieee754_pow+0x4c>
 800a440:	19b3      	adds	r3, r6, r6
 800a442:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a446:	4152      	adcs	r2, r2
 800a448:	4299      	cmp	r1, r3
 800a44a:	4b89      	ldr	r3, [pc, #548]	; (800a670 <__ieee754_pow+0x250>)
 800a44c:	4193      	sbcs	r3, r2
 800a44e:	f080 84d2 	bcs.w	800adf6 <__ieee754_pow+0x9d6>
 800a452:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a456:	4630      	mov	r0, r6
 800a458:	4639      	mov	r1, r7
 800a45a:	f7f5 ff3f 	bl	80002dc <__adddf3>
 800a45e:	ec41 0b10 	vmov	d0, r0, r1
 800a462:	b009      	add	sp, #36	; 0x24
 800a464:	ecbd 8b06 	vpop	{d8-d10}
 800a468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46c:	4b81      	ldr	r3, [pc, #516]	; (800a674 <__ieee754_pow+0x254>)
 800a46e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a472:	429c      	cmp	r4, r3
 800a474:	ee10 aa10 	vmov	sl, s0
 800a478:	463d      	mov	r5, r7
 800a47a:	dc06      	bgt.n	800a48a <__ieee754_pow+0x6a>
 800a47c:	d101      	bne.n	800a482 <__ieee754_pow+0x62>
 800a47e:	2e00      	cmp	r6, #0
 800a480:	d1e7      	bne.n	800a452 <__ieee754_pow+0x32>
 800a482:	4598      	cmp	r8, r3
 800a484:	dc01      	bgt.n	800a48a <__ieee754_pow+0x6a>
 800a486:	d10f      	bne.n	800a4a8 <__ieee754_pow+0x88>
 800a488:	b172      	cbz	r2, 800a4a8 <__ieee754_pow+0x88>
 800a48a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a48e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a492:	ea55 050a 	orrs.w	r5, r5, sl
 800a496:	d1dc      	bne.n	800a452 <__ieee754_pow+0x32>
 800a498:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a49c:	18db      	adds	r3, r3, r3
 800a49e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a4a2:	4152      	adcs	r2, r2
 800a4a4:	429d      	cmp	r5, r3
 800a4a6:	e7d0      	b.n	800a44a <__ieee754_pow+0x2a>
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	da3b      	bge.n	800a524 <__ieee754_pow+0x104>
 800a4ac:	4b72      	ldr	r3, [pc, #456]	; (800a678 <__ieee754_pow+0x258>)
 800a4ae:	4598      	cmp	r8, r3
 800a4b0:	dc51      	bgt.n	800a556 <__ieee754_pow+0x136>
 800a4b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a4b6:	4598      	cmp	r8, r3
 800a4b8:	f340 84ac 	ble.w	800ae14 <__ieee754_pow+0x9f4>
 800a4bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a4c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a4c4:	2b14      	cmp	r3, #20
 800a4c6:	dd0f      	ble.n	800a4e8 <__ieee754_pow+0xc8>
 800a4c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a4cc:	fa22 f103 	lsr.w	r1, r2, r3
 800a4d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	f040 849d 	bne.w	800ae14 <__ieee754_pow+0x9f4>
 800a4da:	f001 0101 	and.w	r1, r1, #1
 800a4de:	f1c1 0302 	rsb	r3, r1, #2
 800a4e2:	9304      	str	r3, [sp, #16]
 800a4e4:	b182      	cbz	r2, 800a508 <__ieee754_pow+0xe8>
 800a4e6:	e05f      	b.n	800a5a8 <__ieee754_pow+0x188>
 800a4e8:	2a00      	cmp	r2, #0
 800a4ea:	d15b      	bne.n	800a5a4 <__ieee754_pow+0x184>
 800a4ec:	f1c3 0314 	rsb	r3, r3, #20
 800a4f0:	fa48 f103 	asr.w	r1, r8, r3
 800a4f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a4f8:	4543      	cmp	r3, r8
 800a4fa:	f040 8488 	bne.w	800ae0e <__ieee754_pow+0x9ee>
 800a4fe:	f001 0101 	and.w	r1, r1, #1
 800a502:	f1c1 0302 	rsb	r3, r1, #2
 800a506:	9304      	str	r3, [sp, #16]
 800a508:	4b5c      	ldr	r3, [pc, #368]	; (800a67c <__ieee754_pow+0x25c>)
 800a50a:	4598      	cmp	r8, r3
 800a50c:	d132      	bne.n	800a574 <__ieee754_pow+0x154>
 800a50e:	f1b9 0f00 	cmp.w	r9, #0
 800a512:	f280 8478 	bge.w	800ae06 <__ieee754_pow+0x9e6>
 800a516:	4959      	ldr	r1, [pc, #356]	; (800a67c <__ieee754_pow+0x25c>)
 800a518:	4632      	mov	r2, r6
 800a51a:	463b      	mov	r3, r7
 800a51c:	2000      	movs	r0, #0
 800a51e:	f7f6 f9bd 	bl	800089c <__aeabi_ddiv>
 800a522:	e79c      	b.n	800a45e <__ieee754_pow+0x3e>
 800a524:	2300      	movs	r3, #0
 800a526:	9304      	str	r3, [sp, #16]
 800a528:	2a00      	cmp	r2, #0
 800a52a:	d13d      	bne.n	800a5a8 <__ieee754_pow+0x188>
 800a52c:	4b51      	ldr	r3, [pc, #324]	; (800a674 <__ieee754_pow+0x254>)
 800a52e:	4598      	cmp	r8, r3
 800a530:	d1ea      	bne.n	800a508 <__ieee754_pow+0xe8>
 800a532:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a536:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a53a:	ea53 030a 	orrs.w	r3, r3, sl
 800a53e:	f000 845a 	beq.w	800adf6 <__ieee754_pow+0x9d6>
 800a542:	4b4f      	ldr	r3, [pc, #316]	; (800a680 <__ieee754_pow+0x260>)
 800a544:	429c      	cmp	r4, r3
 800a546:	dd08      	ble.n	800a55a <__ieee754_pow+0x13a>
 800a548:	f1b9 0f00 	cmp.w	r9, #0
 800a54c:	f2c0 8457 	blt.w	800adfe <__ieee754_pow+0x9de>
 800a550:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a554:	e783      	b.n	800a45e <__ieee754_pow+0x3e>
 800a556:	2302      	movs	r3, #2
 800a558:	e7e5      	b.n	800a526 <__ieee754_pow+0x106>
 800a55a:	f1b9 0f00 	cmp.w	r9, #0
 800a55e:	f04f 0000 	mov.w	r0, #0
 800a562:	f04f 0100 	mov.w	r1, #0
 800a566:	f6bf af7a 	bge.w	800a45e <__ieee754_pow+0x3e>
 800a56a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a56e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a572:	e774      	b.n	800a45e <__ieee754_pow+0x3e>
 800a574:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a578:	d106      	bne.n	800a588 <__ieee754_pow+0x168>
 800a57a:	4632      	mov	r2, r6
 800a57c:	463b      	mov	r3, r7
 800a57e:	4630      	mov	r0, r6
 800a580:	4639      	mov	r1, r7
 800a582:	f7f6 f861 	bl	8000648 <__aeabi_dmul>
 800a586:	e76a      	b.n	800a45e <__ieee754_pow+0x3e>
 800a588:	4b3e      	ldr	r3, [pc, #248]	; (800a684 <__ieee754_pow+0x264>)
 800a58a:	4599      	cmp	r9, r3
 800a58c:	d10c      	bne.n	800a5a8 <__ieee754_pow+0x188>
 800a58e:	2d00      	cmp	r5, #0
 800a590:	db0a      	blt.n	800a5a8 <__ieee754_pow+0x188>
 800a592:	ec47 6b10 	vmov	d0, r6, r7
 800a596:	b009      	add	sp, #36	; 0x24
 800a598:	ecbd 8b06 	vpop	{d8-d10}
 800a59c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a0:	f000 bc6c 	b.w	800ae7c <__ieee754_sqrt>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9304      	str	r3, [sp, #16]
 800a5a8:	ec47 6b10 	vmov	d0, r6, r7
 800a5ac:	f000 fd48 	bl	800b040 <fabs>
 800a5b0:	ec51 0b10 	vmov	r0, r1, d0
 800a5b4:	f1ba 0f00 	cmp.w	sl, #0
 800a5b8:	d129      	bne.n	800a60e <__ieee754_pow+0x1ee>
 800a5ba:	b124      	cbz	r4, 800a5c6 <__ieee754_pow+0x1a6>
 800a5bc:	4b2f      	ldr	r3, [pc, #188]	; (800a67c <__ieee754_pow+0x25c>)
 800a5be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d123      	bne.n	800a60e <__ieee754_pow+0x1ee>
 800a5c6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ca:	da05      	bge.n	800a5d8 <__ieee754_pow+0x1b8>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	492a      	ldr	r1, [pc, #168]	; (800a67c <__ieee754_pow+0x25c>)
 800a5d4:	f7f6 f962 	bl	800089c <__aeabi_ddiv>
 800a5d8:	2d00      	cmp	r5, #0
 800a5da:	f6bf af40 	bge.w	800a45e <__ieee754_pow+0x3e>
 800a5de:	9b04      	ldr	r3, [sp, #16]
 800a5e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a5e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a5e8:	4323      	orrs	r3, r4
 800a5ea:	d108      	bne.n	800a5fe <__ieee754_pow+0x1de>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	f7f5 fe70 	bl	80002d8 <__aeabi_dsub>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	e78f      	b.n	800a51e <__ieee754_pow+0xfe>
 800a5fe:	9b04      	ldr	r3, [sp, #16]
 800a600:	2b01      	cmp	r3, #1
 800a602:	f47f af2c 	bne.w	800a45e <__ieee754_pow+0x3e>
 800a606:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a60a:	4619      	mov	r1, r3
 800a60c:	e727      	b.n	800a45e <__ieee754_pow+0x3e>
 800a60e:	0feb      	lsrs	r3, r5, #31
 800a610:	3b01      	subs	r3, #1
 800a612:	9306      	str	r3, [sp, #24]
 800a614:	9a06      	ldr	r2, [sp, #24]
 800a616:	9b04      	ldr	r3, [sp, #16]
 800a618:	4313      	orrs	r3, r2
 800a61a:	d102      	bne.n	800a622 <__ieee754_pow+0x202>
 800a61c:	4632      	mov	r2, r6
 800a61e:	463b      	mov	r3, r7
 800a620:	e7e6      	b.n	800a5f0 <__ieee754_pow+0x1d0>
 800a622:	4b19      	ldr	r3, [pc, #100]	; (800a688 <__ieee754_pow+0x268>)
 800a624:	4598      	cmp	r8, r3
 800a626:	f340 80fb 	ble.w	800a820 <__ieee754_pow+0x400>
 800a62a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a62e:	4598      	cmp	r8, r3
 800a630:	4b13      	ldr	r3, [pc, #76]	; (800a680 <__ieee754_pow+0x260>)
 800a632:	dd0c      	ble.n	800a64e <__ieee754_pow+0x22e>
 800a634:	429c      	cmp	r4, r3
 800a636:	dc0f      	bgt.n	800a658 <__ieee754_pow+0x238>
 800a638:	f1b9 0f00 	cmp.w	r9, #0
 800a63c:	da0f      	bge.n	800a65e <__ieee754_pow+0x23e>
 800a63e:	2000      	movs	r0, #0
 800a640:	b009      	add	sp, #36	; 0x24
 800a642:	ecbd 8b06 	vpop	{d8-d10}
 800a646:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64a:	f000 bcf0 	b.w	800b02e <__math_oflow>
 800a64e:	429c      	cmp	r4, r3
 800a650:	dbf2      	blt.n	800a638 <__ieee754_pow+0x218>
 800a652:	4b0a      	ldr	r3, [pc, #40]	; (800a67c <__ieee754_pow+0x25c>)
 800a654:	429c      	cmp	r4, r3
 800a656:	dd19      	ble.n	800a68c <__ieee754_pow+0x26c>
 800a658:	f1b9 0f00 	cmp.w	r9, #0
 800a65c:	dcef      	bgt.n	800a63e <__ieee754_pow+0x21e>
 800a65e:	2000      	movs	r0, #0
 800a660:	b009      	add	sp, #36	; 0x24
 800a662:	ecbd 8b06 	vpop	{d8-d10}
 800a666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66a:	f000 bcd7 	b.w	800b01c <__math_uflow>
 800a66e:	bf00      	nop
 800a670:	fff00000 	.word	0xfff00000
 800a674:	7ff00000 	.word	0x7ff00000
 800a678:	433fffff 	.word	0x433fffff
 800a67c:	3ff00000 	.word	0x3ff00000
 800a680:	3fefffff 	.word	0x3fefffff
 800a684:	3fe00000 	.word	0x3fe00000
 800a688:	41e00000 	.word	0x41e00000
 800a68c:	4b60      	ldr	r3, [pc, #384]	; (800a810 <__ieee754_pow+0x3f0>)
 800a68e:	2200      	movs	r2, #0
 800a690:	f7f5 fe22 	bl	80002d8 <__aeabi_dsub>
 800a694:	a354      	add	r3, pc, #336	; (adr r3, 800a7e8 <__ieee754_pow+0x3c8>)
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	4604      	mov	r4, r0
 800a69c:	460d      	mov	r5, r1
 800a69e:	f7f5 ffd3 	bl	8000648 <__aeabi_dmul>
 800a6a2:	a353      	add	r3, pc, #332	; (adr r3, 800a7f0 <__ieee754_pow+0x3d0>)
 800a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	460f      	mov	r7, r1
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	f7f5 ffca 	bl	8000648 <__aeabi_dmul>
 800a6b4:	4b57      	ldr	r3, [pc, #348]	; (800a814 <__ieee754_pow+0x3f4>)
 800a6b6:	4682      	mov	sl, r0
 800a6b8:	468b      	mov	fp, r1
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	4620      	mov	r0, r4
 800a6be:	4629      	mov	r1, r5
 800a6c0:	f7f5 ffc2 	bl	8000648 <__aeabi_dmul>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	a14b      	add	r1, pc, #300	; (adr r1, 800a7f8 <__ieee754_pow+0x3d8>)
 800a6ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ce:	f7f5 fe03 	bl	80002d8 <__aeabi_dsub>
 800a6d2:	4622      	mov	r2, r4
 800a6d4:	462b      	mov	r3, r5
 800a6d6:	f7f5 ffb7 	bl	8000648 <__aeabi_dmul>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	2000      	movs	r0, #0
 800a6e0:	494d      	ldr	r1, [pc, #308]	; (800a818 <__ieee754_pow+0x3f8>)
 800a6e2:	f7f5 fdf9 	bl	80002d8 <__aeabi_dsub>
 800a6e6:	4622      	mov	r2, r4
 800a6e8:	4680      	mov	r8, r0
 800a6ea:	4689      	mov	r9, r1
 800a6ec:	462b      	mov	r3, r5
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	f7f5 ffa9 	bl	8000648 <__aeabi_dmul>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	f7f5 ffa3 	bl	8000648 <__aeabi_dmul>
 800a702:	a33f      	add	r3, pc, #252	; (adr r3, 800a800 <__ieee754_pow+0x3e0>)
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f7f5 ff9e 	bl	8000648 <__aeabi_dmul>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4650      	mov	r0, sl
 800a712:	4659      	mov	r1, fp
 800a714:	f7f5 fde0 	bl	80002d8 <__aeabi_dsub>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4680      	mov	r8, r0
 800a71e:	4689      	mov	r9, r1
 800a720:	4630      	mov	r0, r6
 800a722:	4639      	mov	r1, r7
 800a724:	f7f5 fdda 	bl	80002dc <__adddf3>
 800a728:	2000      	movs	r0, #0
 800a72a:	4632      	mov	r2, r6
 800a72c:	463b      	mov	r3, r7
 800a72e:	4604      	mov	r4, r0
 800a730:	460d      	mov	r5, r1
 800a732:	f7f5 fdd1 	bl	80002d8 <__aeabi_dsub>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4640      	mov	r0, r8
 800a73c:	4649      	mov	r1, r9
 800a73e:	f7f5 fdcb 	bl	80002d8 <__aeabi_dsub>
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	9a06      	ldr	r2, [sp, #24]
 800a746:	3b01      	subs	r3, #1
 800a748:	4313      	orrs	r3, r2
 800a74a:	4682      	mov	sl, r0
 800a74c:	468b      	mov	fp, r1
 800a74e:	f040 81e7 	bne.w	800ab20 <__ieee754_pow+0x700>
 800a752:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a808 <__ieee754_pow+0x3e8>
 800a756:	eeb0 8a47 	vmov.f32	s16, s14
 800a75a:	eef0 8a67 	vmov.f32	s17, s15
 800a75e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a762:	2600      	movs	r6, #0
 800a764:	4632      	mov	r2, r6
 800a766:	463b      	mov	r3, r7
 800a768:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a76c:	f7f5 fdb4 	bl	80002d8 <__aeabi_dsub>
 800a770:	4622      	mov	r2, r4
 800a772:	462b      	mov	r3, r5
 800a774:	f7f5 ff68 	bl	8000648 <__aeabi_dmul>
 800a778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a77c:	4680      	mov	r8, r0
 800a77e:	4689      	mov	r9, r1
 800a780:	4650      	mov	r0, sl
 800a782:	4659      	mov	r1, fp
 800a784:	f7f5 ff60 	bl	8000648 <__aeabi_dmul>
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	4640      	mov	r0, r8
 800a78e:	4649      	mov	r1, r9
 800a790:	f7f5 fda4 	bl	80002dc <__adddf3>
 800a794:	4632      	mov	r2, r6
 800a796:	463b      	mov	r3, r7
 800a798:	4680      	mov	r8, r0
 800a79a:	4689      	mov	r9, r1
 800a79c:	4620      	mov	r0, r4
 800a79e:	4629      	mov	r1, r5
 800a7a0:	f7f5 ff52 	bl	8000648 <__aeabi_dmul>
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	460d      	mov	r5, r1
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	f7f5 fd94 	bl	80002dc <__adddf3>
 800a7b4:	4b19      	ldr	r3, [pc, #100]	; (800a81c <__ieee754_pow+0x3fc>)
 800a7b6:	4299      	cmp	r1, r3
 800a7b8:	ec45 4b19 	vmov	d9, r4, r5
 800a7bc:	4606      	mov	r6, r0
 800a7be:	460f      	mov	r7, r1
 800a7c0:	468b      	mov	fp, r1
 800a7c2:	f340 82f1 	ble.w	800ada8 <__ieee754_pow+0x988>
 800a7c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a7ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a7ce:	4303      	orrs	r3, r0
 800a7d0:	f000 81e4 	beq.w	800ab9c <__ieee754_pow+0x77c>
 800a7d4:	ec51 0b18 	vmov	r0, r1, d8
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f7f6 f9a6 	bl	8000b2c <__aeabi_dcmplt>
 800a7e0:	3800      	subs	r0, #0
 800a7e2:	bf18      	it	ne
 800a7e4:	2001      	movne	r0, #1
 800a7e6:	e72b      	b.n	800a640 <__ieee754_pow+0x220>
 800a7e8:	60000000 	.word	0x60000000
 800a7ec:	3ff71547 	.word	0x3ff71547
 800a7f0:	f85ddf44 	.word	0xf85ddf44
 800a7f4:	3e54ae0b 	.word	0x3e54ae0b
 800a7f8:	55555555 	.word	0x55555555
 800a7fc:	3fd55555 	.word	0x3fd55555
 800a800:	652b82fe 	.word	0x652b82fe
 800a804:	3ff71547 	.word	0x3ff71547
 800a808:	00000000 	.word	0x00000000
 800a80c:	bff00000 	.word	0xbff00000
 800a810:	3ff00000 	.word	0x3ff00000
 800a814:	3fd00000 	.word	0x3fd00000
 800a818:	3fe00000 	.word	0x3fe00000
 800a81c:	408fffff 	.word	0x408fffff
 800a820:	4bd5      	ldr	r3, [pc, #852]	; (800ab78 <__ieee754_pow+0x758>)
 800a822:	402b      	ands	r3, r5
 800a824:	2200      	movs	r2, #0
 800a826:	b92b      	cbnz	r3, 800a834 <__ieee754_pow+0x414>
 800a828:	4bd4      	ldr	r3, [pc, #848]	; (800ab7c <__ieee754_pow+0x75c>)
 800a82a:	f7f5 ff0d 	bl	8000648 <__aeabi_dmul>
 800a82e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a832:	460c      	mov	r4, r1
 800a834:	1523      	asrs	r3, r4, #20
 800a836:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a83a:	4413      	add	r3, r2
 800a83c:	9305      	str	r3, [sp, #20]
 800a83e:	4bd0      	ldr	r3, [pc, #832]	; (800ab80 <__ieee754_pow+0x760>)
 800a840:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a844:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a848:	429c      	cmp	r4, r3
 800a84a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a84e:	dd08      	ble.n	800a862 <__ieee754_pow+0x442>
 800a850:	4bcc      	ldr	r3, [pc, #816]	; (800ab84 <__ieee754_pow+0x764>)
 800a852:	429c      	cmp	r4, r3
 800a854:	f340 8162 	ble.w	800ab1c <__ieee754_pow+0x6fc>
 800a858:	9b05      	ldr	r3, [sp, #20]
 800a85a:	3301      	adds	r3, #1
 800a85c:	9305      	str	r3, [sp, #20]
 800a85e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a862:	2400      	movs	r4, #0
 800a864:	00e3      	lsls	r3, r4, #3
 800a866:	9307      	str	r3, [sp, #28]
 800a868:	4bc7      	ldr	r3, [pc, #796]	; (800ab88 <__ieee754_pow+0x768>)
 800a86a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a86e:	ed93 7b00 	vldr	d7, [r3]
 800a872:	4629      	mov	r1, r5
 800a874:	ec53 2b17 	vmov	r2, r3, d7
 800a878:	eeb0 9a47 	vmov.f32	s18, s14
 800a87c:	eef0 9a67 	vmov.f32	s19, s15
 800a880:	4682      	mov	sl, r0
 800a882:	f7f5 fd29 	bl	80002d8 <__aeabi_dsub>
 800a886:	4652      	mov	r2, sl
 800a888:	4606      	mov	r6, r0
 800a88a:	460f      	mov	r7, r1
 800a88c:	462b      	mov	r3, r5
 800a88e:	ec51 0b19 	vmov	r0, r1, d9
 800a892:	f7f5 fd23 	bl	80002dc <__adddf3>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	2000      	movs	r0, #0
 800a89c:	49bb      	ldr	r1, [pc, #748]	; (800ab8c <__ieee754_pow+0x76c>)
 800a89e:	f7f5 fffd 	bl	800089c <__aeabi_ddiv>
 800a8a2:	ec41 0b1a 	vmov	d10, r0, r1
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	4639      	mov	r1, r7
 800a8ae:	f7f5 fecb 	bl	8000648 <__aeabi_dmul>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8b8:	9302      	str	r3, [sp, #8]
 800a8ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a8be:	46ab      	mov	fp, r5
 800a8c0:	106d      	asrs	r5, r5, #1
 800a8c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a8c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a8ca:	ec41 0b18 	vmov	d8, r0, r1
 800a8ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	4614      	mov	r4, r2
 800a8da:	461d      	mov	r5, r3
 800a8dc:	f7f5 feb4 	bl	8000648 <__aeabi_dmul>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	4639      	mov	r1, r7
 800a8e8:	f7f5 fcf6 	bl	80002d8 <__aeabi_dsub>
 800a8ec:	ec53 2b19 	vmov	r2, r3, d9
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	460f      	mov	r7, r1
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f7f5 fcee 	bl	80002d8 <__aeabi_dsub>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	4650      	mov	r0, sl
 800a902:	4659      	mov	r1, fp
 800a904:	f7f5 fce8 	bl	80002d8 <__aeabi_dsub>
 800a908:	4642      	mov	r2, r8
 800a90a:	464b      	mov	r3, r9
 800a90c:	f7f5 fe9c 	bl	8000648 <__aeabi_dmul>
 800a910:	4602      	mov	r2, r0
 800a912:	460b      	mov	r3, r1
 800a914:	4630      	mov	r0, r6
 800a916:	4639      	mov	r1, r7
 800a918:	f7f5 fcde 	bl	80002d8 <__aeabi_dsub>
 800a91c:	ec53 2b1a 	vmov	r2, r3, d10
 800a920:	f7f5 fe92 	bl	8000648 <__aeabi_dmul>
 800a924:	ec53 2b18 	vmov	r2, r3, d8
 800a928:	ec41 0b19 	vmov	d9, r0, r1
 800a92c:	ec51 0b18 	vmov	r0, r1, d8
 800a930:	f7f5 fe8a 	bl	8000648 <__aeabi_dmul>
 800a934:	a37c      	add	r3, pc, #496	; (adr r3, 800ab28 <__ieee754_pow+0x708>)
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	4604      	mov	r4, r0
 800a93c:	460d      	mov	r5, r1
 800a93e:	f7f5 fe83 	bl	8000648 <__aeabi_dmul>
 800a942:	a37b      	add	r3, pc, #492	; (adr r3, 800ab30 <__ieee754_pow+0x710>)
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	f7f5 fcc8 	bl	80002dc <__adddf3>
 800a94c:	4622      	mov	r2, r4
 800a94e:	462b      	mov	r3, r5
 800a950:	f7f5 fe7a 	bl	8000648 <__aeabi_dmul>
 800a954:	a378      	add	r3, pc, #480	; (adr r3, 800ab38 <__ieee754_pow+0x718>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7f5 fcbf 	bl	80002dc <__adddf3>
 800a95e:	4622      	mov	r2, r4
 800a960:	462b      	mov	r3, r5
 800a962:	f7f5 fe71 	bl	8000648 <__aeabi_dmul>
 800a966:	a376      	add	r3, pc, #472	; (adr r3, 800ab40 <__ieee754_pow+0x720>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	f7f5 fcb6 	bl	80002dc <__adddf3>
 800a970:	4622      	mov	r2, r4
 800a972:	462b      	mov	r3, r5
 800a974:	f7f5 fe68 	bl	8000648 <__aeabi_dmul>
 800a978:	a373      	add	r3, pc, #460	; (adr r3, 800ab48 <__ieee754_pow+0x728>)
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	f7f5 fcad 	bl	80002dc <__adddf3>
 800a982:	4622      	mov	r2, r4
 800a984:	462b      	mov	r3, r5
 800a986:	f7f5 fe5f 	bl	8000648 <__aeabi_dmul>
 800a98a:	a371      	add	r3, pc, #452	; (adr r3, 800ab50 <__ieee754_pow+0x730>)
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	f7f5 fca4 	bl	80002dc <__adddf3>
 800a994:	4622      	mov	r2, r4
 800a996:	4606      	mov	r6, r0
 800a998:	460f      	mov	r7, r1
 800a99a:	462b      	mov	r3, r5
 800a99c:	4620      	mov	r0, r4
 800a99e:	4629      	mov	r1, r5
 800a9a0:	f7f5 fe52 	bl	8000648 <__aeabi_dmul>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	4639      	mov	r1, r7
 800a9ac:	f7f5 fe4c 	bl	8000648 <__aeabi_dmul>
 800a9b0:	4642      	mov	r2, r8
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	460d      	mov	r5, r1
 800a9b6:	464b      	mov	r3, r9
 800a9b8:	ec51 0b18 	vmov	r0, r1, d8
 800a9bc:	f7f5 fc8e 	bl	80002dc <__adddf3>
 800a9c0:	ec53 2b19 	vmov	r2, r3, d9
 800a9c4:	f7f5 fe40 	bl	8000648 <__aeabi_dmul>
 800a9c8:	4622      	mov	r2, r4
 800a9ca:	462b      	mov	r3, r5
 800a9cc:	f7f5 fc86 	bl	80002dc <__adddf3>
 800a9d0:	4642      	mov	r2, r8
 800a9d2:	4682      	mov	sl, r0
 800a9d4:	468b      	mov	fp, r1
 800a9d6:	464b      	mov	r3, r9
 800a9d8:	4640      	mov	r0, r8
 800a9da:	4649      	mov	r1, r9
 800a9dc:	f7f5 fe34 	bl	8000648 <__aeabi_dmul>
 800a9e0:	4b6b      	ldr	r3, [pc, #428]	; (800ab90 <__ieee754_pow+0x770>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	460f      	mov	r7, r1
 800a9e8:	f7f5 fc78 	bl	80002dc <__adddf3>
 800a9ec:	4652      	mov	r2, sl
 800a9ee:	465b      	mov	r3, fp
 800a9f0:	f7f5 fc74 	bl	80002dc <__adddf3>
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	460d      	mov	r5, r1
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4640      	mov	r0, r8
 800aa00:	4649      	mov	r1, r9
 800aa02:	f7f5 fe21 	bl	8000648 <__aeabi_dmul>
 800aa06:	4b62      	ldr	r3, [pc, #392]	; (800ab90 <__ieee754_pow+0x770>)
 800aa08:	4680      	mov	r8, r0
 800aa0a:	4689      	mov	r9, r1
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4620      	mov	r0, r4
 800aa10:	4629      	mov	r1, r5
 800aa12:	f7f5 fc61 	bl	80002d8 <__aeabi_dsub>
 800aa16:	4632      	mov	r2, r6
 800aa18:	463b      	mov	r3, r7
 800aa1a:	f7f5 fc5d 	bl	80002d8 <__aeabi_dsub>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	4650      	mov	r0, sl
 800aa24:	4659      	mov	r1, fp
 800aa26:	f7f5 fc57 	bl	80002d8 <__aeabi_dsub>
 800aa2a:	ec53 2b18 	vmov	r2, r3, d8
 800aa2e:	f7f5 fe0b 	bl	8000648 <__aeabi_dmul>
 800aa32:	4622      	mov	r2, r4
 800aa34:	4606      	mov	r6, r0
 800aa36:	460f      	mov	r7, r1
 800aa38:	462b      	mov	r3, r5
 800aa3a:	ec51 0b19 	vmov	r0, r1, d9
 800aa3e:	f7f5 fe03 	bl	8000648 <__aeabi_dmul>
 800aa42:	4602      	mov	r2, r0
 800aa44:	460b      	mov	r3, r1
 800aa46:	4630      	mov	r0, r6
 800aa48:	4639      	mov	r1, r7
 800aa4a:	f7f5 fc47 	bl	80002dc <__adddf3>
 800aa4e:	4606      	mov	r6, r0
 800aa50:	460f      	mov	r7, r1
 800aa52:	4602      	mov	r2, r0
 800aa54:	460b      	mov	r3, r1
 800aa56:	4640      	mov	r0, r8
 800aa58:	4649      	mov	r1, r9
 800aa5a:	f7f5 fc3f 	bl	80002dc <__adddf3>
 800aa5e:	a33e      	add	r3, pc, #248	; (adr r3, 800ab58 <__ieee754_pow+0x738>)
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	2000      	movs	r0, #0
 800aa66:	4604      	mov	r4, r0
 800aa68:	460d      	mov	r5, r1
 800aa6a:	f7f5 fded 	bl	8000648 <__aeabi_dmul>
 800aa6e:	4642      	mov	r2, r8
 800aa70:	ec41 0b18 	vmov	d8, r0, r1
 800aa74:	464b      	mov	r3, r9
 800aa76:	4620      	mov	r0, r4
 800aa78:	4629      	mov	r1, r5
 800aa7a:	f7f5 fc2d 	bl	80002d8 <__aeabi_dsub>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4630      	mov	r0, r6
 800aa84:	4639      	mov	r1, r7
 800aa86:	f7f5 fc27 	bl	80002d8 <__aeabi_dsub>
 800aa8a:	a335      	add	r3, pc, #212	; (adr r3, 800ab60 <__ieee754_pow+0x740>)
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	f7f5 fdda 	bl	8000648 <__aeabi_dmul>
 800aa94:	a334      	add	r3, pc, #208	; (adr r3, 800ab68 <__ieee754_pow+0x748>)
 800aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	460f      	mov	r7, r1
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	f7f5 fdd1 	bl	8000648 <__aeabi_dmul>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	4630      	mov	r0, r6
 800aaac:	4639      	mov	r1, r7
 800aaae:	f7f5 fc15 	bl	80002dc <__adddf3>
 800aab2:	9a07      	ldr	r2, [sp, #28]
 800aab4:	4b37      	ldr	r3, [pc, #220]	; (800ab94 <__ieee754_pow+0x774>)
 800aab6:	4413      	add	r3, r2
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	f7f5 fc0e 	bl	80002dc <__adddf3>
 800aac0:	4682      	mov	sl, r0
 800aac2:	9805      	ldr	r0, [sp, #20]
 800aac4:	468b      	mov	fp, r1
 800aac6:	f7f5 fd55 	bl	8000574 <__aeabi_i2d>
 800aaca:	9a07      	ldr	r2, [sp, #28]
 800aacc:	4b32      	ldr	r3, [pc, #200]	; (800ab98 <__ieee754_pow+0x778>)
 800aace:	4413      	add	r3, r2
 800aad0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aad4:	4606      	mov	r6, r0
 800aad6:	460f      	mov	r7, r1
 800aad8:	4652      	mov	r2, sl
 800aada:	465b      	mov	r3, fp
 800aadc:	ec51 0b18 	vmov	r0, r1, d8
 800aae0:	f7f5 fbfc 	bl	80002dc <__adddf3>
 800aae4:	4642      	mov	r2, r8
 800aae6:	464b      	mov	r3, r9
 800aae8:	f7f5 fbf8 	bl	80002dc <__adddf3>
 800aaec:	4632      	mov	r2, r6
 800aaee:	463b      	mov	r3, r7
 800aaf0:	f7f5 fbf4 	bl	80002dc <__adddf3>
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	4632      	mov	r2, r6
 800aaf8:	463b      	mov	r3, r7
 800aafa:	4604      	mov	r4, r0
 800aafc:	460d      	mov	r5, r1
 800aafe:	f7f5 fbeb 	bl	80002d8 <__aeabi_dsub>
 800ab02:	4642      	mov	r2, r8
 800ab04:	464b      	mov	r3, r9
 800ab06:	f7f5 fbe7 	bl	80002d8 <__aeabi_dsub>
 800ab0a:	ec53 2b18 	vmov	r2, r3, d8
 800ab0e:	f7f5 fbe3 	bl	80002d8 <__aeabi_dsub>
 800ab12:	4602      	mov	r2, r0
 800ab14:	460b      	mov	r3, r1
 800ab16:	4650      	mov	r0, sl
 800ab18:	4659      	mov	r1, fp
 800ab1a:	e610      	b.n	800a73e <__ieee754_pow+0x31e>
 800ab1c:	2401      	movs	r4, #1
 800ab1e:	e6a1      	b.n	800a864 <__ieee754_pow+0x444>
 800ab20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ab70 <__ieee754_pow+0x750>
 800ab24:	e617      	b.n	800a756 <__ieee754_pow+0x336>
 800ab26:	bf00      	nop
 800ab28:	4a454eef 	.word	0x4a454eef
 800ab2c:	3fca7e28 	.word	0x3fca7e28
 800ab30:	93c9db65 	.word	0x93c9db65
 800ab34:	3fcd864a 	.word	0x3fcd864a
 800ab38:	a91d4101 	.word	0xa91d4101
 800ab3c:	3fd17460 	.word	0x3fd17460
 800ab40:	518f264d 	.word	0x518f264d
 800ab44:	3fd55555 	.word	0x3fd55555
 800ab48:	db6fabff 	.word	0xdb6fabff
 800ab4c:	3fdb6db6 	.word	0x3fdb6db6
 800ab50:	33333303 	.word	0x33333303
 800ab54:	3fe33333 	.word	0x3fe33333
 800ab58:	e0000000 	.word	0xe0000000
 800ab5c:	3feec709 	.word	0x3feec709
 800ab60:	dc3a03fd 	.word	0xdc3a03fd
 800ab64:	3feec709 	.word	0x3feec709
 800ab68:	145b01f5 	.word	0x145b01f5
 800ab6c:	be3e2fe0 	.word	0xbe3e2fe0
 800ab70:	00000000 	.word	0x00000000
 800ab74:	3ff00000 	.word	0x3ff00000
 800ab78:	7ff00000 	.word	0x7ff00000
 800ab7c:	43400000 	.word	0x43400000
 800ab80:	0003988e 	.word	0x0003988e
 800ab84:	000bb679 	.word	0x000bb679
 800ab88:	0800ba40 	.word	0x0800ba40
 800ab8c:	3ff00000 	.word	0x3ff00000
 800ab90:	40080000 	.word	0x40080000
 800ab94:	0800ba60 	.word	0x0800ba60
 800ab98:	0800ba50 	.word	0x0800ba50
 800ab9c:	a3b5      	add	r3, pc, #724	; (adr r3, 800ae74 <__ieee754_pow+0xa54>)
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	4640      	mov	r0, r8
 800aba4:	4649      	mov	r1, r9
 800aba6:	f7f5 fb99 	bl	80002dc <__adddf3>
 800abaa:	4622      	mov	r2, r4
 800abac:	ec41 0b1a 	vmov	d10, r0, r1
 800abb0:	462b      	mov	r3, r5
 800abb2:	4630      	mov	r0, r6
 800abb4:	4639      	mov	r1, r7
 800abb6:	f7f5 fb8f 	bl	80002d8 <__aeabi_dsub>
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	ec51 0b1a 	vmov	r0, r1, d10
 800abc2:	f7f5 ffd1 	bl	8000b68 <__aeabi_dcmpgt>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	f47f ae04 	bne.w	800a7d4 <__ieee754_pow+0x3b4>
 800abcc:	4aa4      	ldr	r2, [pc, #656]	; (800ae60 <__ieee754_pow+0xa40>)
 800abce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800abd2:	4293      	cmp	r3, r2
 800abd4:	f340 8108 	ble.w	800ade8 <__ieee754_pow+0x9c8>
 800abd8:	151b      	asrs	r3, r3, #20
 800abda:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800abde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800abe2:	fa4a f303 	asr.w	r3, sl, r3
 800abe6:	445b      	add	r3, fp
 800abe8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800abec:	4e9d      	ldr	r6, [pc, #628]	; (800ae64 <__ieee754_pow+0xa44>)
 800abee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800abf2:	4116      	asrs	r6, r2
 800abf4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800abf8:	2000      	movs	r0, #0
 800abfa:	ea23 0106 	bic.w	r1, r3, r6
 800abfe:	f1c2 0214 	rsb	r2, r2, #20
 800ac02:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ac06:	fa4a fa02 	asr.w	sl, sl, r2
 800ac0a:	f1bb 0f00 	cmp.w	fp, #0
 800ac0e:	4602      	mov	r2, r0
 800ac10:	460b      	mov	r3, r1
 800ac12:	4620      	mov	r0, r4
 800ac14:	4629      	mov	r1, r5
 800ac16:	bfb8      	it	lt
 800ac18:	f1ca 0a00 	rsblt	sl, sl, #0
 800ac1c:	f7f5 fb5c 	bl	80002d8 <__aeabi_dsub>
 800ac20:	ec41 0b19 	vmov	d9, r0, r1
 800ac24:	4642      	mov	r2, r8
 800ac26:	464b      	mov	r3, r9
 800ac28:	ec51 0b19 	vmov	r0, r1, d9
 800ac2c:	f7f5 fb56 	bl	80002dc <__adddf3>
 800ac30:	a37b      	add	r3, pc, #492	; (adr r3, 800ae20 <__ieee754_pow+0xa00>)
 800ac32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac36:	2000      	movs	r0, #0
 800ac38:	4604      	mov	r4, r0
 800ac3a:	460d      	mov	r5, r1
 800ac3c:	f7f5 fd04 	bl	8000648 <__aeabi_dmul>
 800ac40:	ec53 2b19 	vmov	r2, r3, d9
 800ac44:	4606      	mov	r6, r0
 800ac46:	460f      	mov	r7, r1
 800ac48:	4620      	mov	r0, r4
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	f7f5 fb44 	bl	80002d8 <__aeabi_dsub>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	4640      	mov	r0, r8
 800ac56:	4649      	mov	r1, r9
 800ac58:	f7f5 fb3e 	bl	80002d8 <__aeabi_dsub>
 800ac5c:	a372      	add	r3, pc, #456	; (adr r3, 800ae28 <__ieee754_pow+0xa08>)
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	f7f5 fcf1 	bl	8000648 <__aeabi_dmul>
 800ac66:	a372      	add	r3, pc, #456	; (adr r3, 800ae30 <__ieee754_pow+0xa10>)
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	4680      	mov	r8, r0
 800ac6e:	4689      	mov	r9, r1
 800ac70:	4620      	mov	r0, r4
 800ac72:	4629      	mov	r1, r5
 800ac74:	f7f5 fce8 	bl	8000648 <__aeabi_dmul>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	4640      	mov	r0, r8
 800ac7e:	4649      	mov	r1, r9
 800ac80:	f7f5 fb2c 	bl	80002dc <__adddf3>
 800ac84:	4604      	mov	r4, r0
 800ac86:	460d      	mov	r5, r1
 800ac88:	4602      	mov	r2, r0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	4639      	mov	r1, r7
 800ac90:	f7f5 fb24 	bl	80002dc <__adddf3>
 800ac94:	4632      	mov	r2, r6
 800ac96:	463b      	mov	r3, r7
 800ac98:	4680      	mov	r8, r0
 800ac9a:	4689      	mov	r9, r1
 800ac9c:	f7f5 fb1c 	bl	80002d8 <__aeabi_dsub>
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	4620      	mov	r0, r4
 800aca6:	4629      	mov	r1, r5
 800aca8:	f7f5 fb16 	bl	80002d8 <__aeabi_dsub>
 800acac:	4642      	mov	r2, r8
 800acae:	4606      	mov	r6, r0
 800acb0:	460f      	mov	r7, r1
 800acb2:	464b      	mov	r3, r9
 800acb4:	4640      	mov	r0, r8
 800acb6:	4649      	mov	r1, r9
 800acb8:	f7f5 fcc6 	bl	8000648 <__aeabi_dmul>
 800acbc:	a35e      	add	r3, pc, #376	; (adr r3, 800ae38 <__ieee754_pow+0xa18>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	4604      	mov	r4, r0
 800acc4:	460d      	mov	r5, r1
 800acc6:	f7f5 fcbf 	bl	8000648 <__aeabi_dmul>
 800acca:	a35d      	add	r3, pc, #372	; (adr r3, 800ae40 <__ieee754_pow+0xa20>)
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	f7f5 fb02 	bl	80002d8 <__aeabi_dsub>
 800acd4:	4622      	mov	r2, r4
 800acd6:	462b      	mov	r3, r5
 800acd8:	f7f5 fcb6 	bl	8000648 <__aeabi_dmul>
 800acdc:	a35a      	add	r3, pc, #360	; (adr r3, 800ae48 <__ieee754_pow+0xa28>)
 800acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace2:	f7f5 fafb 	bl	80002dc <__adddf3>
 800ace6:	4622      	mov	r2, r4
 800ace8:	462b      	mov	r3, r5
 800acea:	f7f5 fcad 	bl	8000648 <__aeabi_dmul>
 800acee:	a358      	add	r3, pc, #352	; (adr r3, 800ae50 <__ieee754_pow+0xa30>)
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	f7f5 faf0 	bl	80002d8 <__aeabi_dsub>
 800acf8:	4622      	mov	r2, r4
 800acfa:	462b      	mov	r3, r5
 800acfc:	f7f5 fca4 	bl	8000648 <__aeabi_dmul>
 800ad00:	a355      	add	r3, pc, #340	; (adr r3, 800ae58 <__ieee754_pow+0xa38>)
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	f7f5 fae9 	bl	80002dc <__adddf3>
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	462b      	mov	r3, r5
 800ad0e:	f7f5 fc9b 	bl	8000648 <__aeabi_dmul>
 800ad12:	4602      	mov	r2, r0
 800ad14:	460b      	mov	r3, r1
 800ad16:	4640      	mov	r0, r8
 800ad18:	4649      	mov	r1, r9
 800ad1a:	f7f5 fadd 	bl	80002d8 <__aeabi_dsub>
 800ad1e:	4604      	mov	r4, r0
 800ad20:	460d      	mov	r5, r1
 800ad22:	4602      	mov	r2, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4640      	mov	r0, r8
 800ad28:	4649      	mov	r1, r9
 800ad2a:	f7f5 fc8d 	bl	8000648 <__aeabi_dmul>
 800ad2e:	2200      	movs	r2, #0
 800ad30:	ec41 0b19 	vmov	d9, r0, r1
 800ad34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad38:	4620      	mov	r0, r4
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	f7f5 facc 	bl	80002d8 <__aeabi_dsub>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	ec51 0b19 	vmov	r0, r1, d9
 800ad48:	f7f5 fda8 	bl	800089c <__aeabi_ddiv>
 800ad4c:	4632      	mov	r2, r6
 800ad4e:	4604      	mov	r4, r0
 800ad50:	460d      	mov	r5, r1
 800ad52:	463b      	mov	r3, r7
 800ad54:	4640      	mov	r0, r8
 800ad56:	4649      	mov	r1, r9
 800ad58:	f7f5 fc76 	bl	8000648 <__aeabi_dmul>
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	463b      	mov	r3, r7
 800ad60:	f7f5 fabc 	bl	80002dc <__adddf3>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4620      	mov	r0, r4
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	f7f5 fab4 	bl	80002d8 <__aeabi_dsub>
 800ad70:	4642      	mov	r2, r8
 800ad72:	464b      	mov	r3, r9
 800ad74:	f7f5 fab0 	bl	80002d8 <__aeabi_dsub>
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	493a      	ldr	r1, [pc, #232]	; (800ae68 <__ieee754_pow+0xa48>)
 800ad7e:	2000      	movs	r0, #0
 800ad80:	f7f5 faaa 	bl	80002d8 <__aeabi_dsub>
 800ad84:	ec41 0b10 	vmov	d0, r0, r1
 800ad88:	ee10 3a90 	vmov	r3, s1
 800ad8c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ad90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad94:	da2b      	bge.n	800adee <__ieee754_pow+0x9ce>
 800ad96:	4650      	mov	r0, sl
 800ad98:	f000 f966 	bl	800b068 <scalbn>
 800ad9c:	ec51 0b10 	vmov	r0, r1, d0
 800ada0:	ec53 2b18 	vmov	r2, r3, d8
 800ada4:	f7ff bbed 	b.w	800a582 <__ieee754_pow+0x162>
 800ada8:	4b30      	ldr	r3, [pc, #192]	; (800ae6c <__ieee754_pow+0xa4c>)
 800adaa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800adae:	429e      	cmp	r6, r3
 800adb0:	f77f af0c 	ble.w	800abcc <__ieee754_pow+0x7ac>
 800adb4:	4b2e      	ldr	r3, [pc, #184]	; (800ae70 <__ieee754_pow+0xa50>)
 800adb6:	440b      	add	r3, r1
 800adb8:	4303      	orrs	r3, r0
 800adba:	d009      	beq.n	800add0 <__ieee754_pow+0x9b0>
 800adbc:	ec51 0b18 	vmov	r0, r1, d8
 800adc0:	2200      	movs	r2, #0
 800adc2:	2300      	movs	r3, #0
 800adc4:	f7f5 feb2 	bl	8000b2c <__aeabi_dcmplt>
 800adc8:	3800      	subs	r0, #0
 800adca:	bf18      	it	ne
 800adcc:	2001      	movne	r0, #1
 800adce:	e447      	b.n	800a660 <__ieee754_pow+0x240>
 800add0:	4622      	mov	r2, r4
 800add2:	462b      	mov	r3, r5
 800add4:	f7f5 fa80 	bl	80002d8 <__aeabi_dsub>
 800add8:	4642      	mov	r2, r8
 800adda:	464b      	mov	r3, r9
 800addc:	f7f5 feba 	bl	8000b54 <__aeabi_dcmpge>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	f43f aef3 	beq.w	800abcc <__ieee754_pow+0x7ac>
 800ade6:	e7e9      	b.n	800adbc <__ieee754_pow+0x99c>
 800ade8:	f04f 0a00 	mov.w	sl, #0
 800adec:	e71a      	b.n	800ac24 <__ieee754_pow+0x804>
 800adee:	ec51 0b10 	vmov	r0, r1, d0
 800adf2:	4619      	mov	r1, r3
 800adf4:	e7d4      	b.n	800ada0 <__ieee754_pow+0x980>
 800adf6:	491c      	ldr	r1, [pc, #112]	; (800ae68 <__ieee754_pow+0xa48>)
 800adf8:	2000      	movs	r0, #0
 800adfa:	f7ff bb30 	b.w	800a45e <__ieee754_pow+0x3e>
 800adfe:	2000      	movs	r0, #0
 800ae00:	2100      	movs	r1, #0
 800ae02:	f7ff bb2c 	b.w	800a45e <__ieee754_pow+0x3e>
 800ae06:	4630      	mov	r0, r6
 800ae08:	4639      	mov	r1, r7
 800ae0a:	f7ff bb28 	b.w	800a45e <__ieee754_pow+0x3e>
 800ae0e:	9204      	str	r2, [sp, #16]
 800ae10:	f7ff bb7a 	b.w	800a508 <__ieee754_pow+0xe8>
 800ae14:	2300      	movs	r3, #0
 800ae16:	f7ff bb64 	b.w	800a4e2 <__ieee754_pow+0xc2>
 800ae1a:	bf00      	nop
 800ae1c:	f3af 8000 	nop.w
 800ae20:	00000000 	.word	0x00000000
 800ae24:	3fe62e43 	.word	0x3fe62e43
 800ae28:	fefa39ef 	.word	0xfefa39ef
 800ae2c:	3fe62e42 	.word	0x3fe62e42
 800ae30:	0ca86c39 	.word	0x0ca86c39
 800ae34:	be205c61 	.word	0xbe205c61
 800ae38:	72bea4d0 	.word	0x72bea4d0
 800ae3c:	3e663769 	.word	0x3e663769
 800ae40:	c5d26bf1 	.word	0xc5d26bf1
 800ae44:	3ebbbd41 	.word	0x3ebbbd41
 800ae48:	af25de2c 	.word	0xaf25de2c
 800ae4c:	3f11566a 	.word	0x3f11566a
 800ae50:	16bebd93 	.word	0x16bebd93
 800ae54:	3f66c16c 	.word	0x3f66c16c
 800ae58:	5555553e 	.word	0x5555553e
 800ae5c:	3fc55555 	.word	0x3fc55555
 800ae60:	3fe00000 	.word	0x3fe00000
 800ae64:	000fffff 	.word	0x000fffff
 800ae68:	3ff00000 	.word	0x3ff00000
 800ae6c:	4090cbff 	.word	0x4090cbff
 800ae70:	3f6f3400 	.word	0x3f6f3400
 800ae74:	652b82fe 	.word	0x652b82fe
 800ae78:	3c971547 	.word	0x3c971547

0800ae7c <__ieee754_sqrt>:
 800ae7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae80:	ec55 4b10 	vmov	r4, r5, d0
 800ae84:	4e55      	ldr	r6, [pc, #340]	; (800afdc <__ieee754_sqrt+0x160>)
 800ae86:	43ae      	bics	r6, r5
 800ae88:	ee10 0a10 	vmov	r0, s0
 800ae8c:	ee10 3a10 	vmov	r3, s0
 800ae90:	462a      	mov	r2, r5
 800ae92:	4629      	mov	r1, r5
 800ae94:	d110      	bne.n	800aeb8 <__ieee754_sqrt+0x3c>
 800ae96:	ee10 2a10 	vmov	r2, s0
 800ae9a:	462b      	mov	r3, r5
 800ae9c:	f7f5 fbd4 	bl	8000648 <__aeabi_dmul>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4620      	mov	r0, r4
 800aea6:	4629      	mov	r1, r5
 800aea8:	f7f5 fa18 	bl	80002dc <__adddf3>
 800aeac:	4604      	mov	r4, r0
 800aeae:	460d      	mov	r5, r1
 800aeb0:	ec45 4b10 	vmov	d0, r4, r5
 800aeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb8:	2d00      	cmp	r5, #0
 800aeba:	dc10      	bgt.n	800aede <__ieee754_sqrt+0x62>
 800aebc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aec0:	4330      	orrs	r0, r6
 800aec2:	d0f5      	beq.n	800aeb0 <__ieee754_sqrt+0x34>
 800aec4:	b15d      	cbz	r5, 800aede <__ieee754_sqrt+0x62>
 800aec6:	ee10 2a10 	vmov	r2, s0
 800aeca:	462b      	mov	r3, r5
 800aecc:	ee10 0a10 	vmov	r0, s0
 800aed0:	f7f5 fa02 	bl	80002d8 <__aeabi_dsub>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	f7f5 fce0 	bl	800089c <__aeabi_ddiv>
 800aedc:	e7e6      	b.n	800aeac <__ieee754_sqrt+0x30>
 800aede:	1512      	asrs	r2, r2, #20
 800aee0:	d074      	beq.n	800afcc <__ieee754_sqrt+0x150>
 800aee2:	07d4      	lsls	r4, r2, #31
 800aee4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800aee8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800aeec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800aef0:	bf5e      	ittt	pl
 800aef2:	0fda      	lsrpl	r2, r3, #31
 800aef4:	005b      	lslpl	r3, r3, #1
 800aef6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800aefa:	2400      	movs	r4, #0
 800aefc:	0fda      	lsrs	r2, r3, #31
 800aefe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800af02:	107f      	asrs	r7, r7, #1
 800af04:	005b      	lsls	r3, r3, #1
 800af06:	2516      	movs	r5, #22
 800af08:	4620      	mov	r0, r4
 800af0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800af0e:	1886      	adds	r6, r0, r2
 800af10:	428e      	cmp	r6, r1
 800af12:	bfde      	ittt	le
 800af14:	1b89      	suble	r1, r1, r6
 800af16:	18b0      	addle	r0, r6, r2
 800af18:	18a4      	addle	r4, r4, r2
 800af1a:	0049      	lsls	r1, r1, #1
 800af1c:	3d01      	subs	r5, #1
 800af1e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800af22:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800af26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af2a:	d1f0      	bne.n	800af0e <__ieee754_sqrt+0x92>
 800af2c:	462a      	mov	r2, r5
 800af2e:	f04f 0e20 	mov.w	lr, #32
 800af32:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800af36:	4281      	cmp	r1, r0
 800af38:	eb06 0c05 	add.w	ip, r6, r5
 800af3c:	dc02      	bgt.n	800af44 <__ieee754_sqrt+0xc8>
 800af3e:	d113      	bne.n	800af68 <__ieee754_sqrt+0xec>
 800af40:	459c      	cmp	ip, r3
 800af42:	d811      	bhi.n	800af68 <__ieee754_sqrt+0xec>
 800af44:	f1bc 0f00 	cmp.w	ip, #0
 800af48:	eb0c 0506 	add.w	r5, ip, r6
 800af4c:	da43      	bge.n	800afd6 <__ieee754_sqrt+0x15a>
 800af4e:	2d00      	cmp	r5, #0
 800af50:	db41      	blt.n	800afd6 <__ieee754_sqrt+0x15a>
 800af52:	f100 0801 	add.w	r8, r0, #1
 800af56:	1a09      	subs	r1, r1, r0
 800af58:	459c      	cmp	ip, r3
 800af5a:	bf88      	it	hi
 800af5c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800af60:	eba3 030c 	sub.w	r3, r3, ip
 800af64:	4432      	add	r2, r6
 800af66:	4640      	mov	r0, r8
 800af68:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800af6c:	f1be 0e01 	subs.w	lr, lr, #1
 800af70:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800af74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800af7c:	d1db      	bne.n	800af36 <__ieee754_sqrt+0xba>
 800af7e:	430b      	orrs	r3, r1
 800af80:	d006      	beq.n	800af90 <__ieee754_sqrt+0x114>
 800af82:	1c50      	adds	r0, r2, #1
 800af84:	bf13      	iteet	ne
 800af86:	3201      	addne	r2, #1
 800af88:	3401      	addeq	r4, #1
 800af8a:	4672      	moveq	r2, lr
 800af8c:	f022 0201 	bicne.w	r2, r2, #1
 800af90:	1063      	asrs	r3, r4, #1
 800af92:	0852      	lsrs	r2, r2, #1
 800af94:	07e1      	lsls	r1, r4, #31
 800af96:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800af9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800af9e:	bf48      	it	mi
 800afa0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800afa4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800afa8:	4614      	mov	r4, r2
 800afaa:	e781      	b.n	800aeb0 <__ieee754_sqrt+0x34>
 800afac:	0ad9      	lsrs	r1, r3, #11
 800afae:	3815      	subs	r0, #21
 800afb0:	055b      	lsls	r3, r3, #21
 800afb2:	2900      	cmp	r1, #0
 800afb4:	d0fa      	beq.n	800afac <__ieee754_sqrt+0x130>
 800afb6:	02cd      	lsls	r5, r1, #11
 800afb8:	d50a      	bpl.n	800afd0 <__ieee754_sqrt+0x154>
 800afba:	f1c2 0420 	rsb	r4, r2, #32
 800afbe:	fa23 f404 	lsr.w	r4, r3, r4
 800afc2:	1e55      	subs	r5, r2, #1
 800afc4:	4093      	lsls	r3, r2
 800afc6:	4321      	orrs	r1, r4
 800afc8:	1b42      	subs	r2, r0, r5
 800afca:	e78a      	b.n	800aee2 <__ieee754_sqrt+0x66>
 800afcc:	4610      	mov	r0, r2
 800afce:	e7f0      	b.n	800afb2 <__ieee754_sqrt+0x136>
 800afd0:	0049      	lsls	r1, r1, #1
 800afd2:	3201      	adds	r2, #1
 800afd4:	e7ef      	b.n	800afb6 <__ieee754_sqrt+0x13a>
 800afd6:	4680      	mov	r8, r0
 800afd8:	e7bd      	b.n	800af56 <__ieee754_sqrt+0xda>
 800afda:	bf00      	nop
 800afdc:	7ff00000 	.word	0x7ff00000

0800afe0 <with_errno>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	4604      	mov	r4, r0
 800afe4:	460d      	mov	r5, r1
 800afe6:	4616      	mov	r6, r2
 800afe8:	f7fa fbee 	bl	80057c8 <__errno>
 800afec:	4629      	mov	r1, r5
 800afee:	6006      	str	r6, [r0, #0]
 800aff0:	4620      	mov	r0, r4
 800aff2:	bd70      	pop	{r4, r5, r6, pc}

0800aff4 <xflow>:
 800aff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aff6:	4614      	mov	r4, r2
 800aff8:	461d      	mov	r5, r3
 800affa:	b108      	cbz	r0, 800b000 <xflow+0xc>
 800affc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b000:	e9cd 2300 	strd	r2, r3, [sp]
 800b004:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b008:	4620      	mov	r0, r4
 800b00a:	4629      	mov	r1, r5
 800b00c:	f7f5 fb1c 	bl	8000648 <__aeabi_dmul>
 800b010:	2222      	movs	r2, #34	; 0x22
 800b012:	b003      	add	sp, #12
 800b014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b018:	f7ff bfe2 	b.w	800afe0 <with_errno>

0800b01c <__math_uflow>:
 800b01c:	b508      	push	{r3, lr}
 800b01e:	2200      	movs	r2, #0
 800b020:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b024:	f7ff ffe6 	bl	800aff4 <xflow>
 800b028:	ec41 0b10 	vmov	d0, r0, r1
 800b02c:	bd08      	pop	{r3, pc}

0800b02e <__math_oflow>:
 800b02e:	b508      	push	{r3, lr}
 800b030:	2200      	movs	r2, #0
 800b032:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b036:	f7ff ffdd 	bl	800aff4 <xflow>
 800b03a:	ec41 0b10 	vmov	d0, r0, r1
 800b03e:	bd08      	pop	{r3, pc}

0800b040 <fabs>:
 800b040:	ec51 0b10 	vmov	r0, r1, d0
 800b044:	ee10 2a10 	vmov	r2, s0
 800b048:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b04c:	ec43 2b10 	vmov	d0, r2, r3
 800b050:	4770      	bx	lr

0800b052 <finite>:
 800b052:	b082      	sub	sp, #8
 800b054:	ed8d 0b00 	vstr	d0, [sp]
 800b058:	9801      	ldr	r0, [sp, #4]
 800b05a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b05e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b062:	0fc0      	lsrs	r0, r0, #31
 800b064:	b002      	add	sp, #8
 800b066:	4770      	bx	lr

0800b068 <scalbn>:
 800b068:	b570      	push	{r4, r5, r6, lr}
 800b06a:	ec55 4b10 	vmov	r4, r5, d0
 800b06e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b072:	4606      	mov	r6, r0
 800b074:	462b      	mov	r3, r5
 800b076:	b99a      	cbnz	r2, 800b0a0 <scalbn+0x38>
 800b078:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b07c:	4323      	orrs	r3, r4
 800b07e:	d036      	beq.n	800b0ee <scalbn+0x86>
 800b080:	4b39      	ldr	r3, [pc, #228]	; (800b168 <scalbn+0x100>)
 800b082:	4629      	mov	r1, r5
 800b084:	ee10 0a10 	vmov	r0, s0
 800b088:	2200      	movs	r2, #0
 800b08a:	f7f5 fadd 	bl	8000648 <__aeabi_dmul>
 800b08e:	4b37      	ldr	r3, [pc, #220]	; (800b16c <scalbn+0x104>)
 800b090:	429e      	cmp	r6, r3
 800b092:	4604      	mov	r4, r0
 800b094:	460d      	mov	r5, r1
 800b096:	da10      	bge.n	800b0ba <scalbn+0x52>
 800b098:	a32b      	add	r3, pc, #172	; (adr r3, 800b148 <scalbn+0xe0>)
 800b09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09e:	e03a      	b.n	800b116 <scalbn+0xae>
 800b0a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b0a4:	428a      	cmp	r2, r1
 800b0a6:	d10c      	bne.n	800b0c2 <scalbn+0x5a>
 800b0a8:	ee10 2a10 	vmov	r2, s0
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	f7f5 f914 	bl	80002dc <__adddf3>
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	460d      	mov	r5, r1
 800b0b8:	e019      	b.n	800b0ee <scalbn+0x86>
 800b0ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b0be:	460b      	mov	r3, r1
 800b0c0:	3a36      	subs	r2, #54	; 0x36
 800b0c2:	4432      	add	r2, r6
 800b0c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b0c8:	428a      	cmp	r2, r1
 800b0ca:	dd08      	ble.n	800b0de <scalbn+0x76>
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	a120      	add	r1, pc, #128	; (adr r1, 800b150 <scalbn+0xe8>)
 800b0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d4:	da1c      	bge.n	800b110 <scalbn+0xa8>
 800b0d6:	a120      	add	r1, pc, #128	; (adr r1, 800b158 <scalbn+0xf0>)
 800b0d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0dc:	e018      	b.n	800b110 <scalbn+0xa8>
 800b0de:	2a00      	cmp	r2, #0
 800b0e0:	dd08      	ble.n	800b0f4 <scalbn+0x8c>
 800b0e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b0ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b0ee:	ec45 4b10 	vmov	d0, r4, r5
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b0f8:	da19      	bge.n	800b12e <scalbn+0xc6>
 800b0fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b0fe:	429e      	cmp	r6, r3
 800b100:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b104:	dd0a      	ble.n	800b11c <scalbn+0xb4>
 800b106:	a112      	add	r1, pc, #72	; (adr r1, 800b150 <scalbn+0xe8>)
 800b108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1e2      	bne.n	800b0d6 <scalbn+0x6e>
 800b110:	a30f      	add	r3, pc, #60	; (adr r3, 800b150 <scalbn+0xe8>)
 800b112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b116:	f7f5 fa97 	bl	8000648 <__aeabi_dmul>
 800b11a:	e7cb      	b.n	800b0b4 <scalbn+0x4c>
 800b11c:	a10a      	add	r1, pc, #40	; (adr r1, 800b148 <scalbn+0xe0>)
 800b11e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d0b8      	beq.n	800b098 <scalbn+0x30>
 800b126:	a10e      	add	r1, pc, #56	; (adr r1, 800b160 <scalbn+0xf8>)
 800b128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b12c:	e7b4      	b.n	800b098 <scalbn+0x30>
 800b12e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b132:	3236      	adds	r2, #54	; 0x36
 800b134:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b138:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b13c:	4620      	mov	r0, r4
 800b13e:	4b0c      	ldr	r3, [pc, #48]	; (800b170 <scalbn+0x108>)
 800b140:	2200      	movs	r2, #0
 800b142:	e7e8      	b.n	800b116 <scalbn+0xae>
 800b144:	f3af 8000 	nop.w
 800b148:	c2f8f359 	.word	0xc2f8f359
 800b14c:	01a56e1f 	.word	0x01a56e1f
 800b150:	8800759c 	.word	0x8800759c
 800b154:	7e37e43c 	.word	0x7e37e43c
 800b158:	8800759c 	.word	0x8800759c
 800b15c:	fe37e43c 	.word	0xfe37e43c
 800b160:	c2f8f359 	.word	0xc2f8f359
 800b164:	81a56e1f 	.word	0x81a56e1f
 800b168:	43500000 	.word	0x43500000
 800b16c:	ffff3cb0 	.word	0xffff3cb0
 800b170:	3c900000 	.word	0x3c900000

0800b174 <_init>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	bf00      	nop
 800b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17a:	bc08      	pop	{r3}
 800b17c:	469e      	mov	lr, r3
 800b17e:	4770      	bx	lr

0800b180 <_fini>:
 800b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b182:	bf00      	nop
 800b184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b186:	bc08      	pop	{r3}
 800b188:	469e      	mov	lr, r3
 800b18a:	4770      	bx	lr
