
TP_Capteur_Chaine_de_Mesure_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a4c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000093c  08009c30  08009c30  00019c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a56c  0800a56c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a56c  0800a56c  0001a56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a574  0800a574  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a574  0800a574  0001a574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a578  0800a578  0001a578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a57c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200001e0  0800a75c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  0800a75c  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119f1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002750  00000000  00000000  00031c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00034358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  000350d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ecba  00000000  00000000  00035d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ddb  00000000  00000000  000549fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb830  00000000  00000000  000667d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122005  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d48  00000000  00000000  00122058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009c14 	.word	0x08009c14

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08009c14 	.word	0x08009c14

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <SearchBMP280>:
 * @param bcom
 *
 * @retval None
 */
void SearchBMP280()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8
	int result;
	uint8_t bcom[MAX_COM_BUF];

	bcom[0] = BMP_ID_REG;
 800104e:	23d0      	movs	r3, #208	; 0xd0
 8001050:	713b      	strb	r3, [r7, #4]
	printf("Recherche Capteur BMP280\r\n\n");
 8001052:	481e      	ldr	r0, [pc, #120]	; (80010cc <SearchBMP280+0x84>)
 8001054:	f004 ff9a 	bl	8005f8c <puts>

	result = HAL_I2C_Master_Transmit(&hi2c1, BMP_ADDR, bcom, 1, HAL_TIMEOUT); //bcom = addresse de bcom[0]
 8001058:	1d3a      	adds	r2, r7, #4
 800105a:	2303      	movs	r3, #3
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	21ee      	movs	r1, #238	; 0xee
 8001062:	481b      	ldr	r0, [pc, #108]	; (80010d0 <SearchBMP280+0x88>)
 8001064:	f001 f930 	bl	80022c8 <HAL_I2C_Master_Transmit>
 8001068:	4603      	mov	r3, r0
 800106a:	60fb      	str	r3, [r7, #12]
	if(result != HAL_OK)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <SearchBMP280+0x34>
		{
			printf("Error I2C Transmit SearchBMP280\r\n");
 8001072:	4818      	ldr	r0, [pc, #96]	; (80010d4 <SearchBMP280+0x8c>)
 8001074:	f004 ff8a 	bl	8005f8c <puts>
			Error_Handler();
 8001078:	f000 fb78 	bl	800176c <Error_Handler>
		}

	result = HAL_I2C_Master_Receive(&hi2c1, BMP_ADDR, bcom+1, 1, HAL_TIMEOUT);
 800107c:	1d3a      	adds	r2, r7, #4
 800107e:	3201      	adds	r2, #1
 8001080:	2303      	movs	r3, #3
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	21ee      	movs	r1, #238	; 0xee
 8001088:	4811      	ldr	r0, [pc, #68]	; (80010d0 <SearchBMP280+0x88>)
 800108a:	f001 fa11 	bl	80024b0 <HAL_I2C_Master_Receive>
 800108e:	4603      	mov	r3, r0
 8001090:	60fb      	str	r3, [r7, #12]
	if(result != HAL_OK)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <SearchBMP280+0x5a>
		{
			printf("Error I2C Receive SearchBMP280\r\n");
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <SearchBMP280+0x90>)
 800109a:	f004 ff77 	bl	8005f8c <puts>
			Error_Handler();
 800109e:	f000 fb65 	bl	800176c <Error_Handler>
		}

	printf("Registre : %d et contenu %d\r\n\n", bcom[0], bcom[1]);
 80010a2:	793b      	ldrb	r3, [r7, #4]
 80010a4:	4619      	mov	r1, r3
 80010a6:	797b      	ldrb	r3, [r7, #5]
 80010a8:	461a      	mov	r2, r3
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <SearchBMP280+0x94>)
 80010ac:	f004 fed2 	bl	8005e54 <iprintf>
	if (bcom[1]==BMP_WHO_AM_I_ID_VAL) printf("Capteur BMP280 trouve\r\n\n");
 80010b0:	797b      	ldrb	r3, [r7, #5]
 80010b2:	2b58      	cmp	r3, #88	; 0x58
 80010b4:	d103      	bne.n	80010be <SearchBMP280+0x76>
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <SearchBMP280+0x98>)
 80010b8:	f004 ff68 	bl	8005f8c <puts>
	else printf("Error : Capteur non trouve, verifier addresse ID_REG\r\n\n\n");
}
 80010bc:	e002      	b.n	80010c4 <SearchBMP280+0x7c>
	else printf("Error : Capteur non trouve, verifier addresse ID_REG\r\n\n\n");
 80010be:	4809      	ldr	r0, [pc, #36]	; (80010e4 <SearchBMP280+0x9c>)
 80010c0:	f004 ff64 	bl	8005f8c <puts>
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	08009c30 	.word	0x08009c30
 80010d0:	200001fc 	.word	0x200001fc
 80010d4:	08009c4c 	.word	0x08009c4c
 80010d8:	08009c70 	.word	0x08009c70
 80010dc:	08009c90 	.word	0x08009c90
 80010e0:	08009cb0 	.word	0x08009cb0
 80010e4:	08009cc8 	.word	0x08009cc8

080010e8 <SearchMPU9250>:
 * @param bcom (uint8)
 *
 * @retval None
 */
void SearchMPU9250()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af02      	add	r7, sp, #8
	  int result;
	  uint8_t bcom[MAX_COM_BUF];

	  bcom[0] = MPU_ID_REG;
 80010ee:	2375      	movs	r3, #117	; 0x75
 80010f0:	713b      	strb	r3, [r7, #4]
	  //Ici je vais envoyer à l'adresse hardware un handshake pr lui demander la valeur qu'il a à l'adresse WHO_AMI_I
	  printf("Recherche Capteur MPU9250\r\n\n");
 80010f2:	481e      	ldr	r0, [pc, #120]	; (800116c <SearchMPU9250+0x84>)
 80010f4:	f004 ff4a 	bl	8005f8c <puts>

	  result = HAL_I2C_Master_Transmit(&hi2c1, MPU_ADDR, bcom, 1, HAL_TIMEOUT); //bcom = addresse de bcom[0]
 80010f8:	1d3a      	adds	r2, r7, #4
 80010fa:	2303      	movs	r3, #3
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	21d0      	movs	r1, #208	; 0xd0
 8001102:	481b      	ldr	r0, [pc, #108]	; (8001170 <SearchMPU9250+0x88>)
 8001104:	f001 f8e0 	bl	80022c8 <HAL_I2C_Master_Transmit>
 8001108:	4603      	mov	r3, r0
 800110a:	60fb      	str	r3, [r7, #12]
	  if(result != HAL_OK)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <SearchMPU9250+0x34>
		{
		  printf("Error I2C Transmit SearchMPU9250\r\n");
 8001112:	4818      	ldr	r0, [pc, #96]	; (8001174 <SearchMPU9250+0x8c>)
 8001114:	f004 ff3a 	bl	8005f8c <puts>
		  Error_Handler();
 8001118:	f000 fb28 	bl	800176c <Error_Handler>
		}

	  result = HAL_I2C_Master_Receive(&hi2c1, MPU_ADDR, bcom+1, 1, HAL_TIMEOUT);
 800111c:	1d3a      	adds	r2, r7, #4
 800111e:	3201      	adds	r2, #1
 8001120:	2303      	movs	r3, #3
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	21d0      	movs	r1, #208	; 0xd0
 8001128:	4811      	ldr	r0, [pc, #68]	; (8001170 <SearchMPU9250+0x88>)
 800112a:	f001 f9c1 	bl	80024b0 <HAL_I2C_Master_Receive>
 800112e:	4603      	mov	r3, r0
 8001130:	60fb      	str	r3, [r7, #12]
	  if(result != HAL_OK)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <SearchMPU9250+0x5a>
	  {
	  	printf("Error I2C Receive SearchMPU9250\r\n");
 8001138:	480f      	ldr	r0, [pc, #60]	; (8001178 <SearchMPU9250+0x90>)
 800113a:	f004 ff27 	bl	8005f8c <puts>
	  	Error_Handler();
 800113e:	f000 fb15 	bl	800176c <Error_Handler>
	  }

	  printf("En decimal, Registre : %d et contenu %d\r\n\n", bcom[0], bcom[1]);
 8001142:	793b      	ldrb	r3, [r7, #4]
 8001144:	4619      	mov	r1, r3
 8001146:	797b      	ldrb	r3, [r7, #5]
 8001148:	461a      	mov	r2, r3
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <SearchMPU9250+0x94>)
 800114c:	f004 fe82 	bl	8005e54 <iprintf>
	  if (bcom[1]==MPU_WHO_AM_I_ID_VAL) printf("Capteur MPU9250 trouve\r\n\n");
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	2b71      	cmp	r3, #113	; 0x71
 8001154:	d103      	bne.n	800115e <SearchMPU9250+0x76>
 8001156:	480a      	ldr	r0, [pc, #40]	; (8001180 <SearchMPU9250+0x98>)
 8001158:	f004 ff18 	bl	8005f8c <puts>
	  else printf("Error : Capteur non trouve, verifier addresse WHO_AM_I_MPU9250\r\n\n\n");
}
 800115c:	e002      	b.n	8001164 <SearchMPU9250+0x7c>
	  else printf("Error : Capteur non trouve, verifier addresse WHO_AM_I_MPU9250\r\n\n\n");
 800115e:	4809      	ldr	r0, [pc, #36]	; (8001184 <SearchMPU9250+0x9c>)
 8001160:	f004 ff14 	bl	8005f8c <puts>
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	08009d00 	.word	0x08009d00
 8001170:	200001fc 	.word	0x200001fc
 8001174:	08009d1c 	.word	0x08009d1c
 8001178:	08009d40 	.word	0x08009d40
 800117c:	08009d64 	.word	0x08009d64
 8001180:	08009d90 	.word	0x08009d90
 8001184:	08009dac 	.word	0x08009dac

08001188 <TestSensorOnI2C>:
 * @param None
 *
 * @retval None
 */
void TestSensorOnI2C(int * tab)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	 int u = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

	 printf("debut de lecture du bus I2c\r\n\n");
 8001194:	4818      	ldr	r0, [pc, #96]	; (80011f8 <TestSensorOnI2C+0x70>)
 8001196:	f004 fef9 	bl	8005f8c <puts>
	  for(int i =0; i< 256; i++)
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	e021      	b.n	80011e4 <TestSensorOnI2C+0x5c>
	  {
		  int result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i),2,2);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	b299      	uxth	r1, r3
 80011a4:	2302      	movs	r3, #2
 80011a6:	2202      	movs	r2, #2
 80011a8:	4814      	ldr	r0, [pc, #80]	; (80011fc <TestSensorOnI2C+0x74>)
 80011aa:	f001 fca5 	bl	8002af8 <HAL_I2C_IsDeviceReady>
 80011ae:	4603      	mov	r3, r0
 80011b0:	60fb      	str	r3, [r7, #12]
		  if (result != HAL_OK)//HAL_ERROR or HAL_TIMEOUT
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <TestSensorOnI2C+0x36>
		  {
			  printf("."); //No ACKreceived at the address
 80011b8:	202e      	movs	r0, #46	; 0x2e
 80011ba:	f004 fe63 	bl	8005e84 <putchar>
		  }
		  if (result == HAL_OK)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10c      	bne.n	80011de <TestSensorOnI2C+0x56>
		  {
			  tab[u] = i;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
			  u++;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
			  printf("0x%X",i); //Received an ACK at the address
 80011d6:	6939      	ldr	r1, [r7, #16]
 80011d8:	4809      	ldr	r0, [pc, #36]	; (8001200 <TestSensorOnI2C+0x78>)
 80011da:	f004 fe3b 	bl	8005e54 <iprintf>
	  for(int i =0; i< 256; i++)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	3301      	adds	r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	2bff      	cmp	r3, #255	; 0xff
 80011e8:	ddda      	ble.n	80011a0 <TestSensorOnI2C+0x18>
		  }
	  }
	  printf("\r\n\nfin de lecture du bus I2C\r\n\n\n");
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <TestSensorOnI2C+0x7c>)
 80011ec:	f004 fece 	bl	8005f8c <puts>
}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	08009df0 	.word	0x08009df0
 80011fc:	200001fc 	.word	0x200001fc
 8001200:	08009e10 	.word	0x08009e10
 8001204:	08009e18 	.word	0x08009e18

08001208 <PrintTab>:
 * @param tab
 *
 * @retval None
 */
void PrintTab(int * tab)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	printf("les adresses detectees sont :\r\n");
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <PrintTab+0x58>)
 8001212:	f004 febb 	bl	8005f8c <puts>
	for(int i = 0; i<8; i++)
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e016      	b.n	800124a <PrintTab+0x42>
	{
		if(tab[i]!=0) printf("%d\r\n", tab[i]);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d009      	beq.n	800123e <PrintTab+0x36>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	480b      	ldr	r0, [pc, #44]	; (8001264 <PrintTab+0x5c>)
 8001238:	f004 fe0c 	bl	8005e54 <iprintf>
 800123c:	e002      	b.n	8001244 <PrintTab+0x3c>
		else printf("NULL\r\n");
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <PrintTab+0x60>)
 8001240:	f004 fea4 	bl	8005f8c <puts>
	for(int i = 0; i<8; i++)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3301      	adds	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b07      	cmp	r3, #7
 800124e:	dde5      	ble.n	800121c <PrintTab+0x14>
	}

	printf("Rappel : \r\nLes adresses paires sont en ecritures\r\n"
 8001250:	4806      	ldr	r0, [pc, #24]	; (800126c <PrintTab+0x64>)
 8001252:	f004 fe9b 	bl	8005f8c <puts>
			"les adresses impaires sont en lecture\r\n\n");

}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	08009e38 	.word	0x08009e38
 8001264:	08009e58 	.word	0x08009e58
 8001268:	08009e60 	.word	0x08009e60
 800126c:	08009e68 	.word	0x08009e68

08001270 <Init_IMU_10DOF>:
 * @param i2c_handle
 *
 * @retval None
 */
void Init_IMU_10DOF(I2C_HandleTypeDef* i2c_handle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af04      	add	r7, sp, #16
 8001276:	6078      	str	r0, [r7, #4]
	int result;
	uint8_t bcom[MAX_COM_BUF];


	//HW Reset
	printf("debut reset value\r\n");
 8001278:	484c      	ldr	r0, [pc, #304]	; (80013ac <Init_IMU_10DOF+0x13c>)
 800127a:	f004 fe87 	bl	8005f8c <puts>


	printf("MPU\r\n");
 800127e:	484c      	ldr	r0, [pc, #304]	; (80013b0 <Init_IMU_10DOF+0x140>)
 8001280:	f004 fe84 	bl	8005f8c <puts>

	bcom[0] = MPU_RESET_VALUE;
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR, PWR_MGMT_1,1, bcom, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	2301      	movs	r3, #1
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	226b      	movs	r2, #107	; 0x6b
 800129c:	21d0      	movs	r1, #208	; 0xd0
 800129e:	4845      	ldr	r0, [pc, #276]	; (80013b4 <Init_IMU_10DOF+0x144>)
 80012a0:	f001 f9fc 	bl	800269c <HAL_I2C_Mem_Write>
 80012a4:	4603      	mov	r3, r0
 80012a6:	617b      	str	r3, [r7, #20]
	if(result != HAL_OK)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d004      	beq.n	80012b8 <Init_IMU_10DOF+0x48>
	{
		printf("Error I2C Mem Write Init_IMU_10_DOF Reset MPU\r\n");
 80012ae:	4842      	ldr	r0, [pc, #264]	; (80013b8 <Init_IMU_10DOF+0x148>)
 80012b0:	f004 fe6c 	bl	8005f8c <puts>
		Error_Handler();
 80012b4:	f000 fa5a 	bl	800176c <Error_Handler>
	}


	HAL_Delay(100); //laisse le temps d'effacer tous les registres
 80012b8:	2064      	movs	r0, #100	; 0x64
 80012ba:	f000 fcd5 	bl	8001c68 <HAL_Delay>


	result = HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR, PWR_MGMT_1,1, bcom+1, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	3301      	adds	r3, #1
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	9202      	str	r2, [sp, #8]
 80012ca:	2201      	movs	r2, #1
 80012cc:	9201      	str	r2, [sp, #4]
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2301      	movs	r3, #1
 80012d2:	226b      	movs	r2, #107	; 0x6b
 80012d4:	21d0      	movs	r1, #208	; 0xd0
 80012d6:	4837      	ldr	r0, [pc, #220]	; (80013b4 <Init_IMU_10DOF+0x144>)
 80012d8:	f001 faf4 	bl	80028c4 <HAL_I2C_Mem_Read>
 80012dc:	4603      	mov	r3, r0
 80012de:	617b      	str	r3, [r7, #20]
	{
		printf("Error I2C Mem Read Init_IMU_10_DOF Reset MPU\r\n");
		printf("result = %d\r\n", result);
		Error_Handler();
	}*/
	printf("reset value MPU = 0x%x\r\n",bcom[1]);
 80012e0:	7b7b      	ldrb	r3, [r7, #13]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4835      	ldr	r0, [pc, #212]	; (80013bc <Init_IMU_10DOF+0x14c>)
 80012e6:	f004 fdb5 	bl	8005e54 <iprintf>


	bcom[0] = 0x01; //choix de la PLL donnant le plus de precision
 80012ea:	2301      	movs	r3, #1
 80012ec:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR, PWR_MGMT_1,1, bcom, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	9302      	str	r3, [sp, #8]
 80012f4:	2301      	movs	r3, #1
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	226b      	movs	r2, #107	; 0x6b
 8001302:	21d0      	movs	r1, #208	; 0xd0
 8001304:	482b      	ldr	r0, [pc, #172]	; (80013b4 <Init_IMU_10DOF+0x144>)
 8001306:	f001 f9c9 	bl	800269c <HAL_I2C_Mem_Write>
 800130a:	4603      	mov	r3, r0
 800130c:	617b      	str	r3, [r7, #20]
	if(result != HAL_OK)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <Init_IMU_10DOF+0xae>
	{
		printf("Error I2C Mem Write Init_IMU_10_DOF Reset MPU\r\n");
 8001314:	4828      	ldr	r0, [pc, #160]	; (80013b8 <Init_IMU_10DOF+0x148>)
 8001316:	f004 fe39 	bl	8005f8c <puts>
		Error_Handler();
 800131a:	f000 fa27 	bl	800176c <Error_Handler>
	}




	printf("BMP\r\n");
 800131e:	4828      	ldr	r0, [pc, #160]	; (80013c0 <Init_IMU_10DOF+0x150>)
 8001320:	f004 fe34 	bl	8005f8c <puts>


	bcom[0] = BMP_RESET_VALUE;
 8001324:	23b6      	movs	r3, #182	; 0xb6
 8001326:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Mem_Write(&hi2c1, BMP_ADDR, PWR_MGMT_1,1, bcom, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2301      	movs	r3, #1
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	226b      	movs	r2, #107	; 0x6b
 800133c:	21ee      	movs	r1, #238	; 0xee
 800133e:	481d      	ldr	r0, [pc, #116]	; (80013b4 <Init_IMU_10DOF+0x144>)
 8001340:	f001 f9ac 	bl	800269c <HAL_I2C_Mem_Write>
 8001344:	4603      	mov	r3, r0
 8001346:	617b      	str	r3, [r7, #20]
	if(result != HAL_OK)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <Init_IMU_10DOF+0xe8>
	{
		printf("Error I2C Mem Write Init_IMU_10_DOF Reset BMP\r\n");
 800134e:	481d      	ldr	r0, [pc, #116]	; (80013c4 <Init_IMU_10DOF+0x154>)
 8001350:	f004 fe1c 	bl	8005f8c <puts>
		Error_Handler();
 8001354:	f000 fa0a 	bl	800176c <Error_Handler>
	}
	result = HAL_I2C_Mem_Read(&hi2c1, BMP_ADDR, PWR_MGMT_1,1, bcom+1, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	3301      	adds	r3, #1
 800135e:	f04f 32ff 	mov.w	r2, #4294967295
 8001362:	9202      	str	r2, [sp, #8]
 8001364:	2201      	movs	r2, #1
 8001366:	9201      	str	r2, [sp, #4]
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	226b      	movs	r2, #107	; 0x6b
 800136e:	21ee      	movs	r1, #238	; 0xee
 8001370:	4810      	ldr	r0, [pc, #64]	; (80013b4 <Init_IMU_10DOF+0x144>)
 8001372:	f001 faa7 	bl	80028c4 <HAL_I2C_Mem_Read>
 8001376:	4603      	mov	r3, r0
 8001378:	617b      	str	r3, [r7, #20]
	if(result != HAL_OK)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <Init_IMU_10DOF+0x122>
	{
		printf("Error I2C Mem Read Init_IMU_10_DOF Reset BMP\r\n");
 8001380:	4811      	ldr	r0, [pc, #68]	; (80013c8 <Init_IMU_10DOF+0x158>)
 8001382:	f004 fe03 	bl	8005f8c <puts>
		printf("result = %d\r\n", result);
 8001386:	6979      	ldr	r1, [r7, #20]
 8001388:	4810      	ldr	r0, [pc, #64]	; (80013cc <Init_IMU_10DOF+0x15c>)
 800138a:	f004 fd63 	bl	8005e54 <iprintf>
		Error_Handler();
 800138e:	f000 f9ed 	bl	800176c <Error_Handler>
	}
	printf("reset value BMP = 0x%x\r\n",bcom[1]);
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	4619      	mov	r1, r3
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <Init_IMU_10DOF+0x160>)
 8001398:	f004 fd5c 	bl	8005e54 <iprintf>


	printf("\nfin reset value\r\n\n");
 800139c:	480d      	ldr	r0, [pc, #52]	; (80013d4 <Init_IMU_10DOF+0x164>)
 800139e:	f004 fdf5 	bl	8005f8c <puts>


}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	08009ec4 	.word	0x08009ec4
 80013b0:	08009ed8 	.word	0x08009ed8
 80013b4:	200001fc 	.word	0x200001fc
 80013b8:	08009ee0 	.word	0x08009ee0
 80013bc:	08009f10 	.word	0x08009f10
 80013c0:	08009f2c 	.word	0x08009f2c
 80013c4:	08009f34 	.word	0x08009f34
 80013c8:	08009f64 	.word	0x08009f64
 80013cc:	08009f94 	.word	0x08009f94
 80013d0:	08009fa4 	.word	0x08009fa4
 80013d4:	08009fc0 	.word	0x08009fc0

080013d8 <Measure_T>:


void Measure_T(I2C_HandleTypeDef* i2c_handle, double* temp)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af04      	add	r7, sp, #16
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	int tab_temp[2];

	HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR, TEMP_OUT_H, 1, tab_temp, 2, HAL_MAX_DELAY);
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2302      	movs	r3, #2
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	2265      	movs	r2, #101	; 0x65
 80013f6:	21d0      	movs	r1, #208	; 0xd0
 80013f8:	4819      	ldr	r0, [pc, #100]	; (8001460 <Measure_T+0x88>)
 80013fa:	f001 fa63 	bl	80028c4 <HAL_I2C_Mem_Read>
	*temp = (double)((tab_temp[0]<<8)+tab_temp[1] - 21.0)/333.87 + 21.0;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	021a      	lsls	r2, r3, #8
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4413      	add	r3, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8b4 	bl	8000574 <__aeabi_i2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <Measure_T+0x8c>)
 8001412:	f7fe ff61 	bl	80002d8 <__aeabi_dsub>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	a30e      	add	r3, pc, #56	; (adr r3, 8001458 <Measure_T+0x80>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff fa3a 	bl	800089c <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <Measure_T+0x8c>)
 8001436:	f7fe ff51 	bl	80002dc <__adddf3>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	e9c1 2300 	strd	r2, r3, [r1]
	printf("temp = %.1f\r\n", *temp);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	4807      	ldr	r0, [pc, #28]	; (8001468 <Measure_T+0x90>)
 800144c:	f004 fd02 	bl	8005e54 <iprintf>
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	851eb852 	.word	0x851eb852
 800145c:	4074ddeb 	.word	0x4074ddeb
 8001460:	200001fc 	.word	0x200001fc
 8001464:	40350000 	.word	0x40350000
 8001468:	08009fd4 	.word	0x08009fd4

0800146c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <MX_GPIO_Init+0xc4>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a2a      	ldr	r2, [pc, #168]	; (8001530 <MX_GPIO_Init+0xc4>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <MX_GPIO_Init+0xc4>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <MX_GPIO_Init+0xc4>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a24      	ldr	r2, [pc, #144]	; (8001530 <MX_GPIO_Init+0xc4>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_GPIO_Init+0xc4>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_GPIO_Init+0xc4>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <MX_GPIO_Init+0xc4>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_GPIO_Init+0xc4>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_GPIO_Init+0xc4>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <MX_GPIO_Init+0xc4>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_GPIO_Init+0xc4>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2120      	movs	r1, #32
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f000 fe45 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <MX_GPIO_Init+0xc8>)
 8001506:	f000 fcb5 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800150a:	2320      	movs	r3, #32
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001524:	f000 fca6 	bl	8001e74 <HAL_GPIO_Init>

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	48000800 	.word	0x48000800

08001538 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_I2C1_Init+0x74>)
 800153e:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <MX_I2C1_Init+0x78>)
 8001540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_I2C1_Init+0x74>)
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <MX_I2C1_Init+0x7c>)
 8001546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_I2C1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MX_I2C1_Init+0x74>)
 8001550:	2201      	movs	r2, #1
 8001552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <MX_I2C1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_I2C1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_I2C1_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_I2C1_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_I2C1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001572:	480e      	ldr	r0, [pc, #56]	; (80015ac <MX_I2C1_Init+0x74>)
 8001574:	f000 fe18 	bl	80021a8 <HAL_I2C_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800157e:	f000 f8f5 	bl	800176c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001582:	2100      	movs	r1, #0
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <MX_I2C1_Init+0x74>)
 8001586:	f001 fedf 	bl	8003348 <HAL_I2CEx_ConfigAnalogFilter>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001590:	f000 f8ec 	bl	800176c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001594:	2100      	movs	r1, #0
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_I2C1_Init+0x74>)
 8001598:	f001 ff21 	bl	80033de <HAL_I2CEx_ConfigDigitalFilter>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015a2:	f000 f8e3 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200001fc 	.word	0x200001fc
 80015b0:	40005400 	.word	0x40005400
 80015b4:	30a0a7fb 	.word	0x30a0a7fb

080015b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b09a      	sub	sp, #104	; 0x68
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	2244      	movs	r2, #68	; 0x44
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 fdb9 	bl	8005150 <memset>
  if(i2cHandle->Instance==I2C1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <HAL_I2C_MspInit+0xa8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d136      	bne.n	8001656 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015e8:	2340      	movs	r3, #64	; 0x40
 80015ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 fd27 	bl	8004048 <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001600:	f000 f8b4 	bl	800176c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_I2C_MspInit+0xac>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001608:	4a16      	ldr	r2, [pc, #88]	; (8001664 <HAL_I2C_MspInit+0xac>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_I2C_MspInit+0xac>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800161c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001620:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001622:	2312      	movs	r3, #18
 8001624:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162e:	2304      	movs	r3, #4
 8001630:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001636:	4619      	mov	r1, r3
 8001638:	480b      	ldr	r0, [pc, #44]	; (8001668 <HAL_I2C_MspInit+0xb0>)
 800163a:	f000 fc1b 	bl	8001e74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_I2C_MspInit+0xac>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_I2C_MspInit+0xac>)
 8001644:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001648:	6593      	str	r3, [r2, #88]	; 0x58
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_I2C_MspInit+0xac>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001656:	bf00      	nop
 8001658:	3768      	adds	r7, #104	; 0x68
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40005400 	.word	0x40005400
 8001664:	40021000 	.word	0x40021000
 8001668:	48000400 	.word	0x48000400

0800166c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	double temp = 0;
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167e:	f000 fa82 	bl	8001b86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001682:	f000 f827 	bl	80016d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001686:	f7ff fef1 	bl	800146c <MX_GPIO_Init>
  MX_I2C1_Init();
 800168a:	f7ff ff55 	bl	8001538 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800168e:	f000 f9af 	bl	80019f0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //SIG INIT STM32
  printf("-----------------------------------------------\r\n"
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <main+0x5c>)
 8001694:	f004 fc7a 	bl	8005f8c <puts>

  // INIT SENSORS

  //Presence capteurs sur le bus I2C

  TestSensorOnI2C(tabI2CAdd);
 8001698:	480c      	ldr	r0, [pc, #48]	; (80016cc <main+0x60>)
 800169a:	f7ff fd75 	bl	8001188 <TestSensorOnI2C>

  // On cherche le MPU9250

  SearchMPU9250();
 800169e:	f7ff fd23 	bl	80010e8 <SearchMPU9250>

  // On cherche le BMP280

  SearchBMP280();
 80016a2:	f7ff fcd1 	bl	8001048 <SearchBMP280>

  PrintTab(tabI2CAdd); //on affiche les valeurs du tableau d'addresse
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <main+0x60>)
 80016a8:	f7ff fdae 	bl	8001208 <PrintTab>

  Init_IMU_10DOF(&hi2c1);
 80016ac:	4808      	ldr	r0, [pc, #32]	; (80016d0 <main+0x64>)
 80016ae:	f7ff fddf 	bl	8001270 <Init_IMU_10DOF>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Measure_T(&hi2c1,&temp);
 80016b2:	463b      	mov	r3, r7
 80016b4:	4619      	mov	r1, r3
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <main+0x64>)
 80016b8:	f7ff fe8e 	bl	80013d8 <Measure_T>
	  HAL_Delay(1000);
 80016bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c0:	f000 fad2 	bl	8001c68 <HAL_Delay>
	  Measure_T(&hi2c1,&temp);
 80016c4:	e7f5      	b.n	80016b2 <main+0x46>
 80016c6:	bf00      	nop
 80016c8:	08009fe4 	.word	0x08009fe4
 80016cc:	20000248 	.word	0x20000248
 80016d0:	200001fc 	.word	0x200001fc

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0318 	add.w	r3, r7, #24
 80016de:	2238      	movs	r2, #56	; 0x38
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fd34 	bl	8005150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f001 febe 	bl	8003478 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001706:	2340      	movs	r3, #64	; 0x40
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170a:	2302      	movs	r3, #2
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800170e:	2302      	movs	r3, #2
 8001710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001712:	2304      	movs	r3, #4
 8001714:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001716:	2355      	movs	r3, #85	; 0x55
 8001718:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800171a:	2302      	movs	r3, #2
 800171c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800171e:	2302      	movs	r3, #2
 8001720:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001722:	2302      	movs	r3, #2
 8001724:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001726:	f107 0318 	add.w	r3, r7, #24
 800172a:	4618      	mov	r0, r3
 800172c:	f001 ff58 	bl	80035e0 <HAL_RCC_OscConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001736:	f000 f819 	bl	800176c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173a:	230f      	movs	r3, #15
 800173c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800173e:	2303      	movs	r3, #3
 8001740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2104      	movs	r1, #4
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fa5c 	bl	8003c10 <HAL_RCC_ClockConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800175e:	f000 f805 	bl	800176c <Error_Handler>
  }
}
 8001762:	bf00      	nop
 8001764:	3750      	adds	r7, #80	; 0x50
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  printf("an Error Occur, please Reset system\r\n");
 8001774:	4801      	ldr	r0, [pc, #4]	; (800177c <Error_Handler+0x10>)
 8001776:	f004 fc09 	bl	8005f8c <puts>

  while (1)
 800177a:	e7fe      	b.n	800177a <Error_Handler+0xe>
 800177c:	0800a058 	.word	0x0800a058

08001780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_MspInit+0x44>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_MspInit+0x44>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6613      	str	r3, [r2, #96]	; 0x60
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_MspInit+0x44>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_MspInit+0x44>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_MspInit+0x44>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6593      	str	r3, [r2, #88]	; 0x58
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_MspInit+0x44>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017b6:	f001 ff03 	bl	80035c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80017d0:	1d39      	adds	r1, r7, #4
 80017d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d6:	2201      	movs	r2, #1
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <__io_putchar+0x20>)
 80017da:	f002 fe75 	bl	80044c8 <HAL_UART_Transmit>

  return ch;
 80017de:	687b      	ldr	r3, [r7, #4]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000026c 	.word	0x2000026c

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <NMI_Handler+0x4>

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler+0x4>

080017fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler+0x4>

0800180a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001838:	f000 f9f8 	bl	8001c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
	return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_kill>:

int _kill(int pid, int sig)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800185a:	f003 fc4f 	bl	80050fc <__errno>
 800185e:	4603      	mov	r3, r0
 8001860:	2216      	movs	r2, #22
 8001862:	601a      	str	r2, [r3, #0]
	return -1;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_exit>:

void _exit (int status)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ffe7 	bl	8001850 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001882:	e7fe      	b.n	8001882 <_exit+0x12>

08001884 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	e00a      	b.n	80018ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001896:	f3af 8000 	nop.w
 800189a:	4601      	mov	r1, r0
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	60ba      	str	r2, [r7, #8]
 80018a2:	b2ca      	uxtb	r2, r1
 80018a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dbf0      	blt.n	8001896 <_read+0x12>
	}

return len;
 80018b4:	687b      	ldr	r3, [r7, #4]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e009      	b.n	80018e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff75 	bl	80017c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbf1      	blt.n	80018d0 <_write+0x12>
	}
	return len;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_close>:

int _close(int file)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
	return -1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191e:	605a      	str	r2, [r3, #4]
	return 0;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_isatty>:

int _isatty(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
	return 1;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <_sbrk+0x5c>)
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <_sbrk+0x60>)
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <_sbrk+0x64>)
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <_sbrk+0x68>)
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	d207      	bcs.n	80019a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001990:	f003 fbb4 	bl	80050fc <__errno>
 8001994:	4603      	mov	r3, r0
 8001996:	220c      	movs	r2, #12
 8001998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e009      	b.n	80019b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <_sbrk+0x64>)
 80019b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20008000 	.word	0x20008000
 80019c0:	00000400 	.word	0x00000400
 80019c4:	20000268 	.word	0x20000268
 80019c8:	20000310 	.word	0x20000310

080019cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <SystemInit+0x20>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <SystemInit+0x20>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <MX_LPUART1_UART_Init+0x90>)
 80019f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 80019fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a00:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a32:	4812      	ldr	r0, [pc, #72]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 8001a34:	f002 fcf8 	bl	8004428 <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a3e:	f7ff fe95 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a42:	2100      	movs	r1, #0
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 8001a46:	f003 fa8f 	bl	8004f68 <HAL_UARTEx_SetTxFifoThreshold>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001a50:	f7ff fe8c 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a54:	2100      	movs	r1, #0
 8001a56:	4809      	ldr	r0, [pc, #36]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 8001a58:	f003 fac4 	bl	8004fe4 <HAL_UARTEx_SetRxFifoThreshold>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001a62:	f7ff fe83 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_LPUART1_UART_Init+0x8c>)
 8001a68:	f003 fa45 	bl	8004ef6 <HAL_UARTEx_DisableFifoMode>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001a72:	f7ff fe7b 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000026c 	.word	0x2000026c
 8001a80:	40008000 	.word	0x40008000

08001a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b09a      	sub	sp, #104	; 0x68
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	2244      	movs	r2, #68	; 0x44
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fb53 	bl	8005150 <memset>
  if(uartHandle->Instance==LPUART1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <HAL_UART_MspInit+0xa8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d136      	bne.n	8001b22 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ab4:	2320      	movs	r3, #32
 8001ab6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fac1 	bl	8004048 <HAL_RCCEx_PeriphCLKConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001acc:	f7ff fe4e 	bl	800176c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_UART_MspInit+0xac>)
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad4:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <HAL_UART_MspInit+0xac>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_UART_MspInit+0xac>)
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_UART_MspInit+0xac>)
 8001aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aec:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_UART_MspInit+0xac>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_UART_MspInit+0xac>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001b00:	230c      	movs	r3, #12
 8001b02:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001b10:	230c      	movs	r3, #12
 8001b12:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f000 f9a9 	bl	8001e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001b22:	bf00      	nop
 8001b24:	3768      	adds	r7, #104	; 0x68
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40008000 	.word	0x40008000
 8001b30:	40021000 	.word	0x40021000

08001b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b3a:	490e      	ldr	r1, [pc, #56]	; (8001b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <LoopForever+0xe>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b50:	4c0b      	ldr	r4, [pc, #44]	; (8001b80 <LoopForever+0x16>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b5e:	f7ff ff35 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f003 fad1 	bl	8005108 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b66:	f7ff fd81 	bl	800166c <main>

08001b6a <LoopForever>:

LoopForever:
    b LoopForever
 8001b6a:	e7fe      	b.n	8001b6a <LoopForever>
  ldr   r0, =_estack
 8001b6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b74:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b78:	0800a57c 	.word	0x0800a57c
  ldr r2, =_sbss
 8001b7c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b80:	20000310 	.word	0x20000310

08001b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC1_2_IRQHandler>

08001b86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 f93d 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 f80e 	bl	8001bb8 <HAL_InitTick>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	71fb      	strb	r3, [r7, #7]
 8001ba6:	e001      	b.n	8001bac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ba8:	f7ff fdea 	bl	8001780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bac:	79fb      	ldrb	r3, [r7, #7]

}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <HAL_InitTick+0x68>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d022      	beq.n	8001c12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_InitTick+0x6c>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_InitTick+0x68>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 f93a 	bl	8001e5a <HAL_SYSTICK_Config>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10f      	bne.n	8001c0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b0f      	cmp	r3, #15
 8001bf0:	d809      	bhi.n	8001c06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfa:	f000 f914 	bl	8001e26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_InitTick+0x70>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e007      	b.n	8001c16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e004      	b.n	8001c16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e001      	b.n	8001c16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000008 	.word	0x20000008
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_IncTick+0x1c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_IncTick+0x20>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a03      	ldr	r2, [pc, #12]	; (8001c48 <HAL_IncTick+0x1c>)
 8001c3c:	6013      	str	r3, [r2, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	200002fc 	.word	0x200002fc
 8001c4c:	20000008 	.word	0x20000008

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200002fc 	.word	0x200002fc

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d004      	beq.n	8001c8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_Delay+0x40>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8c:	bf00      	nop
 8001c8e:	f7ff ffdf 	bl	8001c50 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d8f7      	bhi.n	8001c8e <HAL_Delay+0x26>
  {
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000008 	.word	0x20000008

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	; (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	; (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ddc:	d301      	bcc.n	8001de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00f      	b.n	8001e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <SysTick_Config+0x40>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dea:	210f      	movs	r1, #15
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f7ff ff8e 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <SysTick_Config+0x40>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <SysTick_Config+0x40>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	e000e010 	.word	0xe000e010

08001e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff47 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e34:	f7ff ff5e 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	6978      	ldr	r0, [r7, #20]
 8001e40:	f7ff ff90 	bl	8001d64 <NVIC_EncodePriority>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff5f 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e52:	bf00      	nop
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffb2 	bl	8001dcc <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e82:	e15a      	b.n	800213a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 814c 	beq.w	8002134 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d005      	beq.n	8001eb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d130      	bne.n	8001f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eea:	2201      	movs	r2, #1
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 0201 	and.w	r2, r3, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d017      	beq.n	8001f52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d123      	bne.n	8001fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	6939      	ldr	r1, [r7, #16]
 8001fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0203 	and.w	r2, r3, #3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80a6 	beq.w	8002134 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe8:	4b5b      	ldr	r3, [pc, #364]	; (8002158 <HAL_GPIO_Init+0x2e4>)
 8001fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fec:	4a5a      	ldr	r2, [pc, #360]	; (8002158 <HAL_GPIO_Init+0x2e4>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ff4:	4b58      	ldr	r3, [pc, #352]	; (8002158 <HAL_GPIO_Init+0x2e4>)
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002000:	4a56      	ldr	r2, [pc, #344]	; (800215c <HAL_GPIO_Init+0x2e8>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800202a:	d01f      	beq.n	800206c <HAL_GPIO_Init+0x1f8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a4c      	ldr	r2, [pc, #304]	; (8002160 <HAL_GPIO_Init+0x2ec>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d019      	beq.n	8002068 <HAL_GPIO_Init+0x1f4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a4b      	ldr	r2, [pc, #300]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d013      	beq.n	8002064 <HAL_GPIO_Init+0x1f0>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a4a      	ldr	r2, [pc, #296]	; (8002168 <HAL_GPIO_Init+0x2f4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00d      	beq.n	8002060 <HAL_GPIO_Init+0x1ec>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a49      	ldr	r2, [pc, #292]	; (800216c <HAL_GPIO_Init+0x2f8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d007      	beq.n	800205c <HAL_GPIO_Init+0x1e8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a48      	ldr	r2, [pc, #288]	; (8002170 <HAL_GPIO_Init+0x2fc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d101      	bne.n	8002058 <HAL_GPIO_Init+0x1e4>
 8002054:	2305      	movs	r3, #5
 8002056:	e00a      	b.n	800206e <HAL_GPIO_Init+0x1fa>
 8002058:	2306      	movs	r3, #6
 800205a:	e008      	b.n	800206e <HAL_GPIO_Init+0x1fa>
 800205c:	2304      	movs	r3, #4
 800205e:	e006      	b.n	800206e <HAL_GPIO_Init+0x1fa>
 8002060:	2303      	movs	r3, #3
 8002062:	e004      	b.n	800206e <HAL_GPIO_Init+0x1fa>
 8002064:	2302      	movs	r3, #2
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x1fa>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_GPIO_Init+0x1fa>
 800206c:	2300      	movs	r3, #0
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	f002 0203 	and.w	r2, r2, #3
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	4093      	lsls	r3, r2
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800207e:	4937      	ldr	r1, [pc, #220]	; (800215c <HAL_GPIO_Init+0x2e8>)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800208c:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_GPIO_Init+0x300>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020b0:	4a30      	ldr	r2, [pc, #192]	; (8002174 <HAL_GPIO_Init+0x300>)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020b6:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <HAL_GPIO_Init+0x300>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43db      	mvns	r3, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020da:	4a26      	ldr	r2, [pc, #152]	; (8002174 <HAL_GPIO_Init+0x300>)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_GPIO_Init+0x300>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002104:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_GPIO_Init+0x300>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800212e:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	f47f ae9d 	bne.w	8001e84 <HAL_GPIO_Init+0x10>
  }
}
 800214a:	bf00      	nop
 800214c:	bf00      	nop
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000
 8002160:	48000400 	.word	0x48000400
 8002164:	48000800 	.word	0x48000800
 8002168:	48000c00 	.word	0x48000c00
 800216c:	48001000 	.word	0x48001000
 8002170:	48001400 	.word	0x48001400
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002194:	e002      	b.n	800219c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002196:	887a      	ldrh	r2, [r7, #2]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e081      	b.n	80022be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff f9f2 	bl	80015b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2224      	movs	r2, #36	; 0x24
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002208:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	e006      	b.n	8002230 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800222e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d104      	bne.n	8002242 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002240:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002254:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002264:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69d9      	ldr	r1, [r3, #28]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	461a      	mov	r2, r3
 80022d4:	460b      	mov	r3, r1
 80022d6:	817b      	strh	r3, [r7, #10]
 80022d8:	4613      	mov	r3, r2
 80022da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	f040 80da 	bne.w	800249e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_I2C_Master_Transmit+0x30>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e0d3      	b.n	80024a0 <HAL_I2C_Master_Transmit+0x1d8>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002300:	f7ff fca6 	bl	8001c50 <HAL_GetTick>
 8002304:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2319      	movs	r3, #25
 800230c:	2201      	movs	r2, #1
 800230e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fdc4 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0be      	b.n	80024a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2221      	movs	r2, #33	; 0x21
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2210      	movs	r2, #16
 800232e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	893a      	ldrh	r2, [r7, #8]
 8002342:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	2bff      	cmp	r3, #255	; 0xff
 8002352:	d90e      	bls.n	8002372 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	22ff      	movs	r2, #255	; 0xff
 8002358:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235e:	b2da      	uxtb	r2, r3
 8002360:	8979      	ldrh	r1, [r7, #10]
 8002362:	4b51      	ldr	r3, [pc, #324]	; (80024a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 ffba 	bl	80032e4 <I2C_TransferConfig>
 8002370:	e06c      	b.n	800244c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	b2da      	uxtb	r2, r3
 8002382:	8979      	ldrh	r1, [r7, #10]
 8002384:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 ffa9 	bl	80032e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002392:	e05b      	b.n	800244c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	6a39      	ldr	r1, [r7, #32]
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fdc1 	bl	8002f20 <I2C_WaitOnTXISFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e07b      	b.n	80024a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d034      	beq.n	800244c <HAL_I2C_Master_Transmit+0x184>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d130      	bne.n	800244c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fd53 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e04d      	b.n	80024a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	2bff      	cmp	r3, #255	; 0xff
 800240c:	d90e      	bls.n	800242c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	22ff      	movs	r2, #255	; 0xff
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	b2da      	uxtb	r2, r3
 800241a:	8979      	ldrh	r1, [r7, #10]
 800241c:	2300      	movs	r3, #0
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 ff5d 	bl	80032e4 <I2C_TransferConfig>
 800242a:	e00f      	b.n	800244c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	b2da      	uxtb	r2, r3
 800243c:	8979      	ldrh	r1, [r7, #10]
 800243e:	2300      	movs	r3, #0
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 ff4c 	bl	80032e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d19e      	bne.n	8002394 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	6a39      	ldr	r1, [r7, #32]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fda0 	bl	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e01a      	b.n	80024a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2220      	movs	r2, #32
 8002470:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_I2C_Master_Transmit+0x1e4>)
 800247e:	400b      	ands	r3, r1
 8002480:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800249e:	2302      	movs	r3, #2
  }
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	80002000 	.word	0x80002000
 80024ac:	fe00e800 	.word	0xfe00e800

080024b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	461a      	mov	r2, r3
 80024bc:	460b      	mov	r3, r1
 80024be:	817b      	strh	r3, [r7, #10]
 80024c0:	4613      	mov	r3, r2
 80024c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	f040 80db 	bne.w	8002688 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_I2C_Master_Receive+0x30>
 80024dc:	2302      	movs	r3, #2
 80024de:	e0d4      	b.n	800268a <HAL_I2C_Master_Receive+0x1da>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024e8:	f7ff fbb2 	bl	8001c50 <HAL_GetTick>
 80024ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2319      	movs	r3, #25
 80024f4:	2201      	movs	r2, #1
 80024f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fcd0 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0bf      	b.n	800268a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2222      	movs	r2, #34	; 0x22
 800250e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2210      	movs	r2, #16
 8002516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	893a      	ldrh	r2, [r7, #8]
 800252a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	2bff      	cmp	r3, #255	; 0xff
 800253a:	d90e      	bls.n	800255a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	22ff      	movs	r2, #255	; 0xff
 8002540:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	b2da      	uxtb	r2, r3
 8002548:	8979      	ldrh	r1, [r7, #10]
 800254a:	4b52      	ldr	r3, [pc, #328]	; (8002694 <HAL_I2C_Master_Receive+0x1e4>)
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fec6 	bl	80032e4 <I2C_TransferConfig>
 8002558:	e06d      	b.n	8002636 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	b2da      	uxtb	r2, r3
 800256a:	8979      	ldrh	r1, [r7, #10]
 800256c:	4b49      	ldr	r3, [pc, #292]	; (8002694 <HAL_I2C_Master_Receive+0x1e4>)
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 feb5 	bl	80032e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800257a:	e05c      	b.n	8002636 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	6a39      	ldr	r1, [r7, #32]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fd49 	bl	8003018 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e07c      	b.n	800268a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d034      	beq.n	8002636 <HAL_I2C_Master_Receive+0x186>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d130      	bne.n	8002636 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	2200      	movs	r2, #0
 80025dc:	2180      	movs	r1, #128	; 0x80
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fc5e 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e04d      	b.n	800268a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2bff      	cmp	r3, #255	; 0xff
 80025f6:	d90e      	bls.n	8002616 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	22ff      	movs	r2, #255	; 0xff
 80025fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	b2da      	uxtb	r2, r3
 8002604:	8979      	ldrh	r1, [r7, #10]
 8002606:	2300      	movs	r3, #0
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fe68 	bl	80032e4 <I2C_TransferConfig>
 8002614:	e00f      	b.n	8002636 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	b2da      	uxtb	r2, r3
 8002626:	8979      	ldrh	r1, [r7, #10]
 8002628:	2300      	movs	r3, #0
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fe57 	bl	80032e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d19d      	bne.n	800257c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	6a39      	ldr	r1, [r7, #32]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fcab 	bl	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e01a      	b.n	800268a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2220      	movs	r2, #32
 800265a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <HAL_I2C_Master_Receive+0x1e8>)
 8002668:	400b      	ands	r3, r1
 800266a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	e000      	b.n	800268a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002688:	2302      	movs	r3, #2
  }
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	80002400 	.word	0x80002400
 8002698:	fe00e800 	.word	0xfe00e800

0800269c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	4608      	mov	r0, r1
 80026a6:	4611      	mov	r1, r2
 80026a8:	461a      	mov	r2, r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	817b      	strh	r3, [r7, #10]
 80026ae:	460b      	mov	r3, r1
 80026b0:	813b      	strh	r3, [r7, #8]
 80026b2:	4613      	mov	r3, r2
 80026b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b20      	cmp	r3, #32
 80026c0:	f040 80f9 	bne.w	80028b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_I2C_Mem_Write+0x34>
 80026ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0ed      	b.n	80028b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_I2C_Mem_Write+0x4e>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e0e6      	b.n	80028b8 <HAL_I2C_Mem_Write+0x21c>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026f2:	f7ff faad 	bl	8001c50 <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2319      	movs	r3, #25
 80026fe:	2201      	movs	r2, #1
 8002700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fbcb 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0d1      	b.n	80028b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2221      	movs	r2, #33	; 0x21
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a3a      	ldr	r2, [r7, #32]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800273c:	88f8      	ldrh	r0, [r7, #6]
 800273e:	893a      	ldrh	r2, [r7, #8]
 8002740:	8979      	ldrh	r1, [r7, #10]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	4603      	mov	r3, r0
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fadb 	bl	8002d08 <I2C_RequestMemoryWrite>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0a9      	b.n	80028b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	2bff      	cmp	r3, #255	; 0xff
 800276c:	d90e      	bls.n	800278c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	22ff      	movs	r2, #255	; 0xff
 8002772:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	b2da      	uxtb	r2, r3
 800277a:	8979      	ldrh	r1, [r7, #10]
 800277c:	2300      	movs	r3, #0
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fdad 	bl	80032e4 <I2C_TransferConfig>
 800278a:	e00f      	b.n	80027ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	b2da      	uxtb	r2, r3
 800279c:	8979      	ldrh	r1, [r7, #10]
 800279e:	2300      	movs	r3, #0
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fd9c 	bl	80032e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fbb5 	bl	8002f20 <I2C_WaitOnTXISFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e07b      	b.n	80028b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	781a      	ldrb	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d034      	beq.n	8002864 <HAL_I2C_Mem_Write+0x1c8>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d130      	bne.n	8002864 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	2200      	movs	r2, #0
 800280a:	2180      	movs	r1, #128	; 0x80
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fb47 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e04d      	b.n	80028b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	2bff      	cmp	r3, #255	; 0xff
 8002824:	d90e      	bls.n	8002844 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	22ff      	movs	r2, #255	; 0xff
 800282a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	b2da      	uxtb	r2, r3
 8002832:	8979      	ldrh	r1, [r7, #10]
 8002834:	2300      	movs	r3, #0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fd51 	bl	80032e4 <I2C_TransferConfig>
 8002842:	e00f      	b.n	8002864 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	b2da      	uxtb	r2, r3
 8002854:	8979      	ldrh	r1, [r7, #10]
 8002856:	2300      	movs	r3, #0
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fd40 	bl	80032e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d19e      	bne.n	80027ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fb94 	bl	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e01a      	b.n	80028b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2220      	movs	r2, #32
 8002888:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_I2C_Mem_Write+0x224>)
 8002896:	400b      	ands	r3, r1
 8002898:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e000      	b.n	80028b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	fe00e800 	.word	0xfe00e800

080028c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	817b      	strh	r3, [r7, #10]
 80028d6:	460b      	mov	r3, r1
 80028d8:	813b      	strh	r3, [r7, #8]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	f040 80fd 	bne.w	8002ae6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_I2C_Mem_Read+0x34>
 80028f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0f1      	b.n	8002ae8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Mem_Read+0x4e>
 800290e:	2302      	movs	r3, #2
 8002910:	e0ea      	b.n	8002ae8 <HAL_I2C_Mem_Read+0x224>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800291a:	f7ff f999 	bl	8001c50 <HAL_GetTick>
 800291e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2319      	movs	r3, #25
 8002926:	2201      	movs	r2, #1
 8002928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fab7 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0d5      	b.n	8002ae8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2222      	movs	r2, #34	; 0x22
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2240      	movs	r2, #64	; 0x40
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a3a      	ldr	r2, [r7, #32]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002964:	88f8      	ldrh	r0, [r7, #6]
 8002966:	893a      	ldrh	r2, [r7, #8]
 8002968:	8979      	ldrh	r1, [r7, #10]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	4603      	mov	r3, r0
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fa1b 	bl	8002db0 <I2C_RequestMemoryRead>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0ad      	b.n	8002ae8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	2bff      	cmp	r3, #255	; 0xff
 8002994:	d90e      	bls.n	80029b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	22ff      	movs	r2, #255	; 0xff
 800299a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	8979      	ldrh	r1, [r7, #10]
 80029a4:	4b52      	ldr	r3, [pc, #328]	; (8002af0 <HAL_I2C_Mem_Read+0x22c>)
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 fc99 	bl	80032e4 <I2C_TransferConfig>
 80029b2:	e00f      	b.n	80029d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	8979      	ldrh	r1, [r7, #10]
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_I2C_Mem_Read+0x22c>)
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fc88 	bl	80032e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	2200      	movs	r2, #0
 80029dc:	2104      	movs	r1, #4
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fa5e 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07c      	b.n	8002ae8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d034      	beq.n	8002a94 <HAL_I2C_Mem_Read+0x1d0>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d130      	bne.n	8002a94 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2180      	movs	r1, #128	; 0x80
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fa2f 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e04d      	b.n	8002ae8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2bff      	cmp	r3, #255	; 0xff
 8002a54:	d90e      	bls.n	8002a74 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	22ff      	movs	r2, #255	; 0xff
 8002a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	8979      	ldrh	r1, [r7, #10]
 8002a64:	2300      	movs	r3, #0
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fc39 	bl	80032e4 <I2C_TransferConfig>
 8002a72:	e00f      	b.n	8002a94 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	8979      	ldrh	r1, [r7, #10]
 8002a86:	2300      	movs	r3, #0
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fc28 	bl	80032e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d19a      	bne.n	80029d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fa7c 	bl	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e01a      	b.n	8002ae8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6859      	ldr	r1, [r3, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_I2C_Mem_Read+0x230>)
 8002ac6:	400b      	ands	r3, r1
 8002ac8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
  }
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	80002400 	.word	0x80002400
 8002af4:	fe00e800 	.word	0xfe00e800

08002af8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	460b      	mov	r3, r1
 8002b06:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	f040 80f1 	bne.w	8002cfc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b28:	d101      	bne.n	8002b2e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e0e7      	b.n	8002cfe <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_I2C_IsDeviceReady+0x44>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e0e0      	b.n	8002cfe <HAL_I2C_IsDeviceReady+0x206>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2224      	movs	r2, #36	; 0x24
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_I2C_IsDeviceReady+0x72>
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b68:	e004      	b.n	8002b74 <HAL_I2C_IsDeviceReady+0x7c>
 8002b6a:	897b      	ldrh	r3, [r7, #10]
 8002b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b70:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002b7a:	f7ff f869 	bl	8001c50 <HAL_GetTick>
 8002b7e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	bf0c      	ite	eq
 8002b8e:	2301      	moveq	r3, #1
 8002b90:	2300      	movne	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002bac:	e034      	b.n	8002c18 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d01a      	beq.n	8002bec <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bb6:	f7ff f84b 	bl	8001c50 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d302      	bcc.n	8002bcc <HAL_I2C_IsDeviceReady+0xd4>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10f      	bne.n	8002bec <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e088      	b.n	8002cfe <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	bf0c      	ite	eq
 8002bfa:	2301      	moveq	r3, #1
 8002bfc:	2300      	movne	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c18:	7ffb      	ldrb	r3, [r7, #31]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_I2C_IsDeviceReady+0x12c>
 8002c1e:	7fbb      	ldrb	r3, [r7, #30]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0c4      	beq.n	8002bae <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b10      	cmp	r3, #16
 8002c30:	d01a      	beq.n	8002c68 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2120      	movs	r1, #32
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f92f 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e058      	b.n	8002cfe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2220      	movs	r2, #32
 8002c52:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e04a      	b.n	8002cfe <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2120      	movs	r1, #32
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f914 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e03d      	b.n	8002cfe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2210      	movs	r2, #16
 8002c88:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d118      	bne.n	8002ccc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ca8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2120      	movs	r1, #32
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f8f3 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e01c      	b.n	8002cfe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	f63f af3b 	bhi.w	8002b52 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002cfc:	2302      	movs	r3, #2
  }
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3720      	adds	r7, #32
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	817b      	strh	r3, [r7, #10]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	813b      	strh	r3, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	8979      	ldrh	r1, [r7, #10]
 8002d28:	4b20      	ldr	r3, [pc, #128]	; (8002dac <I2C_RequestMemoryWrite+0xa4>)
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fad7 	bl	80032e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	69b9      	ldr	r1, [r7, #24]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f8f0 	bl	8002f20 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e02c      	b.n	8002da4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d50:	893b      	ldrh	r3, [r7, #8]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
 8002d5a:	e015      	b.n	8002d88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d5c:	893b      	ldrh	r3, [r7, #8]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	69b9      	ldr	r1, [r7, #24]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f8d6 	bl	8002f20 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e012      	b.n	8002da4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d7e:	893b      	ldrh	r3, [r7, #8]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f884 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	80002000 	.word	0x80002000

08002db0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	4608      	mov	r0, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	817b      	strh	r3, [r7, #10]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	813b      	strh	r3, [r7, #8]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	8979      	ldrh	r1, [r7, #10]
 8002dd0:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <I2C_RequestMemoryRead+0xa4>)
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fa84 	bl	80032e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	69b9      	ldr	r1, [r7, #24]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f89d 	bl	8002f20 <I2C_WaitOnTXISFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e02c      	b.n	8002e4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002df6:	893b      	ldrh	r3, [r7, #8]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8002e00:	e015      	b.n	8002e2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e02:	893b      	ldrh	r3, [r7, #8]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	69b9      	ldr	r1, [r7, #24]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f883 	bl	8002f20 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e012      	b.n	8002e4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e24:	893b      	ldrh	r3, [r7, #8]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2200      	movs	r2, #0
 8002e36:	2140      	movs	r1, #64	; 0x40
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f831 	bl	8002ea0 <I2C_WaitOnFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	80002000 	.word	0x80002000

08002e58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d103      	bne.n	8002e76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d007      	beq.n	8002e94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	619a      	str	r2, [r3, #24]
  }
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb0:	e022      	b.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d01e      	beq.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7fe fec9 	bl	8001c50 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d113      	bne.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e00f      	b.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4013      	ands	r3, r2
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d0cd      	beq.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f2c:	e02c      	b.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f8ea 	bl	800310c <I2C_IsErrorOccurred>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e02a      	b.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d01e      	beq.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7fe fe81 	bl	8001c50 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d113      	bne.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e007      	b.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d1cb      	bne.n	8002f2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fac:	e028      	b.n	8003000 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f8aa 	bl	800310c <I2C_IsErrorOccurred>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e026      	b.n	8003010 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc2:	f7fe fe45 	bl	8001c50 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d113      	bne.n	8003000 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e007      	b.n	8003010 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b20      	cmp	r3, #32
 800300c:	d1cf      	bne.n	8002fae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003024:	e064      	b.n	80030f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f86e 	bl	800310c <I2C_IsErrorOccurred>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e062      	b.n	8003100 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b20      	cmp	r3, #32
 8003046:	d138      	bne.n	80030ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d105      	bne.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e04e      	b.n	8003100 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b10      	cmp	r3, #16
 800306e:	d107      	bne.n	8003080 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2210      	movs	r2, #16
 8003076:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2204      	movs	r2, #4
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
 800307e:	e002      	b.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2220      	movs	r2, #32
 800308c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800309a:	400b      	ands	r3, r1
 800309c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e022      	b.n	8003100 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7fe fdc9 	bl	8001c50 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10f      	bne.n	80030f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e007      	b.n	8003100 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d193      	bne.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	fe00e800 	.word	0xfe00e800

0800310c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d075      	beq.n	8003224 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2210      	movs	r2, #16
 800313e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003140:	e056      	b.n	80031f0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d052      	beq.n	80031f0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800314a:	f7fe fd81 	bl	8001c50 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <I2C_IsErrorOccurred+0x54>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d147      	bne.n	80031f0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003172:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800317e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003182:	d12e      	bne.n	80031e2 <I2C_IsErrorOccurred+0xd6>
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800318a:	d02a      	beq.n	80031e2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	2b20      	cmp	r3, #32
 8003190:	d027      	beq.n	80031e2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031a2:	f7fe fd55 	bl	8001c50 <HAL_GetTick>
 80031a6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a8:	e01b      	b.n	80031e2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031aa:	f7fe fd51 	bl	8001c50 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b19      	cmp	r3, #25
 80031b6:	d914      	bls.n	80031e2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	f043 0220 	orr.w	r2, r3, #32
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d1dc      	bne.n	80031aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d003      	beq.n	8003206 <I2C_IsErrorOccurred+0xfa>
 80031fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003202:	2b00      	cmp	r3, #0
 8003204:	d09d      	beq.n	8003142 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2220      	movs	r2, #32
 8003214:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003246:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	f043 0308 	orr.w	r3, r3, #8
 800325e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003268:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800328a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01c      	beq.n	80032d4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f7ff fddc 	bl	8002e58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6859      	ldr	r1, [r3, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <I2C_IsErrorOccurred+0x1d4>)
 80032ac:	400b      	ands	r3, r1
 80032ae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80032d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3728      	adds	r7, #40	; 0x28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	fe00e800 	.word	0xfe00e800

080032e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	817b      	strh	r3, [r7, #10]
 80032f2:	4613      	mov	r3, r2
 80032f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032f6:	897b      	ldrh	r3, [r7, #10]
 80032f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032fc:	7a7b      	ldrb	r3, [r7, #9]
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003304:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	4313      	orrs	r3, r2
 800330e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003312:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	0d5b      	lsrs	r3, r3, #21
 800331e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <I2C_TransferConfig+0x60>)
 8003324:	430b      	orrs	r3, r1
 8003326:	43db      	mvns	r3, r3
 8003328:	ea02 0103 	and.w	r1, r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	03ff63ff 	.word	0x03ff63ff

08003348 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b20      	cmp	r3, #32
 800335c:	d138      	bne.n	80033d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003368:	2302      	movs	r3, #2
 800336a:	e032      	b.n	80033d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	; 0x24
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800339a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d139      	bne.n	8003468 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033fe:	2302      	movs	r3, #2
 8003400:	e033      	b.n	800346a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2224      	movs	r2, #36	; 0x24
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003430:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e000      	b.n	800346a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d141      	bne.n	800350a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003486:	4b4b      	ldr	r3, [pc, #300]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800348e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003492:	d131      	bne.n	80034f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003494:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800349a:	4a46      	ldr	r2, [pc, #280]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034a4:	4b43      	ldr	r3, [pc, #268]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034ac:	4a41      	ldr	r2, [pc, #260]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034b4:	4b40      	ldr	r3, [pc, #256]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2232      	movs	r2, #50	; 0x32
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	4a3f      	ldr	r2, [pc, #252]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	0c9b      	lsrs	r3, r3, #18
 80034c6:	3301      	adds	r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034ca:	e002      	b.n	80034d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d2:	4b38      	ldr	r3, [pc, #224]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034de:	d102      	bne.n	80034e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f2      	bne.n	80034cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034e6:	4b33      	ldr	r3, [pc, #204]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d158      	bne.n	80035a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e057      	b.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034f8:	4b2e      	ldr	r3, [pc, #184]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034fe:	4a2d      	ldr	r2, [pc, #180]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003504:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003508:	e04d      	b.n	80035a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003510:	d141      	bne.n	8003596 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003512:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800351a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351e:	d131      	bne.n	8003584 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003520:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003526:	4a23      	ldr	r2, [pc, #140]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003530:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003538:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800353e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003540:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2232      	movs	r2, #50	; 0x32
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	0c9b      	lsrs	r3, r3, #18
 8003552:	3301      	adds	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003556:	e002      	b.n	800355e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3b01      	subs	r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356a:	d102      	bne.n	8003572 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f2      	bne.n	8003558 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357e:	d112      	bne.n	80035a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e011      	b.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003590:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003594:	e007      	b.n	80035a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003596:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40007000 	.word	0x40007000
 80035b8:	20000000 	.word	0x20000000
 80035bc:	431bde83 	.word	0x431bde83

080035c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a04      	ldr	r2, [pc, #16]	; (80035dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ce:	6093      	str	r3, [r2, #8]
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40007000 	.word	0x40007000

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e306      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d075      	beq.n	80036ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fe:	4b97      	ldr	r3, [pc, #604]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003608:	4b94      	ldr	r3, [pc, #592]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d102      	bne.n	800361e <HAL_RCC_OscConfig+0x3e>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d002      	beq.n	8003624 <HAL_RCC_OscConfig+0x44>
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d10b      	bne.n	800363c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003624:	4b8d      	ldr	r3, [pc, #564]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d05b      	beq.n	80036e8 <HAL_RCC_OscConfig+0x108>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d157      	bne.n	80036e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e2e1      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d106      	bne.n	8003654 <HAL_RCC_OscConfig+0x74>
 8003646:	4b85      	ldr	r3, [pc, #532]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a84      	ldr	r2, [pc, #528]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e01d      	b.n	8003690 <HAL_RCC_OscConfig+0xb0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x98>
 800365e:	4b7f      	ldr	r3, [pc, #508]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a7e      	ldr	r2, [pc, #504]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b7c      	ldr	r3, [pc, #496]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a7b      	ldr	r2, [pc, #492]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e00b      	b.n	8003690 <HAL_RCC_OscConfig+0xb0>
 8003678:	4b78      	ldr	r3, [pc, #480]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a77      	ldr	r2, [pc, #476]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 800367e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	4b75      	ldr	r3, [pc, #468]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a74      	ldr	r2, [pc, #464]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 800368a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d013      	beq.n	80036c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe fada 	bl	8001c50 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fe fad6 	bl	8001c50 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e2a6      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b2:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0xc0>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe fac6 	bl	8001c50 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fe fac2 	bl	8001c50 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e292      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036da:	4b60      	ldr	r3, [pc, #384]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0xe8>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d075      	beq.n	80037e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f6:	4b59      	ldr	r3, [pc, #356]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003700:	4b56      	ldr	r3, [pc, #344]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b0c      	cmp	r3, #12
 800370e:	d102      	bne.n	8003716 <HAL_RCC_OscConfig+0x136>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d002      	beq.n	800371c <HAL_RCC_OscConfig+0x13c>
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d11f      	bne.n	800375c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800371c:	4b4f      	ldr	r3, [pc, #316]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_OscConfig+0x154>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e265      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003734:	4b49      	ldr	r3, [pc, #292]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	061b      	lsls	r3, r3, #24
 8003742:	4946      	ldr	r1, [pc, #280]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003744:	4313      	orrs	r3, r2
 8003746:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003748:	4b45      	ldr	r3, [pc, #276]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fa33 	bl	8001bb8 <HAL_InitTick>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d043      	beq.n	80037e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e251      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d023      	beq.n	80037ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003764:	4b3d      	ldr	r3, [pc, #244]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a3c      	ldr	r2, [pc, #240]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 800376a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fe fa6e 	bl	8001c50 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003778:	f7fe fa6a 	bl	8001c50 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e23a      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800378a:	4b34      	ldr	r3, [pc, #208]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b31      	ldr	r3, [pc, #196]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	061b      	lsls	r3, r3, #24
 80037a4:	492d      	ldr	r1, [pc, #180]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	604b      	str	r3, [r1, #4]
 80037aa:	e01a      	b.n	80037e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ac:	4b2b      	ldr	r3, [pc, #172]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2a      	ldr	r2, [pc, #168]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 80037b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe fa4a 	bl	8001c50 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c0:	f7fe fa46 	bl	8001c50 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e216      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x1e0>
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d041      	beq.n	8003872 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01c      	beq.n	8003830 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f6:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 80037f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fc:	4a17      	ldr	r2, [pc, #92]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003806:	f7fe fa23 	bl	8001c50 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380e:	f7fe fa1f 	bl	8001c50 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e1ef      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003820:	4b0e      	ldr	r3, [pc, #56]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0ef      	beq.n	800380e <HAL_RCC_OscConfig+0x22e>
 800382e:	e020      	b.n	8003872 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003836:	4a09      	ldr	r2, [pc, #36]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7fe fa06 	bl	8001c50 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003846:	e00d      	b.n	8003864 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003848:	f7fe fa02 	bl	8001c50 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d906      	bls.n	8003864 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1d2      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003864:	4b8c      	ldr	r3, [pc, #560]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ea      	bne.n	8003848 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80a6 	beq.w	80039cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003884:	4b84      	ldr	r3, [pc, #528]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCC_OscConfig+0x2b4>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x2b6>
 8003894:	2300      	movs	r3, #0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00d      	beq.n	80038b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800389a:	4b7f      	ldr	r3, [pc, #508]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	4a7e      	ldr	r2, [pc, #504]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6593      	str	r3, [r2, #88]	; 0x58
 80038a6:	4b7c      	ldr	r3, [pc, #496]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038b2:	2301      	movs	r3, #1
 80038b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b6:	4b79      	ldr	r3, [pc, #484]	; (8003a9c <HAL_RCC_OscConfig+0x4bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d118      	bne.n	80038f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c2:	4b76      	ldr	r3, [pc, #472]	; (8003a9c <HAL_RCC_OscConfig+0x4bc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a75      	ldr	r2, [pc, #468]	; (8003a9c <HAL_RCC_OscConfig+0x4bc>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ce:	f7fe f9bf 	bl	8001c50 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7fe f9bb 	bl	8001c50 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e18b      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e8:	4b6c      	ldr	r3, [pc, #432]	; (8003a9c <HAL_RCC_OscConfig+0x4bc>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d108      	bne.n	800390e <HAL_RCC_OscConfig+0x32e>
 80038fc:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	4a65      	ldr	r2, [pc, #404]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800390c:	e024      	b.n	8003958 <HAL_RCC_OscConfig+0x378>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b05      	cmp	r3, #5
 8003914:	d110      	bne.n	8003938 <HAL_RCC_OscConfig+0x358>
 8003916:	4b60      	ldr	r3, [pc, #384]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	4a5e      	ldr	r2, [pc, #376]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 800391e:	f043 0304 	orr.w	r3, r3, #4
 8003922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003926:	4b5c      	ldr	r3, [pc, #368]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392c:	4a5a      	ldr	r2, [pc, #360]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003936:	e00f      	b.n	8003958 <HAL_RCC_OscConfig+0x378>
 8003938:	4b57      	ldr	r3, [pc, #348]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	4a56      	ldr	r2, [pc, #344]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	4a52      	ldr	r2, [pc, #328]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d016      	beq.n	800398e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fe f976 	bl	8001c50 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003966:	e00a      	b.n	800397e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003968:	f7fe f972 	bl	8001c50 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	; 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e140      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397e:	4b46      	ldr	r3, [pc, #280]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ed      	beq.n	8003968 <HAL_RCC_OscConfig+0x388>
 800398c:	e015      	b.n	80039ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fe f95f 	bl	8001c50 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003996:	f7fe f95b 	bl	8001c50 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e129      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039ac:	4b3a      	ldr	r3, [pc, #232]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ed      	bne.n	8003996 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039ba:	7ffb      	ldrb	r3, [r7, #31]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d105      	bne.n	80039cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c0:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	4a34      	ldr	r2, [pc, #208]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 80039c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d03c      	beq.n	8003a52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01c      	beq.n	8003a1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039e0:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 80039e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039e6:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7fe f92e 	bl	8001c50 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039f8:	f7fe f92a 	bl	8001c50 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e0fa      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0ef      	beq.n	80039f8 <HAL_RCC_OscConfig+0x418>
 8003a18:	e01b      	b.n	8003a52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a1a:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a20:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fe f911 	bl	8001c50 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a32:	f7fe f90d 	bl	8001c50 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e0dd      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1ef      	bne.n	8003a32 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80d1 	beq.w	8003bfe <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b0c      	cmp	r3, #12
 8003a66:	f000 808b 	beq.w	8003b80 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d15e      	bne.n	8003b30 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a72:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <HAL_RCC_OscConfig+0x4b8>)
 8003a78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fe f8e7 	bl	8001c50 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a84:	e00c      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a86:	f7fe f8e3 	bl	8001c50 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d905      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e0b3      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1ec      	bne.n	8003a86 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aac:	4b56      	ldr	r3, [pc, #344]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	4b56      	ldr	r3, [pc, #344]	; (8003c0c <HAL_RCC_OscConfig+0x62c>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6a11      	ldr	r1, [r2, #32]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003abc:	3a01      	subs	r2, #1
 8003abe:	0112      	lsls	r2, r2, #4
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ac6:	0212      	lsls	r2, r2, #8
 8003ac8:	4311      	orrs	r1, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ace:	0852      	lsrs	r2, r2, #1
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	0552      	lsls	r2, r2, #21
 8003ad4:	4311      	orrs	r1, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ada:	0852      	lsrs	r2, r2, #1
 8003adc:	3a01      	subs	r2, #1
 8003ade:	0652      	lsls	r2, r2, #25
 8003ae0:	4311      	orrs	r1, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ae6:	06d2      	lsls	r2, r2, #27
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	4947      	ldr	r1, [pc, #284]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b45      	ldr	r3, [pc, #276]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a44      	ldr	r2, [pc, #272]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003afc:	4b42      	ldr	r3, [pc, #264]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a41      	ldr	r2, [pc, #260]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe f8a2 	bl	8001c50 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fe f89e 	bl	8001c50 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e06e      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	4b39      	ldr	r3, [pc, #228]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x530>
 8003b2e:	e066      	b.n	8003bfe <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b30:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a34      	ldr	r2, [pc, #208]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b3c:	4b32      	ldr	r3, [pc, #200]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a31      	ldr	r2, [pc, #196]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b48:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a2e      	ldr	r2, [pc, #184]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003b4e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe f87a 	bl	8001c50 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fe f876 	bl	8001c50 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e046      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b72:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x580>
 8003b7e:	e03e      	b.n	8003bfe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e039      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b8c:	4b1e      	ldr	r3, [pc, #120]	; (8003c08 <HAL_RCC_OscConfig+0x628>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f003 0203 	and.w	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d12c      	bne.n	8003bfa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	3b01      	subs	r3, #1
 8003bac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d123      	bne.n	8003bfa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d11b      	bne.n	8003bfa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d113      	bne.n	8003bfa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	3b01      	subs	r3, #1
 8003be0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d109      	bne.n	8003bfa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3720      	adds	r7, #32
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	019f800c 	.word	0x019f800c

08003c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e11e      	b.n	8003e66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c28:	4b91      	ldr	r3, [pc, #580]	; (8003e70 <HAL_RCC_ClockConfig+0x260>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d910      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c36:	4b8e      	ldr	r3, [pc, #568]	; (8003e70 <HAL_RCC_ClockConfig+0x260>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 020f 	bic.w	r2, r3, #15
 8003c3e:	498c      	ldr	r1, [pc, #560]	; (8003e70 <HAL_RCC_ClockConfig+0x260>)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b8a      	ldr	r3, [pc, #552]	; (8003e70 <HAL_RCC_ClockConfig+0x260>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e106      	b.n	8003e66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d073      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d129      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6c:	4b81      	ldr	r3, [pc, #516]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0f4      	b.n	8003e66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c7c:	f000 f99e 	bl	8003fbc <RCC_GetSysClockFreqFromPLLSource>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4a7c      	ldr	r2, [pc, #496]	; (8003e78 <HAL_RCC_ClockConfig+0x268>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d93f      	bls.n	8003d0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c8a:	4b7a      	ldr	r3, [pc, #488]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d033      	beq.n	8003d0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d12f      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003caa:	4b72      	ldr	r3, [pc, #456]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb2:	4a70      	ldr	r2, [pc, #448]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	e024      	b.n	8003d0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc8:	4b6a      	ldr	r3, [pc, #424]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0c6      	b.n	8003e66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd8:	4b66      	ldr	r3, [pc, #408]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0be      	b.n	8003e66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ce8:	f000 f8ce 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4a61      	ldr	r2, [pc, #388]	; (8003e78 <HAL_RCC_ClockConfig+0x268>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d909      	bls.n	8003d0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cf6:	4b5f      	ldr	r3, [pc, #380]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cfe:	4a5d      	ldr	r2, [pc, #372]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d06:	2380      	movs	r3, #128	; 0x80
 8003d08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d0a:	4b5a      	ldr	r3, [pc, #360]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 0203 	bic.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4957      	ldr	r1, [pc, #348]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1c:	f7fd ff98 	bl	8001c50 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d24:	f7fd ff94 	bl	8001c50 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e095      	b.n	8003e66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	4b4e      	ldr	r3, [pc, #312]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 020c 	and.w	r2, r3, #12
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d1eb      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d023      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d64:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4a42      	ldr	r2, [pc, #264]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d7c:	4b3d      	ldr	r3, [pc, #244]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d84:	4a3b      	ldr	r2, [pc, #236]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003d86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8c:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4936      	ldr	r1, [pc, #216]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b80      	cmp	r3, #128	; 0x80
 8003da4:	d105      	bne.n	8003db2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003da6:	4b33      	ldr	r3, [pc, #204]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	4a32      	ldr	r2, [pc, #200]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003db0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003db2:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <HAL_RCC_ClockConfig+0x260>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d21d      	bcs.n	8003dfc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <HAL_RCC_ClockConfig+0x260>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 020f 	bic.w	r2, r3, #15
 8003dc8:	4929      	ldr	r1, [pc, #164]	; (8003e70 <HAL_RCC_ClockConfig+0x260>)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dd0:	f7fd ff3e 	bl	8001c50 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd8:	f7fd ff3a 	bl	8001c50 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e03b      	b.n	8003e66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <HAL_RCC_ClockConfig+0x260>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d1ed      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e08:	4b1a      	ldr	r3, [pc, #104]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4917      	ldr	r1, [pc, #92]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	490f      	ldr	r1, [pc, #60]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e3a:	f000 f825 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <HAL_RCC_ClockConfig+0x264>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	490c      	ldr	r1, [pc, #48]	; (8003e7c <HAL_RCC_ClockConfig+0x26c>)
 8003e4c:	5ccb      	ldrb	r3, [r1, r3]
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	fa22 f303 	lsr.w	r3, r2, r3
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <HAL_RCC_ClockConfig+0x270>)
 8003e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <HAL_RCC_ClockConfig+0x274>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd feaa 	bl	8001bb8 <HAL_InitTick>
 8003e64:	4603      	mov	r3, r0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40022000 	.word	0x40022000
 8003e74:	40021000 	.word	0x40021000
 8003e78:	04c4b400 	.word	0x04c4b400
 8003e7c:	0800a080 	.word	0x0800a080
 8003e80:	20000000 	.word	0x20000000
 8003e84:	20000004 	.word	0x20000004

08003e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d102      	bne.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e9a:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	e047      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ea0:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 030c 	and.w	r3, r3, #12
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d102      	bne.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003eac:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	e03e      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003eb2:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	d136      	bne.n	8003f2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003edc:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee6:	68d2      	ldr	r2, [r2, #12]
 8003ee8:	0a12      	lsrs	r2, r2, #8
 8003eea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	617b      	str	r3, [r7, #20]
      break;
 8003ef4:	e00c      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ef6:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f00:	68d2      	ldr	r2, [r2, #12]
 8003f02:	0a12      	lsrs	r2, r2, #8
 8003f04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f08:	fb02 f303 	mul.w	r3, r2, r3
 8003f0c:	617b      	str	r3, [r7, #20]
      break;
 8003f0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	0e5b      	lsrs	r3, r3, #25
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	e001      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f30:	693b      	ldr	r3, [r7, #16]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	016e3600 	.word	0x016e3600

08003f4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000000 	.word	0x20000000

08003f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f68:	f7ff fff0 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4904      	ldr	r1, [pc, #16]	; (8003f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	0800a090 	.word	0x0800a090

08003f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f94:	f7ff ffda 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	0adb      	lsrs	r3, r3, #11
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4904      	ldr	r1, [pc, #16]	; (8003fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	0800a090 	.word	0x0800a090

08003fbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	; (800403c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d10c      	bne.n	8003ffa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fe0:	4a17      	ldr	r2, [pc, #92]	; (8004040 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	4a14      	ldr	r2, [pc, #80]	; (800403c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fea:	68d2      	ldr	r2, [r2, #12]
 8003fec:	0a12      	lsrs	r2, r2, #8
 8003fee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ff2:	fb02 f303 	mul.w	r3, r2, r3
 8003ff6:	617b      	str	r3, [r7, #20]
    break;
 8003ff8:	e00c      	b.n	8004014 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ffa:	4a12      	ldr	r2, [pc, #72]	; (8004044 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004002:	4a0e      	ldr	r2, [pc, #56]	; (800403c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004004:	68d2      	ldr	r2, [r2, #12]
 8004006:	0a12      	lsrs	r2, r2, #8
 8004008:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800400c:	fb02 f303 	mul.w	r3, r2, r3
 8004010:	617b      	str	r3, [r7, #20]
    break;
 8004012:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	0e5b      	lsrs	r3, r3, #25
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	3301      	adds	r3, #1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800402e:	687b      	ldr	r3, [r7, #4]
}
 8004030:	4618      	mov	r0, r3
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	40021000 	.word	0x40021000
 8004040:	016e3600 	.word	0x016e3600
 8004044:	00f42400 	.word	0x00f42400

08004048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004050:	2300      	movs	r3, #0
 8004052:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004054:	2300      	movs	r3, #0
 8004056:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8098 	beq.w	8004196 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004066:	2300      	movs	r3, #0
 8004068:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800406a:	4b43      	ldr	r3, [pc, #268]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10d      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004076:	4b40      	ldr	r3, [pc, #256]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407a:	4a3f      	ldr	r2, [pc, #252]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800407c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004080:	6593      	str	r3, [r2, #88]	; 0x58
 8004082:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800408e:	2301      	movs	r3, #1
 8004090:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004092:	4b3a      	ldr	r3, [pc, #232]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a39      	ldr	r2, [pc, #228]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800409e:	f7fd fdd7 	bl	8001c50 <HAL_GetTick>
 80040a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040a4:	e009      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a6:	f7fd fdd3 	bl	8001c50 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d902      	bls.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	74fb      	strb	r3, [r7, #19]
        break;
 80040b8:	e005      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040ba:	4b30      	ldr	r3, [pc, #192]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0ef      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d159      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040cc:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01e      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d019      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040e8:	4b23      	ldr	r3, [pc, #140]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040f4:	4b20      	ldr	r3, [pc, #128]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	4a1f      	ldr	r2, [pc, #124]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004104:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800410c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004114:	4a18      	ldr	r2, [pc, #96]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fd fd93 	bl	8001c50 <HAL_GetTick>
 800412a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800412c:	e00b      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412e:	f7fd fd8f 	bl	8001c50 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	4293      	cmp	r3, r2
 800413e:	d902      	bls.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	74fb      	strb	r3, [r7, #19]
            break;
 8004144:	e006      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004146:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ec      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004154:	7cfb      	ldrb	r3, [r7, #19]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	4903      	ldr	r1, [pc, #12]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004170:	e008      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004172:	7cfb      	ldrb	r3, [r7, #19]
 8004174:	74bb      	strb	r3, [r7, #18]
 8004176:	e005      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004178:	40021000 	.word	0x40021000
 800417c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004180:	7cfb      	ldrb	r3, [r7, #19]
 8004182:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004184:	7c7b      	ldrb	r3, [r7, #17]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d105      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418a:	4ba6      	ldr	r3, [pc, #664]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	4aa5      	ldr	r2, [pc, #660]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004194:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a2:	4ba0      	ldr	r3, [pc, #640]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a8:	f023 0203 	bic.w	r2, r3, #3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	499c      	ldr	r1, [pc, #624]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c4:	4b97      	ldr	r3, [pc, #604]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ca:	f023 020c 	bic.w	r2, r3, #12
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	4994      	ldr	r1, [pc, #592]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041e6:	4b8f      	ldr	r3, [pc, #572]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	498b      	ldr	r1, [pc, #556]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004208:	4b86      	ldr	r3, [pc, #536]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	4983      	ldr	r1, [pc, #524]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800422a:	4b7e      	ldr	r3, [pc, #504]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	497a      	ldr	r1, [pc, #488]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800424c:	4b75      	ldr	r3, [pc, #468]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	4972      	ldr	r1, [pc, #456]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800426e:	4b6d      	ldr	r3, [pc, #436]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004274:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	4969      	ldr	r1, [pc, #420]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004290:	4b64      	ldr	r3, [pc, #400]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	4961      	ldr	r1, [pc, #388]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042b2:	4b5c      	ldr	r3, [pc, #368]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	4958      	ldr	r1, [pc, #352]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d015      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042d4:	4b53      	ldr	r3, [pc, #332]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	4950      	ldr	r1, [pc, #320]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042f2:	d105      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f4:	4b4b      	ldr	r3, [pc, #300]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4a4a      	ldr	r2, [pc, #296]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004308:	2b00      	cmp	r3, #0
 800430a:	d015      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800430c:	4b45      	ldr	r3, [pc, #276]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	4942      	ldr	r1, [pc, #264]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800432a:	d105      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800432c:	4b3d      	ldr	r3, [pc, #244]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a3c      	ldr	r2, [pc, #240]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004336:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d015      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004344:	4b37      	ldr	r3, [pc, #220]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	4934      	ldr	r1, [pc, #208]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004362:	d105      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004364:	4b2f      	ldr	r3, [pc, #188]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a2e      	ldr	r2, [pc, #184]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800436e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d015      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800437c:	4b29      	ldr	r3, [pc, #164]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	4926      	ldr	r1, [pc, #152]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800439a:	d105      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800439c:	4b21      	ldr	r3, [pc, #132]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a20      	ldr	r2, [pc, #128]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d015      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043b4:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	4918      	ldr	r1, [pc, #96]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d2:	d105      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d4:	4b13      	ldr	r3, [pc, #76]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4a12      	ldr	r2, [pc, #72]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d015      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043ec:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	490a      	ldr	r1, [pc, #40]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800440a:	d105      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4a04      	ldr	r2, [pc, #16]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004416:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004418:	7cbb      	ldrb	r3, [r7, #18]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000

08004428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e042      	b.n	80044c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004440:	2b00      	cmp	r3, #0
 8004442:	d106      	bne.n	8004452 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fd fb19 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2224      	movs	r2, #36	; 0x24
 8004456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f8c2 	bl	80045f4 <UART_SetConfig>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e022      	b.n	80044c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fb82 	bl	8004b8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fc09 	bl	8004cd0 <UART_CheckIdleState>
 80044be:	4603      	mov	r3, r0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044de:	2b20      	cmp	r3, #32
 80044e0:	f040 8083 	bne.w	80045ea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_UART_Transmit+0x28>
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e07b      	b.n	80045ec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Transmit+0x3a>
 80044fe:	2302      	movs	r3, #2
 8004500:	e074      	b.n	80045ec <HAL_UART_Transmit+0x124>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2221      	movs	r2, #33	; 0x21
 8004516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800451a:	f7fd fb99 	bl	8001c50 <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004538:	d108      	bne.n	800454c <HAL_UART_Transmit+0x84>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d104      	bne.n	800454c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	e003      	b.n	8004554 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800455c:	e02c      	b.n	80045b8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	2180      	movs	r1, #128	; 0x80
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fbfc 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e039      	b.n	80045ec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3302      	adds	r3, #2
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e007      	b.n	80045a6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1cc      	bne.n	800455e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2140      	movs	r1, #64	; 0x40
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fbc9 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e006      	b.n	80045ec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e000      	b.n	80045ec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
  }
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f8:	b08c      	sub	sp, #48	; 0x30
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	431a      	orrs	r2, r3
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	431a      	orrs	r2, r3
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	4313      	orrs	r3, r2
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4bab      	ldr	r3, [pc, #684]	; (80048d0 <UART_SetConfig+0x2dc>)
 8004624:	4013      	ands	r3, r2
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800462c:	430b      	orrs	r3, r1
 800462e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4aa0      	ldr	r2, [pc, #640]	; (80048d4 <UART_SetConfig+0x2e0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800465c:	4313      	orrs	r3, r2
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800466a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004674:	430b      	orrs	r3, r1
 8004676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f023 010f 	bic.w	r1, r3, #15
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a91      	ldr	r2, [pc, #580]	; (80048d8 <UART_SetConfig+0x2e4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d125      	bne.n	80046e4 <UART_SetConfig+0xf0>
 8004698:	4b90      	ldr	r3, [pc, #576]	; (80048dc <UART_SetConfig+0x2e8>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d81a      	bhi.n	80046dc <UART_SetConfig+0xe8>
 80046a6:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <UART_SetConfig+0xb8>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080046cd 	.word	0x080046cd
 80046b4:	080046c5 	.word	0x080046c5
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046c2:	e0d6      	b.n	8004872 <UART_SetConfig+0x27e>
 80046c4:	2302      	movs	r3, #2
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ca:	e0d2      	b.n	8004872 <UART_SetConfig+0x27e>
 80046cc:	2304      	movs	r3, #4
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d2:	e0ce      	b.n	8004872 <UART_SetConfig+0x27e>
 80046d4:	2308      	movs	r3, #8
 80046d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046da:	e0ca      	b.n	8004872 <UART_SetConfig+0x27e>
 80046dc:	2310      	movs	r3, #16
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e2:	e0c6      	b.n	8004872 <UART_SetConfig+0x27e>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a7d      	ldr	r2, [pc, #500]	; (80048e0 <UART_SetConfig+0x2ec>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d138      	bne.n	8004760 <UART_SetConfig+0x16c>
 80046ee:	4b7b      	ldr	r3, [pc, #492]	; (80048dc <UART_SetConfig+0x2e8>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b0c      	cmp	r3, #12
 80046fa:	d82d      	bhi.n	8004758 <UART_SetConfig+0x164>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <UART_SetConfig+0x110>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004739 	.word	0x08004739
 8004708:	08004759 	.word	0x08004759
 800470c:	08004759 	.word	0x08004759
 8004710:	08004759 	.word	0x08004759
 8004714:	08004749 	.word	0x08004749
 8004718:	08004759 	.word	0x08004759
 800471c:	08004759 	.word	0x08004759
 8004720:	08004759 	.word	0x08004759
 8004724:	08004741 	.word	0x08004741
 8004728:	08004759 	.word	0x08004759
 800472c:	08004759 	.word	0x08004759
 8004730:	08004759 	.word	0x08004759
 8004734:	08004751 	.word	0x08004751
 8004738:	2300      	movs	r3, #0
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800473e:	e098      	b.n	8004872 <UART_SetConfig+0x27e>
 8004740:	2302      	movs	r3, #2
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004746:	e094      	b.n	8004872 <UART_SetConfig+0x27e>
 8004748:	2304      	movs	r3, #4
 800474a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474e:	e090      	b.n	8004872 <UART_SetConfig+0x27e>
 8004750:	2308      	movs	r3, #8
 8004752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004756:	e08c      	b.n	8004872 <UART_SetConfig+0x27e>
 8004758:	2310      	movs	r3, #16
 800475a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800475e:	e088      	b.n	8004872 <UART_SetConfig+0x27e>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a5f      	ldr	r2, [pc, #380]	; (80048e4 <UART_SetConfig+0x2f0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d125      	bne.n	80047b6 <UART_SetConfig+0x1c2>
 800476a:	4b5c      	ldr	r3, [pc, #368]	; (80048dc <UART_SetConfig+0x2e8>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004774:	2b30      	cmp	r3, #48	; 0x30
 8004776:	d016      	beq.n	80047a6 <UART_SetConfig+0x1b2>
 8004778:	2b30      	cmp	r3, #48	; 0x30
 800477a:	d818      	bhi.n	80047ae <UART_SetConfig+0x1ba>
 800477c:	2b20      	cmp	r3, #32
 800477e:	d00a      	beq.n	8004796 <UART_SetConfig+0x1a2>
 8004780:	2b20      	cmp	r3, #32
 8004782:	d814      	bhi.n	80047ae <UART_SetConfig+0x1ba>
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <UART_SetConfig+0x19a>
 8004788:	2b10      	cmp	r3, #16
 800478a:	d008      	beq.n	800479e <UART_SetConfig+0x1aa>
 800478c:	e00f      	b.n	80047ae <UART_SetConfig+0x1ba>
 800478e:	2300      	movs	r3, #0
 8004790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004794:	e06d      	b.n	8004872 <UART_SetConfig+0x27e>
 8004796:	2302      	movs	r3, #2
 8004798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800479c:	e069      	b.n	8004872 <UART_SetConfig+0x27e>
 800479e:	2304      	movs	r3, #4
 80047a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a4:	e065      	b.n	8004872 <UART_SetConfig+0x27e>
 80047a6:	2308      	movs	r3, #8
 80047a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ac:	e061      	b.n	8004872 <UART_SetConfig+0x27e>
 80047ae:	2310      	movs	r3, #16
 80047b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047b4:	e05d      	b.n	8004872 <UART_SetConfig+0x27e>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a4b      	ldr	r2, [pc, #300]	; (80048e8 <UART_SetConfig+0x2f4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d125      	bne.n	800480c <UART_SetConfig+0x218>
 80047c0:	4b46      	ldr	r3, [pc, #280]	; (80048dc <UART_SetConfig+0x2e8>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047ca:	2bc0      	cmp	r3, #192	; 0xc0
 80047cc:	d016      	beq.n	80047fc <UART_SetConfig+0x208>
 80047ce:	2bc0      	cmp	r3, #192	; 0xc0
 80047d0:	d818      	bhi.n	8004804 <UART_SetConfig+0x210>
 80047d2:	2b80      	cmp	r3, #128	; 0x80
 80047d4:	d00a      	beq.n	80047ec <UART_SetConfig+0x1f8>
 80047d6:	2b80      	cmp	r3, #128	; 0x80
 80047d8:	d814      	bhi.n	8004804 <UART_SetConfig+0x210>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <UART_SetConfig+0x1f0>
 80047de:	2b40      	cmp	r3, #64	; 0x40
 80047e0:	d008      	beq.n	80047f4 <UART_SetConfig+0x200>
 80047e2:	e00f      	b.n	8004804 <UART_SetConfig+0x210>
 80047e4:	2300      	movs	r3, #0
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ea:	e042      	b.n	8004872 <UART_SetConfig+0x27e>
 80047ec:	2302      	movs	r3, #2
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f2:	e03e      	b.n	8004872 <UART_SetConfig+0x27e>
 80047f4:	2304      	movs	r3, #4
 80047f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fa:	e03a      	b.n	8004872 <UART_SetConfig+0x27e>
 80047fc:	2308      	movs	r3, #8
 80047fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004802:	e036      	b.n	8004872 <UART_SetConfig+0x27e>
 8004804:	2310      	movs	r3, #16
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480a:	e032      	b.n	8004872 <UART_SetConfig+0x27e>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a30      	ldr	r2, [pc, #192]	; (80048d4 <UART_SetConfig+0x2e0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d12a      	bne.n	800486c <UART_SetConfig+0x278>
 8004816:	4b31      	ldr	r3, [pc, #196]	; (80048dc <UART_SetConfig+0x2e8>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004824:	d01a      	beq.n	800485c <UART_SetConfig+0x268>
 8004826:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800482a:	d81b      	bhi.n	8004864 <UART_SetConfig+0x270>
 800482c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004830:	d00c      	beq.n	800484c <UART_SetConfig+0x258>
 8004832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004836:	d815      	bhi.n	8004864 <UART_SetConfig+0x270>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <UART_SetConfig+0x250>
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004840:	d008      	beq.n	8004854 <UART_SetConfig+0x260>
 8004842:	e00f      	b.n	8004864 <UART_SetConfig+0x270>
 8004844:	2300      	movs	r3, #0
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800484a:	e012      	b.n	8004872 <UART_SetConfig+0x27e>
 800484c:	2302      	movs	r3, #2
 800484e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004852:	e00e      	b.n	8004872 <UART_SetConfig+0x27e>
 8004854:	2304      	movs	r3, #4
 8004856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800485a:	e00a      	b.n	8004872 <UART_SetConfig+0x27e>
 800485c:	2308      	movs	r3, #8
 800485e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004862:	e006      	b.n	8004872 <UART_SetConfig+0x27e>
 8004864:	2310      	movs	r3, #16
 8004866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486a:	e002      	b.n	8004872 <UART_SetConfig+0x27e>
 800486c:	2310      	movs	r3, #16
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <UART_SetConfig+0x2e0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	f040 80a8 	bne.w	80049ce <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800487e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004882:	2b08      	cmp	r3, #8
 8004884:	d834      	bhi.n	80048f0 <UART_SetConfig+0x2fc>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0x298>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048f1 	.word	0x080048f1
 8004894:	080048b9 	.word	0x080048b9
 8004898:	080048f1 	.word	0x080048f1
 800489c:	080048bf 	.word	0x080048bf
 80048a0:	080048f1 	.word	0x080048f1
 80048a4:	080048f1 	.word	0x080048f1
 80048a8:	080048f1 	.word	0x080048f1
 80048ac:	080048c7 	.word	0x080048c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7ff fb58 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 80048b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048b6:	e021      	b.n	80048fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <UART_SetConfig+0x2f8>)
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048bc:	e01e      	b.n	80048fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048be:	f7ff fae3 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 80048c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048c4:	e01a      	b.n	80048fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048cc:	e016      	b.n	80048fc <UART_SetConfig+0x308>
 80048ce:	bf00      	nop
 80048d0:	cfff69f3 	.word	0xcfff69f3
 80048d4:	40008000 	.word	0x40008000
 80048d8:	40013800 	.word	0x40013800
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40004400 	.word	0x40004400
 80048e4:	40004800 	.word	0x40004800
 80048e8:	40004c00 	.word	0x40004c00
 80048ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 812a 	beq.w	8004b58 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	4a9e      	ldr	r2, [pc, #632]	; (8004b84 <UART_SetConfig+0x590>)
 800490a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800490e:	461a      	mov	r2, r3
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	fbb3 f3f2 	udiv	r3, r3, r2
 8004916:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	4413      	add	r3, r2
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	429a      	cmp	r2, r3
 8004926:	d305      	bcc.n	8004934 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	429a      	cmp	r2, r3
 8004932:	d903      	bls.n	800493c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800493a:	e10d      	b.n	8004b58 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	2200      	movs	r2, #0
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	60fa      	str	r2, [r7, #12]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	4a8e      	ldr	r2, [pc, #568]	; (8004b84 <UART_SetConfig+0x590>)
 800494a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800494e:	b29b      	uxth	r3, r3
 8004950:	2200      	movs	r2, #0
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	607a      	str	r2, [r7, #4]
 8004956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800495a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800495e:	f7fc f9bb 	bl	8000cd8 <__aeabi_uldivmod>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4610      	mov	r0, r2
 8004968:	4619      	mov	r1, r3
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	020b      	lsls	r3, r1, #8
 8004974:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004978:	0202      	lsls	r2, r0, #8
 800497a:	6979      	ldr	r1, [r7, #20]
 800497c:	6849      	ldr	r1, [r1, #4]
 800497e:	0849      	lsrs	r1, r1, #1
 8004980:	2000      	movs	r0, #0
 8004982:	460c      	mov	r4, r1
 8004984:	4605      	mov	r5, r0
 8004986:	eb12 0804 	adds.w	r8, r2, r4
 800498a:	eb43 0905 	adc.w	r9, r3, r5
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	469a      	mov	sl, r3
 8004996:	4693      	mov	fp, r2
 8004998:	4652      	mov	r2, sl
 800499a:	465b      	mov	r3, fp
 800499c:	4640      	mov	r0, r8
 800499e:	4649      	mov	r1, r9
 80049a0:	f7fc f99a 	bl	8000cd8 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4613      	mov	r3, r2
 80049aa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b2:	d308      	bcc.n	80049c6 <UART_SetConfig+0x3d2>
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ba:	d204      	bcs.n	80049c6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6a3a      	ldr	r2, [r7, #32]
 80049c2:	60da      	str	r2, [r3, #12]
 80049c4:	e0c8      	b.n	8004b58 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049cc:	e0c4      	b.n	8004b58 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d6:	d167      	bne.n	8004aa8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80049d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d828      	bhi.n	8004a32 <UART_SetConfig+0x43e>
 80049e0:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <UART_SetConfig+0x3f4>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	08004a0d 	.word	0x08004a0d
 80049ec:	08004a15 	.word	0x08004a15
 80049f0:	08004a1d 	.word	0x08004a1d
 80049f4:	08004a33 	.word	0x08004a33
 80049f8:	08004a23 	.word	0x08004a23
 80049fc:	08004a33 	.word	0x08004a33
 8004a00:	08004a33 	.word	0x08004a33
 8004a04:	08004a33 	.word	0x08004a33
 8004a08:	08004a2b 	.word	0x08004a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a0c:	f7ff faaa 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 8004a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a12:	e014      	b.n	8004a3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a14:	f7ff fabc 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 8004a18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a1a:	e010      	b.n	8004a3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a1c:	4b5a      	ldr	r3, [pc, #360]	; (8004b88 <UART_SetConfig+0x594>)
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a20:	e00d      	b.n	8004a3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a22:	f7ff fa31 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 8004a26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a28:	e009      	b.n	8004a3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a30:	e005      	b.n	8004a3e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8089 	beq.w	8004b58 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	4a4e      	ldr	r2, [pc, #312]	; (8004b84 <UART_SetConfig+0x590>)
 8004a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a50:	461a      	mov	r2, r3
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a58:	005a      	lsls	r2, r3, #1
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	085b      	lsrs	r3, r3, #1
 8004a60:	441a      	add	r2, r3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d916      	bls.n	8004aa0 <UART_SetConfig+0x4ac>
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d212      	bcs.n	8004aa0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f023 030f 	bic.w	r3, r3, #15
 8004a82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	8bfb      	ldrh	r3, [r7, #30]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	8bfa      	ldrh	r2, [r7, #30]
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	e05b      	b.n	8004b58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004aa6:	e057      	b.n	8004b58 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d828      	bhi.n	8004b02 <UART_SetConfig+0x50e>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <UART_SetConfig+0x4c4>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004ae5 	.word	0x08004ae5
 8004ac0:	08004aed 	.word	0x08004aed
 8004ac4:	08004b03 	.word	0x08004b03
 8004ac8:	08004af3 	.word	0x08004af3
 8004acc:	08004b03 	.word	0x08004b03
 8004ad0:	08004b03 	.word	0x08004b03
 8004ad4:	08004b03 	.word	0x08004b03
 8004ad8:	08004afb 	.word	0x08004afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004adc:	f7ff fa42 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ae2:	e014      	b.n	8004b0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae4:	f7ff fa54 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 8004ae8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aea:	e010      	b.n	8004b0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aec:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <UART_SetConfig+0x594>)
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004af0:	e00d      	b.n	8004b0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af2:	f7ff f9c9 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 8004af6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004af8:	e009      	b.n	8004b0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b00:	e005      	b.n	8004b0e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d021      	beq.n	8004b58 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <UART_SetConfig+0x590>)
 8004b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	441a      	add	r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	2b0f      	cmp	r3, #15
 8004b3c:	d909      	bls.n	8004b52 <UART_SetConfig+0x55e>
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d205      	bcs.n	8004b52 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60da      	str	r2, [r3, #12]
 8004b50:	e002      	b.n	8004b58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004b74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3730      	adds	r7, #48	; 0x30
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b82:	bf00      	nop
 8004b84:	0800a098 	.word	0x0800a098
 8004b88:	00f42400 	.word	0x00f42400

08004b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8a:	d10a      	bne.n	8004ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ce0:	f7fc ffb6 	bl	8001c50 <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d10e      	bne.n	8004d12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f82f 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e025      	b.n	8004d5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d10e      	bne.n	8004d3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f819 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e00f      	b.n	8004d5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b09c      	sub	sp, #112	; 0x70
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d76:	e0a9      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	f000 80a5 	beq.w	8004ecc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d82:	f7fc ff65 	bl	8001c50 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d302      	bcc.n	8004d98 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d140      	bne.n	8004e1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dac:	667b      	str	r3, [r7, #100]	; 0x64
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004db8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e6      	bne.n	8004d98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3308      	adds	r3, #8
 8004dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	663b      	str	r3, [r7, #96]	; 0x60
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3308      	adds	r3, #8
 8004de8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dea:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e5      	bne.n	8004dca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e069      	b.n	8004eee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d051      	beq.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e36:	d149      	bne.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
 8004e62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e6      	bne.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3308      	adds	r3, #8
 8004e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	613b      	str	r3, [r7, #16]
   return(result);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e94:	623a      	str	r2, [r7, #32]
 8004e96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	69f9      	ldr	r1, [r7, #28]
 8004e9a:	6a3a      	ldr	r2, [r7, #32]
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e5      	bne.n	8004e74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e010      	b.n	8004eee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	f43f af46 	beq.w	8004d78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3770      	adds	r7, #112	; 0x70
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_UARTEx_DisableFifoMode+0x16>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e027      	b.n	8004f5c <HAL_UARTEx_DisableFifoMode+0x66>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2224      	movs	r2, #36	; 0x24
 8004f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e02d      	b.n	8004fdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2224      	movs	r2, #36	; 0x24
 8004f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f84f 	bl	8005060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e02d      	b.n	8005058 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2224      	movs	r2, #36	; 0x24
 8005008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f811 	bl	8005060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800506c:	2b00      	cmp	r3, #0
 800506e:	d108      	bne.n	8005082 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005080:	e031      	b.n	80050e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005082:	2308      	movs	r3, #8
 8005084:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005086:	2308      	movs	r3, #8
 8005088:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	0e5b      	lsrs	r3, r3, #25
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	0f5b      	lsrs	r3, r3, #29
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050aa:	7bbb      	ldrb	r3, [r7, #14]
 80050ac:	7b3a      	ldrb	r2, [r7, #12]
 80050ae:	4911      	ldr	r1, [pc, #68]	; (80050f4 <UARTEx_SetNbDataToProcess+0x94>)
 80050b0:	5c8a      	ldrb	r2, [r1, r2]
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80050b6:	7b3a      	ldrb	r2, [r7, #12]
 80050b8:	490f      	ldr	r1, [pc, #60]	; (80050f8 <UARTEx_SetNbDataToProcess+0x98>)
 80050ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	7b7a      	ldrb	r2, [r7, #13]
 80050cc:	4909      	ldr	r1, [pc, #36]	; (80050f4 <UARTEx_SetNbDataToProcess+0x94>)
 80050ce:	5c8a      	ldrb	r2, [r1, r2]
 80050d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050d4:	7b7a      	ldrb	r2, [r7, #13]
 80050d6:	4908      	ldr	r1, [pc, #32]	; (80050f8 <UARTEx_SetNbDataToProcess+0x98>)
 80050d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050da:	fb93 f3f2 	sdiv	r3, r3, r2
 80050de:	b29a      	uxth	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	0800a0b0 	.word	0x0800a0b0
 80050f8:	0800a0b8 	.word	0x0800a0b8

080050fc <__errno>:
 80050fc:	4b01      	ldr	r3, [pc, #4]	; (8005104 <__errno+0x8>)
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	2000000c 	.word	0x2000000c

08005108 <__libc_init_array>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	4d0d      	ldr	r5, [pc, #52]	; (8005140 <__libc_init_array+0x38>)
 800510c:	4c0d      	ldr	r4, [pc, #52]	; (8005144 <__libc_init_array+0x3c>)
 800510e:	1b64      	subs	r4, r4, r5
 8005110:	10a4      	asrs	r4, r4, #2
 8005112:	2600      	movs	r6, #0
 8005114:	42a6      	cmp	r6, r4
 8005116:	d109      	bne.n	800512c <__libc_init_array+0x24>
 8005118:	4d0b      	ldr	r5, [pc, #44]	; (8005148 <__libc_init_array+0x40>)
 800511a:	4c0c      	ldr	r4, [pc, #48]	; (800514c <__libc_init_array+0x44>)
 800511c:	f004 fd7a 	bl	8009c14 <_init>
 8005120:	1b64      	subs	r4, r4, r5
 8005122:	10a4      	asrs	r4, r4, #2
 8005124:	2600      	movs	r6, #0
 8005126:	42a6      	cmp	r6, r4
 8005128:	d105      	bne.n	8005136 <__libc_init_array+0x2e>
 800512a:	bd70      	pop	{r4, r5, r6, pc}
 800512c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005130:	4798      	blx	r3
 8005132:	3601      	adds	r6, #1
 8005134:	e7ee      	b.n	8005114 <__libc_init_array+0xc>
 8005136:	f855 3b04 	ldr.w	r3, [r5], #4
 800513a:	4798      	blx	r3
 800513c:	3601      	adds	r6, #1
 800513e:	e7f2      	b.n	8005126 <__libc_init_array+0x1e>
 8005140:	0800a574 	.word	0x0800a574
 8005144:	0800a574 	.word	0x0800a574
 8005148:	0800a574 	.word	0x0800a574
 800514c:	0800a578 	.word	0x0800a578

08005150 <memset>:
 8005150:	4402      	add	r2, r0
 8005152:	4603      	mov	r3, r0
 8005154:	4293      	cmp	r3, r2
 8005156:	d100      	bne.n	800515a <memset+0xa>
 8005158:	4770      	bx	lr
 800515a:	f803 1b01 	strb.w	r1, [r3], #1
 800515e:	e7f9      	b.n	8005154 <memset+0x4>

08005160 <__cvt>:
 8005160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	ec55 4b10 	vmov	r4, r5, d0
 8005168:	2d00      	cmp	r5, #0
 800516a:	460e      	mov	r6, r1
 800516c:	4619      	mov	r1, r3
 800516e:	462b      	mov	r3, r5
 8005170:	bfbb      	ittet	lt
 8005172:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005176:	461d      	movlt	r5, r3
 8005178:	2300      	movge	r3, #0
 800517a:	232d      	movlt	r3, #45	; 0x2d
 800517c:	700b      	strb	r3, [r1, #0]
 800517e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005180:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005184:	4691      	mov	r9, r2
 8005186:	f023 0820 	bic.w	r8, r3, #32
 800518a:	bfbc      	itt	lt
 800518c:	4622      	movlt	r2, r4
 800518e:	4614      	movlt	r4, r2
 8005190:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005194:	d005      	beq.n	80051a2 <__cvt+0x42>
 8005196:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800519a:	d100      	bne.n	800519e <__cvt+0x3e>
 800519c:	3601      	adds	r6, #1
 800519e:	2102      	movs	r1, #2
 80051a0:	e000      	b.n	80051a4 <__cvt+0x44>
 80051a2:	2103      	movs	r1, #3
 80051a4:	ab03      	add	r3, sp, #12
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	ab02      	add	r3, sp, #8
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	ec45 4b10 	vmov	d0, r4, r5
 80051b0:	4653      	mov	r3, sl
 80051b2:	4632      	mov	r2, r6
 80051b4:	f001 ff10 	bl	8006fd8 <_dtoa_r>
 80051b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051bc:	4607      	mov	r7, r0
 80051be:	d102      	bne.n	80051c6 <__cvt+0x66>
 80051c0:	f019 0f01 	tst.w	r9, #1
 80051c4:	d022      	beq.n	800520c <__cvt+0xac>
 80051c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051ca:	eb07 0906 	add.w	r9, r7, r6
 80051ce:	d110      	bne.n	80051f2 <__cvt+0x92>
 80051d0:	783b      	ldrb	r3, [r7, #0]
 80051d2:	2b30      	cmp	r3, #48	; 0x30
 80051d4:	d10a      	bne.n	80051ec <__cvt+0x8c>
 80051d6:	2200      	movs	r2, #0
 80051d8:	2300      	movs	r3, #0
 80051da:	4620      	mov	r0, r4
 80051dc:	4629      	mov	r1, r5
 80051de:	f7fb fc9b 	bl	8000b18 <__aeabi_dcmpeq>
 80051e2:	b918      	cbnz	r0, 80051ec <__cvt+0x8c>
 80051e4:	f1c6 0601 	rsb	r6, r6, #1
 80051e8:	f8ca 6000 	str.w	r6, [sl]
 80051ec:	f8da 3000 	ldr.w	r3, [sl]
 80051f0:	4499      	add	r9, r3
 80051f2:	2200      	movs	r2, #0
 80051f4:	2300      	movs	r3, #0
 80051f6:	4620      	mov	r0, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	f7fb fc8d 	bl	8000b18 <__aeabi_dcmpeq>
 80051fe:	b108      	cbz	r0, 8005204 <__cvt+0xa4>
 8005200:	f8cd 900c 	str.w	r9, [sp, #12]
 8005204:	2230      	movs	r2, #48	; 0x30
 8005206:	9b03      	ldr	r3, [sp, #12]
 8005208:	454b      	cmp	r3, r9
 800520a:	d307      	bcc.n	800521c <__cvt+0xbc>
 800520c:	9b03      	ldr	r3, [sp, #12]
 800520e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005210:	1bdb      	subs	r3, r3, r7
 8005212:	4638      	mov	r0, r7
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	b004      	add	sp, #16
 8005218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521c:	1c59      	adds	r1, r3, #1
 800521e:	9103      	str	r1, [sp, #12]
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	e7f0      	b.n	8005206 <__cvt+0xa6>

08005224 <__exponent>:
 8005224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005226:	4603      	mov	r3, r0
 8005228:	2900      	cmp	r1, #0
 800522a:	bfb8      	it	lt
 800522c:	4249      	neglt	r1, r1
 800522e:	f803 2b02 	strb.w	r2, [r3], #2
 8005232:	bfb4      	ite	lt
 8005234:	222d      	movlt	r2, #45	; 0x2d
 8005236:	222b      	movge	r2, #43	; 0x2b
 8005238:	2909      	cmp	r1, #9
 800523a:	7042      	strb	r2, [r0, #1]
 800523c:	dd2a      	ble.n	8005294 <__exponent+0x70>
 800523e:	f10d 0407 	add.w	r4, sp, #7
 8005242:	46a4      	mov	ip, r4
 8005244:	270a      	movs	r7, #10
 8005246:	46a6      	mov	lr, r4
 8005248:	460a      	mov	r2, r1
 800524a:	fb91 f6f7 	sdiv	r6, r1, r7
 800524e:	fb07 1516 	mls	r5, r7, r6, r1
 8005252:	3530      	adds	r5, #48	; 0x30
 8005254:	2a63      	cmp	r2, #99	; 0x63
 8005256:	f104 34ff 	add.w	r4, r4, #4294967295
 800525a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800525e:	4631      	mov	r1, r6
 8005260:	dcf1      	bgt.n	8005246 <__exponent+0x22>
 8005262:	3130      	adds	r1, #48	; 0x30
 8005264:	f1ae 0502 	sub.w	r5, lr, #2
 8005268:	f804 1c01 	strb.w	r1, [r4, #-1]
 800526c:	1c44      	adds	r4, r0, #1
 800526e:	4629      	mov	r1, r5
 8005270:	4561      	cmp	r1, ip
 8005272:	d30a      	bcc.n	800528a <__exponent+0x66>
 8005274:	f10d 0209 	add.w	r2, sp, #9
 8005278:	eba2 020e 	sub.w	r2, r2, lr
 800527c:	4565      	cmp	r5, ip
 800527e:	bf88      	it	hi
 8005280:	2200      	movhi	r2, #0
 8005282:	4413      	add	r3, r2
 8005284:	1a18      	subs	r0, r3, r0
 8005286:	b003      	add	sp, #12
 8005288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800528a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800528e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005292:	e7ed      	b.n	8005270 <__exponent+0x4c>
 8005294:	2330      	movs	r3, #48	; 0x30
 8005296:	3130      	adds	r1, #48	; 0x30
 8005298:	7083      	strb	r3, [r0, #2]
 800529a:	70c1      	strb	r1, [r0, #3]
 800529c:	1d03      	adds	r3, r0, #4
 800529e:	e7f1      	b.n	8005284 <__exponent+0x60>

080052a0 <_printf_float>:
 80052a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a4:	ed2d 8b02 	vpush	{d8}
 80052a8:	b08d      	sub	sp, #52	; 0x34
 80052aa:	460c      	mov	r4, r1
 80052ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052b0:	4616      	mov	r6, r2
 80052b2:	461f      	mov	r7, r3
 80052b4:	4605      	mov	r5, r0
 80052b6:	f003 f9a3 	bl	8008600 <_localeconv_r>
 80052ba:	f8d0 a000 	ldr.w	sl, [r0]
 80052be:	4650      	mov	r0, sl
 80052c0:	f7fa ffae 	bl	8000220 <strlen>
 80052c4:	2300      	movs	r3, #0
 80052c6:	930a      	str	r3, [sp, #40]	; 0x28
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	9305      	str	r3, [sp, #20]
 80052cc:	f8d8 3000 	ldr.w	r3, [r8]
 80052d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80052d4:	3307      	adds	r3, #7
 80052d6:	f023 0307 	bic.w	r3, r3, #7
 80052da:	f103 0208 	add.w	r2, r3, #8
 80052de:	f8c8 2000 	str.w	r2, [r8]
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80052ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80052f2:	9307      	str	r3, [sp, #28]
 80052f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80052f8:	ee08 0a10 	vmov	s16, r0
 80052fc:	4b9f      	ldr	r3, [pc, #636]	; (800557c <_printf_float+0x2dc>)
 80052fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005302:	f04f 32ff 	mov.w	r2, #4294967295
 8005306:	f7fb fc39 	bl	8000b7c <__aeabi_dcmpun>
 800530a:	bb88      	cbnz	r0, 8005370 <_printf_float+0xd0>
 800530c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005310:	4b9a      	ldr	r3, [pc, #616]	; (800557c <_printf_float+0x2dc>)
 8005312:	f04f 32ff 	mov.w	r2, #4294967295
 8005316:	f7fb fc13 	bl	8000b40 <__aeabi_dcmple>
 800531a:	bb48      	cbnz	r0, 8005370 <_printf_float+0xd0>
 800531c:	2200      	movs	r2, #0
 800531e:	2300      	movs	r3, #0
 8005320:	4640      	mov	r0, r8
 8005322:	4649      	mov	r1, r9
 8005324:	f7fb fc02 	bl	8000b2c <__aeabi_dcmplt>
 8005328:	b110      	cbz	r0, 8005330 <_printf_float+0x90>
 800532a:	232d      	movs	r3, #45	; 0x2d
 800532c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005330:	4b93      	ldr	r3, [pc, #588]	; (8005580 <_printf_float+0x2e0>)
 8005332:	4894      	ldr	r0, [pc, #592]	; (8005584 <_printf_float+0x2e4>)
 8005334:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005338:	bf94      	ite	ls
 800533a:	4698      	movls	r8, r3
 800533c:	4680      	movhi	r8, r0
 800533e:	2303      	movs	r3, #3
 8005340:	6123      	str	r3, [r4, #16]
 8005342:	9b05      	ldr	r3, [sp, #20]
 8005344:	f023 0204 	bic.w	r2, r3, #4
 8005348:	6022      	str	r2, [r4, #0]
 800534a:	f04f 0900 	mov.w	r9, #0
 800534e:	9700      	str	r7, [sp, #0]
 8005350:	4633      	mov	r3, r6
 8005352:	aa0b      	add	r2, sp, #44	; 0x2c
 8005354:	4621      	mov	r1, r4
 8005356:	4628      	mov	r0, r5
 8005358:	f000 f9d8 	bl	800570c <_printf_common>
 800535c:	3001      	adds	r0, #1
 800535e:	f040 8090 	bne.w	8005482 <_printf_float+0x1e2>
 8005362:	f04f 30ff 	mov.w	r0, #4294967295
 8005366:	b00d      	add	sp, #52	; 0x34
 8005368:	ecbd 8b02 	vpop	{d8}
 800536c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005370:	4642      	mov	r2, r8
 8005372:	464b      	mov	r3, r9
 8005374:	4640      	mov	r0, r8
 8005376:	4649      	mov	r1, r9
 8005378:	f7fb fc00 	bl	8000b7c <__aeabi_dcmpun>
 800537c:	b140      	cbz	r0, 8005390 <_printf_float+0xf0>
 800537e:	464b      	mov	r3, r9
 8005380:	2b00      	cmp	r3, #0
 8005382:	bfbc      	itt	lt
 8005384:	232d      	movlt	r3, #45	; 0x2d
 8005386:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800538a:	487f      	ldr	r0, [pc, #508]	; (8005588 <_printf_float+0x2e8>)
 800538c:	4b7f      	ldr	r3, [pc, #508]	; (800558c <_printf_float+0x2ec>)
 800538e:	e7d1      	b.n	8005334 <_printf_float+0x94>
 8005390:	6863      	ldr	r3, [r4, #4]
 8005392:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005396:	9206      	str	r2, [sp, #24]
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	d13f      	bne.n	800541c <_printf_float+0x17c>
 800539c:	2306      	movs	r3, #6
 800539e:	6063      	str	r3, [r4, #4]
 80053a0:	9b05      	ldr	r3, [sp, #20]
 80053a2:	6861      	ldr	r1, [r4, #4]
 80053a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053a8:	2300      	movs	r3, #0
 80053aa:	9303      	str	r3, [sp, #12]
 80053ac:	ab0a      	add	r3, sp, #40	; 0x28
 80053ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053b2:	ab09      	add	r3, sp, #36	; 0x24
 80053b4:	ec49 8b10 	vmov	d0, r8, r9
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	6022      	str	r2, [r4, #0]
 80053bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053c0:	4628      	mov	r0, r5
 80053c2:	f7ff fecd 	bl	8005160 <__cvt>
 80053c6:	9b06      	ldr	r3, [sp, #24]
 80053c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053ca:	2b47      	cmp	r3, #71	; 0x47
 80053cc:	4680      	mov	r8, r0
 80053ce:	d108      	bne.n	80053e2 <_printf_float+0x142>
 80053d0:	1cc8      	adds	r0, r1, #3
 80053d2:	db02      	blt.n	80053da <_printf_float+0x13a>
 80053d4:	6863      	ldr	r3, [r4, #4]
 80053d6:	4299      	cmp	r1, r3
 80053d8:	dd41      	ble.n	800545e <_printf_float+0x1be>
 80053da:	f1ab 0b02 	sub.w	fp, fp, #2
 80053de:	fa5f fb8b 	uxtb.w	fp, fp
 80053e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053e6:	d820      	bhi.n	800542a <_printf_float+0x18a>
 80053e8:	3901      	subs	r1, #1
 80053ea:	465a      	mov	r2, fp
 80053ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053f0:	9109      	str	r1, [sp, #36]	; 0x24
 80053f2:	f7ff ff17 	bl	8005224 <__exponent>
 80053f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053f8:	1813      	adds	r3, r2, r0
 80053fa:	2a01      	cmp	r2, #1
 80053fc:	4681      	mov	r9, r0
 80053fe:	6123      	str	r3, [r4, #16]
 8005400:	dc02      	bgt.n	8005408 <_printf_float+0x168>
 8005402:	6822      	ldr	r2, [r4, #0]
 8005404:	07d2      	lsls	r2, r2, #31
 8005406:	d501      	bpl.n	800540c <_printf_float+0x16c>
 8005408:	3301      	adds	r3, #1
 800540a:	6123      	str	r3, [r4, #16]
 800540c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005410:	2b00      	cmp	r3, #0
 8005412:	d09c      	beq.n	800534e <_printf_float+0xae>
 8005414:	232d      	movs	r3, #45	; 0x2d
 8005416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800541a:	e798      	b.n	800534e <_printf_float+0xae>
 800541c:	9a06      	ldr	r2, [sp, #24]
 800541e:	2a47      	cmp	r2, #71	; 0x47
 8005420:	d1be      	bne.n	80053a0 <_printf_float+0x100>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1bc      	bne.n	80053a0 <_printf_float+0x100>
 8005426:	2301      	movs	r3, #1
 8005428:	e7b9      	b.n	800539e <_printf_float+0xfe>
 800542a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800542e:	d118      	bne.n	8005462 <_printf_float+0x1c2>
 8005430:	2900      	cmp	r1, #0
 8005432:	6863      	ldr	r3, [r4, #4]
 8005434:	dd0b      	ble.n	800544e <_printf_float+0x1ae>
 8005436:	6121      	str	r1, [r4, #16]
 8005438:	b913      	cbnz	r3, 8005440 <_printf_float+0x1a0>
 800543a:	6822      	ldr	r2, [r4, #0]
 800543c:	07d0      	lsls	r0, r2, #31
 800543e:	d502      	bpl.n	8005446 <_printf_float+0x1a6>
 8005440:	3301      	adds	r3, #1
 8005442:	440b      	add	r3, r1
 8005444:	6123      	str	r3, [r4, #16]
 8005446:	65a1      	str	r1, [r4, #88]	; 0x58
 8005448:	f04f 0900 	mov.w	r9, #0
 800544c:	e7de      	b.n	800540c <_printf_float+0x16c>
 800544e:	b913      	cbnz	r3, 8005456 <_printf_float+0x1b6>
 8005450:	6822      	ldr	r2, [r4, #0]
 8005452:	07d2      	lsls	r2, r2, #31
 8005454:	d501      	bpl.n	800545a <_printf_float+0x1ba>
 8005456:	3302      	adds	r3, #2
 8005458:	e7f4      	b.n	8005444 <_printf_float+0x1a4>
 800545a:	2301      	movs	r3, #1
 800545c:	e7f2      	b.n	8005444 <_printf_float+0x1a4>
 800545e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005464:	4299      	cmp	r1, r3
 8005466:	db05      	blt.n	8005474 <_printf_float+0x1d4>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	6121      	str	r1, [r4, #16]
 800546c:	07d8      	lsls	r0, r3, #31
 800546e:	d5ea      	bpl.n	8005446 <_printf_float+0x1a6>
 8005470:	1c4b      	adds	r3, r1, #1
 8005472:	e7e7      	b.n	8005444 <_printf_float+0x1a4>
 8005474:	2900      	cmp	r1, #0
 8005476:	bfd4      	ite	le
 8005478:	f1c1 0202 	rsble	r2, r1, #2
 800547c:	2201      	movgt	r2, #1
 800547e:	4413      	add	r3, r2
 8005480:	e7e0      	b.n	8005444 <_printf_float+0x1a4>
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	055a      	lsls	r2, r3, #21
 8005486:	d407      	bmi.n	8005498 <_printf_float+0x1f8>
 8005488:	6923      	ldr	r3, [r4, #16]
 800548a:	4642      	mov	r2, r8
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	47b8      	blx	r7
 8005492:	3001      	adds	r0, #1
 8005494:	d12c      	bne.n	80054f0 <_printf_float+0x250>
 8005496:	e764      	b.n	8005362 <_printf_float+0xc2>
 8005498:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800549c:	f240 80e0 	bls.w	8005660 <_printf_float+0x3c0>
 80054a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054a4:	2200      	movs	r2, #0
 80054a6:	2300      	movs	r3, #0
 80054a8:	f7fb fb36 	bl	8000b18 <__aeabi_dcmpeq>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d034      	beq.n	800551a <_printf_float+0x27a>
 80054b0:	4a37      	ldr	r2, [pc, #220]	; (8005590 <_printf_float+0x2f0>)
 80054b2:	2301      	movs	r3, #1
 80054b4:	4631      	mov	r1, r6
 80054b6:	4628      	mov	r0, r5
 80054b8:	47b8      	blx	r7
 80054ba:	3001      	adds	r0, #1
 80054bc:	f43f af51 	beq.w	8005362 <_printf_float+0xc2>
 80054c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054c4:	429a      	cmp	r2, r3
 80054c6:	db02      	blt.n	80054ce <_printf_float+0x22e>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	07d8      	lsls	r0, r3, #31
 80054cc:	d510      	bpl.n	80054f0 <_printf_float+0x250>
 80054ce:	ee18 3a10 	vmov	r3, s16
 80054d2:	4652      	mov	r2, sl
 80054d4:	4631      	mov	r1, r6
 80054d6:	4628      	mov	r0, r5
 80054d8:	47b8      	blx	r7
 80054da:	3001      	adds	r0, #1
 80054dc:	f43f af41 	beq.w	8005362 <_printf_float+0xc2>
 80054e0:	f04f 0800 	mov.w	r8, #0
 80054e4:	f104 091a 	add.w	r9, r4, #26
 80054e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ea:	3b01      	subs	r3, #1
 80054ec:	4543      	cmp	r3, r8
 80054ee:	dc09      	bgt.n	8005504 <_printf_float+0x264>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	079b      	lsls	r3, r3, #30
 80054f4:	f100 8105 	bmi.w	8005702 <_printf_float+0x462>
 80054f8:	68e0      	ldr	r0, [r4, #12]
 80054fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054fc:	4298      	cmp	r0, r3
 80054fe:	bfb8      	it	lt
 8005500:	4618      	movlt	r0, r3
 8005502:	e730      	b.n	8005366 <_printf_float+0xc6>
 8005504:	2301      	movs	r3, #1
 8005506:	464a      	mov	r2, r9
 8005508:	4631      	mov	r1, r6
 800550a:	4628      	mov	r0, r5
 800550c:	47b8      	blx	r7
 800550e:	3001      	adds	r0, #1
 8005510:	f43f af27 	beq.w	8005362 <_printf_float+0xc2>
 8005514:	f108 0801 	add.w	r8, r8, #1
 8005518:	e7e6      	b.n	80054e8 <_printf_float+0x248>
 800551a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	dc39      	bgt.n	8005594 <_printf_float+0x2f4>
 8005520:	4a1b      	ldr	r2, [pc, #108]	; (8005590 <_printf_float+0x2f0>)
 8005522:	2301      	movs	r3, #1
 8005524:	4631      	mov	r1, r6
 8005526:	4628      	mov	r0, r5
 8005528:	47b8      	blx	r7
 800552a:	3001      	adds	r0, #1
 800552c:	f43f af19 	beq.w	8005362 <_printf_float+0xc2>
 8005530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005534:	4313      	orrs	r3, r2
 8005536:	d102      	bne.n	800553e <_printf_float+0x29e>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	07d9      	lsls	r1, r3, #31
 800553c:	d5d8      	bpl.n	80054f0 <_printf_float+0x250>
 800553e:	ee18 3a10 	vmov	r3, s16
 8005542:	4652      	mov	r2, sl
 8005544:	4631      	mov	r1, r6
 8005546:	4628      	mov	r0, r5
 8005548:	47b8      	blx	r7
 800554a:	3001      	adds	r0, #1
 800554c:	f43f af09 	beq.w	8005362 <_printf_float+0xc2>
 8005550:	f04f 0900 	mov.w	r9, #0
 8005554:	f104 0a1a 	add.w	sl, r4, #26
 8005558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555a:	425b      	negs	r3, r3
 800555c:	454b      	cmp	r3, r9
 800555e:	dc01      	bgt.n	8005564 <_printf_float+0x2c4>
 8005560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005562:	e792      	b.n	800548a <_printf_float+0x1ea>
 8005564:	2301      	movs	r3, #1
 8005566:	4652      	mov	r2, sl
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	47b8      	blx	r7
 800556e:	3001      	adds	r0, #1
 8005570:	f43f aef7 	beq.w	8005362 <_printf_float+0xc2>
 8005574:	f109 0901 	add.w	r9, r9, #1
 8005578:	e7ee      	b.n	8005558 <_printf_float+0x2b8>
 800557a:	bf00      	nop
 800557c:	7fefffff 	.word	0x7fefffff
 8005580:	0800a0c4 	.word	0x0800a0c4
 8005584:	0800a0c8 	.word	0x0800a0c8
 8005588:	0800a0d0 	.word	0x0800a0d0
 800558c:	0800a0cc 	.word	0x0800a0cc
 8005590:	0800a0d4 	.word	0x0800a0d4
 8005594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005598:	429a      	cmp	r2, r3
 800559a:	bfa8      	it	ge
 800559c:	461a      	movge	r2, r3
 800559e:	2a00      	cmp	r2, #0
 80055a0:	4691      	mov	r9, r2
 80055a2:	dc37      	bgt.n	8005614 <_printf_float+0x374>
 80055a4:	f04f 0b00 	mov.w	fp, #0
 80055a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055ac:	f104 021a 	add.w	r2, r4, #26
 80055b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055b2:	9305      	str	r3, [sp, #20]
 80055b4:	eba3 0309 	sub.w	r3, r3, r9
 80055b8:	455b      	cmp	r3, fp
 80055ba:	dc33      	bgt.n	8005624 <_printf_float+0x384>
 80055bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055c0:	429a      	cmp	r2, r3
 80055c2:	db3b      	blt.n	800563c <_printf_float+0x39c>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	07da      	lsls	r2, r3, #31
 80055c8:	d438      	bmi.n	800563c <_printf_float+0x39c>
 80055ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055cc:	9a05      	ldr	r2, [sp, #20]
 80055ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055d0:	1a9a      	subs	r2, r3, r2
 80055d2:	eba3 0901 	sub.w	r9, r3, r1
 80055d6:	4591      	cmp	r9, r2
 80055d8:	bfa8      	it	ge
 80055da:	4691      	movge	r9, r2
 80055dc:	f1b9 0f00 	cmp.w	r9, #0
 80055e0:	dc35      	bgt.n	800564e <_printf_float+0x3ae>
 80055e2:	f04f 0800 	mov.w	r8, #0
 80055e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055ea:	f104 0a1a 	add.w	sl, r4, #26
 80055ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	eba3 0309 	sub.w	r3, r3, r9
 80055f8:	4543      	cmp	r3, r8
 80055fa:	f77f af79 	ble.w	80054f0 <_printf_float+0x250>
 80055fe:	2301      	movs	r3, #1
 8005600:	4652      	mov	r2, sl
 8005602:	4631      	mov	r1, r6
 8005604:	4628      	mov	r0, r5
 8005606:	47b8      	blx	r7
 8005608:	3001      	adds	r0, #1
 800560a:	f43f aeaa 	beq.w	8005362 <_printf_float+0xc2>
 800560e:	f108 0801 	add.w	r8, r8, #1
 8005612:	e7ec      	b.n	80055ee <_printf_float+0x34e>
 8005614:	4613      	mov	r3, r2
 8005616:	4631      	mov	r1, r6
 8005618:	4642      	mov	r2, r8
 800561a:	4628      	mov	r0, r5
 800561c:	47b8      	blx	r7
 800561e:	3001      	adds	r0, #1
 8005620:	d1c0      	bne.n	80055a4 <_printf_float+0x304>
 8005622:	e69e      	b.n	8005362 <_printf_float+0xc2>
 8005624:	2301      	movs	r3, #1
 8005626:	4631      	mov	r1, r6
 8005628:	4628      	mov	r0, r5
 800562a:	9205      	str	r2, [sp, #20]
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	f43f ae97 	beq.w	8005362 <_printf_float+0xc2>
 8005634:	9a05      	ldr	r2, [sp, #20]
 8005636:	f10b 0b01 	add.w	fp, fp, #1
 800563a:	e7b9      	b.n	80055b0 <_printf_float+0x310>
 800563c:	ee18 3a10 	vmov	r3, s16
 8005640:	4652      	mov	r2, sl
 8005642:	4631      	mov	r1, r6
 8005644:	4628      	mov	r0, r5
 8005646:	47b8      	blx	r7
 8005648:	3001      	adds	r0, #1
 800564a:	d1be      	bne.n	80055ca <_printf_float+0x32a>
 800564c:	e689      	b.n	8005362 <_printf_float+0xc2>
 800564e:	9a05      	ldr	r2, [sp, #20]
 8005650:	464b      	mov	r3, r9
 8005652:	4442      	add	r2, r8
 8005654:	4631      	mov	r1, r6
 8005656:	4628      	mov	r0, r5
 8005658:	47b8      	blx	r7
 800565a:	3001      	adds	r0, #1
 800565c:	d1c1      	bne.n	80055e2 <_printf_float+0x342>
 800565e:	e680      	b.n	8005362 <_printf_float+0xc2>
 8005660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005662:	2a01      	cmp	r2, #1
 8005664:	dc01      	bgt.n	800566a <_printf_float+0x3ca>
 8005666:	07db      	lsls	r3, r3, #31
 8005668:	d538      	bpl.n	80056dc <_printf_float+0x43c>
 800566a:	2301      	movs	r3, #1
 800566c:	4642      	mov	r2, r8
 800566e:	4631      	mov	r1, r6
 8005670:	4628      	mov	r0, r5
 8005672:	47b8      	blx	r7
 8005674:	3001      	adds	r0, #1
 8005676:	f43f ae74 	beq.w	8005362 <_printf_float+0xc2>
 800567a:	ee18 3a10 	vmov	r3, s16
 800567e:	4652      	mov	r2, sl
 8005680:	4631      	mov	r1, r6
 8005682:	4628      	mov	r0, r5
 8005684:	47b8      	blx	r7
 8005686:	3001      	adds	r0, #1
 8005688:	f43f ae6b 	beq.w	8005362 <_printf_float+0xc2>
 800568c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005690:	2200      	movs	r2, #0
 8005692:	2300      	movs	r3, #0
 8005694:	f7fb fa40 	bl	8000b18 <__aeabi_dcmpeq>
 8005698:	b9d8      	cbnz	r0, 80056d2 <_printf_float+0x432>
 800569a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800569c:	f108 0201 	add.w	r2, r8, #1
 80056a0:	3b01      	subs	r3, #1
 80056a2:	4631      	mov	r1, r6
 80056a4:	4628      	mov	r0, r5
 80056a6:	47b8      	blx	r7
 80056a8:	3001      	adds	r0, #1
 80056aa:	d10e      	bne.n	80056ca <_printf_float+0x42a>
 80056ac:	e659      	b.n	8005362 <_printf_float+0xc2>
 80056ae:	2301      	movs	r3, #1
 80056b0:	4652      	mov	r2, sl
 80056b2:	4631      	mov	r1, r6
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b8      	blx	r7
 80056b8:	3001      	adds	r0, #1
 80056ba:	f43f ae52 	beq.w	8005362 <_printf_float+0xc2>
 80056be:	f108 0801 	add.w	r8, r8, #1
 80056c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c4:	3b01      	subs	r3, #1
 80056c6:	4543      	cmp	r3, r8
 80056c8:	dcf1      	bgt.n	80056ae <_printf_float+0x40e>
 80056ca:	464b      	mov	r3, r9
 80056cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056d0:	e6dc      	b.n	800548c <_printf_float+0x1ec>
 80056d2:	f04f 0800 	mov.w	r8, #0
 80056d6:	f104 0a1a 	add.w	sl, r4, #26
 80056da:	e7f2      	b.n	80056c2 <_printf_float+0x422>
 80056dc:	2301      	movs	r3, #1
 80056de:	4642      	mov	r2, r8
 80056e0:	e7df      	b.n	80056a2 <_printf_float+0x402>
 80056e2:	2301      	movs	r3, #1
 80056e4:	464a      	mov	r2, r9
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b8      	blx	r7
 80056ec:	3001      	adds	r0, #1
 80056ee:	f43f ae38 	beq.w	8005362 <_printf_float+0xc2>
 80056f2:	f108 0801 	add.w	r8, r8, #1
 80056f6:	68e3      	ldr	r3, [r4, #12]
 80056f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056fa:	1a5b      	subs	r3, r3, r1
 80056fc:	4543      	cmp	r3, r8
 80056fe:	dcf0      	bgt.n	80056e2 <_printf_float+0x442>
 8005700:	e6fa      	b.n	80054f8 <_printf_float+0x258>
 8005702:	f04f 0800 	mov.w	r8, #0
 8005706:	f104 0919 	add.w	r9, r4, #25
 800570a:	e7f4      	b.n	80056f6 <_printf_float+0x456>

0800570c <_printf_common>:
 800570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	4616      	mov	r6, r2
 8005712:	4699      	mov	r9, r3
 8005714:	688a      	ldr	r2, [r1, #8]
 8005716:	690b      	ldr	r3, [r1, #16]
 8005718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800571c:	4293      	cmp	r3, r2
 800571e:	bfb8      	it	lt
 8005720:	4613      	movlt	r3, r2
 8005722:	6033      	str	r3, [r6, #0]
 8005724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005728:	4607      	mov	r7, r0
 800572a:	460c      	mov	r4, r1
 800572c:	b10a      	cbz	r2, 8005732 <_printf_common+0x26>
 800572e:	3301      	adds	r3, #1
 8005730:	6033      	str	r3, [r6, #0]
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	0699      	lsls	r1, r3, #26
 8005736:	bf42      	ittt	mi
 8005738:	6833      	ldrmi	r3, [r6, #0]
 800573a:	3302      	addmi	r3, #2
 800573c:	6033      	strmi	r3, [r6, #0]
 800573e:	6825      	ldr	r5, [r4, #0]
 8005740:	f015 0506 	ands.w	r5, r5, #6
 8005744:	d106      	bne.n	8005754 <_printf_common+0x48>
 8005746:	f104 0a19 	add.w	sl, r4, #25
 800574a:	68e3      	ldr	r3, [r4, #12]
 800574c:	6832      	ldr	r2, [r6, #0]
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	42ab      	cmp	r3, r5
 8005752:	dc26      	bgt.n	80057a2 <_printf_common+0x96>
 8005754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005758:	1e13      	subs	r3, r2, #0
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	bf18      	it	ne
 800575e:	2301      	movne	r3, #1
 8005760:	0692      	lsls	r2, r2, #26
 8005762:	d42b      	bmi.n	80057bc <_printf_common+0xb0>
 8005764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005768:	4649      	mov	r1, r9
 800576a:	4638      	mov	r0, r7
 800576c:	47c0      	blx	r8
 800576e:	3001      	adds	r0, #1
 8005770:	d01e      	beq.n	80057b0 <_printf_common+0xa4>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	68e5      	ldr	r5, [r4, #12]
 8005776:	6832      	ldr	r2, [r6, #0]
 8005778:	f003 0306 	and.w	r3, r3, #6
 800577c:	2b04      	cmp	r3, #4
 800577e:	bf08      	it	eq
 8005780:	1aad      	subeq	r5, r5, r2
 8005782:	68a3      	ldr	r3, [r4, #8]
 8005784:	6922      	ldr	r2, [r4, #16]
 8005786:	bf0c      	ite	eq
 8005788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800578c:	2500      	movne	r5, #0
 800578e:	4293      	cmp	r3, r2
 8005790:	bfc4      	itt	gt
 8005792:	1a9b      	subgt	r3, r3, r2
 8005794:	18ed      	addgt	r5, r5, r3
 8005796:	2600      	movs	r6, #0
 8005798:	341a      	adds	r4, #26
 800579a:	42b5      	cmp	r5, r6
 800579c:	d11a      	bne.n	80057d4 <_printf_common+0xc8>
 800579e:	2000      	movs	r0, #0
 80057a0:	e008      	b.n	80057b4 <_printf_common+0xa8>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4652      	mov	r2, sl
 80057a6:	4649      	mov	r1, r9
 80057a8:	4638      	mov	r0, r7
 80057aa:	47c0      	blx	r8
 80057ac:	3001      	adds	r0, #1
 80057ae:	d103      	bne.n	80057b8 <_printf_common+0xac>
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295
 80057b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b8:	3501      	adds	r5, #1
 80057ba:	e7c6      	b.n	800574a <_printf_common+0x3e>
 80057bc:	18e1      	adds	r1, r4, r3
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	2030      	movs	r0, #48	; 0x30
 80057c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057c6:	4422      	add	r2, r4
 80057c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057d0:	3302      	adds	r3, #2
 80057d2:	e7c7      	b.n	8005764 <_printf_common+0x58>
 80057d4:	2301      	movs	r3, #1
 80057d6:	4622      	mov	r2, r4
 80057d8:	4649      	mov	r1, r9
 80057da:	4638      	mov	r0, r7
 80057dc:	47c0      	blx	r8
 80057de:	3001      	adds	r0, #1
 80057e0:	d0e6      	beq.n	80057b0 <_printf_common+0xa4>
 80057e2:	3601      	adds	r6, #1
 80057e4:	e7d9      	b.n	800579a <_printf_common+0x8e>
	...

080057e8 <_printf_i>:
 80057e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057ec:	7e0f      	ldrb	r7, [r1, #24]
 80057ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057f0:	2f78      	cmp	r7, #120	; 0x78
 80057f2:	4691      	mov	r9, r2
 80057f4:	4680      	mov	r8, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	469a      	mov	sl, r3
 80057fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057fe:	d807      	bhi.n	8005810 <_printf_i+0x28>
 8005800:	2f62      	cmp	r7, #98	; 0x62
 8005802:	d80a      	bhi.n	800581a <_printf_i+0x32>
 8005804:	2f00      	cmp	r7, #0
 8005806:	f000 80d8 	beq.w	80059ba <_printf_i+0x1d2>
 800580a:	2f58      	cmp	r7, #88	; 0x58
 800580c:	f000 80a3 	beq.w	8005956 <_printf_i+0x16e>
 8005810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005818:	e03a      	b.n	8005890 <_printf_i+0xa8>
 800581a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800581e:	2b15      	cmp	r3, #21
 8005820:	d8f6      	bhi.n	8005810 <_printf_i+0x28>
 8005822:	a101      	add	r1, pc, #4	; (adr r1, 8005828 <_printf_i+0x40>)
 8005824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005828:	08005881 	.word	0x08005881
 800582c:	08005895 	.word	0x08005895
 8005830:	08005811 	.word	0x08005811
 8005834:	08005811 	.word	0x08005811
 8005838:	08005811 	.word	0x08005811
 800583c:	08005811 	.word	0x08005811
 8005840:	08005895 	.word	0x08005895
 8005844:	08005811 	.word	0x08005811
 8005848:	08005811 	.word	0x08005811
 800584c:	08005811 	.word	0x08005811
 8005850:	08005811 	.word	0x08005811
 8005854:	080059a1 	.word	0x080059a1
 8005858:	080058c5 	.word	0x080058c5
 800585c:	08005983 	.word	0x08005983
 8005860:	08005811 	.word	0x08005811
 8005864:	08005811 	.word	0x08005811
 8005868:	080059c3 	.word	0x080059c3
 800586c:	08005811 	.word	0x08005811
 8005870:	080058c5 	.word	0x080058c5
 8005874:	08005811 	.word	0x08005811
 8005878:	08005811 	.word	0x08005811
 800587c:	0800598b 	.word	0x0800598b
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	1d1a      	adds	r2, r3, #4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	602a      	str	r2, [r5, #0]
 8005888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800588c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005890:	2301      	movs	r3, #1
 8005892:	e0a3      	b.n	80059dc <_printf_i+0x1f4>
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	6829      	ldr	r1, [r5, #0]
 8005898:	0606      	lsls	r6, r0, #24
 800589a:	f101 0304 	add.w	r3, r1, #4
 800589e:	d50a      	bpl.n	80058b6 <_printf_i+0xce>
 80058a0:	680e      	ldr	r6, [r1, #0]
 80058a2:	602b      	str	r3, [r5, #0]
 80058a4:	2e00      	cmp	r6, #0
 80058a6:	da03      	bge.n	80058b0 <_printf_i+0xc8>
 80058a8:	232d      	movs	r3, #45	; 0x2d
 80058aa:	4276      	negs	r6, r6
 80058ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b0:	485e      	ldr	r0, [pc, #376]	; (8005a2c <_printf_i+0x244>)
 80058b2:	230a      	movs	r3, #10
 80058b4:	e019      	b.n	80058ea <_printf_i+0x102>
 80058b6:	680e      	ldr	r6, [r1, #0]
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058be:	bf18      	it	ne
 80058c0:	b236      	sxthne	r6, r6
 80058c2:	e7ef      	b.n	80058a4 <_printf_i+0xbc>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	6820      	ldr	r0, [r4, #0]
 80058c8:	1d19      	adds	r1, r3, #4
 80058ca:	6029      	str	r1, [r5, #0]
 80058cc:	0601      	lsls	r1, r0, #24
 80058ce:	d501      	bpl.n	80058d4 <_printf_i+0xec>
 80058d0:	681e      	ldr	r6, [r3, #0]
 80058d2:	e002      	b.n	80058da <_printf_i+0xf2>
 80058d4:	0646      	lsls	r6, r0, #25
 80058d6:	d5fb      	bpl.n	80058d0 <_printf_i+0xe8>
 80058d8:	881e      	ldrh	r6, [r3, #0]
 80058da:	4854      	ldr	r0, [pc, #336]	; (8005a2c <_printf_i+0x244>)
 80058dc:	2f6f      	cmp	r7, #111	; 0x6f
 80058de:	bf0c      	ite	eq
 80058e0:	2308      	moveq	r3, #8
 80058e2:	230a      	movne	r3, #10
 80058e4:	2100      	movs	r1, #0
 80058e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058ea:	6865      	ldr	r5, [r4, #4]
 80058ec:	60a5      	str	r5, [r4, #8]
 80058ee:	2d00      	cmp	r5, #0
 80058f0:	bfa2      	ittt	ge
 80058f2:	6821      	ldrge	r1, [r4, #0]
 80058f4:	f021 0104 	bicge.w	r1, r1, #4
 80058f8:	6021      	strge	r1, [r4, #0]
 80058fa:	b90e      	cbnz	r6, 8005900 <_printf_i+0x118>
 80058fc:	2d00      	cmp	r5, #0
 80058fe:	d04d      	beq.n	800599c <_printf_i+0x1b4>
 8005900:	4615      	mov	r5, r2
 8005902:	fbb6 f1f3 	udiv	r1, r6, r3
 8005906:	fb03 6711 	mls	r7, r3, r1, r6
 800590a:	5dc7      	ldrb	r7, [r0, r7]
 800590c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005910:	4637      	mov	r7, r6
 8005912:	42bb      	cmp	r3, r7
 8005914:	460e      	mov	r6, r1
 8005916:	d9f4      	bls.n	8005902 <_printf_i+0x11a>
 8005918:	2b08      	cmp	r3, #8
 800591a:	d10b      	bne.n	8005934 <_printf_i+0x14c>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	07de      	lsls	r6, r3, #31
 8005920:	d508      	bpl.n	8005934 <_printf_i+0x14c>
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	6861      	ldr	r1, [r4, #4]
 8005926:	4299      	cmp	r1, r3
 8005928:	bfde      	ittt	le
 800592a:	2330      	movle	r3, #48	; 0x30
 800592c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005930:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005934:	1b52      	subs	r2, r2, r5
 8005936:	6122      	str	r2, [r4, #16]
 8005938:	f8cd a000 	str.w	sl, [sp]
 800593c:	464b      	mov	r3, r9
 800593e:	aa03      	add	r2, sp, #12
 8005940:	4621      	mov	r1, r4
 8005942:	4640      	mov	r0, r8
 8005944:	f7ff fee2 	bl	800570c <_printf_common>
 8005948:	3001      	adds	r0, #1
 800594a:	d14c      	bne.n	80059e6 <_printf_i+0x1fe>
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	b004      	add	sp, #16
 8005952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005956:	4835      	ldr	r0, [pc, #212]	; (8005a2c <_printf_i+0x244>)
 8005958:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800595c:	6829      	ldr	r1, [r5, #0]
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	f851 6b04 	ldr.w	r6, [r1], #4
 8005964:	6029      	str	r1, [r5, #0]
 8005966:	061d      	lsls	r5, r3, #24
 8005968:	d514      	bpl.n	8005994 <_printf_i+0x1ac>
 800596a:	07df      	lsls	r7, r3, #31
 800596c:	bf44      	itt	mi
 800596e:	f043 0320 	orrmi.w	r3, r3, #32
 8005972:	6023      	strmi	r3, [r4, #0]
 8005974:	b91e      	cbnz	r6, 800597e <_printf_i+0x196>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	f023 0320 	bic.w	r3, r3, #32
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	2310      	movs	r3, #16
 8005980:	e7b0      	b.n	80058e4 <_printf_i+0xfc>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	f043 0320 	orr.w	r3, r3, #32
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	2378      	movs	r3, #120	; 0x78
 800598c:	4828      	ldr	r0, [pc, #160]	; (8005a30 <_printf_i+0x248>)
 800598e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005992:	e7e3      	b.n	800595c <_printf_i+0x174>
 8005994:	0659      	lsls	r1, r3, #25
 8005996:	bf48      	it	mi
 8005998:	b2b6      	uxthmi	r6, r6
 800599a:	e7e6      	b.n	800596a <_printf_i+0x182>
 800599c:	4615      	mov	r5, r2
 800599e:	e7bb      	b.n	8005918 <_printf_i+0x130>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	6826      	ldr	r6, [r4, #0]
 80059a4:	6961      	ldr	r1, [r4, #20]
 80059a6:	1d18      	adds	r0, r3, #4
 80059a8:	6028      	str	r0, [r5, #0]
 80059aa:	0635      	lsls	r5, r6, #24
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	d501      	bpl.n	80059b4 <_printf_i+0x1cc>
 80059b0:	6019      	str	r1, [r3, #0]
 80059b2:	e002      	b.n	80059ba <_printf_i+0x1d2>
 80059b4:	0670      	lsls	r0, r6, #25
 80059b6:	d5fb      	bpl.n	80059b0 <_printf_i+0x1c8>
 80059b8:	8019      	strh	r1, [r3, #0]
 80059ba:	2300      	movs	r3, #0
 80059bc:	6123      	str	r3, [r4, #16]
 80059be:	4615      	mov	r5, r2
 80059c0:	e7ba      	b.n	8005938 <_printf_i+0x150>
 80059c2:	682b      	ldr	r3, [r5, #0]
 80059c4:	1d1a      	adds	r2, r3, #4
 80059c6:	602a      	str	r2, [r5, #0]
 80059c8:	681d      	ldr	r5, [r3, #0]
 80059ca:	6862      	ldr	r2, [r4, #4]
 80059cc:	2100      	movs	r1, #0
 80059ce:	4628      	mov	r0, r5
 80059d0:	f7fa fc2e 	bl	8000230 <memchr>
 80059d4:	b108      	cbz	r0, 80059da <_printf_i+0x1f2>
 80059d6:	1b40      	subs	r0, r0, r5
 80059d8:	6060      	str	r0, [r4, #4]
 80059da:	6863      	ldr	r3, [r4, #4]
 80059dc:	6123      	str	r3, [r4, #16]
 80059de:	2300      	movs	r3, #0
 80059e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e4:	e7a8      	b.n	8005938 <_printf_i+0x150>
 80059e6:	6923      	ldr	r3, [r4, #16]
 80059e8:	462a      	mov	r2, r5
 80059ea:	4649      	mov	r1, r9
 80059ec:	4640      	mov	r0, r8
 80059ee:	47d0      	blx	sl
 80059f0:	3001      	adds	r0, #1
 80059f2:	d0ab      	beq.n	800594c <_printf_i+0x164>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	079b      	lsls	r3, r3, #30
 80059f8:	d413      	bmi.n	8005a22 <_printf_i+0x23a>
 80059fa:	68e0      	ldr	r0, [r4, #12]
 80059fc:	9b03      	ldr	r3, [sp, #12]
 80059fe:	4298      	cmp	r0, r3
 8005a00:	bfb8      	it	lt
 8005a02:	4618      	movlt	r0, r3
 8005a04:	e7a4      	b.n	8005950 <_printf_i+0x168>
 8005a06:	2301      	movs	r3, #1
 8005a08:	4632      	mov	r2, r6
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	47d0      	blx	sl
 8005a10:	3001      	adds	r0, #1
 8005a12:	d09b      	beq.n	800594c <_printf_i+0x164>
 8005a14:	3501      	adds	r5, #1
 8005a16:	68e3      	ldr	r3, [r4, #12]
 8005a18:	9903      	ldr	r1, [sp, #12]
 8005a1a:	1a5b      	subs	r3, r3, r1
 8005a1c:	42ab      	cmp	r3, r5
 8005a1e:	dcf2      	bgt.n	8005a06 <_printf_i+0x21e>
 8005a20:	e7eb      	b.n	80059fa <_printf_i+0x212>
 8005a22:	2500      	movs	r5, #0
 8005a24:	f104 0619 	add.w	r6, r4, #25
 8005a28:	e7f5      	b.n	8005a16 <_printf_i+0x22e>
 8005a2a:	bf00      	nop
 8005a2c:	0800a0d6 	.word	0x0800a0d6
 8005a30:	0800a0e7 	.word	0x0800a0e7

08005a34 <_scanf_float>:
 8005a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a38:	b087      	sub	sp, #28
 8005a3a:	4617      	mov	r7, r2
 8005a3c:	9303      	str	r3, [sp, #12]
 8005a3e:	688b      	ldr	r3, [r1, #8]
 8005a40:	1e5a      	subs	r2, r3, #1
 8005a42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005a46:	bf83      	ittte	hi
 8005a48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a4c:	195b      	addhi	r3, r3, r5
 8005a4e:	9302      	strhi	r3, [sp, #8]
 8005a50:	2300      	movls	r3, #0
 8005a52:	bf86      	itte	hi
 8005a54:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a58:	608b      	strhi	r3, [r1, #8]
 8005a5a:	9302      	strls	r3, [sp, #8]
 8005a5c:	680b      	ldr	r3, [r1, #0]
 8005a5e:	468b      	mov	fp, r1
 8005a60:	2500      	movs	r5, #0
 8005a62:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005a66:	f84b 3b1c 	str.w	r3, [fp], #28
 8005a6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005a6e:	4680      	mov	r8, r0
 8005a70:	460c      	mov	r4, r1
 8005a72:	465e      	mov	r6, fp
 8005a74:	46aa      	mov	sl, r5
 8005a76:	46a9      	mov	r9, r5
 8005a78:	9501      	str	r5, [sp, #4]
 8005a7a:	68a2      	ldr	r2, [r4, #8]
 8005a7c:	b152      	cbz	r2, 8005a94 <_scanf_float+0x60>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b4e      	cmp	r3, #78	; 0x4e
 8005a84:	d864      	bhi.n	8005b50 <_scanf_float+0x11c>
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d83c      	bhi.n	8005b04 <_scanf_float+0xd0>
 8005a8a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005a8e:	b2c8      	uxtb	r0, r1
 8005a90:	280e      	cmp	r0, #14
 8005a92:	d93a      	bls.n	8005b0a <_scanf_float+0xd6>
 8005a94:	f1b9 0f00 	cmp.w	r9, #0
 8005a98:	d003      	beq.n	8005aa2 <_scanf_float+0x6e>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005aa6:	f1ba 0f01 	cmp.w	sl, #1
 8005aaa:	f200 8113 	bhi.w	8005cd4 <_scanf_float+0x2a0>
 8005aae:	455e      	cmp	r6, fp
 8005ab0:	f200 8105 	bhi.w	8005cbe <_scanf_float+0x28a>
 8005ab4:	2501      	movs	r5, #1
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	b007      	add	sp, #28
 8005aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005abe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005ac2:	2a0d      	cmp	r2, #13
 8005ac4:	d8e6      	bhi.n	8005a94 <_scanf_float+0x60>
 8005ac6:	a101      	add	r1, pc, #4	; (adr r1, 8005acc <_scanf_float+0x98>)
 8005ac8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005acc:	08005c0b 	.word	0x08005c0b
 8005ad0:	08005a95 	.word	0x08005a95
 8005ad4:	08005a95 	.word	0x08005a95
 8005ad8:	08005a95 	.word	0x08005a95
 8005adc:	08005c6b 	.word	0x08005c6b
 8005ae0:	08005c43 	.word	0x08005c43
 8005ae4:	08005a95 	.word	0x08005a95
 8005ae8:	08005a95 	.word	0x08005a95
 8005aec:	08005c19 	.word	0x08005c19
 8005af0:	08005a95 	.word	0x08005a95
 8005af4:	08005a95 	.word	0x08005a95
 8005af8:	08005a95 	.word	0x08005a95
 8005afc:	08005a95 	.word	0x08005a95
 8005b00:	08005bd1 	.word	0x08005bd1
 8005b04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005b08:	e7db      	b.n	8005ac2 <_scanf_float+0x8e>
 8005b0a:	290e      	cmp	r1, #14
 8005b0c:	d8c2      	bhi.n	8005a94 <_scanf_float+0x60>
 8005b0e:	a001      	add	r0, pc, #4	; (adr r0, 8005b14 <_scanf_float+0xe0>)
 8005b10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005b14:	08005bc3 	.word	0x08005bc3
 8005b18:	08005a95 	.word	0x08005a95
 8005b1c:	08005bc3 	.word	0x08005bc3
 8005b20:	08005c57 	.word	0x08005c57
 8005b24:	08005a95 	.word	0x08005a95
 8005b28:	08005b71 	.word	0x08005b71
 8005b2c:	08005bad 	.word	0x08005bad
 8005b30:	08005bad 	.word	0x08005bad
 8005b34:	08005bad 	.word	0x08005bad
 8005b38:	08005bad 	.word	0x08005bad
 8005b3c:	08005bad 	.word	0x08005bad
 8005b40:	08005bad 	.word	0x08005bad
 8005b44:	08005bad 	.word	0x08005bad
 8005b48:	08005bad 	.word	0x08005bad
 8005b4c:	08005bad 	.word	0x08005bad
 8005b50:	2b6e      	cmp	r3, #110	; 0x6e
 8005b52:	d809      	bhi.n	8005b68 <_scanf_float+0x134>
 8005b54:	2b60      	cmp	r3, #96	; 0x60
 8005b56:	d8b2      	bhi.n	8005abe <_scanf_float+0x8a>
 8005b58:	2b54      	cmp	r3, #84	; 0x54
 8005b5a:	d077      	beq.n	8005c4c <_scanf_float+0x218>
 8005b5c:	2b59      	cmp	r3, #89	; 0x59
 8005b5e:	d199      	bne.n	8005a94 <_scanf_float+0x60>
 8005b60:	2d07      	cmp	r5, #7
 8005b62:	d197      	bne.n	8005a94 <_scanf_float+0x60>
 8005b64:	2508      	movs	r5, #8
 8005b66:	e029      	b.n	8005bbc <_scanf_float+0x188>
 8005b68:	2b74      	cmp	r3, #116	; 0x74
 8005b6a:	d06f      	beq.n	8005c4c <_scanf_float+0x218>
 8005b6c:	2b79      	cmp	r3, #121	; 0x79
 8005b6e:	e7f6      	b.n	8005b5e <_scanf_float+0x12a>
 8005b70:	6821      	ldr	r1, [r4, #0]
 8005b72:	05c8      	lsls	r0, r1, #23
 8005b74:	d51a      	bpl.n	8005bac <_scanf_float+0x178>
 8005b76:	9b02      	ldr	r3, [sp, #8]
 8005b78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005b7c:	6021      	str	r1, [r4, #0]
 8005b7e:	f109 0901 	add.w	r9, r9, #1
 8005b82:	b11b      	cbz	r3, 8005b8c <_scanf_float+0x158>
 8005b84:	3b01      	subs	r3, #1
 8005b86:	3201      	adds	r2, #1
 8005b88:	9302      	str	r3, [sp, #8]
 8005b8a:	60a2      	str	r2, [r4, #8]
 8005b8c:	68a3      	ldr	r3, [r4, #8]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	60a3      	str	r3, [r4, #8]
 8005b92:	6923      	ldr	r3, [r4, #16]
 8005b94:	3301      	adds	r3, #1
 8005b96:	6123      	str	r3, [r4, #16]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	607b      	str	r3, [r7, #4]
 8005ba0:	f340 8084 	ble.w	8005cac <_scanf_float+0x278>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	603b      	str	r3, [r7, #0]
 8005baa:	e766      	b.n	8005a7a <_scanf_float+0x46>
 8005bac:	eb1a 0f05 	cmn.w	sl, r5
 8005bb0:	f47f af70 	bne.w	8005a94 <_scanf_float+0x60>
 8005bb4:	6822      	ldr	r2, [r4, #0]
 8005bb6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005bba:	6022      	str	r2, [r4, #0]
 8005bbc:	f806 3b01 	strb.w	r3, [r6], #1
 8005bc0:	e7e4      	b.n	8005b8c <_scanf_float+0x158>
 8005bc2:	6822      	ldr	r2, [r4, #0]
 8005bc4:	0610      	lsls	r0, r2, #24
 8005bc6:	f57f af65 	bpl.w	8005a94 <_scanf_float+0x60>
 8005bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bce:	e7f4      	b.n	8005bba <_scanf_float+0x186>
 8005bd0:	f1ba 0f00 	cmp.w	sl, #0
 8005bd4:	d10e      	bne.n	8005bf4 <_scanf_float+0x1c0>
 8005bd6:	f1b9 0f00 	cmp.w	r9, #0
 8005bda:	d10e      	bne.n	8005bfa <_scanf_float+0x1c6>
 8005bdc:	6822      	ldr	r2, [r4, #0]
 8005bde:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005be2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005be6:	d108      	bne.n	8005bfa <_scanf_float+0x1c6>
 8005be8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005bec:	6022      	str	r2, [r4, #0]
 8005bee:	f04f 0a01 	mov.w	sl, #1
 8005bf2:	e7e3      	b.n	8005bbc <_scanf_float+0x188>
 8005bf4:	f1ba 0f02 	cmp.w	sl, #2
 8005bf8:	d055      	beq.n	8005ca6 <_scanf_float+0x272>
 8005bfa:	2d01      	cmp	r5, #1
 8005bfc:	d002      	beq.n	8005c04 <_scanf_float+0x1d0>
 8005bfe:	2d04      	cmp	r5, #4
 8005c00:	f47f af48 	bne.w	8005a94 <_scanf_float+0x60>
 8005c04:	3501      	adds	r5, #1
 8005c06:	b2ed      	uxtb	r5, r5
 8005c08:	e7d8      	b.n	8005bbc <_scanf_float+0x188>
 8005c0a:	f1ba 0f01 	cmp.w	sl, #1
 8005c0e:	f47f af41 	bne.w	8005a94 <_scanf_float+0x60>
 8005c12:	f04f 0a02 	mov.w	sl, #2
 8005c16:	e7d1      	b.n	8005bbc <_scanf_float+0x188>
 8005c18:	b97d      	cbnz	r5, 8005c3a <_scanf_float+0x206>
 8005c1a:	f1b9 0f00 	cmp.w	r9, #0
 8005c1e:	f47f af3c 	bne.w	8005a9a <_scanf_float+0x66>
 8005c22:	6822      	ldr	r2, [r4, #0]
 8005c24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c2c:	f47f af39 	bne.w	8005aa2 <_scanf_float+0x6e>
 8005c30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c34:	6022      	str	r2, [r4, #0]
 8005c36:	2501      	movs	r5, #1
 8005c38:	e7c0      	b.n	8005bbc <_scanf_float+0x188>
 8005c3a:	2d03      	cmp	r5, #3
 8005c3c:	d0e2      	beq.n	8005c04 <_scanf_float+0x1d0>
 8005c3e:	2d05      	cmp	r5, #5
 8005c40:	e7de      	b.n	8005c00 <_scanf_float+0x1cc>
 8005c42:	2d02      	cmp	r5, #2
 8005c44:	f47f af26 	bne.w	8005a94 <_scanf_float+0x60>
 8005c48:	2503      	movs	r5, #3
 8005c4a:	e7b7      	b.n	8005bbc <_scanf_float+0x188>
 8005c4c:	2d06      	cmp	r5, #6
 8005c4e:	f47f af21 	bne.w	8005a94 <_scanf_float+0x60>
 8005c52:	2507      	movs	r5, #7
 8005c54:	e7b2      	b.n	8005bbc <_scanf_float+0x188>
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	0591      	lsls	r1, r2, #22
 8005c5a:	f57f af1b 	bpl.w	8005a94 <_scanf_float+0x60>
 8005c5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005c62:	6022      	str	r2, [r4, #0]
 8005c64:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c68:	e7a8      	b.n	8005bbc <_scanf_float+0x188>
 8005c6a:	6822      	ldr	r2, [r4, #0]
 8005c6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005c70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005c74:	d006      	beq.n	8005c84 <_scanf_float+0x250>
 8005c76:	0550      	lsls	r0, r2, #21
 8005c78:	f57f af0c 	bpl.w	8005a94 <_scanf_float+0x60>
 8005c7c:	f1b9 0f00 	cmp.w	r9, #0
 8005c80:	f43f af0f 	beq.w	8005aa2 <_scanf_float+0x6e>
 8005c84:	0591      	lsls	r1, r2, #22
 8005c86:	bf58      	it	pl
 8005c88:	9901      	ldrpl	r1, [sp, #4]
 8005c8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c8e:	bf58      	it	pl
 8005c90:	eba9 0101 	subpl.w	r1, r9, r1
 8005c94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005c98:	bf58      	it	pl
 8005c9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005c9e:	6022      	str	r2, [r4, #0]
 8005ca0:	f04f 0900 	mov.w	r9, #0
 8005ca4:	e78a      	b.n	8005bbc <_scanf_float+0x188>
 8005ca6:	f04f 0a03 	mov.w	sl, #3
 8005caa:	e787      	b.n	8005bbc <_scanf_float+0x188>
 8005cac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	4798      	blx	r3
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	f43f aedf 	beq.w	8005a7a <_scanf_float+0x46>
 8005cbc:	e6ea      	b.n	8005a94 <_scanf_float+0x60>
 8005cbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cc6:	463a      	mov	r2, r7
 8005cc8:	4640      	mov	r0, r8
 8005cca:	4798      	blx	r3
 8005ccc:	6923      	ldr	r3, [r4, #16]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	e6ec      	b.n	8005aae <_scanf_float+0x7a>
 8005cd4:	1e6b      	subs	r3, r5, #1
 8005cd6:	2b06      	cmp	r3, #6
 8005cd8:	d825      	bhi.n	8005d26 <_scanf_float+0x2f2>
 8005cda:	2d02      	cmp	r5, #2
 8005cdc:	d836      	bhi.n	8005d4c <_scanf_float+0x318>
 8005cde:	455e      	cmp	r6, fp
 8005ce0:	f67f aee8 	bls.w	8005ab4 <_scanf_float+0x80>
 8005ce4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ce8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cec:	463a      	mov	r2, r7
 8005cee:	4640      	mov	r0, r8
 8005cf0:	4798      	blx	r3
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	e7f1      	b.n	8005cde <_scanf_float+0x2aa>
 8005cfa:	9802      	ldr	r0, [sp, #8]
 8005cfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005d04:	9002      	str	r0, [sp, #8]
 8005d06:	463a      	mov	r2, r7
 8005d08:	4640      	mov	r0, r8
 8005d0a:	4798      	blx	r3
 8005d0c:	6923      	ldr	r3, [r4, #16]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	6123      	str	r3, [r4, #16]
 8005d12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d16:	fa5f fa8a 	uxtb.w	sl, sl
 8005d1a:	f1ba 0f02 	cmp.w	sl, #2
 8005d1e:	d1ec      	bne.n	8005cfa <_scanf_float+0x2c6>
 8005d20:	3d03      	subs	r5, #3
 8005d22:	b2ed      	uxtb	r5, r5
 8005d24:	1b76      	subs	r6, r6, r5
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	05da      	lsls	r2, r3, #23
 8005d2a:	d52f      	bpl.n	8005d8c <_scanf_float+0x358>
 8005d2c:	055b      	lsls	r3, r3, #21
 8005d2e:	d510      	bpl.n	8005d52 <_scanf_float+0x31e>
 8005d30:	455e      	cmp	r6, fp
 8005d32:	f67f aebf 	bls.w	8005ab4 <_scanf_float+0x80>
 8005d36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d3e:	463a      	mov	r2, r7
 8005d40:	4640      	mov	r0, r8
 8005d42:	4798      	blx	r3
 8005d44:	6923      	ldr	r3, [r4, #16]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	6123      	str	r3, [r4, #16]
 8005d4a:	e7f1      	b.n	8005d30 <_scanf_float+0x2fc>
 8005d4c:	46aa      	mov	sl, r5
 8005d4e:	9602      	str	r6, [sp, #8]
 8005d50:	e7df      	b.n	8005d12 <_scanf_float+0x2de>
 8005d52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005d56:	6923      	ldr	r3, [r4, #16]
 8005d58:	2965      	cmp	r1, #101	; 0x65
 8005d5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d5e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005d62:	6123      	str	r3, [r4, #16]
 8005d64:	d00c      	beq.n	8005d80 <_scanf_float+0x34c>
 8005d66:	2945      	cmp	r1, #69	; 0x45
 8005d68:	d00a      	beq.n	8005d80 <_scanf_float+0x34c>
 8005d6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d6e:	463a      	mov	r2, r7
 8005d70:	4640      	mov	r0, r8
 8005d72:	4798      	blx	r3
 8005d74:	6923      	ldr	r3, [r4, #16]
 8005d76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	1eb5      	subs	r5, r6, #2
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d84:	463a      	mov	r2, r7
 8005d86:	4640      	mov	r0, r8
 8005d88:	4798      	blx	r3
 8005d8a:	462e      	mov	r6, r5
 8005d8c:	6825      	ldr	r5, [r4, #0]
 8005d8e:	f015 0510 	ands.w	r5, r5, #16
 8005d92:	d159      	bne.n	8005e48 <_scanf_float+0x414>
 8005d94:	7035      	strb	r5, [r6, #0]
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da0:	d11b      	bne.n	8005dda <_scanf_float+0x3a6>
 8005da2:	9b01      	ldr	r3, [sp, #4]
 8005da4:	454b      	cmp	r3, r9
 8005da6:	eba3 0209 	sub.w	r2, r3, r9
 8005daa:	d123      	bne.n	8005df4 <_scanf_float+0x3c0>
 8005dac:	2200      	movs	r2, #0
 8005dae:	4659      	mov	r1, fp
 8005db0:	4640      	mov	r0, r8
 8005db2:	f000 ff3b 	bl	8006c2c <_strtod_r>
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	9b03      	ldr	r3, [sp, #12]
 8005dba:	f012 0f02 	tst.w	r2, #2
 8005dbe:	ec57 6b10 	vmov	r6, r7, d0
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	d021      	beq.n	8005e0a <_scanf_float+0x3d6>
 8005dc6:	9903      	ldr	r1, [sp, #12]
 8005dc8:	1d1a      	adds	r2, r3, #4
 8005dca:	600a      	str	r2, [r1, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	e9c3 6700 	strd	r6, r7, [r3]
 8005dd2:	68e3      	ldr	r3, [r4, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60e3      	str	r3, [r4, #12]
 8005dd8:	e66d      	b.n	8005ab6 <_scanf_float+0x82>
 8005dda:	9b04      	ldr	r3, [sp, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0e5      	beq.n	8005dac <_scanf_float+0x378>
 8005de0:	9905      	ldr	r1, [sp, #20]
 8005de2:	230a      	movs	r3, #10
 8005de4:	462a      	mov	r2, r5
 8005de6:	3101      	adds	r1, #1
 8005de8:	4640      	mov	r0, r8
 8005dea:	f000 ffa7 	bl	8006d3c <_strtol_r>
 8005dee:	9b04      	ldr	r3, [sp, #16]
 8005df0:	9e05      	ldr	r6, [sp, #20]
 8005df2:	1ac2      	subs	r2, r0, r3
 8005df4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005df8:	429e      	cmp	r6, r3
 8005dfa:	bf28      	it	cs
 8005dfc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005e00:	4912      	ldr	r1, [pc, #72]	; (8005e4c <_scanf_float+0x418>)
 8005e02:	4630      	mov	r0, r6
 8005e04:	f000 f8d0 	bl	8005fa8 <siprintf>
 8005e08:	e7d0      	b.n	8005dac <_scanf_float+0x378>
 8005e0a:	9903      	ldr	r1, [sp, #12]
 8005e0c:	f012 0f04 	tst.w	r2, #4
 8005e10:	f103 0204 	add.w	r2, r3, #4
 8005e14:	600a      	str	r2, [r1, #0]
 8005e16:	d1d9      	bne.n	8005dcc <_scanf_float+0x398>
 8005e18:	f8d3 8000 	ldr.w	r8, [r3]
 8005e1c:	ee10 2a10 	vmov	r2, s0
 8005e20:	ee10 0a10 	vmov	r0, s0
 8005e24:	463b      	mov	r3, r7
 8005e26:	4639      	mov	r1, r7
 8005e28:	f7fa fea8 	bl	8000b7c <__aeabi_dcmpun>
 8005e2c:	b128      	cbz	r0, 8005e3a <_scanf_float+0x406>
 8005e2e:	4808      	ldr	r0, [pc, #32]	; (8005e50 <_scanf_float+0x41c>)
 8005e30:	f000 f8b4 	bl	8005f9c <nanf>
 8005e34:	ed88 0a00 	vstr	s0, [r8]
 8005e38:	e7cb      	b.n	8005dd2 <_scanf_float+0x39e>
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	f7fa fefb 	bl	8000c38 <__aeabi_d2f>
 8005e42:	f8c8 0000 	str.w	r0, [r8]
 8005e46:	e7c4      	b.n	8005dd2 <_scanf_float+0x39e>
 8005e48:	2500      	movs	r5, #0
 8005e4a:	e634      	b.n	8005ab6 <_scanf_float+0x82>
 8005e4c:	0800a0f8 	.word	0x0800a0f8
 8005e50:	0800a568 	.word	0x0800a568

08005e54 <iprintf>:
 8005e54:	b40f      	push	{r0, r1, r2, r3}
 8005e56:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <iprintf+0x2c>)
 8005e58:	b513      	push	{r0, r1, r4, lr}
 8005e5a:	681c      	ldr	r4, [r3, #0]
 8005e5c:	b124      	cbz	r4, 8005e68 <iprintf+0x14>
 8005e5e:	69a3      	ldr	r3, [r4, #24]
 8005e60:	b913      	cbnz	r3, 8005e68 <iprintf+0x14>
 8005e62:	4620      	mov	r0, r4
 8005e64:	f001 ffc0 	bl	8007de8 <__sinit>
 8005e68:	ab05      	add	r3, sp, #20
 8005e6a:	9a04      	ldr	r2, [sp, #16]
 8005e6c:	68a1      	ldr	r1, [r4, #8]
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	4620      	mov	r0, r4
 8005e72:	f003 fb97 	bl	80095a4 <_vfiprintf_r>
 8005e76:	b002      	add	sp, #8
 8005e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e7c:	b004      	add	sp, #16
 8005e7e:	4770      	bx	lr
 8005e80:	2000000c 	.word	0x2000000c

08005e84 <putchar>:
 8005e84:	4b09      	ldr	r3, [pc, #36]	; (8005eac <putchar+0x28>)
 8005e86:	b513      	push	{r0, r1, r4, lr}
 8005e88:	681c      	ldr	r4, [r3, #0]
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	b134      	cbz	r4, 8005e9c <putchar+0x18>
 8005e8e:	69a3      	ldr	r3, [r4, #24]
 8005e90:	b923      	cbnz	r3, 8005e9c <putchar+0x18>
 8005e92:	9001      	str	r0, [sp, #4]
 8005e94:	4620      	mov	r0, r4
 8005e96:	f001 ffa7 	bl	8007de8 <__sinit>
 8005e9a:	9901      	ldr	r1, [sp, #4]
 8005e9c:	68a2      	ldr	r2, [r4, #8]
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	b002      	add	sp, #8
 8005ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea6:	f003 bcad 	b.w	8009804 <_putc_r>
 8005eaa:	bf00      	nop
 8005eac:	2000000c 	.word	0x2000000c

08005eb0 <_puts_r>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	460e      	mov	r6, r1
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	b118      	cbz	r0, 8005ec0 <_puts_r+0x10>
 8005eb8:	6983      	ldr	r3, [r0, #24]
 8005eba:	b90b      	cbnz	r3, 8005ec0 <_puts_r+0x10>
 8005ebc:	f001 ff94 	bl	8007de8 <__sinit>
 8005ec0:	69ab      	ldr	r3, [r5, #24]
 8005ec2:	68ac      	ldr	r4, [r5, #8]
 8005ec4:	b913      	cbnz	r3, 8005ecc <_puts_r+0x1c>
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f001 ff8e 	bl	8007de8 <__sinit>
 8005ecc:	4b2c      	ldr	r3, [pc, #176]	; (8005f80 <_puts_r+0xd0>)
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	d120      	bne.n	8005f14 <_puts_r+0x64>
 8005ed2:	686c      	ldr	r4, [r5, #4]
 8005ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ed6:	07db      	lsls	r3, r3, #31
 8005ed8:	d405      	bmi.n	8005ee6 <_puts_r+0x36>
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	0598      	lsls	r0, r3, #22
 8005ede:	d402      	bmi.n	8005ee6 <_puts_r+0x36>
 8005ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ee2:	f002 fb92 	bl	800860a <__retarget_lock_acquire_recursive>
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	0719      	lsls	r1, r3, #28
 8005eea:	d51d      	bpl.n	8005f28 <_puts_r+0x78>
 8005eec:	6923      	ldr	r3, [r4, #16]
 8005eee:	b1db      	cbz	r3, 8005f28 <_puts_r+0x78>
 8005ef0:	3e01      	subs	r6, #1
 8005ef2:	68a3      	ldr	r3, [r4, #8]
 8005ef4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	60a3      	str	r3, [r4, #8]
 8005efc:	bb39      	cbnz	r1, 8005f4e <_puts_r+0x9e>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	da38      	bge.n	8005f74 <_puts_r+0xc4>
 8005f02:	4622      	mov	r2, r4
 8005f04:	210a      	movs	r1, #10
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 ff1a 	bl	8006d40 <__swbuf_r>
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d011      	beq.n	8005f34 <_puts_r+0x84>
 8005f10:	250a      	movs	r5, #10
 8005f12:	e011      	b.n	8005f38 <_puts_r+0x88>
 8005f14:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <_puts_r+0xd4>)
 8005f16:	429c      	cmp	r4, r3
 8005f18:	d101      	bne.n	8005f1e <_puts_r+0x6e>
 8005f1a:	68ac      	ldr	r4, [r5, #8]
 8005f1c:	e7da      	b.n	8005ed4 <_puts_r+0x24>
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <_puts_r+0xd8>)
 8005f20:	429c      	cmp	r4, r3
 8005f22:	bf08      	it	eq
 8005f24:	68ec      	ldreq	r4, [r5, #12]
 8005f26:	e7d5      	b.n	8005ed4 <_puts_r+0x24>
 8005f28:	4621      	mov	r1, r4
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f000 ff5a 	bl	8006de4 <__swsetup_r>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d0dd      	beq.n	8005ef0 <_puts_r+0x40>
 8005f34:	f04f 35ff 	mov.w	r5, #4294967295
 8005f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f3a:	07da      	lsls	r2, r3, #31
 8005f3c:	d405      	bmi.n	8005f4a <_puts_r+0x9a>
 8005f3e:	89a3      	ldrh	r3, [r4, #12]
 8005f40:	059b      	lsls	r3, r3, #22
 8005f42:	d402      	bmi.n	8005f4a <_puts_r+0x9a>
 8005f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f46:	f002 fb61 	bl	800860c <__retarget_lock_release_recursive>
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	bd70      	pop	{r4, r5, r6, pc}
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	da04      	bge.n	8005f5c <_puts_r+0xac>
 8005f52:	69a2      	ldr	r2, [r4, #24]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	dc06      	bgt.n	8005f66 <_puts_r+0xb6>
 8005f58:	290a      	cmp	r1, #10
 8005f5a:	d004      	beq.n	8005f66 <_puts_r+0xb6>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	6022      	str	r2, [r4, #0]
 8005f62:	7019      	strb	r1, [r3, #0]
 8005f64:	e7c5      	b.n	8005ef2 <_puts_r+0x42>
 8005f66:	4622      	mov	r2, r4
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 fee9 	bl	8006d40 <__swbuf_r>
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d1bf      	bne.n	8005ef2 <_puts_r+0x42>
 8005f72:	e7df      	b.n	8005f34 <_puts_r+0x84>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	250a      	movs	r5, #10
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	6022      	str	r2, [r4, #0]
 8005f7c:	701d      	strb	r5, [r3, #0]
 8005f7e:	e7db      	b.n	8005f38 <_puts_r+0x88>
 8005f80:	0800a304 	.word	0x0800a304
 8005f84:	0800a324 	.word	0x0800a324
 8005f88:	0800a2e4 	.word	0x0800a2e4

08005f8c <puts>:
 8005f8c:	4b02      	ldr	r3, [pc, #8]	; (8005f98 <puts+0xc>)
 8005f8e:	4601      	mov	r1, r0
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	f7ff bf8d 	b.w	8005eb0 <_puts_r>
 8005f96:	bf00      	nop
 8005f98:	2000000c 	.word	0x2000000c

08005f9c <nanf>:
 8005f9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005fa4 <nanf+0x8>
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	7fc00000 	.word	0x7fc00000

08005fa8 <siprintf>:
 8005fa8:	b40e      	push	{r1, r2, r3}
 8005faa:	b500      	push	{lr}
 8005fac:	b09c      	sub	sp, #112	; 0x70
 8005fae:	ab1d      	add	r3, sp, #116	; 0x74
 8005fb0:	9002      	str	r0, [sp, #8]
 8005fb2:	9006      	str	r0, [sp, #24]
 8005fb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fb8:	4809      	ldr	r0, [pc, #36]	; (8005fe0 <siprintf+0x38>)
 8005fba:	9107      	str	r1, [sp, #28]
 8005fbc:	9104      	str	r1, [sp, #16]
 8005fbe:	4909      	ldr	r1, [pc, #36]	; (8005fe4 <siprintf+0x3c>)
 8005fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fc4:	9105      	str	r1, [sp, #20]
 8005fc6:	6800      	ldr	r0, [r0, #0]
 8005fc8:	9301      	str	r3, [sp, #4]
 8005fca:	a902      	add	r1, sp, #8
 8005fcc:	f003 f9c0 	bl	8009350 <_svfiprintf_r>
 8005fd0:	9b02      	ldr	r3, [sp, #8]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	b01c      	add	sp, #112	; 0x70
 8005fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fdc:	b003      	add	sp, #12
 8005fde:	4770      	bx	lr
 8005fe0:	2000000c 	.word	0x2000000c
 8005fe4:	ffff0208 	.word	0xffff0208

08005fe8 <sulp>:
 8005fe8:	b570      	push	{r4, r5, r6, lr}
 8005fea:	4604      	mov	r4, r0
 8005fec:	460d      	mov	r5, r1
 8005fee:	ec45 4b10 	vmov	d0, r4, r5
 8005ff2:	4616      	mov	r6, r2
 8005ff4:	f002 ff0a 	bl	8008e0c <__ulp>
 8005ff8:	ec51 0b10 	vmov	r0, r1, d0
 8005ffc:	b17e      	cbz	r6, 800601e <sulp+0x36>
 8005ffe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006002:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006006:	2b00      	cmp	r3, #0
 8006008:	dd09      	ble.n	800601e <sulp+0x36>
 800600a:	051b      	lsls	r3, r3, #20
 800600c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006010:	2400      	movs	r4, #0
 8006012:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006016:	4622      	mov	r2, r4
 8006018:	462b      	mov	r3, r5
 800601a:	f7fa fb15 	bl	8000648 <__aeabi_dmul>
 800601e:	bd70      	pop	{r4, r5, r6, pc}

08006020 <_strtod_l>:
 8006020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006024:	ed2d 8b02 	vpush	{d8}
 8006028:	b09d      	sub	sp, #116	; 0x74
 800602a:	461f      	mov	r7, r3
 800602c:	2300      	movs	r3, #0
 800602e:	9318      	str	r3, [sp, #96]	; 0x60
 8006030:	4ba2      	ldr	r3, [pc, #648]	; (80062bc <_strtod_l+0x29c>)
 8006032:	9213      	str	r2, [sp, #76]	; 0x4c
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	9305      	str	r3, [sp, #20]
 8006038:	4604      	mov	r4, r0
 800603a:	4618      	mov	r0, r3
 800603c:	4688      	mov	r8, r1
 800603e:	f7fa f8ef 	bl	8000220 <strlen>
 8006042:	f04f 0a00 	mov.w	sl, #0
 8006046:	4605      	mov	r5, r0
 8006048:	f04f 0b00 	mov.w	fp, #0
 800604c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006052:	781a      	ldrb	r2, [r3, #0]
 8006054:	2a2b      	cmp	r2, #43	; 0x2b
 8006056:	d04e      	beq.n	80060f6 <_strtod_l+0xd6>
 8006058:	d83b      	bhi.n	80060d2 <_strtod_l+0xb2>
 800605a:	2a0d      	cmp	r2, #13
 800605c:	d834      	bhi.n	80060c8 <_strtod_l+0xa8>
 800605e:	2a08      	cmp	r2, #8
 8006060:	d834      	bhi.n	80060cc <_strtod_l+0xac>
 8006062:	2a00      	cmp	r2, #0
 8006064:	d03e      	beq.n	80060e4 <_strtod_l+0xc4>
 8006066:	2300      	movs	r3, #0
 8006068:	930a      	str	r3, [sp, #40]	; 0x28
 800606a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800606c:	7833      	ldrb	r3, [r6, #0]
 800606e:	2b30      	cmp	r3, #48	; 0x30
 8006070:	f040 80b0 	bne.w	80061d4 <_strtod_l+0x1b4>
 8006074:	7873      	ldrb	r3, [r6, #1]
 8006076:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800607a:	2b58      	cmp	r3, #88	; 0x58
 800607c:	d168      	bne.n	8006150 <_strtod_l+0x130>
 800607e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006080:	9301      	str	r3, [sp, #4]
 8006082:	ab18      	add	r3, sp, #96	; 0x60
 8006084:	9702      	str	r7, [sp, #8]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	4a8d      	ldr	r2, [pc, #564]	; (80062c0 <_strtod_l+0x2a0>)
 800608a:	ab19      	add	r3, sp, #100	; 0x64
 800608c:	a917      	add	r1, sp, #92	; 0x5c
 800608e:	4620      	mov	r0, r4
 8006090:	f001 ffae 	bl	8007ff0 <__gethex>
 8006094:	f010 0707 	ands.w	r7, r0, #7
 8006098:	4605      	mov	r5, r0
 800609a:	d005      	beq.n	80060a8 <_strtod_l+0x88>
 800609c:	2f06      	cmp	r7, #6
 800609e:	d12c      	bne.n	80060fa <_strtod_l+0xda>
 80060a0:	3601      	adds	r6, #1
 80060a2:	2300      	movs	r3, #0
 80060a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80060a6:	930a      	str	r3, [sp, #40]	; 0x28
 80060a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f040 8590 	bne.w	8006bd0 <_strtod_l+0xbb0>
 80060b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b2:	b1eb      	cbz	r3, 80060f0 <_strtod_l+0xd0>
 80060b4:	4652      	mov	r2, sl
 80060b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80060ba:	ec43 2b10 	vmov	d0, r2, r3
 80060be:	b01d      	add	sp, #116	; 0x74
 80060c0:	ecbd 8b02 	vpop	{d8}
 80060c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c8:	2a20      	cmp	r2, #32
 80060ca:	d1cc      	bne.n	8006066 <_strtod_l+0x46>
 80060cc:	3301      	adds	r3, #1
 80060ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80060d0:	e7be      	b.n	8006050 <_strtod_l+0x30>
 80060d2:	2a2d      	cmp	r2, #45	; 0x2d
 80060d4:	d1c7      	bne.n	8006066 <_strtod_l+0x46>
 80060d6:	2201      	movs	r2, #1
 80060d8:	920a      	str	r2, [sp, #40]	; 0x28
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80060de:	785b      	ldrb	r3, [r3, #1]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1c2      	bne.n	800606a <_strtod_l+0x4a>
 80060e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f040 856e 	bne.w	8006bcc <_strtod_l+0xbac>
 80060f0:	4652      	mov	r2, sl
 80060f2:	465b      	mov	r3, fp
 80060f4:	e7e1      	b.n	80060ba <_strtod_l+0x9a>
 80060f6:	2200      	movs	r2, #0
 80060f8:	e7ee      	b.n	80060d8 <_strtod_l+0xb8>
 80060fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80060fc:	b13a      	cbz	r2, 800610e <_strtod_l+0xee>
 80060fe:	2135      	movs	r1, #53	; 0x35
 8006100:	a81a      	add	r0, sp, #104	; 0x68
 8006102:	f002 ff8e 	bl	8009022 <__copybits>
 8006106:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006108:	4620      	mov	r0, r4
 800610a:	f002 fb4d 	bl	80087a8 <_Bfree>
 800610e:	3f01      	subs	r7, #1
 8006110:	2f04      	cmp	r7, #4
 8006112:	d806      	bhi.n	8006122 <_strtod_l+0x102>
 8006114:	e8df f007 	tbb	[pc, r7]
 8006118:	1714030a 	.word	0x1714030a
 800611c:	0a          	.byte	0x0a
 800611d:	00          	.byte	0x00
 800611e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006122:	0728      	lsls	r0, r5, #28
 8006124:	d5c0      	bpl.n	80060a8 <_strtod_l+0x88>
 8006126:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800612a:	e7bd      	b.n	80060a8 <_strtod_l+0x88>
 800612c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006130:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006132:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006136:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800613a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800613e:	e7f0      	b.n	8006122 <_strtod_l+0x102>
 8006140:	f8df b180 	ldr.w	fp, [pc, #384]	; 80062c4 <_strtod_l+0x2a4>
 8006144:	e7ed      	b.n	8006122 <_strtod_l+0x102>
 8006146:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800614a:	f04f 3aff 	mov.w	sl, #4294967295
 800614e:	e7e8      	b.n	8006122 <_strtod_l+0x102>
 8006150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	9217      	str	r2, [sp, #92]	; 0x5c
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b30      	cmp	r3, #48	; 0x30
 800615a:	d0f9      	beq.n	8006150 <_strtod_l+0x130>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0a3      	beq.n	80060a8 <_strtod_l+0x88>
 8006160:	2301      	movs	r3, #1
 8006162:	f04f 0900 	mov.w	r9, #0
 8006166:	9304      	str	r3, [sp, #16]
 8006168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800616a:	9308      	str	r3, [sp, #32]
 800616c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006170:	464f      	mov	r7, r9
 8006172:	220a      	movs	r2, #10
 8006174:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006176:	7806      	ldrb	r6, [r0, #0]
 8006178:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800617c:	b2d9      	uxtb	r1, r3
 800617e:	2909      	cmp	r1, #9
 8006180:	d92a      	bls.n	80061d8 <_strtod_l+0x1b8>
 8006182:	9905      	ldr	r1, [sp, #20]
 8006184:	462a      	mov	r2, r5
 8006186:	f003 fbe2 	bl	800994e <strncmp>
 800618a:	b398      	cbz	r0, 80061f4 <_strtod_l+0x1d4>
 800618c:	2000      	movs	r0, #0
 800618e:	4632      	mov	r2, r6
 8006190:	463d      	mov	r5, r7
 8006192:	9005      	str	r0, [sp, #20]
 8006194:	4603      	mov	r3, r0
 8006196:	2a65      	cmp	r2, #101	; 0x65
 8006198:	d001      	beq.n	800619e <_strtod_l+0x17e>
 800619a:	2a45      	cmp	r2, #69	; 0x45
 800619c:	d118      	bne.n	80061d0 <_strtod_l+0x1b0>
 800619e:	b91d      	cbnz	r5, 80061a8 <_strtod_l+0x188>
 80061a0:	9a04      	ldr	r2, [sp, #16]
 80061a2:	4302      	orrs	r2, r0
 80061a4:	d09e      	beq.n	80060e4 <_strtod_l+0xc4>
 80061a6:	2500      	movs	r5, #0
 80061a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80061ac:	f108 0201 	add.w	r2, r8, #1
 80061b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80061b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80061b6:	2a2b      	cmp	r2, #43	; 0x2b
 80061b8:	d075      	beq.n	80062a6 <_strtod_l+0x286>
 80061ba:	2a2d      	cmp	r2, #45	; 0x2d
 80061bc:	d07b      	beq.n	80062b6 <_strtod_l+0x296>
 80061be:	f04f 0c00 	mov.w	ip, #0
 80061c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80061c6:	2909      	cmp	r1, #9
 80061c8:	f240 8082 	bls.w	80062d0 <_strtod_l+0x2b0>
 80061cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80061d0:	2600      	movs	r6, #0
 80061d2:	e09d      	b.n	8006310 <_strtod_l+0x2f0>
 80061d4:	2300      	movs	r3, #0
 80061d6:	e7c4      	b.n	8006162 <_strtod_l+0x142>
 80061d8:	2f08      	cmp	r7, #8
 80061da:	bfd8      	it	le
 80061dc:	9907      	ldrle	r1, [sp, #28]
 80061de:	f100 0001 	add.w	r0, r0, #1
 80061e2:	bfda      	itte	le
 80061e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80061e8:	9307      	strle	r3, [sp, #28]
 80061ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 80061ee:	3701      	adds	r7, #1
 80061f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80061f2:	e7bf      	b.n	8006174 <_strtod_l+0x154>
 80061f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061f6:	195a      	adds	r2, r3, r5
 80061f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80061fa:	5d5a      	ldrb	r2, [r3, r5]
 80061fc:	2f00      	cmp	r7, #0
 80061fe:	d037      	beq.n	8006270 <_strtod_l+0x250>
 8006200:	9005      	str	r0, [sp, #20]
 8006202:	463d      	mov	r5, r7
 8006204:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006208:	2b09      	cmp	r3, #9
 800620a:	d912      	bls.n	8006232 <_strtod_l+0x212>
 800620c:	2301      	movs	r3, #1
 800620e:	e7c2      	b.n	8006196 <_strtod_l+0x176>
 8006210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	9217      	str	r2, [sp, #92]	; 0x5c
 8006216:	785a      	ldrb	r2, [r3, #1]
 8006218:	3001      	adds	r0, #1
 800621a:	2a30      	cmp	r2, #48	; 0x30
 800621c:	d0f8      	beq.n	8006210 <_strtod_l+0x1f0>
 800621e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006222:	2b08      	cmp	r3, #8
 8006224:	f200 84d9 	bhi.w	8006bda <_strtod_l+0xbba>
 8006228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800622a:	9005      	str	r0, [sp, #20]
 800622c:	2000      	movs	r0, #0
 800622e:	9308      	str	r3, [sp, #32]
 8006230:	4605      	mov	r5, r0
 8006232:	3a30      	subs	r2, #48	; 0x30
 8006234:	f100 0301 	add.w	r3, r0, #1
 8006238:	d014      	beq.n	8006264 <_strtod_l+0x244>
 800623a:	9905      	ldr	r1, [sp, #20]
 800623c:	4419      	add	r1, r3
 800623e:	9105      	str	r1, [sp, #20]
 8006240:	462b      	mov	r3, r5
 8006242:	eb00 0e05 	add.w	lr, r0, r5
 8006246:	210a      	movs	r1, #10
 8006248:	4573      	cmp	r3, lr
 800624a:	d113      	bne.n	8006274 <_strtod_l+0x254>
 800624c:	182b      	adds	r3, r5, r0
 800624e:	2b08      	cmp	r3, #8
 8006250:	f105 0501 	add.w	r5, r5, #1
 8006254:	4405      	add	r5, r0
 8006256:	dc1c      	bgt.n	8006292 <_strtod_l+0x272>
 8006258:	9907      	ldr	r1, [sp, #28]
 800625a:	230a      	movs	r3, #10
 800625c:	fb03 2301 	mla	r3, r3, r1, r2
 8006260:	9307      	str	r3, [sp, #28]
 8006262:	2300      	movs	r3, #0
 8006264:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006266:	1c51      	adds	r1, r2, #1
 8006268:	9117      	str	r1, [sp, #92]	; 0x5c
 800626a:	7852      	ldrb	r2, [r2, #1]
 800626c:	4618      	mov	r0, r3
 800626e:	e7c9      	b.n	8006204 <_strtod_l+0x1e4>
 8006270:	4638      	mov	r0, r7
 8006272:	e7d2      	b.n	800621a <_strtod_l+0x1fa>
 8006274:	2b08      	cmp	r3, #8
 8006276:	dc04      	bgt.n	8006282 <_strtod_l+0x262>
 8006278:	9e07      	ldr	r6, [sp, #28]
 800627a:	434e      	muls	r6, r1
 800627c:	9607      	str	r6, [sp, #28]
 800627e:	3301      	adds	r3, #1
 8006280:	e7e2      	b.n	8006248 <_strtod_l+0x228>
 8006282:	f103 0c01 	add.w	ip, r3, #1
 8006286:	f1bc 0f10 	cmp.w	ip, #16
 800628a:	bfd8      	it	le
 800628c:	fb01 f909 	mulle.w	r9, r1, r9
 8006290:	e7f5      	b.n	800627e <_strtod_l+0x25e>
 8006292:	2d10      	cmp	r5, #16
 8006294:	bfdc      	itt	le
 8006296:	230a      	movle	r3, #10
 8006298:	fb03 2909 	mlale	r9, r3, r9, r2
 800629c:	e7e1      	b.n	8006262 <_strtod_l+0x242>
 800629e:	2300      	movs	r3, #0
 80062a0:	9305      	str	r3, [sp, #20]
 80062a2:	2301      	movs	r3, #1
 80062a4:	e77c      	b.n	80061a0 <_strtod_l+0x180>
 80062a6:	f04f 0c00 	mov.w	ip, #0
 80062aa:	f108 0202 	add.w	r2, r8, #2
 80062ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80062b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80062b4:	e785      	b.n	80061c2 <_strtod_l+0x1a2>
 80062b6:	f04f 0c01 	mov.w	ip, #1
 80062ba:	e7f6      	b.n	80062aa <_strtod_l+0x28a>
 80062bc:	0800a3ac 	.word	0x0800a3ac
 80062c0:	0800a100 	.word	0x0800a100
 80062c4:	7ff00000 	.word	0x7ff00000
 80062c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80062ca:	1c51      	adds	r1, r2, #1
 80062cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80062ce:	7852      	ldrb	r2, [r2, #1]
 80062d0:	2a30      	cmp	r2, #48	; 0x30
 80062d2:	d0f9      	beq.n	80062c8 <_strtod_l+0x2a8>
 80062d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80062d8:	2908      	cmp	r1, #8
 80062da:	f63f af79 	bhi.w	80061d0 <_strtod_l+0x1b0>
 80062de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80062e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80062e4:	9206      	str	r2, [sp, #24]
 80062e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80062e8:	1c51      	adds	r1, r2, #1
 80062ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80062ec:	7852      	ldrb	r2, [r2, #1]
 80062ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80062f2:	2e09      	cmp	r6, #9
 80062f4:	d937      	bls.n	8006366 <_strtod_l+0x346>
 80062f6:	9e06      	ldr	r6, [sp, #24]
 80062f8:	1b89      	subs	r1, r1, r6
 80062fa:	2908      	cmp	r1, #8
 80062fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006300:	dc02      	bgt.n	8006308 <_strtod_l+0x2e8>
 8006302:	4576      	cmp	r6, lr
 8006304:	bfa8      	it	ge
 8006306:	4676      	movge	r6, lr
 8006308:	f1bc 0f00 	cmp.w	ip, #0
 800630c:	d000      	beq.n	8006310 <_strtod_l+0x2f0>
 800630e:	4276      	negs	r6, r6
 8006310:	2d00      	cmp	r5, #0
 8006312:	d14d      	bne.n	80063b0 <_strtod_l+0x390>
 8006314:	9904      	ldr	r1, [sp, #16]
 8006316:	4301      	orrs	r1, r0
 8006318:	f47f aec6 	bne.w	80060a8 <_strtod_l+0x88>
 800631c:	2b00      	cmp	r3, #0
 800631e:	f47f aee1 	bne.w	80060e4 <_strtod_l+0xc4>
 8006322:	2a69      	cmp	r2, #105	; 0x69
 8006324:	d027      	beq.n	8006376 <_strtod_l+0x356>
 8006326:	dc24      	bgt.n	8006372 <_strtod_l+0x352>
 8006328:	2a49      	cmp	r2, #73	; 0x49
 800632a:	d024      	beq.n	8006376 <_strtod_l+0x356>
 800632c:	2a4e      	cmp	r2, #78	; 0x4e
 800632e:	f47f aed9 	bne.w	80060e4 <_strtod_l+0xc4>
 8006332:	499f      	ldr	r1, [pc, #636]	; (80065b0 <_strtod_l+0x590>)
 8006334:	a817      	add	r0, sp, #92	; 0x5c
 8006336:	f002 f8b3 	bl	80084a0 <__match>
 800633a:	2800      	cmp	r0, #0
 800633c:	f43f aed2 	beq.w	80060e4 <_strtod_l+0xc4>
 8006340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b28      	cmp	r3, #40	; 0x28
 8006346:	d12d      	bne.n	80063a4 <_strtod_l+0x384>
 8006348:	499a      	ldr	r1, [pc, #616]	; (80065b4 <_strtod_l+0x594>)
 800634a:	aa1a      	add	r2, sp, #104	; 0x68
 800634c:	a817      	add	r0, sp, #92	; 0x5c
 800634e:	f002 f8bb 	bl	80084c8 <__hexnan>
 8006352:	2805      	cmp	r0, #5
 8006354:	d126      	bne.n	80063a4 <_strtod_l+0x384>
 8006356:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006358:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800635c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006360:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006364:	e6a0      	b.n	80060a8 <_strtod_l+0x88>
 8006366:	210a      	movs	r1, #10
 8006368:	fb01 2e0e 	mla	lr, r1, lr, r2
 800636c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006370:	e7b9      	b.n	80062e6 <_strtod_l+0x2c6>
 8006372:	2a6e      	cmp	r2, #110	; 0x6e
 8006374:	e7db      	b.n	800632e <_strtod_l+0x30e>
 8006376:	4990      	ldr	r1, [pc, #576]	; (80065b8 <_strtod_l+0x598>)
 8006378:	a817      	add	r0, sp, #92	; 0x5c
 800637a:	f002 f891 	bl	80084a0 <__match>
 800637e:	2800      	cmp	r0, #0
 8006380:	f43f aeb0 	beq.w	80060e4 <_strtod_l+0xc4>
 8006384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006386:	498d      	ldr	r1, [pc, #564]	; (80065bc <_strtod_l+0x59c>)
 8006388:	3b01      	subs	r3, #1
 800638a:	a817      	add	r0, sp, #92	; 0x5c
 800638c:	9317      	str	r3, [sp, #92]	; 0x5c
 800638e:	f002 f887 	bl	80084a0 <__match>
 8006392:	b910      	cbnz	r0, 800639a <_strtod_l+0x37a>
 8006394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006396:	3301      	adds	r3, #1
 8006398:	9317      	str	r3, [sp, #92]	; 0x5c
 800639a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80065cc <_strtod_l+0x5ac>
 800639e:	f04f 0a00 	mov.w	sl, #0
 80063a2:	e681      	b.n	80060a8 <_strtod_l+0x88>
 80063a4:	4886      	ldr	r0, [pc, #536]	; (80065c0 <_strtod_l+0x5a0>)
 80063a6:	f003 fa77 	bl	8009898 <nan>
 80063aa:	ec5b ab10 	vmov	sl, fp, d0
 80063ae:	e67b      	b.n	80060a8 <_strtod_l+0x88>
 80063b0:	9b05      	ldr	r3, [sp, #20]
 80063b2:	9807      	ldr	r0, [sp, #28]
 80063b4:	1af3      	subs	r3, r6, r3
 80063b6:	2f00      	cmp	r7, #0
 80063b8:	bf08      	it	eq
 80063ba:	462f      	moveq	r7, r5
 80063bc:	2d10      	cmp	r5, #16
 80063be:	9306      	str	r3, [sp, #24]
 80063c0:	46a8      	mov	r8, r5
 80063c2:	bfa8      	it	ge
 80063c4:	f04f 0810 	movge.w	r8, #16
 80063c8:	f7fa f8c4 	bl	8000554 <__aeabi_ui2d>
 80063cc:	2d09      	cmp	r5, #9
 80063ce:	4682      	mov	sl, r0
 80063d0:	468b      	mov	fp, r1
 80063d2:	dd13      	ble.n	80063fc <_strtod_l+0x3dc>
 80063d4:	4b7b      	ldr	r3, [pc, #492]	; (80065c4 <_strtod_l+0x5a4>)
 80063d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80063da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80063de:	f7fa f933 	bl	8000648 <__aeabi_dmul>
 80063e2:	4682      	mov	sl, r0
 80063e4:	4648      	mov	r0, r9
 80063e6:	468b      	mov	fp, r1
 80063e8:	f7fa f8b4 	bl	8000554 <__aeabi_ui2d>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4650      	mov	r0, sl
 80063f2:	4659      	mov	r1, fp
 80063f4:	f7f9 ff72 	bl	80002dc <__adddf3>
 80063f8:	4682      	mov	sl, r0
 80063fa:	468b      	mov	fp, r1
 80063fc:	2d0f      	cmp	r5, #15
 80063fe:	dc38      	bgt.n	8006472 <_strtod_l+0x452>
 8006400:	9b06      	ldr	r3, [sp, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f43f ae50 	beq.w	80060a8 <_strtod_l+0x88>
 8006408:	dd24      	ble.n	8006454 <_strtod_l+0x434>
 800640a:	2b16      	cmp	r3, #22
 800640c:	dc0b      	bgt.n	8006426 <_strtod_l+0x406>
 800640e:	496d      	ldr	r1, [pc, #436]	; (80065c4 <_strtod_l+0x5a4>)
 8006410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006418:	4652      	mov	r2, sl
 800641a:	465b      	mov	r3, fp
 800641c:	f7fa f914 	bl	8000648 <__aeabi_dmul>
 8006420:	4682      	mov	sl, r0
 8006422:	468b      	mov	fp, r1
 8006424:	e640      	b.n	80060a8 <_strtod_l+0x88>
 8006426:	9a06      	ldr	r2, [sp, #24]
 8006428:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800642c:	4293      	cmp	r3, r2
 800642e:	db20      	blt.n	8006472 <_strtod_l+0x452>
 8006430:	4c64      	ldr	r4, [pc, #400]	; (80065c4 <_strtod_l+0x5a4>)
 8006432:	f1c5 050f 	rsb	r5, r5, #15
 8006436:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800643a:	4652      	mov	r2, sl
 800643c:	465b      	mov	r3, fp
 800643e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006442:	f7fa f901 	bl	8000648 <__aeabi_dmul>
 8006446:	9b06      	ldr	r3, [sp, #24]
 8006448:	1b5d      	subs	r5, r3, r5
 800644a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800644e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006452:	e7e3      	b.n	800641c <_strtod_l+0x3fc>
 8006454:	9b06      	ldr	r3, [sp, #24]
 8006456:	3316      	adds	r3, #22
 8006458:	db0b      	blt.n	8006472 <_strtod_l+0x452>
 800645a:	9b05      	ldr	r3, [sp, #20]
 800645c:	1b9e      	subs	r6, r3, r6
 800645e:	4b59      	ldr	r3, [pc, #356]	; (80065c4 <_strtod_l+0x5a4>)
 8006460:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006464:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006468:	4650      	mov	r0, sl
 800646a:	4659      	mov	r1, fp
 800646c:	f7fa fa16 	bl	800089c <__aeabi_ddiv>
 8006470:	e7d6      	b.n	8006420 <_strtod_l+0x400>
 8006472:	9b06      	ldr	r3, [sp, #24]
 8006474:	eba5 0808 	sub.w	r8, r5, r8
 8006478:	4498      	add	r8, r3
 800647a:	f1b8 0f00 	cmp.w	r8, #0
 800647e:	dd74      	ble.n	800656a <_strtod_l+0x54a>
 8006480:	f018 030f 	ands.w	r3, r8, #15
 8006484:	d00a      	beq.n	800649c <_strtod_l+0x47c>
 8006486:	494f      	ldr	r1, [pc, #316]	; (80065c4 <_strtod_l+0x5a4>)
 8006488:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800648c:	4652      	mov	r2, sl
 800648e:	465b      	mov	r3, fp
 8006490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006494:	f7fa f8d8 	bl	8000648 <__aeabi_dmul>
 8006498:	4682      	mov	sl, r0
 800649a:	468b      	mov	fp, r1
 800649c:	f038 080f 	bics.w	r8, r8, #15
 80064a0:	d04f      	beq.n	8006542 <_strtod_l+0x522>
 80064a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80064a6:	dd22      	ble.n	80064ee <_strtod_l+0x4ce>
 80064a8:	2500      	movs	r5, #0
 80064aa:	462e      	mov	r6, r5
 80064ac:	9507      	str	r5, [sp, #28]
 80064ae:	9505      	str	r5, [sp, #20]
 80064b0:	2322      	movs	r3, #34	; 0x22
 80064b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80065cc <_strtod_l+0x5ac>
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	f04f 0a00 	mov.w	sl, #0
 80064bc:	9b07      	ldr	r3, [sp, #28]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f43f adf2 	beq.w	80060a8 <_strtod_l+0x88>
 80064c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80064c6:	4620      	mov	r0, r4
 80064c8:	f002 f96e 	bl	80087a8 <_Bfree>
 80064cc:	9905      	ldr	r1, [sp, #20]
 80064ce:	4620      	mov	r0, r4
 80064d0:	f002 f96a 	bl	80087a8 <_Bfree>
 80064d4:	4631      	mov	r1, r6
 80064d6:	4620      	mov	r0, r4
 80064d8:	f002 f966 	bl	80087a8 <_Bfree>
 80064dc:	9907      	ldr	r1, [sp, #28]
 80064de:	4620      	mov	r0, r4
 80064e0:	f002 f962 	bl	80087a8 <_Bfree>
 80064e4:	4629      	mov	r1, r5
 80064e6:	4620      	mov	r0, r4
 80064e8:	f002 f95e 	bl	80087a8 <_Bfree>
 80064ec:	e5dc      	b.n	80060a8 <_strtod_l+0x88>
 80064ee:	4b36      	ldr	r3, [pc, #216]	; (80065c8 <_strtod_l+0x5a8>)
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	2300      	movs	r3, #0
 80064f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80064f8:	4650      	mov	r0, sl
 80064fa:	4659      	mov	r1, fp
 80064fc:	4699      	mov	r9, r3
 80064fe:	f1b8 0f01 	cmp.w	r8, #1
 8006502:	dc21      	bgt.n	8006548 <_strtod_l+0x528>
 8006504:	b10b      	cbz	r3, 800650a <_strtod_l+0x4ea>
 8006506:	4682      	mov	sl, r0
 8006508:	468b      	mov	fp, r1
 800650a:	4b2f      	ldr	r3, [pc, #188]	; (80065c8 <_strtod_l+0x5a8>)
 800650c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006510:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006514:	4652      	mov	r2, sl
 8006516:	465b      	mov	r3, fp
 8006518:	e9d9 0100 	ldrd	r0, r1, [r9]
 800651c:	f7fa f894 	bl	8000648 <__aeabi_dmul>
 8006520:	4b2a      	ldr	r3, [pc, #168]	; (80065cc <_strtod_l+0x5ac>)
 8006522:	460a      	mov	r2, r1
 8006524:	400b      	ands	r3, r1
 8006526:	492a      	ldr	r1, [pc, #168]	; (80065d0 <_strtod_l+0x5b0>)
 8006528:	428b      	cmp	r3, r1
 800652a:	4682      	mov	sl, r0
 800652c:	d8bc      	bhi.n	80064a8 <_strtod_l+0x488>
 800652e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006532:	428b      	cmp	r3, r1
 8006534:	bf86      	itte	hi
 8006536:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80065d4 <_strtod_l+0x5b4>
 800653a:	f04f 3aff 	movhi.w	sl, #4294967295
 800653e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006542:	2300      	movs	r3, #0
 8006544:	9304      	str	r3, [sp, #16]
 8006546:	e084      	b.n	8006652 <_strtod_l+0x632>
 8006548:	f018 0f01 	tst.w	r8, #1
 800654c:	d005      	beq.n	800655a <_strtod_l+0x53a>
 800654e:	9b04      	ldr	r3, [sp, #16]
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7fa f878 	bl	8000648 <__aeabi_dmul>
 8006558:	2301      	movs	r3, #1
 800655a:	9a04      	ldr	r2, [sp, #16]
 800655c:	3208      	adds	r2, #8
 800655e:	f109 0901 	add.w	r9, r9, #1
 8006562:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006566:	9204      	str	r2, [sp, #16]
 8006568:	e7c9      	b.n	80064fe <_strtod_l+0x4de>
 800656a:	d0ea      	beq.n	8006542 <_strtod_l+0x522>
 800656c:	f1c8 0800 	rsb	r8, r8, #0
 8006570:	f018 020f 	ands.w	r2, r8, #15
 8006574:	d00a      	beq.n	800658c <_strtod_l+0x56c>
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <_strtod_l+0x5a4>)
 8006578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800657c:	4650      	mov	r0, sl
 800657e:	4659      	mov	r1, fp
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	f7fa f98a 	bl	800089c <__aeabi_ddiv>
 8006588:	4682      	mov	sl, r0
 800658a:	468b      	mov	fp, r1
 800658c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006590:	d0d7      	beq.n	8006542 <_strtod_l+0x522>
 8006592:	f1b8 0f1f 	cmp.w	r8, #31
 8006596:	dd1f      	ble.n	80065d8 <_strtod_l+0x5b8>
 8006598:	2500      	movs	r5, #0
 800659a:	462e      	mov	r6, r5
 800659c:	9507      	str	r5, [sp, #28]
 800659e:	9505      	str	r5, [sp, #20]
 80065a0:	2322      	movs	r3, #34	; 0x22
 80065a2:	f04f 0a00 	mov.w	sl, #0
 80065a6:	f04f 0b00 	mov.w	fp, #0
 80065aa:	6023      	str	r3, [r4, #0]
 80065ac:	e786      	b.n	80064bc <_strtod_l+0x49c>
 80065ae:	bf00      	nop
 80065b0:	0800a0d1 	.word	0x0800a0d1
 80065b4:	0800a114 	.word	0x0800a114
 80065b8:	0800a0c9 	.word	0x0800a0c9
 80065bc:	0800a254 	.word	0x0800a254
 80065c0:	0800a568 	.word	0x0800a568
 80065c4:	0800a448 	.word	0x0800a448
 80065c8:	0800a420 	.word	0x0800a420
 80065cc:	7ff00000 	.word	0x7ff00000
 80065d0:	7ca00000 	.word	0x7ca00000
 80065d4:	7fefffff 	.word	0x7fefffff
 80065d8:	f018 0310 	ands.w	r3, r8, #16
 80065dc:	bf18      	it	ne
 80065de:	236a      	movne	r3, #106	; 0x6a
 80065e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006990 <_strtod_l+0x970>
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	4650      	mov	r0, sl
 80065e8:	4659      	mov	r1, fp
 80065ea:	2300      	movs	r3, #0
 80065ec:	f018 0f01 	tst.w	r8, #1
 80065f0:	d004      	beq.n	80065fc <_strtod_l+0x5dc>
 80065f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80065f6:	f7fa f827 	bl	8000648 <__aeabi_dmul>
 80065fa:	2301      	movs	r3, #1
 80065fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006600:	f109 0908 	add.w	r9, r9, #8
 8006604:	d1f2      	bne.n	80065ec <_strtod_l+0x5cc>
 8006606:	b10b      	cbz	r3, 800660c <_strtod_l+0x5ec>
 8006608:	4682      	mov	sl, r0
 800660a:	468b      	mov	fp, r1
 800660c:	9b04      	ldr	r3, [sp, #16]
 800660e:	b1c3      	cbz	r3, 8006642 <_strtod_l+0x622>
 8006610:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006614:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006618:	2b00      	cmp	r3, #0
 800661a:	4659      	mov	r1, fp
 800661c:	dd11      	ble.n	8006642 <_strtod_l+0x622>
 800661e:	2b1f      	cmp	r3, #31
 8006620:	f340 8124 	ble.w	800686c <_strtod_l+0x84c>
 8006624:	2b34      	cmp	r3, #52	; 0x34
 8006626:	bfde      	ittt	le
 8006628:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800662c:	f04f 33ff 	movle.w	r3, #4294967295
 8006630:	fa03 f202 	lslle.w	r2, r3, r2
 8006634:	f04f 0a00 	mov.w	sl, #0
 8006638:	bfcc      	ite	gt
 800663a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800663e:	ea02 0b01 	andle.w	fp, r2, r1
 8006642:	2200      	movs	r2, #0
 8006644:	2300      	movs	r3, #0
 8006646:	4650      	mov	r0, sl
 8006648:	4659      	mov	r1, fp
 800664a:	f7fa fa65 	bl	8000b18 <__aeabi_dcmpeq>
 800664e:	2800      	cmp	r0, #0
 8006650:	d1a2      	bne.n	8006598 <_strtod_l+0x578>
 8006652:	9b07      	ldr	r3, [sp, #28]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	9908      	ldr	r1, [sp, #32]
 8006658:	462b      	mov	r3, r5
 800665a:	463a      	mov	r2, r7
 800665c:	4620      	mov	r0, r4
 800665e:	f002 f90b 	bl	8008878 <__s2b>
 8006662:	9007      	str	r0, [sp, #28]
 8006664:	2800      	cmp	r0, #0
 8006666:	f43f af1f 	beq.w	80064a8 <_strtod_l+0x488>
 800666a:	9b05      	ldr	r3, [sp, #20]
 800666c:	1b9e      	subs	r6, r3, r6
 800666e:	9b06      	ldr	r3, [sp, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	bfb4      	ite	lt
 8006674:	4633      	movlt	r3, r6
 8006676:	2300      	movge	r3, #0
 8006678:	930c      	str	r3, [sp, #48]	; 0x30
 800667a:	9b06      	ldr	r3, [sp, #24]
 800667c:	2500      	movs	r5, #0
 800667e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006682:	9312      	str	r3, [sp, #72]	; 0x48
 8006684:	462e      	mov	r6, r5
 8006686:	9b07      	ldr	r3, [sp, #28]
 8006688:	4620      	mov	r0, r4
 800668a:	6859      	ldr	r1, [r3, #4]
 800668c:	f002 f84c 	bl	8008728 <_Balloc>
 8006690:	9005      	str	r0, [sp, #20]
 8006692:	2800      	cmp	r0, #0
 8006694:	f43f af0c 	beq.w	80064b0 <_strtod_l+0x490>
 8006698:	9b07      	ldr	r3, [sp, #28]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	3202      	adds	r2, #2
 800669e:	f103 010c 	add.w	r1, r3, #12
 80066a2:	0092      	lsls	r2, r2, #2
 80066a4:	300c      	adds	r0, #12
 80066a6:	f002 f831 	bl	800870c <memcpy>
 80066aa:	ec4b ab10 	vmov	d0, sl, fp
 80066ae:	aa1a      	add	r2, sp, #104	; 0x68
 80066b0:	a919      	add	r1, sp, #100	; 0x64
 80066b2:	4620      	mov	r0, r4
 80066b4:	f002 fc26 	bl	8008f04 <__d2b>
 80066b8:	ec4b ab18 	vmov	d8, sl, fp
 80066bc:	9018      	str	r0, [sp, #96]	; 0x60
 80066be:	2800      	cmp	r0, #0
 80066c0:	f43f aef6 	beq.w	80064b0 <_strtod_l+0x490>
 80066c4:	2101      	movs	r1, #1
 80066c6:	4620      	mov	r0, r4
 80066c8:	f002 f970 	bl	80089ac <__i2b>
 80066cc:	4606      	mov	r6, r0
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f43f aeee 	beq.w	80064b0 <_strtod_l+0x490>
 80066d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066d6:	9904      	ldr	r1, [sp, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bfab      	itete	ge
 80066dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80066de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80066e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80066e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80066e6:	bfac      	ite	ge
 80066e8:	eb03 0902 	addge.w	r9, r3, r2
 80066ec:	1ad7      	sublt	r7, r2, r3
 80066ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80066f0:	eba3 0801 	sub.w	r8, r3, r1
 80066f4:	4490      	add	r8, r2
 80066f6:	4ba1      	ldr	r3, [pc, #644]	; (800697c <_strtod_l+0x95c>)
 80066f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80066fc:	4598      	cmp	r8, r3
 80066fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006702:	f280 80c7 	bge.w	8006894 <_strtod_l+0x874>
 8006706:	eba3 0308 	sub.w	r3, r3, r8
 800670a:	2b1f      	cmp	r3, #31
 800670c:	eba2 0203 	sub.w	r2, r2, r3
 8006710:	f04f 0101 	mov.w	r1, #1
 8006714:	f300 80b1 	bgt.w	800687a <_strtod_l+0x85a>
 8006718:	fa01 f303 	lsl.w	r3, r1, r3
 800671c:	930d      	str	r3, [sp, #52]	; 0x34
 800671e:	2300      	movs	r3, #0
 8006720:	9308      	str	r3, [sp, #32]
 8006722:	eb09 0802 	add.w	r8, r9, r2
 8006726:	9b04      	ldr	r3, [sp, #16]
 8006728:	45c1      	cmp	r9, r8
 800672a:	4417      	add	r7, r2
 800672c:	441f      	add	r7, r3
 800672e:	464b      	mov	r3, r9
 8006730:	bfa8      	it	ge
 8006732:	4643      	movge	r3, r8
 8006734:	42bb      	cmp	r3, r7
 8006736:	bfa8      	it	ge
 8006738:	463b      	movge	r3, r7
 800673a:	2b00      	cmp	r3, #0
 800673c:	bfc2      	ittt	gt
 800673e:	eba8 0803 	subgt.w	r8, r8, r3
 8006742:	1aff      	subgt	r7, r7, r3
 8006744:	eba9 0903 	subgt.w	r9, r9, r3
 8006748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800674a:	2b00      	cmp	r3, #0
 800674c:	dd17      	ble.n	800677e <_strtod_l+0x75e>
 800674e:	4631      	mov	r1, r6
 8006750:	461a      	mov	r2, r3
 8006752:	4620      	mov	r0, r4
 8006754:	f002 f9ea 	bl	8008b2c <__pow5mult>
 8006758:	4606      	mov	r6, r0
 800675a:	2800      	cmp	r0, #0
 800675c:	f43f aea8 	beq.w	80064b0 <_strtod_l+0x490>
 8006760:	4601      	mov	r1, r0
 8006762:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006764:	4620      	mov	r0, r4
 8006766:	f002 f937 	bl	80089d8 <__multiply>
 800676a:	900b      	str	r0, [sp, #44]	; 0x2c
 800676c:	2800      	cmp	r0, #0
 800676e:	f43f ae9f 	beq.w	80064b0 <_strtod_l+0x490>
 8006772:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006774:	4620      	mov	r0, r4
 8006776:	f002 f817 	bl	80087a8 <_Bfree>
 800677a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800677c:	9318      	str	r3, [sp, #96]	; 0x60
 800677e:	f1b8 0f00 	cmp.w	r8, #0
 8006782:	f300 808c 	bgt.w	800689e <_strtod_l+0x87e>
 8006786:	9b06      	ldr	r3, [sp, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	dd08      	ble.n	800679e <_strtod_l+0x77e>
 800678c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800678e:	9905      	ldr	r1, [sp, #20]
 8006790:	4620      	mov	r0, r4
 8006792:	f002 f9cb 	bl	8008b2c <__pow5mult>
 8006796:	9005      	str	r0, [sp, #20]
 8006798:	2800      	cmp	r0, #0
 800679a:	f43f ae89 	beq.w	80064b0 <_strtod_l+0x490>
 800679e:	2f00      	cmp	r7, #0
 80067a0:	dd08      	ble.n	80067b4 <_strtod_l+0x794>
 80067a2:	9905      	ldr	r1, [sp, #20]
 80067a4:	463a      	mov	r2, r7
 80067a6:	4620      	mov	r0, r4
 80067a8:	f002 fa1a 	bl	8008be0 <__lshift>
 80067ac:	9005      	str	r0, [sp, #20]
 80067ae:	2800      	cmp	r0, #0
 80067b0:	f43f ae7e 	beq.w	80064b0 <_strtod_l+0x490>
 80067b4:	f1b9 0f00 	cmp.w	r9, #0
 80067b8:	dd08      	ble.n	80067cc <_strtod_l+0x7ac>
 80067ba:	4631      	mov	r1, r6
 80067bc:	464a      	mov	r2, r9
 80067be:	4620      	mov	r0, r4
 80067c0:	f002 fa0e 	bl	8008be0 <__lshift>
 80067c4:	4606      	mov	r6, r0
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f43f ae72 	beq.w	80064b0 <_strtod_l+0x490>
 80067cc:	9a05      	ldr	r2, [sp, #20]
 80067ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80067d0:	4620      	mov	r0, r4
 80067d2:	f002 fa91 	bl	8008cf8 <__mdiff>
 80067d6:	4605      	mov	r5, r0
 80067d8:	2800      	cmp	r0, #0
 80067da:	f43f ae69 	beq.w	80064b0 <_strtod_l+0x490>
 80067de:	68c3      	ldr	r3, [r0, #12]
 80067e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80067e2:	2300      	movs	r3, #0
 80067e4:	60c3      	str	r3, [r0, #12]
 80067e6:	4631      	mov	r1, r6
 80067e8:	f002 fa6a 	bl	8008cc0 <__mcmp>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	da60      	bge.n	80068b2 <_strtod_l+0x892>
 80067f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067f2:	ea53 030a 	orrs.w	r3, r3, sl
 80067f6:	f040 8082 	bne.w	80068fe <_strtod_l+0x8de>
 80067fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d17d      	bne.n	80068fe <_strtod_l+0x8de>
 8006802:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006806:	0d1b      	lsrs	r3, r3, #20
 8006808:	051b      	lsls	r3, r3, #20
 800680a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800680e:	d976      	bls.n	80068fe <_strtod_l+0x8de>
 8006810:	696b      	ldr	r3, [r5, #20]
 8006812:	b913      	cbnz	r3, 800681a <_strtod_l+0x7fa>
 8006814:	692b      	ldr	r3, [r5, #16]
 8006816:	2b01      	cmp	r3, #1
 8006818:	dd71      	ble.n	80068fe <_strtod_l+0x8de>
 800681a:	4629      	mov	r1, r5
 800681c:	2201      	movs	r2, #1
 800681e:	4620      	mov	r0, r4
 8006820:	f002 f9de 	bl	8008be0 <__lshift>
 8006824:	4631      	mov	r1, r6
 8006826:	4605      	mov	r5, r0
 8006828:	f002 fa4a 	bl	8008cc0 <__mcmp>
 800682c:	2800      	cmp	r0, #0
 800682e:	dd66      	ble.n	80068fe <_strtod_l+0x8de>
 8006830:	9904      	ldr	r1, [sp, #16]
 8006832:	4a53      	ldr	r2, [pc, #332]	; (8006980 <_strtod_l+0x960>)
 8006834:	465b      	mov	r3, fp
 8006836:	2900      	cmp	r1, #0
 8006838:	f000 8081 	beq.w	800693e <_strtod_l+0x91e>
 800683c:	ea02 010b 	and.w	r1, r2, fp
 8006840:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006844:	dc7b      	bgt.n	800693e <_strtod_l+0x91e>
 8006846:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800684a:	f77f aea9 	ble.w	80065a0 <_strtod_l+0x580>
 800684e:	4b4d      	ldr	r3, [pc, #308]	; (8006984 <_strtod_l+0x964>)
 8006850:	4650      	mov	r0, sl
 8006852:	4659      	mov	r1, fp
 8006854:	2200      	movs	r2, #0
 8006856:	f7f9 fef7 	bl	8000648 <__aeabi_dmul>
 800685a:	460b      	mov	r3, r1
 800685c:	4303      	orrs	r3, r0
 800685e:	bf08      	it	eq
 8006860:	2322      	moveq	r3, #34	; 0x22
 8006862:	4682      	mov	sl, r0
 8006864:	468b      	mov	fp, r1
 8006866:	bf08      	it	eq
 8006868:	6023      	streq	r3, [r4, #0]
 800686a:	e62b      	b.n	80064c4 <_strtod_l+0x4a4>
 800686c:	f04f 32ff 	mov.w	r2, #4294967295
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	ea03 0a0a 	and.w	sl, r3, sl
 8006878:	e6e3      	b.n	8006642 <_strtod_l+0x622>
 800687a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800687e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006882:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006886:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800688a:	fa01 f308 	lsl.w	r3, r1, r8
 800688e:	9308      	str	r3, [sp, #32]
 8006890:	910d      	str	r1, [sp, #52]	; 0x34
 8006892:	e746      	b.n	8006722 <_strtod_l+0x702>
 8006894:	2300      	movs	r3, #0
 8006896:	9308      	str	r3, [sp, #32]
 8006898:	2301      	movs	r3, #1
 800689a:	930d      	str	r3, [sp, #52]	; 0x34
 800689c:	e741      	b.n	8006722 <_strtod_l+0x702>
 800689e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80068a0:	4642      	mov	r2, r8
 80068a2:	4620      	mov	r0, r4
 80068a4:	f002 f99c 	bl	8008be0 <__lshift>
 80068a8:	9018      	str	r0, [sp, #96]	; 0x60
 80068aa:	2800      	cmp	r0, #0
 80068ac:	f47f af6b 	bne.w	8006786 <_strtod_l+0x766>
 80068b0:	e5fe      	b.n	80064b0 <_strtod_l+0x490>
 80068b2:	465f      	mov	r7, fp
 80068b4:	d16e      	bne.n	8006994 <_strtod_l+0x974>
 80068b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068bc:	b342      	cbz	r2, 8006910 <_strtod_l+0x8f0>
 80068be:	4a32      	ldr	r2, [pc, #200]	; (8006988 <_strtod_l+0x968>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d128      	bne.n	8006916 <_strtod_l+0x8f6>
 80068c4:	9b04      	ldr	r3, [sp, #16]
 80068c6:	4651      	mov	r1, sl
 80068c8:	b1eb      	cbz	r3, 8006906 <_strtod_l+0x8e6>
 80068ca:	4b2d      	ldr	r3, [pc, #180]	; (8006980 <_strtod_l+0x960>)
 80068cc:	403b      	ands	r3, r7
 80068ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80068d2:	f04f 32ff 	mov.w	r2, #4294967295
 80068d6:	d819      	bhi.n	800690c <_strtod_l+0x8ec>
 80068d8:	0d1b      	lsrs	r3, r3, #20
 80068da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	4299      	cmp	r1, r3
 80068e4:	d117      	bne.n	8006916 <_strtod_l+0x8f6>
 80068e6:	4b29      	ldr	r3, [pc, #164]	; (800698c <_strtod_l+0x96c>)
 80068e8:	429f      	cmp	r7, r3
 80068ea:	d102      	bne.n	80068f2 <_strtod_l+0x8d2>
 80068ec:	3101      	adds	r1, #1
 80068ee:	f43f addf 	beq.w	80064b0 <_strtod_l+0x490>
 80068f2:	4b23      	ldr	r3, [pc, #140]	; (8006980 <_strtod_l+0x960>)
 80068f4:	403b      	ands	r3, r7
 80068f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80068fa:	f04f 0a00 	mov.w	sl, #0
 80068fe:	9b04      	ldr	r3, [sp, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1a4      	bne.n	800684e <_strtod_l+0x82e>
 8006904:	e5de      	b.n	80064c4 <_strtod_l+0x4a4>
 8006906:	f04f 33ff 	mov.w	r3, #4294967295
 800690a:	e7ea      	b.n	80068e2 <_strtod_l+0x8c2>
 800690c:	4613      	mov	r3, r2
 800690e:	e7e8      	b.n	80068e2 <_strtod_l+0x8c2>
 8006910:	ea53 030a 	orrs.w	r3, r3, sl
 8006914:	d08c      	beq.n	8006830 <_strtod_l+0x810>
 8006916:	9b08      	ldr	r3, [sp, #32]
 8006918:	b1db      	cbz	r3, 8006952 <_strtod_l+0x932>
 800691a:	423b      	tst	r3, r7
 800691c:	d0ef      	beq.n	80068fe <_strtod_l+0x8de>
 800691e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006920:	9a04      	ldr	r2, [sp, #16]
 8006922:	4650      	mov	r0, sl
 8006924:	4659      	mov	r1, fp
 8006926:	b1c3      	cbz	r3, 800695a <_strtod_l+0x93a>
 8006928:	f7ff fb5e 	bl	8005fe8 <sulp>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	ec51 0b18 	vmov	r0, r1, d8
 8006934:	f7f9 fcd2 	bl	80002dc <__adddf3>
 8006938:	4682      	mov	sl, r0
 800693a:	468b      	mov	fp, r1
 800693c:	e7df      	b.n	80068fe <_strtod_l+0x8de>
 800693e:	4013      	ands	r3, r2
 8006940:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006944:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006948:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800694c:	f04f 3aff 	mov.w	sl, #4294967295
 8006950:	e7d5      	b.n	80068fe <_strtod_l+0x8de>
 8006952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006954:	ea13 0f0a 	tst.w	r3, sl
 8006958:	e7e0      	b.n	800691c <_strtod_l+0x8fc>
 800695a:	f7ff fb45 	bl	8005fe8 <sulp>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	ec51 0b18 	vmov	r0, r1, d8
 8006966:	f7f9 fcb7 	bl	80002d8 <__aeabi_dsub>
 800696a:	2200      	movs	r2, #0
 800696c:	2300      	movs	r3, #0
 800696e:	4682      	mov	sl, r0
 8006970:	468b      	mov	fp, r1
 8006972:	f7fa f8d1 	bl	8000b18 <__aeabi_dcmpeq>
 8006976:	2800      	cmp	r0, #0
 8006978:	d0c1      	beq.n	80068fe <_strtod_l+0x8de>
 800697a:	e611      	b.n	80065a0 <_strtod_l+0x580>
 800697c:	fffffc02 	.word	0xfffffc02
 8006980:	7ff00000 	.word	0x7ff00000
 8006984:	39500000 	.word	0x39500000
 8006988:	000fffff 	.word	0x000fffff
 800698c:	7fefffff 	.word	0x7fefffff
 8006990:	0800a128 	.word	0x0800a128
 8006994:	4631      	mov	r1, r6
 8006996:	4628      	mov	r0, r5
 8006998:	f002 fb10 	bl	8008fbc <__ratio>
 800699c:	ec59 8b10 	vmov	r8, r9, d0
 80069a0:	ee10 0a10 	vmov	r0, s0
 80069a4:	2200      	movs	r2, #0
 80069a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069aa:	4649      	mov	r1, r9
 80069ac:	f7fa f8c8 	bl	8000b40 <__aeabi_dcmple>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d07a      	beq.n	8006aaa <_strtod_l+0xa8a>
 80069b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d04a      	beq.n	8006a50 <_strtod_l+0xa30>
 80069ba:	4b95      	ldr	r3, [pc, #596]	; (8006c10 <_strtod_l+0xbf0>)
 80069bc:	2200      	movs	r2, #0
 80069be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80069c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006c10 <_strtod_l+0xbf0>
 80069c6:	f04f 0800 	mov.w	r8, #0
 80069ca:	4b92      	ldr	r3, [pc, #584]	; (8006c14 <_strtod_l+0xbf4>)
 80069cc:	403b      	ands	r3, r7
 80069ce:	930d      	str	r3, [sp, #52]	; 0x34
 80069d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069d2:	4b91      	ldr	r3, [pc, #580]	; (8006c18 <_strtod_l+0xbf8>)
 80069d4:	429a      	cmp	r2, r3
 80069d6:	f040 80b0 	bne.w	8006b3a <_strtod_l+0xb1a>
 80069da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80069e2:	ec4b ab10 	vmov	d0, sl, fp
 80069e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80069ea:	f002 fa0f 	bl	8008e0c <__ulp>
 80069ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069f2:	ec53 2b10 	vmov	r2, r3, d0
 80069f6:	f7f9 fe27 	bl	8000648 <__aeabi_dmul>
 80069fa:	4652      	mov	r2, sl
 80069fc:	465b      	mov	r3, fp
 80069fe:	f7f9 fc6d 	bl	80002dc <__adddf3>
 8006a02:	460b      	mov	r3, r1
 8006a04:	4983      	ldr	r1, [pc, #524]	; (8006c14 <_strtod_l+0xbf4>)
 8006a06:	4a85      	ldr	r2, [pc, #532]	; (8006c1c <_strtod_l+0xbfc>)
 8006a08:	4019      	ands	r1, r3
 8006a0a:	4291      	cmp	r1, r2
 8006a0c:	4682      	mov	sl, r0
 8006a0e:	d960      	bls.n	8006ad2 <_strtod_l+0xab2>
 8006a10:	ee18 3a90 	vmov	r3, s17
 8006a14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d104      	bne.n	8006a26 <_strtod_l+0xa06>
 8006a1c:	ee18 3a10 	vmov	r3, s16
 8006a20:	3301      	adds	r3, #1
 8006a22:	f43f ad45 	beq.w	80064b0 <_strtod_l+0x490>
 8006a26:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006c28 <_strtod_l+0xc08>
 8006a2a:	f04f 3aff 	mov.w	sl, #4294967295
 8006a2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a30:	4620      	mov	r0, r4
 8006a32:	f001 feb9 	bl	80087a8 <_Bfree>
 8006a36:	9905      	ldr	r1, [sp, #20]
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f001 feb5 	bl	80087a8 <_Bfree>
 8006a3e:	4631      	mov	r1, r6
 8006a40:	4620      	mov	r0, r4
 8006a42:	f001 feb1 	bl	80087a8 <_Bfree>
 8006a46:	4629      	mov	r1, r5
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f001 fead 	bl	80087a8 <_Bfree>
 8006a4e:	e61a      	b.n	8006686 <_strtod_l+0x666>
 8006a50:	f1ba 0f00 	cmp.w	sl, #0
 8006a54:	d11b      	bne.n	8006a8e <_strtod_l+0xa6e>
 8006a56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a5a:	b9f3      	cbnz	r3, 8006a9a <_strtod_l+0xa7a>
 8006a5c:	4b6c      	ldr	r3, [pc, #432]	; (8006c10 <_strtod_l+0xbf0>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	4640      	mov	r0, r8
 8006a62:	4649      	mov	r1, r9
 8006a64:	f7fa f862 	bl	8000b2c <__aeabi_dcmplt>
 8006a68:	b9d0      	cbnz	r0, 8006aa0 <_strtod_l+0xa80>
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	4b6c      	ldr	r3, [pc, #432]	; (8006c20 <_strtod_l+0xc00>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	f7f9 fde9 	bl	8000648 <__aeabi_dmul>
 8006a76:	4680      	mov	r8, r0
 8006a78:	4689      	mov	r9, r1
 8006a7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006a7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006a82:	9315      	str	r3, [sp, #84]	; 0x54
 8006a84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006a88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006a8c:	e79d      	b.n	80069ca <_strtod_l+0x9aa>
 8006a8e:	f1ba 0f01 	cmp.w	sl, #1
 8006a92:	d102      	bne.n	8006a9a <_strtod_l+0xa7a>
 8006a94:	2f00      	cmp	r7, #0
 8006a96:	f43f ad83 	beq.w	80065a0 <_strtod_l+0x580>
 8006a9a:	4b62      	ldr	r3, [pc, #392]	; (8006c24 <_strtod_l+0xc04>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	e78e      	b.n	80069be <_strtod_l+0x99e>
 8006aa0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006c20 <_strtod_l+0xc00>
 8006aa4:	f04f 0800 	mov.w	r8, #0
 8006aa8:	e7e7      	b.n	8006a7a <_strtod_l+0xa5a>
 8006aaa:	4b5d      	ldr	r3, [pc, #372]	; (8006c20 <_strtod_l+0xc00>)
 8006aac:	4640      	mov	r0, r8
 8006aae:	4649      	mov	r1, r9
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f7f9 fdc9 	bl	8000648 <__aeabi_dmul>
 8006ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab8:	4680      	mov	r8, r0
 8006aba:	4689      	mov	r9, r1
 8006abc:	b933      	cbnz	r3, 8006acc <_strtod_l+0xaac>
 8006abe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ac2:	900e      	str	r0, [sp, #56]	; 0x38
 8006ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ac6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006aca:	e7dd      	b.n	8006a88 <_strtod_l+0xa68>
 8006acc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006ad0:	e7f9      	b.n	8006ac6 <_strtod_l+0xaa6>
 8006ad2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006ad6:	9b04      	ldr	r3, [sp, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1a8      	bne.n	8006a2e <_strtod_l+0xa0e>
 8006adc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ae2:	0d1b      	lsrs	r3, r3, #20
 8006ae4:	051b      	lsls	r3, r3, #20
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d1a1      	bne.n	8006a2e <_strtod_l+0xa0e>
 8006aea:	4640      	mov	r0, r8
 8006aec:	4649      	mov	r1, r9
 8006aee:	f7fa f90b 	bl	8000d08 <__aeabi_d2lz>
 8006af2:	f7f9 fd7b 	bl	80005ec <__aeabi_l2d>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4640      	mov	r0, r8
 8006afc:	4649      	mov	r1, r9
 8006afe:	f7f9 fbeb 	bl	80002d8 <__aeabi_dsub>
 8006b02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b08:	ea43 030a 	orr.w	r3, r3, sl
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	4680      	mov	r8, r0
 8006b10:	4689      	mov	r9, r1
 8006b12:	d055      	beq.n	8006bc0 <_strtod_l+0xba0>
 8006b14:	a336      	add	r3, pc, #216	; (adr r3, 8006bf0 <_strtod_l+0xbd0>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f7fa f807 	bl	8000b2c <__aeabi_dcmplt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f47f acd0 	bne.w	80064c4 <_strtod_l+0x4a4>
 8006b24:	a334      	add	r3, pc, #208	; (adr r3, 8006bf8 <_strtod_l+0xbd8>)
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	f7fa f81b 	bl	8000b68 <__aeabi_dcmpgt>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	f43f af7b 	beq.w	8006a2e <_strtod_l+0xa0e>
 8006b38:	e4c4      	b.n	80064c4 <_strtod_l+0x4a4>
 8006b3a:	9b04      	ldr	r3, [sp, #16]
 8006b3c:	b333      	cbz	r3, 8006b8c <_strtod_l+0xb6c>
 8006b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006b44:	d822      	bhi.n	8006b8c <_strtod_l+0xb6c>
 8006b46:	a32e      	add	r3, pc, #184	; (adr r3, 8006c00 <_strtod_l+0xbe0>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	4649      	mov	r1, r9
 8006b50:	f7f9 fff6 	bl	8000b40 <__aeabi_dcmple>
 8006b54:	b1a0      	cbz	r0, 8006b80 <_strtod_l+0xb60>
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	f7fa f84d 	bl	8000bf8 <__aeabi_d2uiz>
 8006b5e:	2801      	cmp	r0, #1
 8006b60:	bf38      	it	cc
 8006b62:	2001      	movcc	r0, #1
 8006b64:	f7f9 fcf6 	bl	8000554 <__aeabi_ui2d>
 8006b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	4689      	mov	r9, r1
 8006b6e:	bb23      	cbnz	r3, 8006bba <_strtod_l+0xb9a>
 8006b70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b74:	9010      	str	r0, [sp, #64]	; 0x40
 8006b76:	9311      	str	r3, [sp, #68]	; 0x44
 8006b78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b90:	eeb0 0a48 	vmov.f32	s0, s16
 8006b94:	eef0 0a68 	vmov.f32	s1, s17
 8006b98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006b9c:	f002 f936 	bl	8008e0c <__ulp>
 8006ba0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ba4:	ec53 2b10 	vmov	r2, r3, d0
 8006ba8:	f7f9 fd4e 	bl	8000648 <__aeabi_dmul>
 8006bac:	ec53 2b18 	vmov	r2, r3, d8
 8006bb0:	f7f9 fb94 	bl	80002dc <__adddf3>
 8006bb4:	4682      	mov	sl, r0
 8006bb6:	468b      	mov	fp, r1
 8006bb8:	e78d      	b.n	8006ad6 <_strtod_l+0xab6>
 8006bba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006bbe:	e7db      	b.n	8006b78 <_strtod_l+0xb58>
 8006bc0:	a311      	add	r3, pc, #68	; (adr r3, 8006c08 <_strtod_l+0xbe8>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	f7f9 ffb1 	bl	8000b2c <__aeabi_dcmplt>
 8006bca:	e7b2      	b.n	8006b32 <_strtod_l+0xb12>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	930a      	str	r3, [sp, #40]	; 0x28
 8006bd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006bd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bd4:	6013      	str	r3, [r2, #0]
 8006bd6:	f7ff ba6b 	b.w	80060b0 <_strtod_l+0x90>
 8006bda:	2a65      	cmp	r2, #101	; 0x65
 8006bdc:	f43f ab5f 	beq.w	800629e <_strtod_l+0x27e>
 8006be0:	2a45      	cmp	r2, #69	; 0x45
 8006be2:	f43f ab5c 	beq.w	800629e <_strtod_l+0x27e>
 8006be6:	2301      	movs	r3, #1
 8006be8:	f7ff bb94 	b.w	8006314 <_strtod_l+0x2f4>
 8006bec:	f3af 8000 	nop.w
 8006bf0:	94a03595 	.word	0x94a03595
 8006bf4:	3fdfffff 	.word	0x3fdfffff
 8006bf8:	35afe535 	.word	0x35afe535
 8006bfc:	3fe00000 	.word	0x3fe00000
 8006c00:	ffc00000 	.word	0xffc00000
 8006c04:	41dfffff 	.word	0x41dfffff
 8006c08:	94a03595 	.word	0x94a03595
 8006c0c:	3fcfffff 	.word	0x3fcfffff
 8006c10:	3ff00000 	.word	0x3ff00000
 8006c14:	7ff00000 	.word	0x7ff00000
 8006c18:	7fe00000 	.word	0x7fe00000
 8006c1c:	7c9fffff 	.word	0x7c9fffff
 8006c20:	3fe00000 	.word	0x3fe00000
 8006c24:	bff00000 	.word	0xbff00000
 8006c28:	7fefffff 	.word	0x7fefffff

08006c2c <_strtod_r>:
 8006c2c:	4b01      	ldr	r3, [pc, #4]	; (8006c34 <_strtod_r+0x8>)
 8006c2e:	f7ff b9f7 	b.w	8006020 <_strtod_l>
 8006c32:	bf00      	nop
 8006c34:	20000074 	.word	0x20000074

08006c38 <_strtol_l.constprop.0>:
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c3e:	d001      	beq.n	8006c44 <_strtol_l.constprop.0+0xc>
 8006c40:	2b24      	cmp	r3, #36	; 0x24
 8006c42:	d906      	bls.n	8006c52 <_strtol_l.constprop.0+0x1a>
 8006c44:	f7fe fa5a 	bl	80050fc <__errno>
 8006c48:	2316      	movs	r3, #22
 8006c4a:	6003      	str	r3, [r0, #0]
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006d38 <_strtol_l.constprop.0+0x100>
 8006c56:	460d      	mov	r5, r1
 8006c58:	462e      	mov	r6, r5
 8006c5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006c62:	f017 0708 	ands.w	r7, r7, #8
 8006c66:	d1f7      	bne.n	8006c58 <_strtol_l.constprop.0+0x20>
 8006c68:	2c2d      	cmp	r4, #45	; 0x2d
 8006c6a:	d132      	bne.n	8006cd2 <_strtol_l.constprop.0+0x9a>
 8006c6c:	782c      	ldrb	r4, [r5, #0]
 8006c6e:	2701      	movs	r7, #1
 8006c70:	1cb5      	adds	r5, r6, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d05b      	beq.n	8006d2e <_strtol_l.constprop.0+0xf6>
 8006c76:	2b10      	cmp	r3, #16
 8006c78:	d109      	bne.n	8006c8e <_strtol_l.constprop.0+0x56>
 8006c7a:	2c30      	cmp	r4, #48	; 0x30
 8006c7c:	d107      	bne.n	8006c8e <_strtol_l.constprop.0+0x56>
 8006c7e:	782c      	ldrb	r4, [r5, #0]
 8006c80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006c84:	2c58      	cmp	r4, #88	; 0x58
 8006c86:	d14d      	bne.n	8006d24 <_strtol_l.constprop.0+0xec>
 8006c88:	786c      	ldrb	r4, [r5, #1]
 8006c8a:	2310      	movs	r3, #16
 8006c8c:	3502      	adds	r5, #2
 8006c8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006c92:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c96:	f04f 0c00 	mov.w	ip, #0
 8006c9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8006c9e:	4666      	mov	r6, ip
 8006ca0:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ca4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006ca8:	f1be 0f09 	cmp.w	lr, #9
 8006cac:	d816      	bhi.n	8006cdc <_strtol_l.constprop.0+0xa4>
 8006cae:	4674      	mov	r4, lr
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	dd24      	ble.n	8006cfe <_strtol_l.constprop.0+0xc6>
 8006cb4:	f1bc 0f00 	cmp.w	ip, #0
 8006cb8:	db1e      	blt.n	8006cf8 <_strtol_l.constprop.0+0xc0>
 8006cba:	45b1      	cmp	r9, r6
 8006cbc:	d31c      	bcc.n	8006cf8 <_strtol_l.constprop.0+0xc0>
 8006cbe:	d101      	bne.n	8006cc4 <_strtol_l.constprop.0+0x8c>
 8006cc0:	45a2      	cmp	sl, r4
 8006cc2:	db19      	blt.n	8006cf8 <_strtol_l.constprop.0+0xc0>
 8006cc4:	fb06 4603 	mla	r6, r6, r3, r4
 8006cc8:	f04f 0c01 	mov.w	ip, #1
 8006ccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cd0:	e7e8      	b.n	8006ca4 <_strtol_l.constprop.0+0x6c>
 8006cd2:	2c2b      	cmp	r4, #43	; 0x2b
 8006cd4:	bf04      	itt	eq
 8006cd6:	782c      	ldrbeq	r4, [r5, #0]
 8006cd8:	1cb5      	addeq	r5, r6, #2
 8006cda:	e7ca      	b.n	8006c72 <_strtol_l.constprop.0+0x3a>
 8006cdc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006ce0:	f1be 0f19 	cmp.w	lr, #25
 8006ce4:	d801      	bhi.n	8006cea <_strtol_l.constprop.0+0xb2>
 8006ce6:	3c37      	subs	r4, #55	; 0x37
 8006ce8:	e7e2      	b.n	8006cb0 <_strtol_l.constprop.0+0x78>
 8006cea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006cee:	f1be 0f19 	cmp.w	lr, #25
 8006cf2:	d804      	bhi.n	8006cfe <_strtol_l.constprop.0+0xc6>
 8006cf4:	3c57      	subs	r4, #87	; 0x57
 8006cf6:	e7db      	b.n	8006cb0 <_strtol_l.constprop.0+0x78>
 8006cf8:	f04f 3cff 	mov.w	ip, #4294967295
 8006cfc:	e7e6      	b.n	8006ccc <_strtol_l.constprop.0+0x94>
 8006cfe:	f1bc 0f00 	cmp.w	ip, #0
 8006d02:	da05      	bge.n	8006d10 <_strtol_l.constprop.0+0xd8>
 8006d04:	2322      	movs	r3, #34	; 0x22
 8006d06:	6003      	str	r3, [r0, #0]
 8006d08:	4646      	mov	r6, r8
 8006d0a:	b942      	cbnz	r2, 8006d1e <_strtol_l.constprop.0+0xe6>
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	e79e      	b.n	8006c4e <_strtol_l.constprop.0+0x16>
 8006d10:	b107      	cbz	r7, 8006d14 <_strtol_l.constprop.0+0xdc>
 8006d12:	4276      	negs	r6, r6
 8006d14:	2a00      	cmp	r2, #0
 8006d16:	d0f9      	beq.n	8006d0c <_strtol_l.constprop.0+0xd4>
 8006d18:	f1bc 0f00 	cmp.w	ip, #0
 8006d1c:	d000      	beq.n	8006d20 <_strtol_l.constprop.0+0xe8>
 8006d1e:	1e69      	subs	r1, r5, #1
 8006d20:	6011      	str	r1, [r2, #0]
 8006d22:	e7f3      	b.n	8006d0c <_strtol_l.constprop.0+0xd4>
 8006d24:	2430      	movs	r4, #48	; 0x30
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1b1      	bne.n	8006c8e <_strtol_l.constprop.0+0x56>
 8006d2a:	2308      	movs	r3, #8
 8006d2c:	e7af      	b.n	8006c8e <_strtol_l.constprop.0+0x56>
 8006d2e:	2c30      	cmp	r4, #48	; 0x30
 8006d30:	d0a5      	beq.n	8006c7e <_strtol_l.constprop.0+0x46>
 8006d32:	230a      	movs	r3, #10
 8006d34:	e7ab      	b.n	8006c8e <_strtol_l.constprop.0+0x56>
 8006d36:	bf00      	nop
 8006d38:	0800a151 	.word	0x0800a151

08006d3c <_strtol_r>:
 8006d3c:	f7ff bf7c 	b.w	8006c38 <_strtol_l.constprop.0>

08006d40 <__swbuf_r>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	460e      	mov	r6, r1
 8006d44:	4614      	mov	r4, r2
 8006d46:	4605      	mov	r5, r0
 8006d48:	b118      	cbz	r0, 8006d52 <__swbuf_r+0x12>
 8006d4a:	6983      	ldr	r3, [r0, #24]
 8006d4c:	b90b      	cbnz	r3, 8006d52 <__swbuf_r+0x12>
 8006d4e:	f001 f84b 	bl	8007de8 <__sinit>
 8006d52:	4b21      	ldr	r3, [pc, #132]	; (8006dd8 <__swbuf_r+0x98>)
 8006d54:	429c      	cmp	r4, r3
 8006d56:	d12b      	bne.n	8006db0 <__swbuf_r+0x70>
 8006d58:	686c      	ldr	r4, [r5, #4]
 8006d5a:	69a3      	ldr	r3, [r4, #24]
 8006d5c:	60a3      	str	r3, [r4, #8]
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	071a      	lsls	r2, r3, #28
 8006d62:	d52f      	bpl.n	8006dc4 <__swbuf_r+0x84>
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	b36b      	cbz	r3, 8006dc4 <__swbuf_r+0x84>
 8006d68:	6923      	ldr	r3, [r4, #16]
 8006d6a:	6820      	ldr	r0, [r4, #0]
 8006d6c:	1ac0      	subs	r0, r0, r3
 8006d6e:	6963      	ldr	r3, [r4, #20]
 8006d70:	b2f6      	uxtb	r6, r6
 8006d72:	4283      	cmp	r3, r0
 8006d74:	4637      	mov	r7, r6
 8006d76:	dc04      	bgt.n	8006d82 <__swbuf_r+0x42>
 8006d78:	4621      	mov	r1, r4
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f000 ffa0 	bl	8007cc0 <_fflush_r>
 8006d80:	bb30      	cbnz	r0, 8006dd0 <__swbuf_r+0x90>
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	60a3      	str	r3, [r4, #8]
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	6022      	str	r2, [r4, #0]
 8006d8e:	701e      	strb	r6, [r3, #0]
 8006d90:	6963      	ldr	r3, [r4, #20]
 8006d92:	3001      	adds	r0, #1
 8006d94:	4283      	cmp	r3, r0
 8006d96:	d004      	beq.n	8006da2 <__swbuf_r+0x62>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	07db      	lsls	r3, r3, #31
 8006d9c:	d506      	bpl.n	8006dac <__swbuf_r+0x6c>
 8006d9e:	2e0a      	cmp	r6, #10
 8006da0:	d104      	bne.n	8006dac <__swbuf_r+0x6c>
 8006da2:	4621      	mov	r1, r4
 8006da4:	4628      	mov	r0, r5
 8006da6:	f000 ff8b 	bl	8007cc0 <_fflush_r>
 8006daa:	b988      	cbnz	r0, 8006dd0 <__swbuf_r+0x90>
 8006dac:	4638      	mov	r0, r7
 8006dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006db0:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <__swbuf_r+0x9c>)
 8006db2:	429c      	cmp	r4, r3
 8006db4:	d101      	bne.n	8006dba <__swbuf_r+0x7a>
 8006db6:	68ac      	ldr	r4, [r5, #8]
 8006db8:	e7cf      	b.n	8006d5a <__swbuf_r+0x1a>
 8006dba:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <__swbuf_r+0xa0>)
 8006dbc:	429c      	cmp	r4, r3
 8006dbe:	bf08      	it	eq
 8006dc0:	68ec      	ldreq	r4, [r5, #12]
 8006dc2:	e7ca      	b.n	8006d5a <__swbuf_r+0x1a>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 f80c 	bl	8006de4 <__swsetup_r>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d0cb      	beq.n	8006d68 <__swbuf_r+0x28>
 8006dd0:	f04f 37ff 	mov.w	r7, #4294967295
 8006dd4:	e7ea      	b.n	8006dac <__swbuf_r+0x6c>
 8006dd6:	bf00      	nop
 8006dd8:	0800a304 	.word	0x0800a304
 8006ddc:	0800a324 	.word	0x0800a324
 8006de0:	0800a2e4 	.word	0x0800a2e4

08006de4 <__swsetup_r>:
 8006de4:	4b32      	ldr	r3, [pc, #200]	; (8006eb0 <__swsetup_r+0xcc>)
 8006de6:	b570      	push	{r4, r5, r6, lr}
 8006de8:	681d      	ldr	r5, [r3, #0]
 8006dea:	4606      	mov	r6, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	b125      	cbz	r5, 8006dfa <__swsetup_r+0x16>
 8006df0:	69ab      	ldr	r3, [r5, #24]
 8006df2:	b913      	cbnz	r3, 8006dfa <__swsetup_r+0x16>
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 fff7 	bl	8007de8 <__sinit>
 8006dfa:	4b2e      	ldr	r3, [pc, #184]	; (8006eb4 <__swsetup_r+0xd0>)
 8006dfc:	429c      	cmp	r4, r3
 8006dfe:	d10f      	bne.n	8006e20 <__swsetup_r+0x3c>
 8006e00:	686c      	ldr	r4, [r5, #4]
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e08:	0719      	lsls	r1, r3, #28
 8006e0a:	d42c      	bmi.n	8006e66 <__swsetup_r+0x82>
 8006e0c:	06dd      	lsls	r5, r3, #27
 8006e0e:	d411      	bmi.n	8006e34 <__swsetup_r+0x50>
 8006e10:	2309      	movs	r3, #9
 8006e12:	6033      	str	r3, [r6, #0]
 8006e14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1e:	e03e      	b.n	8006e9e <__swsetup_r+0xba>
 8006e20:	4b25      	ldr	r3, [pc, #148]	; (8006eb8 <__swsetup_r+0xd4>)
 8006e22:	429c      	cmp	r4, r3
 8006e24:	d101      	bne.n	8006e2a <__swsetup_r+0x46>
 8006e26:	68ac      	ldr	r4, [r5, #8]
 8006e28:	e7eb      	b.n	8006e02 <__swsetup_r+0x1e>
 8006e2a:	4b24      	ldr	r3, [pc, #144]	; (8006ebc <__swsetup_r+0xd8>)
 8006e2c:	429c      	cmp	r4, r3
 8006e2e:	bf08      	it	eq
 8006e30:	68ec      	ldreq	r4, [r5, #12]
 8006e32:	e7e6      	b.n	8006e02 <__swsetup_r+0x1e>
 8006e34:	0758      	lsls	r0, r3, #29
 8006e36:	d512      	bpl.n	8006e5e <__swsetup_r+0x7a>
 8006e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e3a:	b141      	cbz	r1, 8006e4e <__swsetup_r+0x6a>
 8006e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d002      	beq.n	8006e4a <__swsetup_r+0x66>
 8006e44:	4630      	mov	r0, r6
 8006e46:	f002 f947 	bl	80090d8 <_free_r>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	6363      	str	r3, [r4, #52]	; 0x34
 8006e4e:	89a3      	ldrh	r3, [r4, #12]
 8006e50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e54:	81a3      	strh	r3, [r4, #12]
 8006e56:	2300      	movs	r3, #0
 8006e58:	6063      	str	r3, [r4, #4]
 8006e5a:	6923      	ldr	r3, [r4, #16]
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	f043 0308 	orr.w	r3, r3, #8
 8006e64:	81a3      	strh	r3, [r4, #12]
 8006e66:	6923      	ldr	r3, [r4, #16]
 8006e68:	b94b      	cbnz	r3, 8006e7e <__swsetup_r+0x9a>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e74:	d003      	beq.n	8006e7e <__swsetup_r+0x9a>
 8006e76:	4621      	mov	r1, r4
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f001 fbed 	bl	8008658 <__smakebuf_r>
 8006e7e:	89a0      	ldrh	r0, [r4, #12]
 8006e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e84:	f010 0301 	ands.w	r3, r0, #1
 8006e88:	d00a      	beq.n	8006ea0 <__swsetup_r+0xbc>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60a3      	str	r3, [r4, #8]
 8006e8e:	6963      	ldr	r3, [r4, #20]
 8006e90:	425b      	negs	r3, r3
 8006e92:	61a3      	str	r3, [r4, #24]
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	b943      	cbnz	r3, 8006eaa <__swsetup_r+0xc6>
 8006e98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e9c:	d1ba      	bne.n	8006e14 <__swsetup_r+0x30>
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	0781      	lsls	r1, r0, #30
 8006ea2:	bf58      	it	pl
 8006ea4:	6963      	ldrpl	r3, [r4, #20]
 8006ea6:	60a3      	str	r3, [r4, #8]
 8006ea8:	e7f4      	b.n	8006e94 <__swsetup_r+0xb0>
 8006eaa:	2000      	movs	r0, #0
 8006eac:	e7f7      	b.n	8006e9e <__swsetup_r+0xba>
 8006eae:	bf00      	nop
 8006eb0:	2000000c 	.word	0x2000000c
 8006eb4:	0800a304 	.word	0x0800a304
 8006eb8:	0800a324 	.word	0x0800a324
 8006ebc:	0800a2e4 	.word	0x0800a2e4

08006ec0 <quorem>:
 8006ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	6903      	ldr	r3, [r0, #16]
 8006ec6:	690c      	ldr	r4, [r1, #16]
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	4607      	mov	r7, r0
 8006ecc:	f2c0 8081 	blt.w	8006fd2 <quorem+0x112>
 8006ed0:	3c01      	subs	r4, #1
 8006ed2:	f101 0814 	add.w	r8, r1, #20
 8006ed6:	f100 0514 	add.w	r5, r0, #20
 8006eda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ede:	9301      	str	r3, [sp, #4]
 8006ee0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	429a      	cmp	r2, r3
 8006eec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ef0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ef4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ef8:	d331      	bcc.n	8006f5e <quorem+0x9e>
 8006efa:	f04f 0e00 	mov.w	lr, #0
 8006efe:	4640      	mov	r0, r8
 8006f00:	46ac      	mov	ip, r5
 8006f02:	46f2      	mov	sl, lr
 8006f04:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f08:	b293      	uxth	r3, r2
 8006f0a:	fb06 e303 	mla	r3, r6, r3, lr
 8006f0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	ebaa 0303 	sub.w	r3, sl, r3
 8006f18:	f8dc a000 	ldr.w	sl, [ip]
 8006f1c:	0c12      	lsrs	r2, r2, #16
 8006f1e:	fa13 f38a 	uxtah	r3, r3, sl
 8006f22:	fb06 e202 	mla	r2, r6, r2, lr
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	9b00      	ldr	r3, [sp, #0]
 8006f2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f2e:	b292      	uxth	r2, r2
 8006f30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f38:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f3c:	4581      	cmp	r9, r0
 8006f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f42:	f84c 3b04 	str.w	r3, [ip], #4
 8006f46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f4a:	d2db      	bcs.n	8006f04 <quorem+0x44>
 8006f4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f50:	b92b      	cbnz	r3, 8006f5e <quorem+0x9e>
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	3b04      	subs	r3, #4
 8006f56:	429d      	cmp	r5, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	d32e      	bcc.n	8006fba <quorem+0xfa>
 8006f5c:	613c      	str	r4, [r7, #16]
 8006f5e:	4638      	mov	r0, r7
 8006f60:	f001 feae 	bl	8008cc0 <__mcmp>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	db24      	blt.n	8006fb2 <quorem+0xf2>
 8006f68:	3601      	adds	r6, #1
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f04f 0c00 	mov.w	ip, #0
 8006f70:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f74:	f8d0 e000 	ldr.w	lr, [r0]
 8006f78:	b293      	uxth	r3, r2
 8006f7a:	ebac 0303 	sub.w	r3, ip, r3
 8006f7e:	0c12      	lsrs	r2, r2, #16
 8006f80:	fa13 f38e 	uxtah	r3, r3, lr
 8006f84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f92:	45c1      	cmp	r9, r8
 8006f94:	f840 3b04 	str.w	r3, [r0], #4
 8006f98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f9c:	d2e8      	bcs.n	8006f70 <quorem+0xb0>
 8006f9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fa6:	b922      	cbnz	r2, 8006fb2 <quorem+0xf2>
 8006fa8:	3b04      	subs	r3, #4
 8006faa:	429d      	cmp	r5, r3
 8006fac:	461a      	mov	r2, r3
 8006fae:	d30a      	bcc.n	8006fc6 <quorem+0x106>
 8006fb0:	613c      	str	r4, [r7, #16]
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	b003      	add	sp, #12
 8006fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fba:	6812      	ldr	r2, [r2, #0]
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	2a00      	cmp	r2, #0
 8006fc0:	d1cc      	bne.n	8006f5c <quorem+0x9c>
 8006fc2:	3c01      	subs	r4, #1
 8006fc4:	e7c7      	b.n	8006f56 <quorem+0x96>
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	3b04      	subs	r3, #4
 8006fca:	2a00      	cmp	r2, #0
 8006fcc:	d1f0      	bne.n	8006fb0 <quorem+0xf0>
 8006fce:	3c01      	subs	r4, #1
 8006fd0:	e7eb      	b.n	8006faa <quorem+0xea>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e7ee      	b.n	8006fb4 <quorem+0xf4>
	...

08006fd8 <_dtoa_r>:
 8006fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	ed2d 8b04 	vpush	{d8-d9}
 8006fe0:	ec57 6b10 	vmov	r6, r7, d0
 8006fe4:	b093      	sub	sp, #76	; 0x4c
 8006fe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fec:	9106      	str	r1, [sp, #24]
 8006fee:	ee10 aa10 	vmov	sl, s0
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ff8:	46bb      	mov	fp, r7
 8006ffa:	b975      	cbnz	r5, 800701a <_dtoa_r+0x42>
 8006ffc:	2010      	movs	r0, #16
 8006ffe:	f001 fb6b 	bl	80086d8 <malloc>
 8007002:	4602      	mov	r2, r0
 8007004:	6260      	str	r0, [r4, #36]	; 0x24
 8007006:	b920      	cbnz	r0, 8007012 <_dtoa_r+0x3a>
 8007008:	4ba7      	ldr	r3, [pc, #668]	; (80072a8 <_dtoa_r+0x2d0>)
 800700a:	21ea      	movs	r1, #234	; 0xea
 800700c:	48a7      	ldr	r0, [pc, #668]	; (80072ac <_dtoa_r+0x2d4>)
 800700e:	f002 fcd1 	bl	80099b4 <__assert_func>
 8007012:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007016:	6005      	str	r5, [r0, #0]
 8007018:	60c5      	str	r5, [r0, #12]
 800701a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800701c:	6819      	ldr	r1, [r3, #0]
 800701e:	b151      	cbz	r1, 8007036 <_dtoa_r+0x5e>
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	604a      	str	r2, [r1, #4]
 8007024:	2301      	movs	r3, #1
 8007026:	4093      	lsls	r3, r2
 8007028:	608b      	str	r3, [r1, #8]
 800702a:	4620      	mov	r0, r4
 800702c:	f001 fbbc 	bl	80087a8 <_Bfree>
 8007030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	1e3b      	subs	r3, r7, #0
 8007038:	bfaa      	itet	ge
 800703a:	2300      	movge	r3, #0
 800703c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007040:	f8c8 3000 	strge.w	r3, [r8]
 8007044:	4b9a      	ldr	r3, [pc, #616]	; (80072b0 <_dtoa_r+0x2d8>)
 8007046:	bfbc      	itt	lt
 8007048:	2201      	movlt	r2, #1
 800704a:	f8c8 2000 	strlt.w	r2, [r8]
 800704e:	ea33 030b 	bics.w	r3, r3, fp
 8007052:	d11b      	bne.n	800708c <_dtoa_r+0xb4>
 8007054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007056:	f242 730f 	movw	r3, #9999	; 0x270f
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007060:	4333      	orrs	r3, r6
 8007062:	f000 8592 	beq.w	8007b8a <_dtoa_r+0xbb2>
 8007066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007068:	b963      	cbnz	r3, 8007084 <_dtoa_r+0xac>
 800706a:	4b92      	ldr	r3, [pc, #584]	; (80072b4 <_dtoa_r+0x2dc>)
 800706c:	e022      	b.n	80070b4 <_dtoa_r+0xdc>
 800706e:	4b92      	ldr	r3, [pc, #584]	; (80072b8 <_dtoa_r+0x2e0>)
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	3308      	adds	r3, #8
 8007074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	9801      	ldr	r0, [sp, #4]
 800707a:	b013      	add	sp, #76	; 0x4c
 800707c:	ecbd 8b04 	vpop	{d8-d9}
 8007080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007084:	4b8b      	ldr	r3, [pc, #556]	; (80072b4 <_dtoa_r+0x2dc>)
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	3303      	adds	r3, #3
 800708a:	e7f3      	b.n	8007074 <_dtoa_r+0x9c>
 800708c:	2200      	movs	r2, #0
 800708e:	2300      	movs	r3, #0
 8007090:	4650      	mov	r0, sl
 8007092:	4659      	mov	r1, fp
 8007094:	f7f9 fd40 	bl	8000b18 <__aeabi_dcmpeq>
 8007098:	ec4b ab19 	vmov	d9, sl, fp
 800709c:	4680      	mov	r8, r0
 800709e:	b158      	cbz	r0, 80070b8 <_dtoa_r+0xe0>
 80070a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070a2:	2301      	movs	r3, #1
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 856b 	beq.w	8007b84 <_dtoa_r+0xbac>
 80070ae:	4883      	ldr	r0, [pc, #524]	; (80072bc <_dtoa_r+0x2e4>)
 80070b0:	6018      	str	r0, [r3, #0]
 80070b2:	1e43      	subs	r3, r0, #1
 80070b4:	9301      	str	r3, [sp, #4]
 80070b6:	e7df      	b.n	8007078 <_dtoa_r+0xa0>
 80070b8:	ec4b ab10 	vmov	d0, sl, fp
 80070bc:	aa10      	add	r2, sp, #64	; 0x40
 80070be:	a911      	add	r1, sp, #68	; 0x44
 80070c0:	4620      	mov	r0, r4
 80070c2:	f001 ff1f 	bl	8008f04 <__d2b>
 80070c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80070ca:	ee08 0a10 	vmov	s16, r0
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	f000 8084 	beq.w	80071dc <_dtoa_r+0x204>
 80070d4:	ee19 3a90 	vmov	r3, s19
 80070d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070e0:	4656      	mov	r6, sl
 80070e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80070ee:	4b74      	ldr	r3, [pc, #464]	; (80072c0 <_dtoa_r+0x2e8>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	4630      	mov	r0, r6
 80070f4:	4639      	mov	r1, r7
 80070f6:	f7f9 f8ef 	bl	80002d8 <__aeabi_dsub>
 80070fa:	a365      	add	r3, pc, #404	; (adr r3, 8007290 <_dtoa_r+0x2b8>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f7f9 faa2 	bl	8000648 <__aeabi_dmul>
 8007104:	a364      	add	r3, pc, #400	; (adr r3, 8007298 <_dtoa_r+0x2c0>)
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	f7f9 f8e7 	bl	80002dc <__adddf3>
 800710e:	4606      	mov	r6, r0
 8007110:	4628      	mov	r0, r5
 8007112:	460f      	mov	r7, r1
 8007114:	f7f9 fa2e 	bl	8000574 <__aeabi_i2d>
 8007118:	a361      	add	r3, pc, #388	; (adr r3, 80072a0 <_dtoa_r+0x2c8>)
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f7f9 fa93 	bl	8000648 <__aeabi_dmul>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	4630      	mov	r0, r6
 8007128:	4639      	mov	r1, r7
 800712a:	f7f9 f8d7 	bl	80002dc <__adddf3>
 800712e:	4606      	mov	r6, r0
 8007130:	460f      	mov	r7, r1
 8007132:	f7f9 fd39 	bl	8000ba8 <__aeabi_d2iz>
 8007136:	2200      	movs	r2, #0
 8007138:	9000      	str	r0, [sp, #0]
 800713a:	2300      	movs	r3, #0
 800713c:	4630      	mov	r0, r6
 800713e:	4639      	mov	r1, r7
 8007140:	f7f9 fcf4 	bl	8000b2c <__aeabi_dcmplt>
 8007144:	b150      	cbz	r0, 800715c <_dtoa_r+0x184>
 8007146:	9800      	ldr	r0, [sp, #0]
 8007148:	f7f9 fa14 	bl	8000574 <__aeabi_i2d>
 800714c:	4632      	mov	r2, r6
 800714e:	463b      	mov	r3, r7
 8007150:	f7f9 fce2 	bl	8000b18 <__aeabi_dcmpeq>
 8007154:	b910      	cbnz	r0, 800715c <_dtoa_r+0x184>
 8007156:	9b00      	ldr	r3, [sp, #0]
 8007158:	3b01      	subs	r3, #1
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	9b00      	ldr	r3, [sp, #0]
 800715e:	2b16      	cmp	r3, #22
 8007160:	d85a      	bhi.n	8007218 <_dtoa_r+0x240>
 8007162:	9a00      	ldr	r2, [sp, #0]
 8007164:	4b57      	ldr	r3, [pc, #348]	; (80072c4 <_dtoa_r+0x2ec>)
 8007166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	ec51 0b19 	vmov	r0, r1, d9
 8007172:	f7f9 fcdb 	bl	8000b2c <__aeabi_dcmplt>
 8007176:	2800      	cmp	r0, #0
 8007178:	d050      	beq.n	800721c <_dtoa_r+0x244>
 800717a:	9b00      	ldr	r3, [sp, #0]
 800717c:	3b01      	subs	r3, #1
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	2300      	movs	r3, #0
 8007182:	930b      	str	r3, [sp, #44]	; 0x2c
 8007184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007186:	1b5d      	subs	r5, r3, r5
 8007188:	1e6b      	subs	r3, r5, #1
 800718a:	9305      	str	r3, [sp, #20]
 800718c:	bf45      	ittet	mi
 800718e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007192:	9304      	strmi	r3, [sp, #16]
 8007194:	2300      	movpl	r3, #0
 8007196:	2300      	movmi	r3, #0
 8007198:	bf4c      	ite	mi
 800719a:	9305      	strmi	r3, [sp, #20]
 800719c:	9304      	strpl	r3, [sp, #16]
 800719e:	9b00      	ldr	r3, [sp, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	db3d      	blt.n	8007220 <_dtoa_r+0x248>
 80071a4:	9b05      	ldr	r3, [sp, #20]
 80071a6:	9a00      	ldr	r2, [sp, #0]
 80071a8:	920a      	str	r2, [sp, #40]	; 0x28
 80071aa:	4413      	add	r3, r2
 80071ac:	9305      	str	r3, [sp, #20]
 80071ae:	2300      	movs	r3, #0
 80071b0:	9307      	str	r3, [sp, #28]
 80071b2:	9b06      	ldr	r3, [sp, #24]
 80071b4:	2b09      	cmp	r3, #9
 80071b6:	f200 8089 	bhi.w	80072cc <_dtoa_r+0x2f4>
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	bfc4      	itt	gt
 80071be:	3b04      	subgt	r3, #4
 80071c0:	9306      	strgt	r3, [sp, #24]
 80071c2:	9b06      	ldr	r3, [sp, #24]
 80071c4:	f1a3 0302 	sub.w	r3, r3, #2
 80071c8:	bfcc      	ite	gt
 80071ca:	2500      	movgt	r5, #0
 80071cc:	2501      	movle	r5, #1
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	f200 8087 	bhi.w	80072e2 <_dtoa_r+0x30a>
 80071d4:	e8df f003 	tbb	[pc, r3]
 80071d8:	59383a2d 	.word	0x59383a2d
 80071dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80071e0:	441d      	add	r5, r3
 80071e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	bfc1      	itttt	gt
 80071ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80071f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80071f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071fa:	bfda      	itte	le
 80071fc:	f1c3 0320 	rsble	r3, r3, #32
 8007200:	fa06 f003 	lslle.w	r0, r6, r3
 8007204:	4318      	orrgt	r0, r3
 8007206:	f7f9 f9a5 	bl	8000554 <__aeabi_ui2d>
 800720a:	2301      	movs	r3, #1
 800720c:	4606      	mov	r6, r0
 800720e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007212:	3d01      	subs	r5, #1
 8007214:	930e      	str	r3, [sp, #56]	; 0x38
 8007216:	e76a      	b.n	80070ee <_dtoa_r+0x116>
 8007218:	2301      	movs	r3, #1
 800721a:	e7b2      	b.n	8007182 <_dtoa_r+0x1aa>
 800721c:	900b      	str	r0, [sp, #44]	; 0x2c
 800721e:	e7b1      	b.n	8007184 <_dtoa_r+0x1ac>
 8007220:	9b04      	ldr	r3, [sp, #16]
 8007222:	9a00      	ldr	r2, [sp, #0]
 8007224:	1a9b      	subs	r3, r3, r2
 8007226:	9304      	str	r3, [sp, #16]
 8007228:	4253      	negs	r3, r2
 800722a:	9307      	str	r3, [sp, #28]
 800722c:	2300      	movs	r3, #0
 800722e:	930a      	str	r3, [sp, #40]	; 0x28
 8007230:	e7bf      	b.n	80071b2 <_dtoa_r+0x1da>
 8007232:	2300      	movs	r3, #0
 8007234:	9308      	str	r3, [sp, #32]
 8007236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	dc55      	bgt.n	80072e8 <_dtoa_r+0x310>
 800723c:	2301      	movs	r3, #1
 800723e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007242:	461a      	mov	r2, r3
 8007244:	9209      	str	r2, [sp, #36]	; 0x24
 8007246:	e00c      	b.n	8007262 <_dtoa_r+0x28a>
 8007248:	2301      	movs	r3, #1
 800724a:	e7f3      	b.n	8007234 <_dtoa_r+0x25c>
 800724c:	2300      	movs	r3, #0
 800724e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007250:	9308      	str	r3, [sp, #32]
 8007252:	9b00      	ldr	r3, [sp, #0]
 8007254:	4413      	add	r3, r2
 8007256:	9302      	str	r3, [sp, #8]
 8007258:	3301      	adds	r3, #1
 800725a:	2b01      	cmp	r3, #1
 800725c:	9303      	str	r3, [sp, #12]
 800725e:	bfb8      	it	lt
 8007260:	2301      	movlt	r3, #1
 8007262:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007264:	2200      	movs	r2, #0
 8007266:	6042      	str	r2, [r0, #4]
 8007268:	2204      	movs	r2, #4
 800726a:	f102 0614 	add.w	r6, r2, #20
 800726e:	429e      	cmp	r6, r3
 8007270:	6841      	ldr	r1, [r0, #4]
 8007272:	d93d      	bls.n	80072f0 <_dtoa_r+0x318>
 8007274:	4620      	mov	r0, r4
 8007276:	f001 fa57 	bl	8008728 <_Balloc>
 800727a:	9001      	str	r0, [sp, #4]
 800727c:	2800      	cmp	r0, #0
 800727e:	d13b      	bne.n	80072f8 <_dtoa_r+0x320>
 8007280:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <_dtoa_r+0x2f0>)
 8007282:	4602      	mov	r2, r0
 8007284:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007288:	e6c0      	b.n	800700c <_dtoa_r+0x34>
 800728a:	2301      	movs	r3, #1
 800728c:	e7df      	b.n	800724e <_dtoa_r+0x276>
 800728e:	bf00      	nop
 8007290:	636f4361 	.word	0x636f4361
 8007294:	3fd287a7 	.word	0x3fd287a7
 8007298:	8b60c8b3 	.word	0x8b60c8b3
 800729c:	3fc68a28 	.word	0x3fc68a28
 80072a0:	509f79fb 	.word	0x509f79fb
 80072a4:	3fd34413 	.word	0x3fd34413
 80072a8:	0800a25e 	.word	0x0800a25e
 80072ac:	0800a275 	.word	0x0800a275
 80072b0:	7ff00000 	.word	0x7ff00000
 80072b4:	0800a25a 	.word	0x0800a25a
 80072b8:	0800a251 	.word	0x0800a251
 80072bc:	0800a0d5 	.word	0x0800a0d5
 80072c0:	3ff80000 	.word	0x3ff80000
 80072c4:	0800a448 	.word	0x0800a448
 80072c8:	0800a2d0 	.word	0x0800a2d0
 80072cc:	2501      	movs	r5, #1
 80072ce:	2300      	movs	r3, #0
 80072d0:	9306      	str	r3, [sp, #24]
 80072d2:	9508      	str	r5, [sp, #32]
 80072d4:	f04f 33ff 	mov.w	r3, #4294967295
 80072d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072dc:	2200      	movs	r2, #0
 80072de:	2312      	movs	r3, #18
 80072e0:	e7b0      	b.n	8007244 <_dtoa_r+0x26c>
 80072e2:	2301      	movs	r3, #1
 80072e4:	9308      	str	r3, [sp, #32]
 80072e6:	e7f5      	b.n	80072d4 <_dtoa_r+0x2fc>
 80072e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072ee:	e7b8      	b.n	8007262 <_dtoa_r+0x28a>
 80072f0:	3101      	adds	r1, #1
 80072f2:	6041      	str	r1, [r0, #4]
 80072f4:	0052      	lsls	r2, r2, #1
 80072f6:	e7b8      	b.n	800726a <_dtoa_r+0x292>
 80072f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072fa:	9a01      	ldr	r2, [sp, #4]
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	9b03      	ldr	r3, [sp, #12]
 8007300:	2b0e      	cmp	r3, #14
 8007302:	f200 809d 	bhi.w	8007440 <_dtoa_r+0x468>
 8007306:	2d00      	cmp	r5, #0
 8007308:	f000 809a 	beq.w	8007440 <_dtoa_r+0x468>
 800730c:	9b00      	ldr	r3, [sp, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	dd32      	ble.n	8007378 <_dtoa_r+0x3a0>
 8007312:	4ab7      	ldr	r2, [pc, #732]	; (80075f0 <_dtoa_r+0x618>)
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800731c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007320:	9b00      	ldr	r3, [sp, #0]
 8007322:	05d8      	lsls	r0, r3, #23
 8007324:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007328:	d516      	bpl.n	8007358 <_dtoa_r+0x380>
 800732a:	4bb2      	ldr	r3, [pc, #712]	; (80075f4 <_dtoa_r+0x61c>)
 800732c:	ec51 0b19 	vmov	r0, r1, d9
 8007330:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007334:	f7f9 fab2 	bl	800089c <__aeabi_ddiv>
 8007338:	f007 070f 	and.w	r7, r7, #15
 800733c:	4682      	mov	sl, r0
 800733e:	468b      	mov	fp, r1
 8007340:	2503      	movs	r5, #3
 8007342:	4eac      	ldr	r6, [pc, #688]	; (80075f4 <_dtoa_r+0x61c>)
 8007344:	b957      	cbnz	r7, 800735c <_dtoa_r+0x384>
 8007346:	4642      	mov	r2, r8
 8007348:	464b      	mov	r3, r9
 800734a:	4650      	mov	r0, sl
 800734c:	4659      	mov	r1, fp
 800734e:	f7f9 faa5 	bl	800089c <__aeabi_ddiv>
 8007352:	4682      	mov	sl, r0
 8007354:	468b      	mov	fp, r1
 8007356:	e028      	b.n	80073aa <_dtoa_r+0x3d2>
 8007358:	2502      	movs	r5, #2
 800735a:	e7f2      	b.n	8007342 <_dtoa_r+0x36a>
 800735c:	07f9      	lsls	r1, r7, #31
 800735e:	d508      	bpl.n	8007372 <_dtoa_r+0x39a>
 8007360:	4640      	mov	r0, r8
 8007362:	4649      	mov	r1, r9
 8007364:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007368:	f7f9 f96e 	bl	8000648 <__aeabi_dmul>
 800736c:	3501      	adds	r5, #1
 800736e:	4680      	mov	r8, r0
 8007370:	4689      	mov	r9, r1
 8007372:	107f      	asrs	r7, r7, #1
 8007374:	3608      	adds	r6, #8
 8007376:	e7e5      	b.n	8007344 <_dtoa_r+0x36c>
 8007378:	f000 809b 	beq.w	80074b2 <_dtoa_r+0x4da>
 800737c:	9b00      	ldr	r3, [sp, #0]
 800737e:	4f9d      	ldr	r7, [pc, #628]	; (80075f4 <_dtoa_r+0x61c>)
 8007380:	425e      	negs	r6, r3
 8007382:	4b9b      	ldr	r3, [pc, #620]	; (80075f0 <_dtoa_r+0x618>)
 8007384:	f006 020f 	and.w	r2, r6, #15
 8007388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	ec51 0b19 	vmov	r0, r1, d9
 8007394:	f7f9 f958 	bl	8000648 <__aeabi_dmul>
 8007398:	1136      	asrs	r6, r6, #4
 800739a:	4682      	mov	sl, r0
 800739c:	468b      	mov	fp, r1
 800739e:	2300      	movs	r3, #0
 80073a0:	2502      	movs	r5, #2
 80073a2:	2e00      	cmp	r6, #0
 80073a4:	d17a      	bne.n	800749c <_dtoa_r+0x4c4>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1d3      	bne.n	8007352 <_dtoa_r+0x37a>
 80073aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8082 	beq.w	80074b6 <_dtoa_r+0x4de>
 80073b2:	4b91      	ldr	r3, [pc, #580]	; (80075f8 <_dtoa_r+0x620>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	4650      	mov	r0, sl
 80073b8:	4659      	mov	r1, fp
 80073ba:	f7f9 fbb7 	bl	8000b2c <__aeabi_dcmplt>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d079      	beq.n	80074b6 <_dtoa_r+0x4de>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d076      	beq.n	80074b6 <_dtoa_r+0x4de>
 80073c8:	9b02      	ldr	r3, [sp, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	dd36      	ble.n	800743c <_dtoa_r+0x464>
 80073ce:	9b00      	ldr	r3, [sp, #0]
 80073d0:	4650      	mov	r0, sl
 80073d2:	4659      	mov	r1, fp
 80073d4:	1e5f      	subs	r7, r3, #1
 80073d6:	2200      	movs	r2, #0
 80073d8:	4b88      	ldr	r3, [pc, #544]	; (80075fc <_dtoa_r+0x624>)
 80073da:	f7f9 f935 	bl	8000648 <__aeabi_dmul>
 80073de:	9e02      	ldr	r6, [sp, #8]
 80073e0:	4682      	mov	sl, r0
 80073e2:	468b      	mov	fp, r1
 80073e4:	3501      	adds	r5, #1
 80073e6:	4628      	mov	r0, r5
 80073e8:	f7f9 f8c4 	bl	8000574 <__aeabi_i2d>
 80073ec:	4652      	mov	r2, sl
 80073ee:	465b      	mov	r3, fp
 80073f0:	f7f9 f92a 	bl	8000648 <__aeabi_dmul>
 80073f4:	4b82      	ldr	r3, [pc, #520]	; (8007600 <_dtoa_r+0x628>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	f7f8 ff70 	bl	80002dc <__adddf3>
 80073fc:	46d0      	mov	r8, sl
 80073fe:	46d9      	mov	r9, fp
 8007400:	4682      	mov	sl, r0
 8007402:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007406:	2e00      	cmp	r6, #0
 8007408:	d158      	bne.n	80074bc <_dtoa_r+0x4e4>
 800740a:	4b7e      	ldr	r3, [pc, #504]	; (8007604 <_dtoa_r+0x62c>)
 800740c:	2200      	movs	r2, #0
 800740e:	4640      	mov	r0, r8
 8007410:	4649      	mov	r1, r9
 8007412:	f7f8 ff61 	bl	80002d8 <__aeabi_dsub>
 8007416:	4652      	mov	r2, sl
 8007418:	465b      	mov	r3, fp
 800741a:	4680      	mov	r8, r0
 800741c:	4689      	mov	r9, r1
 800741e:	f7f9 fba3 	bl	8000b68 <__aeabi_dcmpgt>
 8007422:	2800      	cmp	r0, #0
 8007424:	f040 8295 	bne.w	8007952 <_dtoa_r+0x97a>
 8007428:	4652      	mov	r2, sl
 800742a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800742e:	4640      	mov	r0, r8
 8007430:	4649      	mov	r1, r9
 8007432:	f7f9 fb7b 	bl	8000b2c <__aeabi_dcmplt>
 8007436:	2800      	cmp	r0, #0
 8007438:	f040 8289 	bne.w	800794e <_dtoa_r+0x976>
 800743c:	ec5b ab19 	vmov	sl, fp, d9
 8007440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007442:	2b00      	cmp	r3, #0
 8007444:	f2c0 8148 	blt.w	80076d8 <_dtoa_r+0x700>
 8007448:	9a00      	ldr	r2, [sp, #0]
 800744a:	2a0e      	cmp	r2, #14
 800744c:	f300 8144 	bgt.w	80076d8 <_dtoa_r+0x700>
 8007450:	4b67      	ldr	r3, [pc, #412]	; (80075f0 <_dtoa_r+0x618>)
 8007452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007456:	e9d3 8900 	ldrd	r8, r9, [r3]
 800745a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	f280 80d5 	bge.w	800760c <_dtoa_r+0x634>
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f300 80d1 	bgt.w	800760c <_dtoa_r+0x634>
 800746a:	f040 826f 	bne.w	800794c <_dtoa_r+0x974>
 800746e:	4b65      	ldr	r3, [pc, #404]	; (8007604 <_dtoa_r+0x62c>)
 8007470:	2200      	movs	r2, #0
 8007472:	4640      	mov	r0, r8
 8007474:	4649      	mov	r1, r9
 8007476:	f7f9 f8e7 	bl	8000648 <__aeabi_dmul>
 800747a:	4652      	mov	r2, sl
 800747c:	465b      	mov	r3, fp
 800747e:	f7f9 fb69 	bl	8000b54 <__aeabi_dcmpge>
 8007482:	9e03      	ldr	r6, [sp, #12]
 8007484:	4637      	mov	r7, r6
 8007486:	2800      	cmp	r0, #0
 8007488:	f040 8245 	bne.w	8007916 <_dtoa_r+0x93e>
 800748c:	9d01      	ldr	r5, [sp, #4]
 800748e:	2331      	movs	r3, #49	; 0x31
 8007490:	f805 3b01 	strb.w	r3, [r5], #1
 8007494:	9b00      	ldr	r3, [sp, #0]
 8007496:	3301      	adds	r3, #1
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	e240      	b.n	800791e <_dtoa_r+0x946>
 800749c:	07f2      	lsls	r2, r6, #31
 800749e:	d505      	bpl.n	80074ac <_dtoa_r+0x4d4>
 80074a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a4:	f7f9 f8d0 	bl	8000648 <__aeabi_dmul>
 80074a8:	3501      	adds	r5, #1
 80074aa:	2301      	movs	r3, #1
 80074ac:	1076      	asrs	r6, r6, #1
 80074ae:	3708      	adds	r7, #8
 80074b0:	e777      	b.n	80073a2 <_dtoa_r+0x3ca>
 80074b2:	2502      	movs	r5, #2
 80074b4:	e779      	b.n	80073aa <_dtoa_r+0x3d2>
 80074b6:	9f00      	ldr	r7, [sp, #0]
 80074b8:	9e03      	ldr	r6, [sp, #12]
 80074ba:	e794      	b.n	80073e6 <_dtoa_r+0x40e>
 80074bc:	9901      	ldr	r1, [sp, #4]
 80074be:	4b4c      	ldr	r3, [pc, #304]	; (80075f0 <_dtoa_r+0x618>)
 80074c0:	4431      	add	r1, r6
 80074c2:	910d      	str	r1, [sp, #52]	; 0x34
 80074c4:	9908      	ldr	r1, [sp, #32]
 80074c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074ce:	2900      	cmp	r1, #0
 80074d0:	d043      	beq.n	800755a <_dtoa_r+0x582>
 80074d2:	494d      	ldr	r1, [pc, #308]	; (8007608 <_dtoa_r+0x630>)
 80074d4:	2000      	movs	r0, #0
 80074d6:	f7f9 f9e1 	bl	800089c <__aeabi_ddiv>
 80074da:	4652      	mov	r2, sl
 80074dc:	465b      	mov	r3, fp
 80074de:	f7f8 fefb 	bl	80002d8 <__aeabi_dsub>
 80074e2:	9d01      	ldr	r5, [sp, #4]
 80074e4:	4682      	mov	sl, r0
 80074e6:	468b      	mov	fp, r1
 80074e8:	4649      	mov	r1, r9
 80074ea:	4640      	mov	r0, r8
 80074ec:	f7f9 fb5c 	bl	8000ba8 <__aeabi_d2iz>
 80074f0:	4606      	mov	r6, r0
 80074f2:	f7f9 f83f 	bl	8000574 <__aeabi_i2d>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4640      	mov	r0, r8
 80074fc:	4649      	mov	r1, r9
 80074fe:	f7f8 feeb 	bl	80002d8 <__aeabi_dsub>
 8007502:	3630      	adds	r6, #48	; 0x30
 8007504:	f805 6b01 	strb.w	r6, [r5], #1
 8007508:	4652      	mov	r2, sl
 800750a:	465b      	mov	r3, fp
 800750c:	4680      	mov	r8, r0
 800750e:	4689      	mov	r9, r1
 8007510:	f7f9 fb0c 	bl	8000b2c <__aeabi_dcmplt>
 8007514:	2800      	cmp	r0, #0
 8007516:	d163      	bne.n	80075e0 <_dtoa_r+0x608>
 8007518:	4642      	mov	r2, r8
 800751a:	464b      	mov	r3, r9
 800751c:	4936      	ldr	r1, [pc, #216]	; (80075f8 <_dtoa_r+0x620>)
 800751e:	2000      	movs	r0, #0
 8007520:	f7f8 feda 	bl	80002d8 <__aeabi_dsub>
 8007524:	4652      	mov	r2, sl
 8007526:	465b      	mov	r3, fp
 8007528:	f7f9 fb00 	bl	8000b2c <__aeabi_dcmplt>
 800752c:	2800      	cmp	r0, #0
 800752e:	f040 80b5 	bne.w	800769c <_dtoa_r+0x6c4>
 8007532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007534:	429d      	cmp	r5, r3
 8007536:	d081      	beq.n	800743c <_dtoa_r+0x464>
 8007538:	4b30      	ldr	r3, [pc, #192]	; (80075fc <_dtoa_r+0x624>)
 800753a:	2200      	movs	r2, #0
 800753c:	4650      	mov	r0, sl
 800753e:	4659      	mov	r1, fp
 8007540:	f7f9 f882 	bl	8000648 <__aeabi_dmul>
 8007544:	4b2d      	ldr	r3, [pc, #180]	; (80075fc <_dtoa_r+0x624>)
 8007546:	4682      	mov	sl, r0
 8007548:	468b      	mov	fp, r1
 800754a:	4640      	mov	r0, r8
 800754c:	4649      	mov	r1, r9
 800754e:	2200      	movs	r2, #0
 8007550:	f7f9 f87a 	bl	8000648 <__aeabi_dmul>
 8007554:	4680      	mov	r8, r0
 8007556:	4689      	mov	r9, r1
 8007558:	e7c6      	b.n	80074e8 <_dtoa_r+0x510>
 800755a:	4650      	mov	r0, sl
 800755c:	4659      	mov	r1, fp
 800755e:	f7f9 f873 	bl	8000648 <__aeabi_dmul>
 8007562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007564:	9d01      	ldr	r5, [sp, #4]
 8007566:	930f      	str	r3, [sp, #60]	; 0x3c
 8007568:	4682      	mov	sl, r0
 800756a:	468b      	mov	fp, r1
 800756c:	4649      	mov	r1, r9
 800756e:	4640      	mov	r0, r8
 8007570:	f7f9 fb1a 	bl	8000ba8 <__aeabi_d2iz>
 8007574:	4606      	mov	r6, r0
 8007576:	f7f8 fffd 	bl	8000574 <__aeabi_i2d>
 800757a:	3630      	adds	r6, #48	; 0x30
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4640      	mov	r0, r8
 8007582:	4649      	mov	r1, r9
 8007584:	f7f8 fea8 	bl	80002d8 <__aeabi_dsub>
 8007588:	f805 6b01 	strb.w	r6, [r5], #1
 800758c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800758e:	429d      	cmp	r5, r3
 8007590:	4680      	mov	r8, r0
 8007592:	4689      	mov	r9, r1
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	d124      	bne.n	80075e4 <_dtoa_r+0x60c>
 800759a:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <_dtoa_r+0x630>)
 800759c:	4650      	mov	r0, sl
 800759e:	4659      	mov	r1, fp
 80075a0:	f7f8 fe9c 	bl	80002dc <__adddf3>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4640      	mov	r0, r8
 80075aa:	4649      	mov	r1, r9
 80075ac:	f7f9 fadc 	bl	8000b68 <__aeabi_dcmpgt>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d173      	bne.n	800769c <_dtoa_r+0x6c4>
 80075b4:	4652      	mov	r2, sl
 80075b6:	465b      	mov	r3, fp
 80075b8:	4913      	ldr	r1, [pc, #76]	; (8007608 <_dtoa_r+0x630>)
 80075ba:	2000      	movs	r0, #0
 80075bc:	f7f8 fe8c 	bl	80002d8 <__aeabi_dsub>
 80075c0:	4602      	mov	r2, r0
 80075c2:	460b      	mov	r3, r1
 80075c4:	4640      	mov	r0, r8
 80075c6:	4649      	mov	r1, r9
 80075c8:	f7f9 fab0 	bl	8000b2c <__aeabi_dcmplt>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	f43f af35 	beq.w	800743c <_dtoa_r+0x464>
 80075d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075d4:	1e6b      	subs	r3, r5, #1
 80075d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80075d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075dc:	2b30      	cmp	r3, #48	; 0x30
 80075de:	d0f8      	beq.n	80075d2 <_dtoa_r+0x5fa>
 80075e0:	9700      	str	r7, [sp, #0]
 80075e2:	e049      	b.n	8007678 <_dtoa_r+0x6a0>
 80075e4:	4b05      	ldr	r3, [pc, #20]	; (80075fc <_dtoa_r+0x624>)
 80075e6:	f7f9 f82f 	bl	8000648 <__aeabi_dmul>
 80075ea:	4680      	mov	r8, r0
 80075ec:	4689      	mov	r9, r1
 80075ee:	e7bd      	b.n	800756c <_dtoa_r+0x594>
 80075f0:	0800a448 	.word	0x0800a448
 80075f4:	0800a420 	.word	0x0800a420
 80075f8:	3ff00000 	.word	0x3ff00000
 80075fc:	40240000 	.word	0x40240000
 8007600:	401c0000 	.word	0x401c0000
 8007604:	40140000 	.word	0x40140000
 8007608:	3fe00000 	.word	0x3fe00000
 800760c:	9d01      	ldr	r5, [sp, #4]
 800760e:	4656      	mov	r6, sl
 8007610:	465f      	mov	r7, fp
 8007612:	4642      	mov	r2, r8
 8007614:	464b      	mov	r3, r9
 8007616:	4630      	mov	r0, r6
 8007618:	4639      	mov	r1, r7
 800761a:	f7f9 f93f 	bl	800089c <__aeabi_ddiv>
 800761e:	f7f9 fac3 	bl	8000ba8 <__aeabi_d2iz>
 8007622:	4682      	mov	sl, r0
 8007624:	f7f8 ffa6 	bl	8000574 <__aeabi_i2d>
 8007628:	4642      	mov	r2, r8
 800762a:	464b      	mov	r3, r9
 800762c:	f7f9 f80c 	bl	8000648 <__aeabi_dmul>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4630      	mov	r0, r6
 8007636:	4639      	mov	r1, r7
 8007638:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800763c:	f7f8 fe4c 	bl	80002d8 <__aeabi_dsub>
 8007640:	f805 6b01 	strb.w	r6, [r5], #1
 8007644:	9e01      	ldr	r6, [sp, #4]
 8007646:	9f03      	ldr	r7, [sp, #12]
 8007648:	1bae      	subs	r6, r5, r6
 800764a:	42b7      	cmp	r7, r6
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	d135      	bne.n	80076be <_dtoa_r+0x6e6>
 8007652:	f7f8 fe43 	bl	80002dc <__adddf3>
 8007656:	4642      	mov	r2, r8
 8007658:	464b      	mov	r3, r9
 800765a:	4606      	mov	r6, r0
 800765c:	460f      	mov	r7, r1
 800765e:	f7f9 fa83 	bl	8000b68 <__aeabi_dcmpgt>
 8007662:	b9d0      	cbnz	r0, 800769a <_dtoa_r+0x6c2>
 8007664:	4642      	mov	r2, r8
 8007666:	464b      	mov	r3, r9
 8007668:	4630      	mov	r0, r6
 800766a:	4639      	mov	r1, r7
 800766c:	f7f9 fa54 	bl	8000b18 <__aeabi_dcmpeq>
 8007670:	b110      	cbz	r0, 8007678 <_dtoa_r+0x6a0>
 8007672:	f01a 0f01 	tst.w	sl, #1
 8007676:	d110      	bne.n	800769a <_dtoa_r+0x6c2>
 8007678:	4620      	mov	r0, r4
 800767a:	ee18 1a10 	vmov	r1, s16
 800767e:	f001 f893 	bl	80087a8 <_Bfree>
 8007682:	2300      	movs	r3, #0
 8007684:	9800      	ldr	r0, [sp, #0]
 8007686:	702b      	strb	r3, [r5, #0]
 8007688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800768a:	3001      	adds	r0, #1
 800768c:	6018      	str	r0, [r3, #0]
 800768e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007690:	2b00      	cmp	r3, #0
 8007692:	f43f acf1 	beq.w	8007078 <_dtoa_r+0xa0>
 8007696:	601d      	str	r5, [r3, #0]
 8007698:	e4ee      	b.n	8007078 <_dtoa_r+0xa0>
 800769a:	9f00      	ldr	r7, [sp, #0]
 800769c:	462b      	mov	r3, r5
 800769e:	461d      	mov	r5, r3
 80076a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076a4:	2a39      	cmp	r2, #57	; 0x39
 80076a6:	d106      	bne.n	80076b6 <_dtoa_r+0x6de>
 80076a8:	9a01      	ldr	r2, [sp, #4]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d1f7      	bne.n	800769e <_dtoa_r+0x6c6>
 80076ae:	9901      	ldr	r1, [sp, #4]
 80076b0:	2230      	movs	r2, #48	; 0x30
 80076b2:	3701      	adds	r7, #1
 80076b4:	700a      	strb	r2, [r1, #0]
 80076b6:	781a      	ldrb	r2, [r3, #0]
 80076b8:	3201      	adds	r2, #1
 80076ba:	701a      	strb	r2, [r3, #0]
 80076bc:	e790      	b.n	80075e0 <_dtoa_r+0x608>
 80076be:	4ba6      	ldr	r3, [pc, #664]	; (8007958 <_dtoa_r+0x980>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	f7f8 ffc1 	bl	8000648 <__aeabi_dmul>
 80076c6:	2200      	movs	r2, #0
 80076c8:	2300      	movs	r3, #0
 80076ca:	4606      	mov	r6, r0
 80076cc:	460f      	mov	r7, r1
 80076ce:	f7f9 fa23 	bl	8000b18 <__aeabi_dcmpeq>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d09d      	beq.n	8007612 <_dtoa_r+0x63a>
 80076d6:	e7cf      	b.n	8007678 <_dtoa_r+0x6a0>
 80076d8:	9a08      	ldr	r2, [sp, #32]
 80076da:	2a00      	cmp	r2, #0
 80076dc:	f000 80d7 	beq.w	800788e <_dtoa_r+0x8b6>
 80076e0:	9a06      	ldr	r2, [sp, #24]
 80076e2:	2a01      	cmp	r2, #1
 80076e4:	f300 80ba 	bgt.w	800785c <_dtoa_r+0x884>
 80076e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076ea:	2a00      	cmp	r2, #0
 80076ec:	f000 80b2 	beq.w	8007854 <_dtoa_r+0x87c>
 80076f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076f4:	9e07      	ldr	r6, [sp, #28]
 80076f6:	9d04      	ldr	r5, [sp, #16]
 80076f8:	9a04      	ldr	r2, [sp, #16]
 80076fa:	441a      	add	r2, r3
 80076fc:	9204      	str	r2, [sp, #16]
 80076fe:	9a05      	ldr	r2, [sp, #20]
 8007700:	2101      	movs	r1, #1
 8007702:	441a      	add	r2, r3
 8007704:	4620      	mov	r0, r4
 8007706:	9205      	str	r2, [sp, #20]
 8007708:	f001 f950 	bl	80089ac <__i2b>
 800770c:	4607      	mov	r7, r0
 800770e:	2d00      	cmp	r5, #0
 8007710:	dd0c      	ble.n	800772c <_dtoa_r+0x754>
 8007712:	9b05      	ldr	r3, [sp, #20]
 8007714:	2b00      	cmp	r3, #0
 8007716:	dd09      	ble.n	800772c <_dtoa_r+0x754>
 8007718:	42ab      	cmp	r3, r5
 800771a:	9a04      	ldr	r2, [sp, #16]
 800771c:	bfa8      	it	ge
 800771e:	462b      	movge	r3, r5
 8007720:	1ad2      	subs	r2, r2, r3
 8007722:	9204      	str	r2, [sp, #16]
 8007724:	9a05      	ldr	r2, [sp, #20]
 8007726:	1aed      	subs	r5, r5, r3
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	9305      	str	r3, [sp, #20]
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	b31b      	cbz	r3, 8007778 <_dtoa_r+0x7a0>
 8007730:	9b08      	ldr	r3, [sp, #32]
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 80af 	beq.w	8007896 <_dtoa_r+0x8be>
 8007738:	2e00      	cmp	r6, #0
 800773a:	dd13      	ble.n	8007764 <_dtoa_r+0x78c>
 800773c:	4639      	mov	r1, r7
 800773e:	4632      	mov	r2, r6
 8007740:	4620      	mov	r0, r4
 8007742:	f001 f9f3 	bl	8008b2c <__pow5mult>
 8007746:	ee18 2a10 	vmov	r2, s16
 800774a:	4601      	mov	r1, r0
 800774c:	4607      	mov	r7, r0
 800774e:	4620      	mov	r0, r4
 8007750:	f001 f942 	bl	80089d8 <__multiply>
 8007754:	ee18 1a10 	vmov	r1, s16
 8007758:	4680      	mov	r8, r0
 800775a:	4620      	mov	r0, r4
 800775c:	f001 f824 	bl	80087a8 <_Bfree>
 8007760:	ee08 8a10 	vmov	s16, r8
 8007764:	9b07      	ldr	r3, [sp, #28]
 8007766:	1b9a      	subs	r2, r3, r6
 8007768:	d006      	beq.n	8007778 <_dtoa_r+0x7a0>
 800776a:	ee18 1a10 	vmov	r1, s16
 800776e:	4620      	mov	r0, r4
 8007770:	f001 f9dc 	bl	8008b2c <__pow5mult>
 8007774:	ee08 0a10 	vmov	s16, r0
 8007778:	2101      	movs	r1, #1
 800777a:	4620      	mov	r0, r4
 800777c:	f001 f916 	bl	80089ac <__i2b>
 8007780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007782:	2b00      	cmp	r3, #0
 8007784:	4606      	mov	r6, r0
 8007786:	f340 8088 	ble.w	800789a <_dtoa_r+0x8c2>
 800778a:	461a      	mov	r2, r3
 800778c:	4601      	mov	r1, r0
 800778e:	4620      	mov	r0, r4
 8007790:	f001 f9cc 	bl	8008b2c <__pow5mult>
 8007794:	9b06      	ldr	r3, [sp, #24]
 8007796:	2b01      	cmp	r3, #1
 8007798:	4606      	mov	r6, r0
 800779a:	f340 8081 	ble.w	80078a0 <_dtoa_r+0x8c8>
 800779e:	f04f 0800 	mov.w	r8, #0
 80077a2:	6933      	ldr	r3, [r6, #16]
 80077a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077a8:	6918      	ldr	r0, [r3, #16]
 80077aa:	f001 f8af 	bl	800890c <__hi0bits>
 80077ae:	f1c0 0020 	rsb	r0, r0, #32
 80077b2:	9b05      	ldr	r3, [sp, #20]
 80077b4:	4418      	add	r0, r3
 80077b6:	f010 001f 	ands.w	r0, r0, #31
 80077ba:	f000 8092 	beq.w	80078e2 <_dtoa_r+0x90a>
 80077be:	f1c0 0320 	rsb	r3, r0, #32
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	f340 808a 	ble.w	80078dc <_dtoa_r+0x904>
 80077c8:	f1c0 001c 	rsb	r0, r0, #28
 80077cc:	9b04      	ldr	r3, [sp, #16]
 80077ce:	4403      	add	r3, r0
 80077d0:	9304      	str	r3, [sp, #16]
 80077d2:	9b05      	ldr	r3, [sp, #20]
 80077d4:	4403      	add	r3, r0
 80077d6:	4405      	add	r5, r0
 80077d8:	9305      	str	r3, [sp, #20]
 80077da:	9b04      	ldr	r3, [sp, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	dd07      	ble.n	80077f0 <_dtoa_r+0x818>
 80077e0:	ee18 1a10 	vmov	r1, s16
 80077e4:	461a      	mov	r2, r3
 80077e6:	4620      	mov	r0, r4
 80077e8:	f001 f9fa 	bl	8008be0 <__lshift>
 80077ec:	ee08 0a10 	vmov	s16, r0
 80077f0:	9b05      	ldr	r3, [sp, #20]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	dd05      	ble.n	8007802 <_dtoa_r+0x82a>
 80077f6:	4631      	mov	r1, r6
 80077f8:	461a      	mov	r2, r3
 80077fa:	4620      	mov	r0, r4
 80077fc:	f001 f9f0 	bl	8008be0 <__lshift>
 8007800:	4606      	mov	r6, r0
 8007802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d06e      	beq.n	80078e6 <_dtoa_r+0x90e>
 8007808:	ee18 0a10 	vmov	r0, s16
 800780c:	4631      	mov	r1, r6
 800780e:	f001 fa57 	bl	8008cc0 <__mcmp>
 8007812:	2800      	cmp	r0, #0
 8007814:	da67      	bge.n	80078e6 <_dtoa_r+0x90e>
 8007816:	9b00      	ldr	r3, [sp, #0]
 8007818:	3b01      	subs	r3, #1
 800781a:	ee18 1a10 	vmov	r1, s16
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	220a      	movs	r2, #10
 8007822:	2300      	movs	r3, #0
 8007824:	4620      	mov	r0, r4
 8007826:	f000 ffe1 	bl	80087ec <__multadd>
 800782a:	9b08      	ldr	r3, [sp, #32]
 800782c:	ee08 0a10 	vmov	s16, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 81b1 	beq.w	8007b98 <_dtoa_r+0xbc0>
 8007836:	2300      	movs	r3, #0
 8007838:	4639      	mov	r1, r7
 800783a:	220a      	movs	r2, #10
 800783c:	4620      	mov	r0, r4
 800783e:	f000 ffd5 	bl	80087ec <__multadd>
 8007842:	9b02      	ldr	r3, [sp, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	4607      	mov	r7, r0
 8007848:	f300 808e 	bgt.w	8007968 <_dtoa_r+0x990>
 800784c:	9b06      	ldr	r3, [sp, #24]
 800784e:	2b02      	cmp	r3, #2
 8007850:	dc51      	bgt.n	80078f6 <_dtoa_r+0x91e>
 8007852:	e089      	b.n	8007968 <_dtoa_r+0x990>
 8007854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800785a:	e74b      	b.n	80076f4 <_dtoa_r+0x71c>
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	1e5e      	subs	r6, r3, #1
 8007860:	9b07      	ldr	r3, [sp, #28]
 8007862:	42b3      	cmp	r3, r6
 8007864:	bfbf      	itttt	lt
 8007866:	9b07      	ldrlt	r3, [sp, #28]
 8007868:	9607      	strlt	r6, [sp, #28]
 800786a:	1af2      	sublt	r2, r6, r3
 800786c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800786e:	bfb6      	itet	lt
 8007870:	189b      	addlt	r3, r3, r2
 8007872:	1b9e      	subge	r6, r3, r6
 8007874:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	bfb8      	it	lt
 800787a:	2600      	movlt	r6, #0
 800787c:	2b00      	cmp	r3, #0
 800787e:	bfb7      	itett	lt
 8007880:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007884:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007888:	1a9d      	sublt	r5, r3, r2
 800788a:	2300      	movlt	r3, #0
 800788c:	e734      	b.n	80076f8 <_dtoa_r+0x720>
 800788e:	9e07      	ldr	r6, [sp, #28]
 8007890:	9d04      	ldr	r5, [sp, #16]
 8007892:	9f08      	ldr	r7, [sp, #32]
 8007894:	e73b      	b.n	800770e <_dtoa_r+0x736>
 8007896:	9a07      	ldr	r2, [sp, #28]
 8007898:	e767      	b.n	800776a <_dtoa_r+0x792>
 800789a:	9b06      	ldr	r3, [sp, #24]
 800789c:	2b01      	cmp	r3, #1
 800789e:	dc18      	bgt.n	80078d2 <_dtoa_r+0x8fa>
 80078a0:	f1ba 0f00 	cmp.w	sl, #0
 80078a4:	d115      	bne.n	80078d2 <_dtoa_r+0x8fa>
 80078a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078aa:	b993      	cbnz	r3, 80078d2 <_dtoa_r+0x8fa>
 80078ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078b0:	0d1b      	lsrs	r3, r3, #20
 80078b2:	051b      	lsls	r3, r3, #20
 80078b4:	b183      	cbz	r3, 80078d8 <_dtoa_r+0x900>
 80078b6:	9b04      	ldr	r3, [sp, #16]
 80078b8:	3301      	adds	r3, #1
 80078ba:	9304      	str	r3, [sp, #16]
 80078bc:	9b05      	ldr	r3, [sp, #20]
 80078be:	3301      	adds	r3, #1
 80078c0:	9305      	str	r3, [sp, #20]
 80078c2:	f04f 0801 	mov.w	r8, #1
 80078c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f47f af6a 	bne.w	80077a2 <_dtoa_r+0x7ca>
 80078ce:	2001      	movs	r0, #1
 80078d0:	e76f      	b.n	80077b2 <_dtoa_r+0x7da>
 80078d2:	f04f 0800 	mov.w	r8, #0
 80078d6:	e7f6      	b.n	80078c6 <_dtoa_r+0x8ee>
 80078d8:	4698      	mov	r8, r3
 80078da:	e7f4      	b.n	80078c6 <_dtoa_r+0x8ee>
 80078dc:	f43f af7d 	beq.w	80077da <_dtoa_r+0x802>
 80078e0:	4618      	mov	r0, r3
 80078e2:	301c      	adds	r0, #28
 80078e4:	e772      	b.n	80077cc <_dtoa_r+0x7f4>
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	dc37      	bgt.n	800795c <_dtoa_r+0x984>
 80078ec:	9b06      	ldr	r3, [sp, #24]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	dd34      	ble.n	800795c <_dtoa_r+0x984>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	9302      	str	r3, [sp, #8]
 80078f6:	9b02      	ldr	r3, [sp, #8]
 80078f8:	b96b      	cbnz	r3, 8007916 <_dtoa_r+0x93e>
 80078fa:	4631      	mov	r1, r6
 80078fc:	2205      	movs	r2, #5
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 ff74 	bl	80087ec <__multadd>
 8007904:	4601      	mov	r1, r0
 8007906:	4606      	mov	r6, r0
 8007908:	ee18 0a10 	vmov	r0, s16
 800790c:	f001 f9d8 	bl	8008cc0 <__mcmp>
 8007910:	2800      	cmp	r0, #0
 8007912:	f73f adbb 	bgt.w	800748c <_dtoa_r+0x4b4>
 8007916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007918:	9d01      	ldr	r5, [sp, #4]
 800791a:	43db      	mvns	r3, r3
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	f04f 0800 	mov.w	r8, #0
 8007922:	4631      	mov	r1, r6
 8007924:	4620      	mov	r0, r4
 8007926:	f000 ff3f 	bl	80087a8 <_Bfree>
 800792a:	2f00      	cmp	r7, #0
 800792c:	f43f aea4 	beq.w	8007678 <_dtoa_r+0x6a0>
 8007930:	f1b8 0f00 	cmp.w	r8, #0
 8007934:	d005      	beq.n	8007942 <_dtoa_r+0x96a>
 8007936:	45b8      	cmp	r8, r7
 8007938:	d003      	beq.n	8007942 <_dtoa_r+0x96a>
 800793a:	4641      	mov	r1, r8
 800793c:	4620      	mov	r0, r4
 800793e:	f000 ff33 	bl	80087a8 <_Bfree>
 8007942:	4639      	mov	r1, r7
 8007944:	4620      	mov	r0, r4
 8007946:	f000 ff2f 	bl	80087a8 <_Bfree>
 800794a:	e695      	b.n	8007678 <_dtoa_r+0x6a0>
 800794c:	2600      	movs	r6, #0
 800794e:	4637      	mov	r7, r6
 8007950:	e7e1      	b.n	8007916 <_dtoa_r+0x93e>
 8007952:	9700      	str	r7, [sp, #0]
 8007954:	4637      	mov	r7, r6
 8007956:	e599      	b.n	800748c <_dtoa_r+0x4b4>
 8007958:	40240000 	.word	0x40240000
 800795c:	9b08      	ldr	r3, [sp, #32]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 80ca 	beq.w	8007af8 <_dtoa_r+0xb20>
 8007964:	9b03      	ldr	r3, [sp, #12]
 8007966:	9302      	str	r3, [sp, #8]
 8007968:	2d00      	cmp	r5, #0
 800796a:	dd05      	ble.n	8007978 <_dtoa_r+0x9a0>
 800796c:	4639      	mov	r1, r7
 800796e:	462a      	mov	r2, r5
 8007970:	4620      	mov	r0, r4
 8007972:	f001 f935 	bl	8008be0 <__lshift>
 8007976:	4607      	mov	r7, r0
 8007978:	f1b8 0f00 	cmp.w	r8, #0
 800797c:	d05b      	beq.n	8007a36 <_dtoa_r+0xa5e>
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	4620      	mov	r0, r4
 8007982:	f000 fed1 	bl	8008728 <_Balloc>
 8007986:	4605      	mov	r5, r0
 8007988:	b928      	cbnz	r0, 8007996 <_dtoa_r+0x9be>
 800798a:	4b87      	ldr	r3, [pc, #540]	; (8007ba8 <_dtoa_r+0xbd0>)
 800798c:	4602      	mov	r2, r0
 800798e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007992:	f7ff bb3b 	b.w	800700c <_dtoa_r+0x34>
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	3202      	adds	r2, #2
 800799a:	0092      	lsls	r2, r2, #2
 800799c:	f107 010c 	add.w	r1, r7, #12
 80079a0:	300c      	adds	r0, #12
 80079a2:	f000 feb3 	bl	800870c <memcpy>
 80079a6:	2201      	movs	r2, #1
 80079a8:	4629      	mov	r1, r5
 80079aa:	4620      	mov	r0, r4
 80079ac:	f001 f918 	bl	8008be0 <__lshift>
 80079b0:	9b01      	ldr	r3, [sp, #4]
 80079b2:	f103 0901 	add.w	r9, r3, #1
 80079b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80079ba:	4413      	add	r3, r2
 80079bc:	9305      	str	r3, [sp, #20]
 80079be:	f00a 0301 	and.w	r3, sl, #1
 80079c2:	46b8      	mov	r8, r7
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	4607      	mov	r7, r0
 80079c8:	4631      	mov	r1, r6
 80079ca:	ee18 0a10 	vmov	r0, s16
 80079ce:	f7ff fa77 	bl	8006ec0 <quorem>
 80079d2:	4641      	mov	r1, r8
 80079d4:	9002      	str	r0, [sp, #8]
 80079d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80079da:	ee18 0a10 	vmov	r0, s16
 80079de:	f001 f96f 	bl	8008cc0 <__mcmp>
 80079e2:	463a      	mov	r2, r7
 80079e4:	9003      	str	r0, [sp, #12]
 80079e6:	4631      	mov	r1, r6
 80079e8:	4620      	mov	r0, r4
 80079ea:	f001 f985 	bl	8008cf8 <__mdiff>
 80079ee:	68c2      	ldr	r2, [r0, #12]
 80079f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80079f4:	4605      	mov	r5, r0
 80079f6:	bb02      	cbnz	r2, 8007a3a <_dtoa_r+0xa62>
 80079f8:	4601      	mov	r1, r0
 80079fa:	ee18 0a10 	vmov	r0, s16
 80079fe:	f001 f95f 	bl	8008cc0 <__mcmp>
 8007a02:	4602      	mov	r2, r0
 8007a04:	4629      	mov	r1, r5
 8007a06:	4620      	mov	r0, r4
 8007a08:	9207      	str	r2, [sp, #28]
 8007a0a:	f000 fecd 	bl	80087a8 <_Bfree>
 8007a0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a12:	ea43 0102 	orr.w	r1, r3, r2
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	464d      	mov	r5, r9
 8007a1c:	d10f      	bne.n	8007a3e <_dtoa_r+0xa66>
 8007a1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a22:	d02a      	beq.n	8007a7a <_dtoa_r+0xaa2>
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	dd02      	ble.n	8007a30 <_dtoa_r+0xa58>
 8007a2a:	9b02      	ldr	r3, [sp, #8]
 8007a2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a30:	f88b a000 	strb.w	sl, [fp]
 8007a34:	e775      	b.n	8007922 <_dtoa_r+0x94a>
 8007a36:	4638      	mov	r0, r7
 8007a38:	e7ba      	b.n	80079b0 <_dtoa_r+0x9d8>
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	e7e2      	b.n	8007a04 <_dtoa_r+0xa2c>
 8007a3e:	9b03      	ldr	r3, [sp, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	db04      	blt.n	8007a4e <_dtoa_r+0xa76>
 8007a44:	9906      	ldr	r1, [sp, #24]
 8007a46:	430b      	orrs	r3, r1
 8007a48:	9904      	ldr	r1, [sp, #16]
 8007a4a:	430b      	orrs	r3, r1
 8007a4c:	d122      	bne.n	8007a94 <_dtoa_r+0xabc>
 8007a4e:	2a00      	cmp	r2, #0
 8007a50:	ddee      	ble.n	8007a30 <_dtoa_r+0xa58>
 8007a52:	ee18 1a10 	vmov	r1, s16
 8007a56:	2201      	movs	r2, #1
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f001 f8c1 	bl	8008be0 <__lshift>
 8007a5e:	4631      	mov	r1, r6
 8007a60:	ee08 0a10 	vmov	s16, r0
 8007a64:	f001 f92c 	bl	8008cc0 <__mcmp>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	dc03      	bgt.n	8007a74 <_dtoa_r+0xa9c>
 8007a6c:	d1e0      	bne.n	8007a30 <_dtoa_r+0xa58>
 8007a6e:	f01a 0f01 	tst.w	sl, #1
 8007a72:	d0dd      	beq.n	8007a30 <_dtoa_r+0xa58>
 8007a74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a78:	d1d7      	bne.n	8007a2a <_dtoa_r+0xa52>
 8007a7a:	2339      	movs	r3, #57	; 0x39
 8007a7c:	f88b 3000 	strb.w	r3, [fp]
 8007a80:	462b      	mov	r3, r5
 8007a82:	461d      	mov	r5, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a8a:	2a39      	cmp	r2, #57	; 0x39
 8007a8c:	d071      	beq.n	8007b72 <_dtoa_r+0xb9a>
 8007a8e:	3201      	adds	r2, #1
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	e746      	b.n	8007922 <_dtoa_r+0x94a>
 8007a94:	2a00      	cmp	r2, #0
 8007a96:	dd07      	ble.n	8007aa8 <_dtoa_r+0xad0>
 8007a98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a9c:	d0ed      	beq.n	8007a7a <_dtoa_r+0xaa2>
 8007a9e:	f10a 0301 	add.w	r3, sl, #1
 8007aa2:	f88b 3000 	strb.w	r3, [fp]
 8007aa6:	e73c      	b.n	8007922 <_dtoa_r+0x94a>
 8007aa8:	9b05      	ldr	r3, [sp, #20]
 8007aaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007aae:	4599      	cmp	r9, r3
 8007ab0:	d047      	beq.n	8007b42 <_dtoa_r+0xb6a>
 8007ab2:	ee18 1a10 	vmov	r1, s16
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	220a      	movs	r2, #10
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 fe96 	bl	80087ec <__multadd>
 8007ac0:	45b8      	cmp	r8, r7
 8007ac2:	ee08 0a10 	vmov	s16, r0
 8007ac6:	f04f 0300 	mov.w	r3, #0
 8007aca:	f04f 020a 	mov.w	r2, #10
 8007ace:	4641      	mov	r1, r8
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	d106      	bne.n	8007ae2 <_dtoa_r+0xb0a>
 8007ad4:	f000 fe8a 	bl	80087ec <__multadd>
 8007ad8:	4680      	mov	r8, r0
 8007ada:	4607      	mov	r7, r0
 8007adc:	f109 0901 	add.w	r9, r9, #1
 8007ae0:	e772      	b.n	80079c8 <_dtoa_r+0x9f0>
 8007ae2:	f000 fe83 	bl	80087ec <__multadd>
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	4680      	mov	r8, r0
 8007aea:	2300      	movs	r3, #0
 8007aec:	220a      	movs	r2, #10
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 fe7c 	bl	80087ec <__multadd>
 8007af4:	4607      	mov	r7, r0
 8007af6:	e7f1      	b.n	8007adc <_dtoa_r+0xb04>
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	9302      	str	r3, [sp, #8]
 8007afc:	9d01      	ldr	r5, [sp, #4]
 8007afe:	ee18 0a10 	vmov	r0, s16
 8007b02:	4631      	mov	r1, r6
 8007b04:	f7ff f9dc 	bl	8006ec0 <quorem>
 8007b08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b0c:	9b01      	ldr	r3, [sp, #4]
 8007b0e:	f805 ab01 	strb.w	sl, [r5], #1
 8007b12:	1aea      	subs	r2, r5, r3
 8007b14:	9b02      	ldr	r3, [sp, #8]
 8007b16:	4293      	cmp	r3, r2
 8007b18:	dd09      	ble.n	8007b2e <_dtoa_r+0xb56>
 8007b1a:	ee18 1a10 	vmov	r1, s16
 8007b1e:	2300      	movs	r3, #0
 8007b20:	220a      	movs	r2, #10
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 fe62 	bl	80087ec <__multadd>
 8007b28:	ee08 0a10 	vmov	s16, r0
 8007b2c:	e7e7      	b.n	8007afe <_dtoa_r+0xb26>
 8007b2e:	9b02      	ldr	r3, [sp, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bfc8      	it	gt
 8007b34:	461d      	movgt	r5, r3
 8007b36:	9b01      	ldr	r3, [sp, #4]
 8007b38:	bfd8      	it	le
 8007b3a:	2501      	movle	r5, #1
 8007b3c:	441d      	add	r5, r3
 8007b3e:	f04f 0800 	mov.w	r8, #0
 8007b42:	ee18 1a10 	vmov	r1, s16
 8007b46:	2201      	movs	r2, #1
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f001 f849 	bl	8008be0 <__lshift>
 8007b4e:	4631      	mov	r1, r6
 8007b50:	ee08 0a10 	vmov	s16, r0
 8007b54:	f001 f8b4 	bl	8008cc0 <__mcmp>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	dc91      	bgt.n	8007a80 <_dtoa_r+0xaa8>
 8007b5c:	d102      	bne.n	8007b64 <_dtoa_r+0xb8c>
 8007b5e:	f01a 0f01 	tst.w	sl, #1
 8007b62:	d18d      	bne.n	8007a80 <_dtoa_r+0xaa8>
 8007b64:	462b      	mov	r3, r5
 8007b66:	461d      	mov	r5, r3
 8007b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b6c:	2a30      	cmp	r2, #48	; 0x30
 8007b6e:	d0fa      	beq.n	8007b66 <_dtoa_r+0xb8e>
 8007b70:	e6d7      	b.n	8007922 <_dtoa_r+0x94a>
 8007b72:	9a01      	ldr	r2, [sp, #4]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d184      	bne.n	8007a82 <_dtoa_r+0xaaa>
 8007b78:	9b00      	ldr	r3, [sp, #0]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	2331      	movs	r3, #49	; 0x31
 8007b80:	7013      	strb	r3, [r2, #0]
 8007b82:	e6ce      	b.n	8007922 <_dtoa_r+0x94a>
 8007b84:	4b09      	ldr	r3, [pc, #36]	; (8007bac <_dtoa_r+0xbd4>)
 8007b86:	f7ff ba95 	b.w	80070b4 <_dtoa_r+0xdc>
 8007b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f47f aa6e 	bne.w	800706e <_dtoa_r+0x96>
 8007b92:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <_dtoa_r+0xbd8>)
 8007b94:	f7ff ba8e 	b.w	80070b4 <_dtoa_r+0xdc>
 8007b98:	9b02      	ldr	r3, [sp, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	dcae      	bgt.n	8007afc <_dtoa_r+0xb24>
 8007b9e:	9b06      	ldr	r3, [sp, #24]
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	f73f aea8 	bgt.w	80078f6 <_dtoa_r+0x91e>
 8007ba6:	e7a9      	b.n	8007afc <_dtoa_r+0xb24>
 8007ba8:	0800a2d0 	.word	0x0800a2d0
 8007bac:	0800a0d4 	.word	0x0800a0d4
 8007bb0:	0800a251 	.word	0x0800a251

08007bb4 <__sflush_r>:
 8007bb4:	898a      	ldrh	r2, [r1, #12]
 8007bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bba:	4605      	mov	r5, r0
 8007bbc:	0710      	lsls	r0, r2, #28
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	d458      	bmi.n	8007c74 <__sflush_r+0xc0>
 8007bc2:	684b      	ldr	r3, [r1, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dc05      	bgt.n	8007bd4 <__sflush_r+0x20>
 8007bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dc02      	bgt.n	8007bd4 <__sflush_r+0x20>
 8007bce:	2000      	movs	r0, #0
 8007bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bd6:	2e00      	cmp	r6, #0
 8007bd8:	d0f9      	beq.n	8007bce <__sflush_r+0x1a>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007be0:	682f      	ldr	r7, [r5, #0]
 8007be2:	602b      	str	r3, [r5, #0]
 8007be4:	d032      	beq.n	8007c4c <__sflush_r+0x98>
 8007be6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	075a      	lsls	r2, r3, #29
 8007bec:	d505      	bpl.n	8007bfa <__sflush_r+0x46>
 8007bee:	6863      	ldr	r3, [r4, #4]
 8007bf0:	1ac0      	subs	r0, r0, r3
 8007bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bf4:	b10b      	cbz	r3, 8007bfa <__sflush_r+0x46>
 8007bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bf8:	1ac0      	subs	r0, r0, r3
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c00:	6a21      	ldr	r1, [r4, #32]
 8007c02:	4628      	mov	r0, r5
 8007c04:	47b0      	blx	r6
 8007c06:	1c43      	adds	r3, r0, #1
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	d106      	bne.n	8007c1a <__sflush_r+0x66>
 8007c0c:	6829      	ldr	r1, [r5, #0]
 8007c0e:	291d      	cmp	r1, #29
 8007c10:	d82c      	bhi.n	8007c6c <__sflush_r+0xb8>
 8007c12:	4a2a      	ldr	r2, [pc, #168]	; (8007cbc <__sflush_r+0x108>)
 8007c14:	40ca      	lsrs	r2, r1
 8007c16:	07d6      	lsls	r6, r2, #31
 8007c18:	d528      	bpl.n	8007c6c <__sflush_r+0xb8>
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	6062      	str	r2, [r4, #4]
 8007c1e:	04d9      	lsls	r1, r3, #19
 8007c20:	6922      	ldr	r2, [r4, #16]
 8007c22:	6022      	str	r2, [r4, #0]
 8007c24:	d504      	bpl.n	8007c30 <__sflush_r+0x7c>
 8007c26:	1c42      	adds	r2, r0, #1
 8007c28:	d101      	bne.n	8007c2e <__sflush_r+0x7a>
 8007c2a:	682b      	ldr	r3, [r5, #0]
 8007c2c:	b903      	cbnz	r3, 8007c30 <__sflush_r+0x7c>
 8007c2e:	6560      	str	r0, [r4, #84]	; 0x54
 8007c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c32:	602f      	str	r7, [r5, #0]
 8007c34:	2900      	cmp	r1, #0
 8007c36:	d0ca      	beq.n	8007bce <__sflush_r+0x1a>
 8007c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c3c:	4299      	cmp	r1, r3
 8007c3e:	d002      	beq.n	8007c46 <__sflush_r+0x92>
 8007c40:	4628      	mov	r0, r5
 8007c42:	f001 fa49 	bl	80090d8 <_free_r>
 8007c46:	2000      	movs	r0, #0
 8007c48:	6360      	str	r0, [r4, #52]	; 0x34
 8007c4a:	e7c1      	b.n	8007bd0 <__sflush_r+0x1c>
 8007c4c:	6a21      	ldr	r1, [r4, #32]
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4628      	mov	r0, r5
 8007c52:	47b0      	blx	r6
 8007c54:	1c41      	adds	r1, r0, #1
 8007c56:	d1c7      	bne.n	8007be8 <__sflush_r+0x34>
 8007c58:	682b      	ldr	r3, [r5, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0c4      	beq.n	8007be8 <__sflush_r+0x34>
 8007c5e:	2b1d      	cmp	r3, #29
 8007c60:	d001      	beq.n	8007c66 <__sflush_r+0xb2>
 8007c62:	2b16      	cmp	r3, #22
 8007c64:	d101      	bne.n	8007c6a <__sflush_r+0xb6>
 8007c66:	602f      	str	r7, [r5, #0]
 8007c68:	e7b1      	b.n	8007bce <__sflush_r+0x1a>
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c70:	81a3      	strh	r3, [r4, #12]
 8007c72:	e7ad      	b.n	8007bd0 <__sflush_r+0x1c>
 8007c74:	690f      	ldr	r7, [r1, #16]
 8007c76:	2f00      	cmp	r7, #0
 8007c78:	d0a9      	beq.n	8007bce <__sflush_r+0x1a>
 8007c7a:	0793      	lsls	r3, r2, #30
 8007c7c:	680e      	ldr	r6, [r1, #0]
 8007c7e:	bf08      	it	eq
 8007c80:	694b      	ldreq	r3, [r1, #20]
 8007c82:	600f      	str	r7, [r1, #0]
 8007c84:	bf18      	it	ne
 8007c86:	2300      	movne	r3, #0
 8007c88:	eba6 0807 	sub.w	r8, r6, r7
 8007c8c:	608b      	str	r3, [r1, #8]
 8007c8e:	f1b8 0f00 	cmp.w	r8, #0
 8007c92:	dd9c      	ble.n	8007bce <__sflush_r+0x1a>
 8007c94:	6a21      	ldr	r1, [r4, #32]
 8007c96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c98:	4643      	mov	r3, r8
 8007c9a:	463a      	mov	r2, r7
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	47b0      	blx	r6
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	dc06      	bgt.n	8007cb2 <__sflush_r+0xfe>
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007caa:	81a3      	strh	r3, [r4, #12]
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	e78e      	b.n	8007bd0 <__sflush_r+0x1c>
 8007cb2:	4407      	add	r7, r0
 8007cb4:	eba8 0800 	sub.w	r8, r8, r0
 8007cb8:	e7e9      	b.n	8007c8e <__sflush_r+0xda>
 8007cba:	bf00      	nop
 8007cbc:	20400001 	.word	0x20400001

08007cc0 <_fflush_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	690b      	ldr	r3, [r1, #16]
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	b913      	cbnz	r3, 8007cd0 <_fflush_r+0x10>
 8007cca:	2500      	movs	r5, #0
 8007ccc:	4628      	mov	r0, r5
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	b118      	cbz	r0, 8007cda <_fflush_r+0x1a>
 8007cd2:	6983      	ldr	r3, [r0, #24]
 8007cd4:	b90b      	cbnz	r3, 8007cda <_fflush_r+0x1a>
 8007cd6:	f000 f887 	bl	8007de8 <__sinit>
 8007cda:	4b14      	ldr	r3, [pc, #80]	; (8007d2c <_fflush_r+0x6c>)
 8007cdc:	429c      	cmp	r4, r3
 8007cde:	d11b      	bne.n	8007d18 <_fflush_r+0x58>
 8007ce0:	686c      	ldr	r4, [r5, #4]
 8007ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0ef      	beq.n	8007cca <_fflush_r+0xa>
 8007cea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cec:	07d0      	lsls	r0, r2, #31
 8007cee:	d404      	bmi.n	8007cfa <_fflush_r+0x3a>
 8007cf0:	0599      	lsls	r1, r3, #22
 8007cf2:	d402      	bmi.n	8007cfa <_fflush_r+0x3a>
 8007cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cf6:	f000 fc88 	bl	800860a <__retarget_lock_acquire_recursive>
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	f7ff ff59 	bl	8007bb4 <__sflush_r>
 8007d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d04:	07da      	lsls	r2, r3, #31
 8007d06:	4605      	mov	r5, r0
 8007d08:	d4e0      	bmi.n	8007ccc <_fflush_r+0xc>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	059b      	lsls	r3, r3, #22
 8007d0e:	d4dd      	bmi.n	8007ccc <_fflush_r+0xc>
 8007d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d12:	f000 fc7b 	bl	800860c <__retarget_lock_release_recursive>
 8007d16:	e7d9      	b.n	8007ccc <_fflush_r+0xc>
 8007d18:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <_fflush_r+0x70>)
 8007d1a:	429c      	cmp	r4, r3
 8007d1c:	d101      	bne.n	8007d22 <_fflush_r+0x62>
 8007d1e:	68ac      	ldr	r4, [r5, #8]
 8007d20:	e7df      	b.n	8007ce2 <_fflush_r+0x22>
 8007d22:	4b04      	ldr	r3, [pc, #16]	; (8007d34 <_fflush_r+0x74>)
 8007d24:	429c      	cmp	r4, r3
 8007d26:	bf08      	it	eq
 8007d28:	68ec      	ldreq	r4, [r5, #12]
 8007d2a:	e7da      	b.n	8007ce2 <_fflush_r+0x22>
 8007d2c:	0800a304 	.word	0x0800a304
 8007d30:	0800a324 	.word	0x0800a324
 8007d34:	0800a2e4 	.word	0x0800a2e4

08007d38 <std>:
 8007d38:	2300      	movs	r3, #0
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d46:	6083      	str	r3, [r0, #8]
 8007d48:	8181      	strh	r1, [r0, #12]
 8007d4a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d4c:	81c2      	strh	r2, [r0, #14]
 8007d4e:	6183      	str	r3, [r0, #24]
 8007d50:	4619      	mov	r1, r3
 8007d52:	2208      	movs	r2, #8
 8007d54:	305c      	adds	r0, #92	; 0x5c
 8007d56:	f7fd f9fb 	bl	8005150 <memset>
 8007d5a:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <std+0x38>)
 8007d5c:	6263      	str	r3, [r4, #36]	; 0x24
 8007d5e:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <std+0x3c>)
 8007d60:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d62:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <std+0x40>)
 8007d64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d66:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <std+0x44>)
 8007d68:	6224      	str	r4, [r4, #32]
 8007d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8007d6c:	bd10      	pop	{r4, pc}
 8007d6e:	bf00      	nop
 8007d70:	080098c9 	.word	0x080098c9
 8007d74:	080098eb 	.word	0x080098eb
 8007d78:	08009923 	.word	0x08009923
 8007d7c:	08009947 	.word	0x08009947

08007d80 <_cleanup_r>:
 8007d80:	4901      	ldr	r1, [pc, #4]	; (8007d88 <_cleanup_r+0x8>)
 8007d82:	f000 b8af 	b.w	8007ee4 <_fwalk_reent>
 8007d86:	bf00      	nop
 8007d88:	08007cc1 	.word	0x08007cc1

08007d8c <__sfmoreglue>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	2268      	movs	r2, #104	; 0x68
 8007d90:	1e4d      	subs	r5, r1, #1
 8007d92:	4355      	muls	r5, r2
 8007d94:	460e      	mov	r6, r1
 8007d96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d9a:	f001 fa09 	bl	80091b0 <_malloc_r>
 8007d9e:	4604      	mov	r4, r0
 8007da0:	b140      	cbz	r0, 8007db4 <__sfmoreglue+0x28>
 8007da2:	2100      	movs	r1, #0
 8007da4:	e9c0 1600 	strd	r1, r6, [r0]
 8007da8:	300c      	adds	r0, #12
 8007daa:	60a0      	str	r0, [r4, #8]
 8007dac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007db0:	f7fd f9ce 	bl	8005150 <memset>
 8007db4:	4620      	mov	r0, r4
 8007db6:	bd70      	pop	{r4, r5, r6, pc}

08007db8 <__sfp_lock_acquire>:
 8007db8:	4801      	ldr	r0, [pc, #4]	; (8007dc0 <__sfp_lock_acquire+0x8>)
 8007dba:	f000 bc26 	b.w	800860a <__retarget_lock_acquire_recursive>
 8007dbe:	bf00      	nop
 8007dc0:	20000301 	.word	0x20000301

08007dc4 <__sfp_lock_release>:
 8007dc4:	4801      	ldr	r0, [pc, #4]	; (8007dcc <__sfp_lock_release+0x8>)
 8007dc6:	f000 bc21 	b.w	800860c <__retarget_lock_release_recursive>
 8007dca:	bf00      	nop
 8007dcc:	20000301 	.word	0x20000301

08007dd0 <__sinit_lock_acquire>:
 8007dd0:	4801      	ldr	r0, [pc, #4]	; (8007dd8 <__sinit_lock_acquire+0x8>)
 8007dd2:	f000 bc1a 	b.w	800860a <__retarget_lock_acquire_recursive>
 8007dd6:	bf00      	nop
 8007dd8:	20000302 	.word	0x20000302

08007ddc <__sinit_lock_release>:
 8007ddc:	4801      	ldr	r0, [pc, #4]	; (8007de4 <__sinit_lock_release+0x8>)
 8007dde:	f000 bc15 	b.w	800860c <__retarget_lock_release_recursive>
 8007de2:	bf00      	nop
 8007de4:	20000302 	.word	0x20000302

08007de8 <__sinit>:
 8007de8:	b510      	push	{r4, lr}
 8007dea:	4604      	mov	r4, r0
 8007dec:	f7ff fff0 	bl	8007dd0 <__sinit_lock_acquire>
 8007df0:	69a3      	ldr	r3, [r4, #24]
 8007df2:	b11b      	cbz	r3, 8007dfc <__sinit+0x14>
 8007df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df8:	f7ff bff0 	b.w	8007ddc <__sinit_lock_release>
 8007dfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e00:	6523      	str	r3, [r4, #80]	; 0x50
 8007e02:	4b13      	ldr	r3, [pc, #76]	; (8007e50 <__sinit+0x68>)
 8007e04:	4a13      	ldr	r2, [pc, #76]	; (8007e54 <__sinit+0x6c>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e0a:	42a3      	cmp	r3, r4
 8007e0c:	bf04      	itt	eq
 8007e0e:	2301      	moveq	r3, #1
 8007e10:	61a3      	streq	r3, [r4, #24]
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 f820 	bl	8007e58 <__sfp>
 8007e18:	6060      	str	r0, [r4, #4]
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f000 f81c 	bl	8007e58 <__sfp>
 8007e20:	60a0      	str	r0, [r4, #8]
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 f818 	bl	8007e58 <__sfp>
 8007e28:	2200      	movs	r2, #0
 8007e2a:	60e0      	str	r0, [r4, #12]
 8007e2c:	2104      	movs	r1, #4
 8007e2e:	6860      	ldr	r0, [r4, #4]
 8007e30:	f7ff ff82 	bl	8007d38 <std>
 8007e34:	68a0      	ldr	r0, [r4, #8]
 8007e36:	2201      	movs	r2, #1
 8007e38:	2109      	movs	r1, #9
 8007e3a:	f7ff ff7d 	bl	8007d38 <std>
 8007e3e:	68e0      	ldr	r0, [r4, #12]
 8007e40:	2202      	movs	r2, #2
 8007e42:	2112      	movs	r1, #18
 8007e44:	f7ff ff78 	bl	8007d38 <std>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	61a3      	str	r3, [r4, #24]
 8007e4c:	e7d2      	b.n	8007df4 <__sinit+0xc>
 8007e4e:	bf00      	nop
 8007e50:	0800a0c0 	.word	0x0800a0c0
 8007e54:	08007d81 	.word	0x08007d81

08007e58 <__sfp>:
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	4607      	mov	r7, r0
 8007e5c:	f7ff ffac 	bl	8007db8 <__sfp_lock_acquire>
 8007e60:	4b1e      	ldr	r3, [pc, #120]	; (8007edc <__sfp+0x84>)
 8007e62:	681e      	ldr	r6, [r3, #0]
 8007e64:	69b3      	ldr	r3, [r6, #24]
 8007e66:	b913      	cbnz	r3, 8007e6e <__sfp+0x16>
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f7ff ffbd 	bl	8007de8 <__sinit>
 8007e6e:	3648      	adds	r6, #72	; 0x48
 8007e70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	d503      	bpl.n	8007e80 <__sfp+0x28>
 8007e78:	6833      	ldr	r3, [r6, #0]
 8007e7a:	b30b      	cbz	r3, 8007ec0 <__sfp+0x68>
 8007e7c:	6836      	ldr	r6, [r6, #0]
 8007e7e:	e7f7      	b.n	8007e70 <__sfp+0x18>
 8007e80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e84:	b9d5      	cbnz	r5, 8007ebc <__sfp+0x64>
 8007e86:	4b16      	ldr	r3, [pc, #88]	; (8007ee0 <__sfp+0x88>)
 8007e88:	60e3      	str	r3, [r4, #12]
 8007e8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e8e:	6665      	str	r5, [r4, #100]	; 0x64
 8007e90:	f000 fbba 	bl	8008608 <__retarget_lock_init_recursive>
 8007e94:	f7ff ff96 	bl	8007dc4 <__sfp_lock_release>
 8007e98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ea0:	6025      	str	r5, [r4, #0]
 8007ea2:	61a5      	str	r5, [r4, #24]
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007eac:	f7fd f950 	bl	8005150 <memset>
 8007eb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007eb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007eb8:	4620      	mov	r0, r4
 8007eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ebc:	3468      	adds	r4, #104	; 0x68
 8007ebe:	e7d9      	b.n	8007e74 <__sfp+0x1c>
 8007ec0:	2104      	movs	r1, #4
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	f7ff ff62 	bl	8007d8c <__sfmoreglue>
 8007ec8:	4604      	mov	r4, r0
 8007eca:	6030      	str	r0, [r6, #0]
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d1d5      	bne.n	8007e7c <__sfp+0x24>
 8007ed0:	f7ff ff78 	bl	8007dc4 <__sfp_lock_release>
 8007ed4:	230c      	movs	r3, #12
 8007ed6:	603b      	str	r3, [r7, #0]
 8007ed8:	e7ee      	b.n	8007eb8 <__sfp+0x60>
 8007eda:	bf00      	nop
 8007edc:	0800a0c0 	.word	0x0800a0c0
 8007ee0:	ffff0001 	.word	0xffff0001

08007ee4 <_fwalk_reent>:
 8007ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee8:	4606      	mov	r6, r0
 8007eea:	4688      	mov	r8, r1
 8007eec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ef0:	2700      	movs	r7, #0
 8007ef2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ef6:	f1b9 0901 	subs.w	r9, r9, #1
 8007efa:	d505      	bpl.n	8007f08 <_fwalk_reent+0x24>
 8007efc:	6824      	ldr	r4, [r4, #0]
 8007efe:	2c00      	cmp	r4, #0
 8007f00:	d1f7      	bne.n	8007ef2 <_fwalk_reent+0xe>
 8007f02:	4638      	mov	r0, r7
 8007f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f08:	89ab      	ldrh	r3, [r5, #12]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d907      	bls.n	8007f1e <_fwalk_reent+0x3a>
 8007f0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f12:	3301      	adds	r3, #1
 8007f14:	d003      	beq.n	8007f1e <_fwalk_reent+0x3a>
 8007f16:	4629      	mov	r1, r5
 8007f18:	4630      	mov	r0, r6
 8007f1a:	47c0      	blx	r8
 8007f1c:	4307      	orrs	r7, r0
 8007f1e:	3568      	adds	r5, #104	; 0x68
 8007f20:	e7e9      	b.n	8007ef6 <_fwalk_reent+0x12>

08007f22 <rshift>:
 8007f22:	6903      	ldr	r3, [r0, #16]
 8007f24:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f2c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f30:	f100 0414 	add.w	r4, r0, #20
 8007f34:	dd45      	ble.n	8007fc2 <rshift+0xa0>
 8007f36:	f011 011f 	ands.w	r1, r1, #31
 8007f3a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f3e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f42:	d10c      	bne.n	8007f5e <rshift+0x3c>
 8007f44:	f100 0710 	add.w	r7, r0, #16
 8007f48:	4629      	mov	r1, r5
 8007f4a:	42b1      	cmp	r1, r6
 8007f4c:	d334      	bcc.n	8007fb8 <rshift+0x96>
 8007f4e:	1a9b      	subs	r3, r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	1eea      	subs	r2, r5, #3
 8007f54:	4296      	cmp	r6, r2
 8007f56:	bf38      	it	cc
 8007f58:	2300      	movcc	r3, #0
 8007f5a:	4423      	add	r3, r4
 8007f5c:	e015      	b.n	8007f8a <rshift+0x68>
 8007f5e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f62:	f1c1 0820 	rsb	r8, r1, #32
 8007f66:	40cf      	lsrs	r7, r1
 8007f68:	f105 0e04 	add.w	lr, r5, #4
 8007f6c:	46a1      	mov	r9, r4
 8007f6e:	4576      	cmp	r6, lr
 8007f70:	46f4      	mov	ip, lr
 8007f72:	d815      	bhi.n	8007fa0 <rshift+0x7e>
 8007f74:	1a9a      	subs	r2, r3, r2
 8007f76:	0092      	lsls	r2, r2, #2
 8007f78:	3a04      	subs	r2, #4
 8007f7a:	3501      	adds	r5, #1
 8007f7c:	42ae      	cmp	r6, r5
 8007f7e:	bf38      	it	cc
 8007f80:	2200      	movcc	r2, #0
 8007f82:	18a3      	adds	r3, r4, r2
 8007f84:	50a7      	str	r7, [r4, r2]
 8007f86:	b107      	cbz	r7, 8007f8a <rshift+0x68>
 8007f88:	3304      	adds	r3, #4
 8007f8a:	1b1a      	subs	r2, r3, r4
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f92:	bf08      	it	eq
 8007f94:	2300      	moveq	r3, #0
 8007f96:	6102      	str	r2, [r0, #16]
 8007f98:	bf08      	it	eq
 8007f9a:	6143      	streq	r3, [r0, #20]
 8007f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fa0:	f8dc c000 	ldr.w	ip, [ip]
 8007fa4:	fa0c fc08 	lsl.w	ip, ip, r8
 8007fa8:	ea4c 0707 	orr.w	r7, ip, r7
 8007fac:	f849 7b04 	str.w	r7, [r9], #4
 8007fb0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007fb4:	40cf      	lsrs	r7, r1
 8007fb6:	e7da      	b.n	8007f6e <rshift+0x4c>
 8007fb8:	f851 cb04 	ldr.w	ip, [r1], #4
 8007fbc:	f847 cf04 	str.w	ip, [r7, #4]!
 8007fc0:	e7c3      	b.n	8007f4a <rshift+0x28>
 8007fc2:	4623      	mov	r3, r4
 8007fc4:	e7e1      	b.n	8007f8a <rshift+0x68>

08007fc6 <__hexdig_fun>:
 8007fc6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007fca:	2b09      	cmp	r3, #9
 8007fcc:	d802      	bhi.n	8007fd4 <__hexdig_fun+0xe>
 8007fce:	3820      	subs	r0, #32
 8007fd0:	b2c0      	uxtb	r0, r0
 8007fd2:	4770      	bx	lr
 8007fd4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007fd8:	2b05      	cmp	r3, #5
 8007fda:	d801      	bhi.n	8007fe0 <__hexdig_fun+0x1a>
 8007fdc:	3847      	subs	r0, #71	; 0x47
 8007fde:	e7f7      	b.n	8007fd0 <__hexdig_fun+0xa>
 8007fe0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007fe4:	2b05      	cmp	r3, #5
 8007fe6:	d801      	bhi.n	8007fec <__hexdig_fun+0x26>
 8007fe8:	3827      	subs	r0, #39	; 0x27
 8007fea:	e7f1      	b.n	8007fd0 <__hexdig_fun+0xa>
 8007fec:	2000      	movs	r0, #0
 8007fee:	4770      	bx	lr

08007ff0 <__gethex>:
 8007ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	ed2d 8b02 	vpush	{d8}
 8007ff8:	b089      	sub	sp, #36	; 0x24
 8007ffa:	ee08 0a10 	vmov	s16, r0
 8007ffe:	9304      	str	r3, [sp, #16]
 8008000:	4bb4      	ldr	r3, [pc, #720]	; (80082d4 <__gethex+0x2e4>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	4618      	mov	r0, r3
 8008008:	468b      	mov	fp, r1
 800800a:	4690      	mov	r8, r2
 800800c:	f7f8 f908 	bl	8000220 <strlen>
 8008010:	9b01      	ldr	r3, [sp, #4]
 8008012:	f8db 2000 	ldr.w	r2, [fp]
 8008016:	4403      	add	r3, r0
 8008018:	4682      	mov	sl, r0
 800801a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800801e:	9305      	str	r3, [sp, #20]
 8008020:	1c93      	adds	r3, r2, #2
 8008022:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008026:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800802a:	32fe      	adds	r2, #254	; 0xfe
 800802c:	18d1      	adds	r1, r2, r3
 800802e:	461f      	mov	r7, r3
 8008030:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008034:	9100      	str	r1, [sp, #0]
 8008036:	2830      	cmp	r0, #48	; 0x30
 8008038:	d0f8      	beq.n	800802c <__gethex+0x3c>
 800803a:	f7ff ffc4 	bl	8007fc6 <__hexdig_fun>
 800803e:	4604      	mov	r4, r0
 8008040:	2800      	cmp	r0, #0
 8008042:	d13a      	bne.n	80080ba <__gethex+0xca>
 8008044:	9901      	ldr	r1, [sp, #4]
 8008046:	4652      	mov	r2, sl
 8008048:	4638      	mov	r0, r7
 800804a:	f001 fc80 	bl	800994e <strncmp>
 800804e:	4605      	mov	r5, r0
 8008050:	2800      	cmp	r0, #0
 8008052:	d168      	bne.n	8008126 <__gethex+0x136>
 8008054:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008058:	eb07 060a 	add.w	r6, r7, sl
 800805c:	f7ff ffb3 	bl	8007fc6 <__hexdig_fun>
 8008060:	2800      	cmp	r0, #0
 8008062:	d062      	beq.n	800812a <__gethex+0x13a>
 8008064:	4633      	mov	r3, r6
 8008066:	7818      	ldrb	r0, [r3, #0]
 8008068:	2830      	cmp	r0, #48	; 0x30
 800806a:	461f      	mov	r7, r3
 800806c:	f103 0301 	add.w	r3, r3, #1
 8008070:	d0f9      	beq.n	8008066 <__gethex+0x76>
 8008072:	f7ff ffa8 	bl	8007fc6 <__hexdig_fun>
 8008076:	2301      	movs	r3, #1
 8008078:	fab0 f480 	clz	r4, r0
 800807c:	0964      	lsrs	r4, r4, #5
 800807e:	4635      	mov	r5, r6
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	463a      	mov	r2, r7
 8008084:	4616      	mov	r6, r2
 8008086:	3201      	adds	r2, #1
 8008088:	7830      	ldrb	r0, [r6, #0]
 800808a:	f7ff ff9c 	bl	8007fc6 <__hexdig_fun>
 800808e:	2800      	cmp	r0, #0
 8008090:	d1f8      	bne.n	8008084 <__gethex+0x94>
 8008092:	9901      	ldr	r1, [sp, #4]
 8008094:	4652      	mov	r2, sl
 8008096:	4630      	mov	r0, r6
 8008098:	f001 fc59 	bl	800994e <strncmp>
 800809c:	b980      	cbnz	r0, 80080c0 <__gethex+0xd0>
 800809e:	b94d      	cbnz	r5, 80080b4 <__gethex+0xc4>
 80080a0:	eb06 050a 	add.w	r5, r6, sl
 80080a4:	462a      	mov	r2, r5
 80080a6:	4616      	mov	r6, r2
 80080a8:	3201      	adds	r2, #1
 80080aa:	7830      	ldrb	r0, [r6, #0]
 80080ac:	f7ff ff8b 	bl	8007fc6 <__hexdig_fun>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d1f8      	bne.n	80080a6 <__gethex+0xb6>
 80080b4:	1bad      	subs	r5, r5, r6
 80080b6:	00ad      	lsls	r5, r5, #2
 80080b8:	e004      	b.n	80080c4 <__gethex+0xd4>
 80080ba:	2400      	movs	r4, #0
 80080bc:	4625      	mov	r5, r4
 80080be:	e7e0      	b.n	8008082 <__gethex+0x92>
 80080c0:	2d00      	cmp	r5, #0
 80080c2:	d1f7      	bne.n	80080b4 <__gethex+0xc4>
 80080c4:	7833      	ldrb	r3, [r6, #0]
 80080c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080ca:	2b50      	cmp	r3, #80	; 0x50
 80080cc:	d13b      	bne.n	8008146 <__gethex+0x156>
 80080ce:	7873      	ldrb	r3, [r6, #1]
 80080d0:	2b2b      	cmp	r3, #43	; 0x2b
 80080d2:	d02c      	beq.n	800812e <__gethex+0x13e>
 80080d4:	2b2d      	cmp	r3, #45	; 0x2d
 80080d6:	d02e      	beq.n	8008136 <__gethex+0x146>
 80080d8:	1c71      	adds	r1, r6, #1
 80080da:	f04f 0900 	mov.w	r9, #0
 80080de:	7808      	ldrb	r0, [r1, #0]
 80080e0:	f7ff ff71 	bl	8007fc6 <__hexdig_fun>
 80080e4:	1e43      	subs	r3, r0, #1
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b18      	cmp	r3, #24
 80080ea:	d82c      	bhi.n	8008146 <__gethex+0x156>
 80080ec:	f1a0 0210 	sub.w	r2, r0, #16
 80080f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80080f4:	f7ff ff67 	bl	8007fc6 <__hexdig_fun>
 80080f8:	1e43      	subs	r3, r0, #1
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b18      	cmp	r3, #24
 80080fe:	d91d      	bls.n	800813c <__gethex+0x14c>
 8008100:	f1b9 0f00 	cmp.w	r9, #0
 8008104:	d000      	beq.n	8008108 <__gethex+0x118>
 8008106:	4252      	negs	r2, r2
 8008108:	4415      	add	r5, r2
 800810a:	f8cb 1000 	str.w	r1, [fp]
 800810e:	b1e4      	cbz	r4, 800814a <__gethex+0x15a>
 8008110:	9b00      	ldr	r3, [sp, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	bf14      	ite	ne
 8008116:	2700      	movne	r7, #0
 8008118:	2706      	moveq	r7, #6
 800811a:	4638      	mov	r0, r7
 800811c:	b009      	add	sp, #36	; 0x24
 800811e:	ecbd 8b02 	vpop	{d8}
 8008122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	463e      	mov	r6, r7
 8008128:	4625      	mov	r5, r4
 800812a:	2401      	movs	r4, #1
 800812c:	e7ca      	b.n	80080c4 <__gethex+0xd4>
 800812e:	f04f 0900 	mov.w	r9, #0
 8008132:	1cb1      	adds	r1, r6, #2
 8008134:	e7d3      	b.n	80080de <__gethex+0xee>
 8008136:	f04f 0901 	mov.w	r9, #1
 800813a:	e7fa      	b.n	8008132 <__gethex+0x142>
 800813c:	230a      	movs	r3, #10
 800813e:	fb03 0202 	mla	r2, r3, r2, r0
 8008142:	3a10      	subs	r2, #16
 8008144:	e7d4      	b.n	80080f0 <__gethex+0x100>
 8008146:	4631      	mov	r1, r6
 8008148:	e7df      	b.n	800810a <__gethex+0x11a>
 800814a:	1bf3      	subs	r3, r6, r7
 800814c:	3b01      	subs	r3, #1
 800814e:	4621      	mov	r1, r4
 8008150:	2b07      	cmp	r3, #7
 8008152:	dc0b      	bgt.n	800816c <__gethex+0x17c>
 8008154:	ee18 0a10 	vmov	r0, s16
 8008158:	f000 fae6 	bl	8008728 <_Balloc>
 800815c:	4604      	mov	r4, r0
 800815e:	b940      	cbnz	r0, 8008172 <__gethex+0x182>
 8008160:	4b5d      	ldr	r3, [pc, #372]	; (80082d8 <__gethex+0x2e8>)
 8008162:	4602      	mov	r2, r0
 8008164:	21de      	movs	r1, #222	; 0xde
 8008166:	485d      	ldr	r0, [pc, #372]	; (80082dc <__gethex+0x2ec>)
 8008168:	f001 fc24 	bl	80099b4 <__assert_func>
 800816c:	3101      	adds	r1, #1
 800816e:	105b      	asrs	r3, r3, #1
 8008170:	e7ee      	b.n	8008150 <__gethex+0x160>
 8008172:	f100 0914 	add.w	r9, r0, #20
 8008176:	f04f 0b00 	mov.w	fp, #0
 800817a:	f1ca 0301 	rsb	r3, sl, #1
 800817e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008182:	f8cd b000 	str.w	fp, [sp]
 8008186:	9306      	str	r3, [sp, #24]
 8008188:	42b7      	cmp	r7, r6
 800818a:	d340      	bcc.n	800820e <__gethex+0x21e>
 800818c:	9802      	ldr	r0, [sp, #8]
 800818e:	9b00      	ldr	r3, [sp, #0]
 8008190:	f840 3b04 	str.w	r3, [r0], #4
 8008194:	eba0 0009 	sub.w	r0, r0, r9
 8008198:	1080      	asrs	r0, r0, #2
 800819a:	0146      	lsls	r6, r0, #5
 800819c:	6120      	str	r0, [r4, #16]
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fbb4 	bl	800890c <__hi0bits>
 80081a4:	1a30      	subs	r0, r6, r0
 80081a6:	f8d8 6000 	ldr.w	r6, [r8]
 80081aa:	42b0      	cmp	r0, r6
 80081ac:	dd63      	ble.n	8008276 <__gethex+0x286>
 80081ae:	1b87      	subs	r7, r0, r6
 80081b0:	4639      	mov	r1, r7
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 ff58 	bl	8009068 <__any_on>
 80081b8:	4682      	mov	sl, r0
 80081ba:	b1a8      	cbz	r0, 80081e8 <__gethex+0x1f8>
 80081bc:	1e7b      	subs	r3, r7, #1
 80081be:	1159      	asrs	r1, r3, #5
 80081c0:	f003 021f 	and.w	r2, r3, #31
 80081c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80081c8:	f04f 0a01 	mov.w	sl, #1
 80081cc:	fa0a f202 	lsl.w	r2, sl, r2
 80081d0:	420a      	tst	r2, r1
 80081d2:	d009      	beq.n	80081e8 <__gethex+0x1f8>
 80081d4:	4553      	cmp	r3, sl
 80081d6:	dd05      	ble.n	80081e4 <__gethex+0x1f4>
 80081d8:	1eb9      	subs	r1, r7, #2
 80081da:	4620      	mov	r0, r4
 80081dc:	f000 ff44 	bl	8009068 <__any_on>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d145      	bne.n	8008270 <__gethex+0x280>
 80081e4:	f04f 0a02 	mov.w	sl, #2
 80081e8:	4639      	mov	r1, r7
 80081ea:	4620      	mov	r0, r4
 80081ec:	f7ff fe99 	bl	8007f22 <rshift>
 80081f0:	443d      	add	r5, r7
 80081f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081f6:	42ab      	cmp	r3, r5
 80081f8:	da4c      	bge.n	8008294 <__gethex+0x2a4>
 80081fa:	ee18 0a10 	vmov	r0, s16
 80081fe:	4621      	mov	r1, r4
 8008200:	f000 fad2 	bl	80087a8 <_Bfree>
 8008204:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008206:	2300      	movs	r3, #0
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	27a3      	movs	r7, #163	; 0xa3
 800820c:	e785      	b.n	800811a <__gethex+0x12a>
 800820e:	1e73      	subs	r3, r6, #1
 8008210:	9a05      	ldr	r2, [sp, #20]
 8008212:	9303      	str	r3, [sp, #12]
 8008214:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008218:	4293      	cmp	r3, r2
 800821a:	d019      	beq.n	8008250 <__gethex+0x260>
 800821c:	f1bb 0f20 	cmp.w	fp, #32
 8008220:	d107      	bne.n	8008232 <__gethex+0x242>
 8008222:	9b02      	ldr	r3, [sp, #8]
 8008224:	9a00      	ldr	r2, [sp, #0]
 8008226:	f843 2b04 	str.w	r2, [r3], #4
 800822a:	9302      	str	r3, [sp, #8]
 800822c:	2300      	movs	r3, #0
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	469b      	mov	fp, r3
 8008232:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008236:	f7ff fec6 	bl	8007fc6 <__hexdig_fun>
 800823a:	9b00      	ldr	r3, [sp, #0]
 800823c:	f000 000f 	and.w	r0, r0, #15
 8008240:	fa00 f00b 	lsl.w	r0, r0, fp
 8008244:	4303      	orrs	r3, r0
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	f10b 0b04 	add.w	fp, fp, #4
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	e00d      	b.n	800826c <__gethex+0x27c>
 8008250:	9b03      	ldr	r3, [sp, #12]
 8008252:	9a06      	ldr	r2, [sp, #24]
 8008254:	4413      	add	r3, r2
 8008256:	42bb      	cmp	r3, r7
 8008258:	d3e0      	bcc.n	800821c <__gethex+0x22c>
 800825a:	4618      	mov	r0, r3
 800825c:	9901      	ldr	r1, [sp, #4]
 800825e:	9307      	str	r3, [sp, #28]
 8008260:	4652      	mov	r2, sl
 8008262:	f001 fb74 	bl	800994e <strncmp>
 8008266:	9b07      	ldr	r3, [sp, #28]
 8008268:	2800      	cmp	r0, #0
 800826a:	d1d7      	bne.n	800821c <__gethex+0x22c>
 800826c:	461e      	mov	r6, r3
 800826e:	e78b      	b.n	8008188 <__gethex+0x198>
 8008270:	f04f 0a03 	mov.w	sl, #3
 8008274:	e7b8      	b.n	80081e8 <__gethex+0x1f8>
 8008276:	da0a      	bge.n	800828e <__gethex+0x29e>
 8008278:	1a37      	subs	r7, r6, r0
 800827a:	4621      	mov	r1, r4
 800827c:	ee18 0a10 	vmov	r0, s16
 8008280:	463a      	mov	r2, r7
 8008282:	f000 fcad 	bl	8008be0 <__lshift>
 8008286:	1bed      	subs	r5, r5, r7
 8008288:	4604      	mov	r4, r0
 800828a:	f100 0914 	add.w	r9, r0, #20
 800828e:	f04f 0a00 	mov.w	sl, #0
 8008292:	e7ae      	b.n	80081f2 <__gethex+0x202>
 8008294:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008298:	42a8      	cmp	r0, r5
 800829a:	dd72      	ble.n	8008382 <__gethex+0x392>
 800829c:	1b45      	subs	r5, r0, r5
 800829e:	42ae      	cmp	r6, r5
 80082a0:	dc36      	bgt.n	8008310 <__gethex+0x320>
 80082a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d02a      	beq.n	8008300 <__gethex+0x310>
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d02c      	beq.n	8008308 <__gethex+0x318>
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d11c      	bne.n	80082ec <__gethex+0x2fc>
 80082b2:	42ae      	cmp	r6, r5
 80082b4:	d11a      	bne.n	80082ec <__gethex+0x2fc>
 80082b6:	2e01      	cmp	r6, #1
 80082b8:	d112      	bne.n	80082e0 <__gethex+0x2f0>
 80082ba:	9a04      	ldr	r2, [sp, #16]
 80082bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	2301      	movs	r3, #1
 80082c4:	6123      	str	r3, [r4, #16]
 80082c6:	f8c9 3000 	str.w	r3, [r9]
 80082ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082cc:	2762      	movs	r7, #98	; 0x62
 80082ce:	601c      	str	r4, [r3, #0]
 80082d0:	e723      	b.n	800811a <__gethex+0x12a>
 80082d2:	bf00      	nop
 80082d4:	0800a3ac 	.word	0x0800a3ac
 80082d8:	0800a2d0 	.word	0x0800a2d0
 80082dc:	0800a344 	.word	0x0800a344
 80082e0:	1e71      	subs	r1, r6, #1
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fec0 	bl	8009068 <__any_on>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d1e6      	bne.n	80082ba <__gethex+0x2ca>
 80082ec:	ee18 0a10 	vmov	r0, s16
 80082f0:	4621      	mov	r1, r4
 80082f2:	f000 fa59 	bl	80087a8 <_Bfree>
 80082f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082f8:	2300      	movs	r3, #0
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	2750      	movs	r7, #80	; 0x50
 80082fe:	e70c      	b.n	800811a <__gethex+0x12a>
 8008300:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1f2      	bne.n	80082ec <__gethex+0x2fc>
 8008306:	e7d8      	b.n	80082ba <__gethex+0x2ca>
 8008308:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1d5      	bne.n	80082ba <__gethex+0x2ca>
 800830e:	e7ed      	b.n	80082ec <__gethex+0x2fc>
 8008310:	1e6f      	subs	r7, r5, #1
 8008312:	f1ba 0f00 	cmp.w	sl, #0
 8008316:	d131      	bne.n	800837c <__gethex+0x38c>
 8008318:	b127      	cbz	r7, 8008324 <__gethex+0x334>
 800831a:	4639      	mov	r1, r7
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fea3 	bl	8009068 <__any_on>
 8008322:	4682      	mov	sl, r0
 8008324:	117b      	asrs	r3, r7, #5
 8008326:	2101      	movs	r1, #1
 8008328:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800832c:	f007 071f 	and.w	r7, r7, #31
 8008330:	fa01 f707 	lsl.w	r7, r1, r7
 8008334:	421f      	tst	r7, r3
 8008336:	4629      	mov	r1, r5
 8008338:	4620      	mov	r0, r4
 800833a:	bf18      	it	ne
 800833c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008340:	1b76      	subs	r6, r6, r5
 8008342:	f7ff fdee 	bl	8007f22 <rshift>
 8008346:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800834a:	2702      	movs	r7, #2
 800834c:	f1ba 0f00 	cmp.w	sl, #0
 8008350:	d048      	beq.n	80083e4 <__gethex+0x3f4>
 8008352:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d015      	beq.n	8008386 <__gethex+0x396>
 800835a:	2b03      	cmp	r3, #3
 800835c:	d017      	beq.n	800838e <__gethex+0x39e>
 800835e:	2b01      	cmp	r3, #1
 8008360:	d109      	bne.n	8008376 <__gethex+0x386>
 8008362:	f01a 0f02 	tst.w	sl, #2
 8008366:	d006      	beq.n	8008376 <__gethex+0x386>
 8008368:	f8d9 0000 	ldr.w	r0, [r9]
 800836c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008370:	f01a 0f01 	tst.w	sl, #1
 8008374:	d10e      	bne.n	8008394 <__gethex+0x3a4>
 8008376:	f047 0710 	orr.w	r7, r7, #16
 800837a:	e033      	b.n	80083e4 <__gethex+0x3f4>
 800837c:	f04f 0a01 	mov.w	sl, #1
 8008380:	e7d0      	b.n	8008324 <__gethex+0x334>
 8008382:	2701      	movs	r7, #1
 8008384:	e7e2      	b.n	800834c <__gethex+0x35c>
 8008386:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008388:	f1c3 0301 	rsb	r3, r3, #1
 800838c:	9315      	str	r3, [sp, #84]	; 0x54
 800838e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0f0      	beq.n	8008376 <__gethex+0x386>
 8008394:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008398:	f104 0314 	add.w	r3, r4, #20
 800839c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80083a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80083a4:	f04f 0c00 	mov.w	ip, #0
 80083a8:	4618      	mov	r0, r3
 80083aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 80083b2:	d01c      	beq.n	80083ee <__gethex+0x3fe>
 80083b4:	3201      	adds	r2, #1
 80083b6:	6002      	str	r2, [r0, #0]
 80083b8:	2f02      	cmp	r7, #2
 80083ba:	f104 0314 	add.w	r3, r4, #20
 80083be:	d13f      	bne.n	8008440 <__gethex+0x450>
 80083c0:	f8d8 2000 	ldr.w	r2, [r8]
 80083c4:	3a01      	subs	r2, #1
 80083c6:	42b2      	cmp	r2, r6
 80083c8:	d10a      	bne.n	80083e0 <__gethex+0x3f0>
 80083ca:	1171      	asrs	r1, r6, #5
 80083cc:	2201      	movs	r2, #1
 80083ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083d2:	f006 061f 	and.w	r6, r6, #31
 80083d6:	fa02 f606 	lsl.w	r6, r2, r6
 80083da:	421e      	tst	r6, r3
 80083dc:	bf18      	it	ne
 80083de:	4617      	movne	r7, r2
 80083e0:	f047 0720 	orr.w	r7, r7, #32
 80083e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083e6:	601c      	str	r4, [r3, #0]
 80083e8:	9b04      	ldr	r3, [sp, #16]
 80083ea:	601d      	str	r5, [r3, #0]
 80083ec:	e695      	b.n	800811a <__gethex+0x12a>
 80083ee:	4299      	cmp	r1, r3
 80083f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80083f4:	d8d8      	bhi.n	80083a8 <__gethex+0x3b8>
 80083f6:	68a3      	ldr	r3, [r4, #8]
 80083f8:	459b      	cmp	fp, r3
 80083fa:	db19      	blt.n	8008430 <__gethex+0x440>
 80083fc:	6861      	ldr	r1, [r4, #4]
 80083fe:	ee18 0a10 	vmov	r0, s16
 8008402:	3101      	adds	r1, #1
 8008404:	f000 f990 	bl	8008728 <_Balloc>
 8008408:	4681      	mov	r9, r0
 800840a:	b918      	cbnz	r0, 8008414 <__gethex+0x424>
 800840c:	4b1a      	ldr	r3, [pc, #104]	; (8008478 <__gethex+0x488>)
 800840e:	4602      	mov	r2, r0
 8008410:	2184      	movs	r1, #132	; 0x84
 8008412:	e6a8      	b.n	8008166 <__gethex+0x176>
 8008414:	6922      	ldr	r2, [r4, #16]
 8008416:	3202      	adds	r2, #2
 8008418:	f104 010c 	add.w	r1, r4, #12
 800841c:	0092      	lsls	r2, r2, #2
 800841e:	300c      	adds	r0, #12
 8008420:	f000 f974 	bl	800870c <memcpy>
 8008424:	4621      	mov	r1, r4
 8008426:	ee18 0a10 	vmov	r0, s16
 800842a:	f000 f9bd 	bl	80087a8 <_Bfree>
 800842e:	464c      	mov	r4, r9
 8008430:	6923      	ldr	r3, [r4, #16]
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008438:	6122      	str	r2, [r4, #16]
 800843a:	2201      	movs	r2, #1
 800843c:	615a      	str	r2, [r3, #20]
 800843e:	e7bb      	b.n	80083b8 <__gethex+0x3c8>
 8008440:	6922      	ldr	r2, [r4, #16]
 8008442:	455a      	cmp	r2, fp
 8008444:	dd0b      	ble.n	800845e <__gethex+0x46e>
 8008446:	2101      	movs	r1, #1
 8008448:	4620      	mov	r0, r4
 800844a:	f7ff fd6a 	bl	8007f22 <rshift>
 800844e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008452:	3501      	adds	r5, #1
 8008454:	42ab      	cmp	r3, r5
 8008456:	f6ff aed0 	blt.w	80081fa <__gethex+0x20a>
 800845a:	2701      	movs	r7, #1
 800845c:	e7c0      	b.n	80083e0 <__gethex+0x3f0>
 800845e:	f016 061f 	ands.w	r6, r6, #31
 8008462:	d0fa      	beq.n	800845a <__gethex+0x46a>
 8008464:	4453      	add	r3, sl
 8008466:	f1c6 0620 	rsb	r6, r6, #32
 800846a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800846e:	f000 fa4d 	bl	800890c <__hi0bits>
 8008472:	42b0      	cmp	r0, r6
 8008474:	dbe7      	blt.n	8008446 <__gethex+0x456>
 8008476:	e7f0      	b.n	800845a <__gethex+0x46a>
 8008478:	0800a2d0 	.word	0x0800a2d0

0800847c <L_shift>:
 800847c:	f1c2 0208 	rsb	r2, r2, #8
 8008480:	0092      	lsls	r2, r2, #2
 8008482:	b570      	push	{r4, r5, r6, lr}
 8008484:	f1c2 0620 	rsb	r6, r2, #32
 8008488:	6843      	ldr	r3, [r0, #4]
 800848a:	6804      	ldr	r4, [r0, #0]
 800848c:	fa03 f506 	lsl.w	r5, r3, r6
 8008490:	432c      	orrs	r4, r5
 8008492:	40d3      	lsrs	r3, r2
 8008494:	6004      	str	r4, [r0, #0]
 8008496:	f840 3f04 	str.w	r3, [r0, #4]!
 800849a:	4288      	cmp	r0, r1
 800849c:	d3f4      	bcc.n	8008488 <L_shift+0xc>
 800849e:	bd70      	pop	{r4, r5, r6, pc}

080084a0 <__match>:
 80084a0:	b530      	push	{r4, r5, lr}
 80084a2:	6803      	ldr	r3, [r0, #0]
 80084a4:	3301      	adds	r3, #1
 80084a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084aa:	b914      	cbnz	r4, 80084b2 <__match+0x12>
 80084ac:	6003      	str	r3, [r0, #0]
 80084ae:	2001      	movs	r0, #1
 80084b0:	bd30      	pop	{r4, r5, pc}
 80084b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80084ba:	2d19      	cmp	r5, #25
 80084bc:	bf98      	it	ls
 80084be:	3220      	addls	r2, #32
 80084c0:	42a2      	cmp	r2, r4
 80084c2:	d0f0      	beq.n	80084a6 <__match+0x6>
 80084c4:	2000      	movs	r0, #0
 80084c6:	e7f3      	b.n	80084b0 <__match+0x10>

080084c8 <__hexnan>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	680b      	ldr	r3, [r1, #0]
 80084ce:	115e      	asrs	r6, r3, #5
 80084d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084d4:	f013 031f 	ands.w	r3, r3, #31
 80084d8:	b087      	sub	sp, #28
 80084da:	bf18      	it	ne
 80084dc:	3604      	addne	r6, #4
 80084de:	2500      	movs	r5, #0
 80084e0:	1f37      	subs	r7, r6, #4
 80084e2:	4690      	mov	r8, r2
 80084e4:	6802      	ldr	r2, [r0, #0]
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	4682      	mov	sl, r0
 80084ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80084ee:	46b9      	mov	r9, r7
 80084f0:	463c      	mov	r4, r7
 80084f2:	9502      	str	r5, [sp, #8]
 80084f4:	46ab      	mov	fp, r5
 80084f6:	7851      	ldrb	r1, [r2, #1]
 80084f8:	1c53      	adds	r3, r2, #1
 80084fa:	9303      	str	r3, [sp, #12]
 80084fc:	b341      	cbz	r1, 8008550 <__hexnan+0x88>
 80084fe:	4608      	mov	r0, r1
 8008500:	9205      	str	r2, [sp, #20]
 8008502:	9104      	str	r1, [sp, #16]
 8008504:	f7ff fd5f 	bl	8007fc6 <__hexdig_fun>
 8008508:	2800      	cmp	r0, #0
 800850a:	d14f      	bne.n	80085ac <__hexnan+0xe4>
 800850c:	9904      	ldr	r1, [sp, #16]
 800850e:	9a05      	ldr	r2, [sp, #20]
 8008510:	2920      	cmp	r1, #32
 8008512:	d818      	bhi.n	8008546 <__hexnan+0x7e>
 8008514:	9b02      	ldr	r3, [sp, #8]
 8008516:	459b      	cmp	fp, r3
 8008518:	dd13      	ble.n	8008542 <__hexnan+0x7a>
 800851a:	454c      	cmp	r4, r9
 800851c:	d206      	bcs.n	800852c <__hexnan+0x64>
 800851e:	2d07      	cmp	r5, #7
 8008520:	dc04      	bgt.n	800852c <__hexnan+0x64>
 8008522:	462a      	mov	r2, r5
 8008524:	4649      	mov	r1, r9
 8008526:	4620      	mov	r0, r4
 8008528:	f7ff ffa8 	bl	800847c <L_shift>
 800852c:	4544      	cmp	r4, r8
 800852e:	d950      	bls.n	80085d2 <__hexnan+0x10a>
 8008530:	2300      	movs	r3, #0
 8008532:	f1a4 0904 	sub.w	r9, r4, #4
 8008536:	f844 3c04 	str.w	r3, [r4, #-4]
 800853a:	f8cd b008 	str.w	fp, [sp, #8]
 800853e:	464c      	mov	r4, r9
 8008540:	461d      	mov	r5, r3
 8008542:	9a03      	ldr	r2, [sp, #12]
 8008544:	e7d7      	b.n	80084f6 <__hexnan+0x2e>
 8008546:	2929      	cmp	r1, #41	; 0x29
 8008548:	d156      	bne.n	80085f8 <__hexnan+0x130>
 800854a:	3202      	adds	r2, #2
 800854c:	f8ca 2000 	str.w	r2, [sl]
 8008550:	f1bb 0f00 	cmp.w	fp, #0
 8008554:	d050      	beq.n	80085f8 <__hexnan+0x130>
 8008556:	454c      	cmp	r4, r9
 8008558:	d206      	bcs.n	8008568 <__hexnan+0xa0>
 800855a:	2d07      	cmp	r5, #7
 800855c:	dc04      	bgt.n	8008568 <__hexnan+0xa0>
 800855e:	462a      	mov	r2, r5
 8008560:	4649      	mov	r1, r9
 8008562:	4620      	mov	r0, r4
 8008564:	f7ff ff8a 	bl	800847c <L_shift>
 8008568:	4544      	cmp	r4, r8
 800856a:	d934      	bls.n	80085d6 <__hexnan+0x10e>
 800856c:	f1a8 0204 	sub.w	r2, r8, #4
 8008570:	4623      	mov	r3, r4
 8008572:	f853 1b04 	ldr.w	r1, [r3], #4
 8008576:	f842 1f04 	str.w	r1, [r2, #4]!
 800857a:	429f      	cmp	r7, r3
 800857c:	d2f9      	bcs.n	8008572 <__hexnan+0xaa>
 800857e:	1b3b      	subs	r3, r7, r4
 8008580:	f023 0303 	bic.w	r3, r3, #3
 8008584:	3304      	adds	r3, #4
 8008586:	3401      	adds	r4, #1
 8008588:	3e03      	subs	r6, #3
 800858a:	42b4      	cmp	r4, r6
 800858c:	bf88      	it	hi
 800858e:	2304      	movhi	r3, #4
 8008590:	4443      	add	r3, r8
 8008592:	2200      	movs	r2, #0
 8008594:	f843 2b04 	str.w	r2, [r3], #4
 8008598:	429f      	cmp	r7, r3
 800859a:	d2fb      	bcs.n	8008594 <__hexnan+0xcc>
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	b91b      	cbnz	r3, 80085a8 <__hexnan+0xe0>
 80085a0:	4547      	cmp	r7, r8
 80085a2:	d127      	bne.n	80085f4 <__hexnan+0x12c>
 80085a4:	2301      	movs	r3, #1
 80085a6:	603b      	str	r3, [r7, #0]
 80085a8:	2005      	movs	r0, #5
 80085aa:	e026      	b.n	80085fa <__hexnan+0x132>
 80085ac:	3501      	adds	r5, #1
 80085ae:	2d08      	cmp	r5, #8
 80085b0:	f10b 0b01 	add.w	fp, fp, #1
 80085b4:	dd06      	ble.n	80085c4 <__hexnan+0xfc>
 80085b6:	4544      	cmp	r4, r8
 80085b8:	d9c3      	bls.n	8008542 <__hexnan+0x7a>
 80085ba:	2300      	movs	r3, #0
 80085bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80085c0:	2501      	movs	r5, #1
 80085c2:	3c04      	subs	r4, #4
 80085c4:	6822      	ldr	r2, [r4, #0]
 80085c6:	f000 000f 	and.w	r0, r0, #15
 80085ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80085ce:	6022      	str	r2, [r4, #0]
 80085d0:	e7b7      	b.n	8008542 <__hexnan+0x7a>
 80085d2:	2508      	movs	r5, #8
 80085d4:	e7b5      	b.n	8008542 <__hexnan+0x7a>
 80085d6:	9b01      	ldr	r3, [sp, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0df      	beq.n	800859c <__hexnan+0xd4>
 80085dc:	f04f 32ff 	mov.w	r2, #4294967295
 80085e0:	f1c3 0320 	rsb	r3, r3, #32
 80085e4:	fa22 f303 	lsr.w	r3, r2, r3
 80085e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80085ec:	401a      	ands	r2, r3
 80085ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80085f2:	e7d3      	b.n	800859c <__hexnan+0xd4>
 80085f4:	3f04      	subs	r7, #4
 80085f6:	e7d1      	b.n	800859c <__hexnan+0xd4>
 80085f8:	2004      	movs	r0, #4
 80085fa:	b007      	add	sp, #28
 80085fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008600 <_localeconv_r>:
 8008600:	4800      	ldr	r0, [pc, #0]	; (8008604 <_localeconv_r+0x4>)
 8008602:	4770      	bx	lr
 8008604:	20000164 	.word	0x20000164

08008608 <__retarget_lock_init_recursive>:
 8008608:	4770      	bx	lr

0800860a <__retarget_lock_acquire_recursive>:
 800860a:	4770      	bx	lr

0800860c <__retarget_lock_release_recursive>:
 800860c:	4770      	bx	lr

0800860e <__swhatbuf_r>:
 800860e:	b570      	push	{r4, r5, r6, lr}
 8008610:	460e      	mov	r6, r1
 8008612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008616:	2900      	cmp	r1, #0
 8008618:	b096      	sub	sp, #88	; 0x58
 800861a:	4614      	mov	r4, r2
 800861c:	461d      	mov	r5, r3
 800861e:	da08      	bge.n	8008632 <__swhatbuf_r+0x24>
 8008620:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	602a      	str	r2, [r5, #0]
 8008628:	061a      	lsls	r2, r3, #24
 800862a:	d410      	bmi.n	800864e <__swhatbuf_r+0x40>
 800862c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008630:	e00e      	b.n	8008650 <__swhatbuf_r+0x42>
 8008632:	466a      	mov	r2, sp
 8008634:	f001 f9fe 	bl	8009a34 <_fstat_r>
 8008638:	2800      	cmp	r0, #0
 800863a:	dbf1      	blt.n	8008620 <__swhatbuf_r+0x12>
 800863c:	9a01      	ldr	r2, [sp, #4]
 800863e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008642:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008646:	425a      	negs	r2, r3
 8008648:	415a      	adcs	r2, r3
 800864a:	602a      	str	r2, [r5, #0]
 800864c:	e7ee      	b.n	800862c <__swhatbuf_r+0x1e>
 800864e:	2340      	movs	r3, #64	; 0x40
 8008650:	2000      	movs	r0, #0
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	b016      	add	sp, #88	; 0x58
 8008656:	bd70      	pop	{r4, r5, r6, pc}

08008658 <__smakebuf_r>:
 8008658:	898b      	ldrh	r3, [r1, #12]
 800865a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800865c:	079d      	lsls	r5, r3, #30
 800865e:	4606      	mov	r6, r0
 8008660:	460c      	mov	r4, r1
 8008662:	d507      	bpl.n	8008674 <__smakebuf_r+0x1c>
 8008664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	6123      	str	r3, [r4, #16]
 800866c:	2301      	movs	r3, #1
 800866e:	6163      	str	r3, [r4, #20]
 8008670:	b002      	add	sp, #8
 8008672:	bd70      	pop	{r4, r5, r6, pc}
 8008674:	ab01      	add	r3, sp, #4
 8008676:	466a      	mov	r2, sp
 8008678:	f7ff ffc9 	bl	800860e <__swhatbuf_r>
 800867c:	9900      	ldr	r1, [sp, #0]
 800867e:	4605      	mov	r5, r0
 8008680:	4630      	mov	r0, r6
 8008682:	f000 fd95 	bl	80091b0 <_malloc_r>
 8008686:	b948      	cbnz	r0, 800869c <__smakebuf_r+0x44>
 8008688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800868c:	059a      	lsls	r2, r3, #22
 800868e:	d4ef      	bmi.n	8008670 <__smakebuf_r+0x18>
 8008690:	f023 0303 	bic.w	r3, r3, #3
 8008694:	f043 0302 	orr.w	r3, r3, #2
 8008698:	81a3      	strh	r3, [r4, #12]
 800869a:	e7e3      	b.n	8008664 <__smakebuf_r+0xc>
 800869c:	4b0d      	ldr	r3, [pc, #52]	; (80086d4 <__smakebuf_r+0x7c>)
 800869e:	62b3      	str	r3, [r6, #40]	; 0x28
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	6020      	str	r0, [r4, #0]
 80086a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a8:	81a3      	strh	r3, [r4, #12]
 80086aa:	9b00      	ldr	r3, [sp, #0]
 80086ac:	6163      	str	r3, [r4, #20]
 80086ae:	9b01      	ldr	r3, [sp, #4]
 80086b0:	6120      	str	r0, [r4, #16]
 80086b2:	b15b      	cbz	r3, 80086cc <__smakebuf_r+0x74>
 80086b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086b8:	4630      	mov	r0, r6
 80086ba:	f001 f9cd 	bl	8009a58 <_isatty_r>
 80086be:	b128      	cbz	r0, 80086cc <__smakebuf_r+0x74>
 80086c0:	89a3      	ldrh	r3, [r4, #12]
 80086c2:	f023 0303 	bic.w	r3, r3, #3
 80086c6:	f043 0301 	orr.w	r3, r3, #1
 80086ca:	81a3      	strh	r3, [r4, #12]
 80086cc:	89a0      	ldrh	r0, [r4, #12]
 80086ce:	4305      	orrs	r5, r0
 80086d0:	81a5      	strh	r5, [r4, #12]
 80086d2:	e7cd      	b.n	8008670 <__smakebuf_r+0x18>
 80086d4:	08007d81 	.word	0x08007d81

080086d8 <malloc>:
 80086d8:	4b02      	ldr	r3, [pc, #8]	; (80086e4 <malloc+0xc>)
 80086da:	4601      	mov	r1, r0
 80086dc:	6818      	ldr	r0, [r3, #0]
 80086de:	f000 bd67 	b.w	80091b0 <_malloc_r>
 80086e2:	bf00      	nop
 80086e4:	2000000c 	.word	0x2000000c

080086e8 <__ascii_mbtowc>:
 80086e8:	b082      	sub	sp, #8
 80086ea:	b901      	cbnz	r1, 80086ee <__ascii_mbtowc+0x6>
 80086ec:	a901      	add	r1, sp, #4
 80086ee:	b142      	cbz	r2, 8008702 <__ascii_mbtowc+0x1a>
 80086f0:	b14b      	cbz	r3, 8008706 <__ascii_mbtowc+0x1e>
 80086f2:	7813      	ldrb	r3, [r2, #0]
 80086f4:	600b      	str	r3, [r1, #0]
 80086f6:	7812      	ldrb	r2, [r2, #0]
 80086f8:	1e10      	subs	r0, r2, #0
 80086fa:	bf18      	it	ne
 80086fc:	2001      	movne	r0, #1
 80086fe:	b002      	add	sp, #8
 8008700:	4770      	bx	lr
 8008702:	4610      	mov	r0, r2
 8008704:	e7fb      	b.n	80086fe <__ascii_mbtowc+0x16>
 8008706:	f06f 0001 	mvn.w	r0, #1
 800870a:	e7f8      	b.n	80086fe <__ascii_mbtowc+0x16>

0800870c <memcpy>:
 800870c:	440a      	add	r2, r1
 800870e:	4291      	cmp	r1, r2
 8008710:	f100 33ff 	add.w	r3, r0, #4294967295
 8008714:	d100      	bne.n	8008718 <memcpy+0xc>
 8008716:	4770      	bx	lr
 8008718:	b510      	push	{r4, lr}
 800871a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800871e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008722:	4291      	cmp	r1, r2
 8008724:	d1f9      	bne.n	800871a <memcpy+0xe>
 8008726:	bd10      	pop	{r4, pc}

08008728 <_Balloc>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800872c:	4604      	mov	r4, r0
 800872e:	460d      	mov	r5, r1
 8008730:	b976      	cbnz	r6, 8008750 <_Balloc+0x28>
 8008732:	2010      	movs	r0, #16
 8008734:	f7ff ffd0 	bl	80086d8 <malloc>
 8008738:	4602      	mov	r2, r0
 800873a:	6260      	str	r0, [r4, #36]	; 0x24
 800873c:	b920      	cbnz	r0, 8008748 <_Balloc+0x20>
 800873e:	4b18      	ldr	r3, [pc, #96]	; (80087a0 <_Balloc+0x78>)
 8008740:	4818      	ldr	r0, [pc, #96]	; (80087a4 <_Balloc+0x7c>)
 8008742:	2166      	movs	r1, #102	; 0x66
 8008744:	f001 f936 	bl	80099b4 <__assert_func>
 8008748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800874c:	6006      	str	r6, [r0, #0]
 800874e:	60c6      	str	r6, [r0, #12]
 8008750:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008752:	68f3      	ldr	r3, [r6, #12]
 8008754:	b183      	cbz	r3, 8008778 <_Balloc+0x50>
 8008756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800875e:	b9b8      	cbnz	r0, 8008790 <_Balloc+0x68>
 8008760:	2101      	movs	r1, #1
 8008762:	fa01 f605 	lsl.w	r6, r1, r5
 8008766:	1d72      	adds	r2, r6, #5
 8008768:	0092      	lsls	r2, r2, #2
 800876a:	4620      	mov	r0, r4
 800876c:	f000 fc9d 	bl	80090aa <_calloc_r>
 8008770:	b160      	cbz	r0, 800878c <_Balloc+0x64>
 8008772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008776:	e00e      	b.n	8008796 <_Balloc+0x6e>
 8008778:	2221      	movs	r2, #33	; 0x21
 800877a:	2104      	movs	r1, #4
 800877c:	4620      	mov	r0, r4
 800877e:	f000 fc94 	bl	80090aa <_calloc_r>
 8008782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008784:	60f0      	str	r0, [r6, #12]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e4      	bne.n	8008756 <_Balloc+0x2e>
 800878c:	2000      	movs	r0, #0
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	6802      	ldr	r2, [r0, #0]
 8008792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008796:	2300      	movs	r3, #0
 8008798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800879c:	e7f7      	b.n	800878e <_Balloc+0x66>
 800879e:	bf00      	nop
 80087a0:	0800a25e 	.word	0x0800a25e
 80087a4:	0800a3c0 	.word	0x0800a3c0

080087a8 <_Bfree>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087ac:	4605      	mov	r5, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	b976      	cbnz	r6, 80087d0 <_Bfree+0x28>
 80087b2:	2010      	movs	r0, #16
 80087b4:	f7ff ff90 	bl	80086d8 <malloc>
 80087b8:	4602      	mov	r2, r0
 80087ba:	6268      	str	r0, [r5, #36]	; 0x24
 80087bc:	b920      	cbnz	r0, 80087c8 <_Bfree+0x20>
 80087be:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <_Bfree+0x3c>)
 80087c0:	4809      	ldr	r0, [pc, #36]	; (80087e8 <_Bfree+0x40>)
 80087c2:	218a      	movs	r1, #138	; 0x8a
 80087c4:	f001 f8f6 	bl	80099b4 <__assert_func>
 80087c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087cc:	6006      	str	r6, [r0, #0]
 80087ce:	60c6      	str	r6, [r0, #12]
 80087d0:	b13c      	cbz	r4, 80087e2 <_Bfree+0x3a>
 80087d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087d4:	6862      	ldr	r2, [r4, #4]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087dc:	6021      	str	r1, [r4, #0]
 80087de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	0800a25e 	.word	0x0800a25e
 80087e8:	0800a3c0 	.word	0x0800a3c0

080087ec <__multadd>:
 80087ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f0:	690d      	ldr	r5, [r1, #16]
 80087f2:	4607      	mov	r7, r0
 80087f4:	460c      	mov	r4, r1
 80087f6:	461e      	mov	r6, r3
 80087f8:	f101 0c14 	add.w	ip, r1, #20
 80087fc:	2000      	movs	r0, #0
 80087fe:	f8dc 3000 	ldr.w	r3, [ip]
 8008802:	b299      	uxth	r1, r3
 8008804:	fb02 6101 	mla	r1, r2, r1, r6
 8008808:	0c1e      	lsrs	r6, r3, #16
 800880a:	0c0b      	lsrs	r3, r1, #16
 800880c:	fb02 3306 	mla	r3, r2, r6, r3
 8008810:	b289      	uxth	r1, r1
 8008812:	3001      	adds	r0, #1
 8008814:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008818:	4285      	cmp	r5, r0
 800881a:	f84c 1b04 	str.w	r1, [ip], #4
 800881e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008822:	dcec      	bgt.n	80087fe <__multadd+0x12>
 8008824:	b30e      	cbz	r6, 800886a <__multadd+0x7e>
 8008826:	68a3      	ldr	r3, [r4, #8]
 8008828:	42ab      	cmp	r3, r5
 800882a:	dc19      	bgt.n	8008860 <__multadd+0x74>
 800882c:	6861      	ldr	r1, [r4, #4]
 800882e:	4638      	mov	r0, r7
 8008830:	3101      	adds	r1, #1
 8008832:	f7ff ff79 	bl	8008728 <_Balloc>
 8008836:	4680      	mov	r8, r0
 8008838:	b928      	cbnz	r0, 8008846 <__multadd+0x5a>
 800883a:	4602      	mov	r2, r0
 800883c:	4b0c      	ldr	r3, [pc, #48]	; (8008870 <__multadd+0x84>)
 800883e:	480d      	ldr	r0, [pc, #52]	; (8008874 <__multadd+0x88>)
 8008840:	21b5      	movs	r1, #181	; 0xb5
 8008842:	f001 f8b7 	bl	80099b4 <__assert_func>
 8008846:	6922      	ldr	r2, [r4, #16]
 8008848:	3202      	adds	r2, #2
 800884a:	f104 010c 	add.w	r1, r4, #12
 800884e:	0092      	lsls	r2, r2, #2
 8008850:	300c      	adds	r0, #12
 8008852:	f7ff ff5b 	bl	800870c <memcpy>
 8008856:	4621      	mov	r1, r4
 8008858:	4638      	mov	r0, r7
 800885a:	f7ff ffa5 	bl	80087a8 <_Bfree>
 800885e:	4644      	mov	r4, r8
 8008860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008864:	3501      	adds	r5, #1
 8008866:	615e      	str	r6, [r3, #20]
 8008868:	6125      	str	r5, [r4, #16]
 800886a:	4620      	mov	r0, r4
 800886c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008870:	0800a2d0 	.word	0x0800a2d0
 8008874:	0800a3c0 	.word	0x0800a3c0

08008878 <__s2b>:
 8008878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800887c:	460c      	mov	r4, r1
 800887e:	4615      	mov	r5, r2
 8008880:	461f      	mov	r7, r3
 8008882:	2209      	movs	r2, #9
 8008884:	3308      	adds	r3, #8
 8008886:	4606      	mov	r6, r0
 8008888:	fb93 f3f2 	sdiv	r3, r3, r2
 800888c:	2100      	movs	r1, #0
 800888e:	2201      	movs	r2, #1
 8008890:	429a      	cmp	r2, r3
 8008892:	db09      	blt.n	80088a8 <__s2b+0x30>
 8008894:	4630      	mov	r0, r6
 8008896:	f7ff ff47 	bl	8008728 <_Balloc>
 800889a:	b940      	cbnz	r0, 80088ae <__s2b+0x36>
 800889c:	4602      	mov	r2, r0
 800889e:	4b19      	ldr	r3, [pc, #100]	; (8008904 <__s2b+0x8c>)
 80088a0:	4819      	ldr	r0, [pc, #100]	; (8008908 <__s2b+0x90>)
 80088a2:	21ce      	movs	r1, #206	; 0xce
 80088a4:	f001 f886 	bl	80099b4 <__assert_func>
 80088a8:	0052      	lsls	r2, r2, #1
 80088aa:	3101      	adds	r1, #1
 80088ac:	e7f0      	b.n	8008890 <__s2b+0x18>
 80088ae:	9b08      	ldr	r3, [sp, #32]
 80088b0:	6143      	str	r3, [r0, #20]
 80088b2:	2d09      	cmp	r5, #9
 80088b4:	f04f 0301 	mov.w	r3, #1
 80088b8:	6103      	str	r3, [r0, #16]
 80088ba:	dd16      	ble.n	80088ea <__s2b+0x72>
 80088bc:	f104 0909 	add.w	r9, r4, #9
 80088c0:	46c8      	mov	r8, r9
 80088c2:	442c      	add	r4, r5
 80088c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80088c8:	4601      	mov	r1, r0
 80088ca:	3b30      	subs	r3, #48	; 0x30
 80088cc:	220a      	movs	r2, #10
 80088ce:	4630      	mov	r0, r6
 80088d0:	f7ff ff8c 	bl	80087ec <__multadd>
 80088d4:	45a0      	cmp	r8, r4
 80088d6:	d1f5      	bne.n	80088c4 <__s2b+0x4c>
 80088d8:	f1a5 0408 	sub.w	r4, r5, #8
 80088dc:	444c      	add	r4, r9
 80088de:	1b2d      	subs	r5, r5, r4
 80088e0:	1963      	adds	r3, r4, r5
 80088e2:	42bb      	cmp	r3, r7
 80088e4:	db04      	blt.n	80088f0 <__s2b+0x78>
 80088e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ea:	340a      	adds	r4, #10
 80088ec:	2509      	movs	r5, #9
 80088ee:	e7f6      	b.n	80088de <__s2b+0x66>
 80088f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80088f4:	4601      	mov	r1, r0
 80088f6:	3b30      	subs	r3, #48	; 0x30
 80088f8:	220a      	movs	r2, #10
 80088fa:	4630      	mov	r0, r6
 80088fc:	f7ff ff76 	bl	80087ec <__multadd>
 8008900:	e7ee      	b.n	80088e0 <__s2b+0x68>
 8008902:	bf00      	nop
 8008904:	0800a2d0 	.word	0x0800a2d0
 8008908:	0800a3c0 	.word	0x0800a3c0

0800890c <__hi0bits>:
 800890c:	0c03      	lsrs	r3, r0, #16
 800890e:	041b      	lsls	r3, r3, #16
 8008910:	b9d3      	cbnz	r3, 8008948 <__hi0bits+0x3c>
 8008912:	0400      	lsls	r0, r0, #16
 8008914:	2310      	movs	r3, #16
 8008916:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800891a:	bf04      	itt	eq
 800891c:	0200      	lsleq	r0, r0, #8
 800891e:	3308      	addeq	r3, #8
 8008920:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008924:	bf04      	itt	eq
 8008926:	0100      	lsleq	r0, r0, #4
 8008928:	3304      	addeq	r3, #4
 800892a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800892e:	bf04      	itt	eq
 8008930:	0080      	lsleq	r0, r0, #2
 8008932:	3302      	addeq	r3, #2
 8008934:	2800      	cmp	r0, #0
 8008936:	db05      	blt.n	8008944 <__hi0bits+0x38>
 8008938:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800893c:	f103 0301 	add.w	r3, r3, #1
 8008940:	bf08      	it	eq
 8008942:	2320      	moveq	r3, #32
 8008944:	4618      	mov	r0, r3
 8008946:	4770      	bx	lr
 8008948:	2300      	movs	r3, #0
 800894a:	e7e4      	b.n	8008916 <__hi0bits+0xa>

0800894c <__lo0bits>:
 800894c:	6803      	ldr	r3, [r0, #0]
 800894e:	f013 0207 	ands.w	r2, r3, #7
 8008952:	4601      	mov	r1, r0
 8008954:	d00b      	beq.n	800896e <__lo0bits+0x22>
 8008956:	07da      	lsls	r2, r3, #31
 8008958:	d423      	bmi.n	80089a2 <__lo0bits+0x56>
 800895a:	0798      	lsls	r0, r3, #30
 800895c:	bf49      	itett	mi
 800895e:	085b      	lsrmi	r3, r3, #1
 8008960:	089b      	lsrpl	r3, r3, #2
 8008962:	2001      	movmi	r0, #1
 8008964:	600b      	strmi	r3, [r1, #0]
 8008966:	bf5c      	itt	pl
 8008968:	600b      	strpl	r3, [r1, #0]
 800896a:	2002      	movpl	r0, #2
 800896c:	4770      	bx	lr
 800896e:	b298      	uxth	r0, r3
 8008970:	b9a8      	cbnz	r0, 800899e <__lo0bits+0x52>
 8008972:	0c1b      	lsrs	r3, r3, #16
 8008974:	2010      	movs	r0, #16
 8008976:	b2da      	uxtb	r2, r3
 8008978:	b90a      	cbnz	r2, 800897e <__lo0bits+0x32>
 800897a:	3008      	adds	r0, #8
 800897c:	0a1b      	lsrs	r3, r3, #8
 800897e:	071a      	lsls	r2, r3, #28
 8008980:	bf04      	itt	eq
 8008982:	091b      	lsreq	r3, r3, #4
 8008984:	3004      	addeq	r0, #4
 8008986:	079a      	lsls	r2, r3, #30
 8008988:	bf04      	itt	eq
 800898a:	089b      	lsreq	r3, r3, #2
 800898c:	3002      	addeq	r0, #2
 800898e:	07da      	lsls	r2, r3, #31
 8008990:	d403      	bmi.n	800899a <__lo0bits+0x4e>
 8008992:	085b      	lsrs	r3, r3, #1
 8008994:	f100 0001 	add.w	r0, r0, #1
 8008998:	d005      	beq.n	80089a6 <__lo0bits+0x5a>
 800899a:	600b      	str	r3, [r1, #0]
 800899c:	4770      	bx	lr
 800899e:	4610      	mov	r0, r2
 80089a0:	e7e9      	b.n	8008976 <__lo0bits+0x2a>
 80089a2:	2000      	movs	r0, #0
 80089a4:	4770      	bx	lr
 80089a6:	2020      	movs	r0, #32
 80089a8:	4770      	bx	lr
	...

080089ac <__i2b>:
 80089ac:	b510      	push	{r4, lr}
 80089ae:	460c      	mov	r4, r1
 80089b0:	2101      	movs	r1, #1
 80089b2:	f7ff feb9 	bl	8008728 <_Balloc>
 80089b6:	4602      	mov	r2, r0
 80089b8:	b928      	cbnz	r0, 80089c6 <__i2b+0x1a>
 80089ba:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <__i2b+0x24>)
 80089bc:	4805      	ldr	r0, [pc, #20]	; (80089d4 <__i2b+0x28>)
 80089be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089c2:	f000 fff7 	bl	80099b4 <__assert_func>
 80089c6:	2301      	movs	r3, #1
 80089c8:	6144      	str	r4, [r0, #20]
 80089ca:	6103      	str	r3, [r0, #16]
 80089cc:	bd10      	pop	{r4, pc}
 80089ce:	bf00      	nop
 80089d0:	0800a2d0 	.word	0x0800a2d0
 80089d4:	0800a3c0 	.word	0x0800a3c0

080089d8 <__multiply>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	4691      	mov	r9, r2
 80089de:	690a      	ldr	r2, [r1, #16]
 80089e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	bfb8      	it	lt
 80089e8:	460b      	movlt	r3, r1
 80089ea:	460c      	mov	r4, r1
 80089ec:	bfbc      	itt	lt
 80089ee:	464c      	movlt	r4, r9
 80089f0:	4699      	movlt	r9, r3
 80089f2:	6927      	ldr	r7, [r4, #16]
 80089f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089f8:	68a3      	ldr	r3, [r4, #8]
 80089fa:	6861      	ldr	r1, [r4, #4]
 80089fc:	eb07 060a 	add.w	r6, r7, sl
 8008a00:	42b3      	cmp	r3, r6
 8008a02:	b085      	sub	sp, #20
 8008a04:	bfb8      	it	lt
 8008a06:	3101      	addlt	r1, #1
 8008a08:	f7ff fe8e 	bl	8008728 <_Balloc>
 8008a0c:	b930      	cbnz	r0, 8008a1c <__multiply+0x44>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	4b44      	ldr	r3, [pc, #272]	; (8008b24 <__multiply+0x14c>)
 8008a12:	4845      	ldr	r0, [pc, #276]	; (8008b28 <__multiply+0x150>)
 8008a14:	f240 115d 	movw	r1, #349	; 0x15d
 8008a18:	f000 ffcc 	bl	80099b4 <__assert_func>
 8008a1c:	f100 0514 	add.w	r5, r0, #20
 8008a20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a24:	462b      	mov	r3, r5
 8008a26:	2200      	movs	r2, #0
 8008a28:	4543      	cmp	r3, r8
 8008a2a:	d321      	bcc.n	8008a70 <__multiply+0x98>
 8008a2c:	f104 0314 	add.w	r3, r4, #20
 8008a30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a34:	f109 0314 	add.w	r3, r9, #20
 8008a38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a3c:	9202      	str	r2, [sp, #8]
 8008a3e:	1b3a      	subs	r2, r7, r4
 8008a40:	3a15      	subs	r2, #21
 8008a42:	f022 0203 	bic.w	r2, r2, #3
 8008a46:	3204      	adds	r2, #4
 8008a48:	f104 0115 	add.w	r1, r4, #21
 8008a4c:	428f      	cmp	r7, r1
 8008a4e:	bf38      	it	cc
 8008a50:	2204      	movcc	r2, #4
 8008a52:	9201      	str	r2, [sp, #4]
 8008a54:	9a02      	ldr	r2, [sp, #8]
 8008a56:	9303      	str	r3, [sp, #12]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d80c      	bhi.n	8008a76 <__multiply+0x9e>
 8008a5c:	2e00      	cmp	r6, #0
 8008a5e:	dd03      	ble.n	8008a68 <__multiply+0x90>
 8008a60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d05a      	beq.n	8008b1e <__multiply+0x146>
 8008a68:	6106      	str	r6, [r0, #16]
 8008a6a:	b005      	add	sp, #20
 8008a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a70:	f843 2b04 	str.w	r2, [r3], #4
 8008a74:	e7d8      	b.n	8008a28 <__multiply+0x50>
 8008a76:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a7a:	f1ba 0f00 	cmp.w	sl, #0
 8008a7e:	d024      	beq.n	8008aca <__multiply+0xf2>
 8008a80:	f104 0e14 	add.w	lr, r4, #20
 8008a84:	46a9      	mov	r9, r5
 8008a86:	f04f 0c00 	mov.w	ip, #0
 8008a8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a8e:	f8d9 1000 	ldr.w	r1, [r9]
 8008a92:	fa1f fb82 	uxth.w	fp, r2
 8008a96:	b289      	uxth	r1, r1
 8008a98:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008aa0:	f8d9 2000 	ldr.w	r2, [r9]
 8008aa4:	4461      	add	r1, ip
 8008aa6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008aaa:	fb0a c20b 	mla	r2, sl, fp, ip
 8008aae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ab2:	b289      	uxth	r1, r1
 8008ab4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ab8:	4577      	cmp	r7, lr
 8008aba:	f849 1b04 	str.w	r1, [r9], #4
 8008abe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ac2:	d8e2      	bhi.n	8008a8a <__multiply+0xb2>
 8008ac4:	9a01      	ldr	r2, [sp, #4]
 8008ac6:	f845 c002 	str.w	ip, [r5, r2]
 8008aca:	9a03      	ldr	r2, [sp, #12]
 8008acc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	f1b9 0f00 	cmp.w	r9, #0
 8008ad6:	d020      	beq.n	8008b1a <__multiply+0x142>
 8008ad8:	6829      	ldr	r1, [r5, #0]
 8008ada:	f104 0c14 	add.w	ip, r4, #20
 8008ade:	46ae      	mov	lr, r5
 8008ae0:	f04f 0a00 	mov.w	sl, #0
 8008ae4:	f8bc b000 	ldrh.w	fp, [ip]
 8008ae8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008aec:	fb09 220b 	mla	r2, r9, fp, r2
 8008af0:	4492      	add	sl, r2
 8008af2:	b289      	uxth	r1, r1
 8008af4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008af8:	f84e 1b04 	str.w	r1, [lr], #4
 8008afc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b00:	f8be 1000 	ldrh.w	r1, [lr]
 8008b04:	0c12      	lsrs	r2, r2, #16
 8008b06:	fb09 1102 	mla	r1, r9, r2, r1
 8008b0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b0e:	4567      	cmp	r7, ip
 8008b10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b14:	d8e6      	bhi.n	8008ae4 <__multiply+0x10c>
 8008b16:	9a01      	ldr	r2, [sp, #4]
 8008b18:	50a9      	str	r1, [r5, r2]
 8008b1a:	3504      	adds	r5, #4
 8008b1c:	e79a      	b.n	8008a54 <__multiply+0x7c>
 8008b1e:	3e01      	subs	r6, #1
 8008b20:	e79c      	b.n	8008a5c <__multiply+0x84>
 8008b22:	bf00      	nop
 8008b24:	0800a2d0 	.word	0x0800a2d0
 8008b28:	0800a3c0 	.word	0x0800a3c0

08008b2c <__pow5mult>:
 8008b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b30:	4615      	mov	r5, r2
 8008b32:	f012 0203 	ands.w	r2, r2, #3
 8008b36:	4606      	mov	r6, r0
 8008b38:	460f      	mov	r7, r1
 8008b3a:	d007      	beq.n	8008b4c <__pow5mult+0x20>
 8008b3c:	4c25      	ldr	r4, [pc, #148]	; (8008bd4 <__pow5mult+0xa8>)
 8008b3e:	3a01      	subs	r2, #1
 8008b40:	2300      	movs	r3, #0
 8008b42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b46:	f7ff fe51 	bl	80087ec <__multadd>
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	10ad      	asrs	r5, r5, #2
 8008b4e:	d03d      	beq.n	8008bcc <__pow5mult+0xa0>
 8008b50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b52:	b97c      	cbnz	r4, 8008b74 <__pow5mult+0x48>
 8008b54:	2010      	movs	r0, #16
 8008b56:	f7ff fdbf 	bl	80086d8 <malloc>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	6270      	str	r0, [r6, #36]	; 0x24
 8008b5e:	b928      	cbnz	r0, 8008b6c <__pow5mult+0x40>
 8008b60:	4b1d      	ldr	r3, [pc, #116]	; (8008bd8 <__pow5mult+0xac>)
 8008b62:	481e      	ldr	r0, [pc, #120]	; (8008bdc <__pow5mult+0xb0>)
 8008b64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b68:	f000 ff24 	bl	80099b4 <__assert_func>
 8008b6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b70:	6004      	str	r4, [r0, #0]
 8008b72:	60c4      	str	r4, [r0, #12]
 8008b74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b7c:	b94c      	cbnz	r4, 8008b92 <__pow5mult+0x66>
 8008b7e:	f240 2171 	movw	r1, #625	; 0x271
 8008b82:	4630      	mov	r0, r6
 8008b84:	f7ff ff12 	bl	80089ac <__i2b>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b8e:	4604      	mov	r4, r0
 8008b90:	6003      	str	r3, [r0, #0]
 8008b92:	f04f 0900 	mov.w	r9, #0
 8008b96:	07eb      	lsls	r3, r5, #31
 8008b98:	d50a      	bpl.n	8008bb0 <__pow5mult+0x84>
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	4622      	mov	r2, r4
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f7ff ff1a 	bl	80089d8 <__multiply>
 8008ba4:	4639      	mov	r1, r7
 8008ba6:	4680      	mov	r8, r0
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7ff fdfd 	bl	80087a8 <_Bfree>
 8008bae:	4647      	mov	r7, r8
 8008bb0:	106d      	asrs	r5, r5, #1
 8008bb2:	d00b      	beq.n	8008bcc <__pow5mult+0xa0>
 8008bb4:	6820      	ldr	r0, [r4, #0]
 8008bb6:	b938      	cbnz	r0, 8008bc8 <__pow5mult+0x9c>
 8008bb8:	4622      	mov	r2, r4
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f7ff ff0b 	bl	80089d8 <__multiply>
 8008bc2:	6020      	str	r0, [r4, #0]
 8008bc4:	f8c0 9000 	str.w	r9, [r0]
 8008bc8:	4604      	mov	r4, r0
 8008bca:	e7e4      	b.n	8008b96 <__pow5mult+0x6a>
 8008bcc:	4638      	mov	r0, r7
 8008bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd2:	bf00      	nop
 8008bd4:	0800a510 	.word	0x0800a510
 8008bd8:	0800a25e 	.word	0x0800a25e
 8008bdc:	0800a3c0 	.word	0x0800a3c0

08008be0 <__lshift>:
 8008be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be4:	460c      	mov	r4, r1
 8008be6:	6849      	ldr	r1, [r1, #4]
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bee:	68a3      	ldr	r3, [r4, #8]
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	4691      	mov	r9, r2
 8008bf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bf8:	f108 0601 	add.w	r6, r8, #1
 8008bfc:	42b3      	cmp	r3, r6
 8008bfe:	db0b      	blt.n	8008c18 <__lshift+0x38>
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff fd91 	bl	8008728 <_Balloc>
 8008c06:	4605      	mov	r5, r0
 8008c08:	b948      	cbnz	r0, 8008c1e <__lshift+0x3e>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	4b2a      	ldr	r3, [pc, #168]	; (8008cb8 <__lshift+0xd8>)
 8008c0e:	482b      	ldr	r0, [pc, #172]	; (8008cbc <__lshift+0xdc>)
 8008c10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c14:	f000 fece 	bl	80099b4 <__assert_func>
 8008c18:	3101      	adds	r1, #1
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	e7ee      	b.n	8008bfc <__lshift+0x1c>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f100 0114 	add.w	r1, r0, #20
 8008c24:	f100 0210 	add.w	r2, r0, #16
 8008c28:	4618      	mov	r0, r3
 8008c2a:	4553      	cmp	r3, sl
 8008c2c:	db37      	blt.n	8008c9e <__lshift+0xbe>
 8008c2e:	6920      	ldr	r0, [r4, #16]
 8008c30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c34:	f104 0314 	add.w	r3, r4, #20
 8008c38:	f019 091f 	ands.w	r9, r9, #31
 8008c3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c44:	d02f      	beq.n	8008ca6 <__lshift+0xc6>
 8008c46:	f1c9 0e20 	rsb	lr, r9, #32
 8008c4a:	468a      	mov	sl, r1
 8008c4c:	f04f 0c00 	mov.w	ip, #0
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	fa02 f209 	lsl.w	r2, r2, r9
 8008c56:	ea42 020c 	orr.w	r2, r2, ip
 8008c5a:	f84a 2b04 	str.w	r2, [sl], #4
 8008c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c62:	4298      	cmp	r0, r3
 8008c64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008c68:	d8f2      	bhi.n	8008c50 <__lshift+0x70>
 8008c6a:	1b03      	subs	r3, r0, r4
 8008c6c:	3b15      	subs	r3, #21
 8008c6e:	f023 0303 	bic.w	r3, r3, #3
 8008c72:	3304      	adds	r3, #4
 8008c74:	f104 0215 	add.w	r2, r4, #21
 8008c78:	4290      	cmp	r0, r2
 8008c7a:	bf38      	it	cc
 8008c7c:	2304      	movcc	r3, #4
 8008c7e:	f841 c003 	str.w	ip, [r1, r3]
 8008c82:	f1bc 0f00 	cmp.w	ip, #0
 8008c86:	d001      	beq.n	8008c8c <__lshift+0xac>
 8008c88:	f108 0602 	add.w	r6, r8, #2
 8008c8c:	3e01      	subs	r6, #1
 8008c8e:	4638      	mov	r0, r7
 8008c90:	612e      	str	r6, [r5, #16]
 8008c92:	4621      	mov	r1, r4
 8008c94:	f7ff fd88 	bl	80087a8 <_Bfree>
 8008c98:	4628      	mov	r0, r5
 8008c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	e7c1      	b.n	8008c2a <__lshift+0x4a>
 8008ca6:	3904      	subs	r1, #4
 8008ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cac:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cb0:	4298      	cmp	r0, r3
 8008cb2:	d8f9      	bhi.n	8008ca8 <__lshift+0xc8>
 8008cb4:	e7ea      	b.n	8008c8c <__lshift+0xac>
 8008cb6:	bf00      	nop
 8008cb8:	0800a2d0 	.word	0x0800a2d0
 8008cbc:	0800a3c0 	.word	0x0800a3c0

08008cc0 <__mcmp>:
 8008cc0:	b530      	push	{r4, r5, lr}
 8008cc2:	6902      	ldr	r2, [r0, #16]
 8008cc4:	690c      	ldr	r4, [r1, #16]
 8008cc6:	1b12      	subs	r2, r2, r4
 8008cc8:	d10e      	bne.n	8008ce8 <__mcmp+0x28>
 8008cca:	f100 0314 	add.w	r3, r0, #20
 8008cce:	3114      	adds	r1, #20
 8008cd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ce0:	42a5      	cmp	r5, r4
 8008ce2:	d003      	beq.n	8008cec <__mcmp+0x2c>
 8008ce4:	d305      	bcc.n	8008cf2 <__mcmp+0x32>
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	4610      	mov	r0, r2
 8008cea:	bd30      	pop	{r4, r5, pc}
 8008cec:	4283      	cmp	r3, r0
 8008cee:	d3f3      	bcc.n	8008cd8 <__mcmp+0x18>
 8008cf0:	e7fa      	b.n	8008ce8 <__mcmp+0x28>
 8008cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf6:	e7f7      	b.n	8008ce8 <__mcmp+0x28>

08008cf8 <__mdiff>:
 8008cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	4606      	mov	r6, r0
 8008d00:	4611      	mov	r1, r2
 8008d02:	4620      	mov	r0, r4
 8008d04:	4690      	mov	r8, r2
 8008d06:	f7ff ffdb 	bl	8008cc0 <__mcmp>
 8008d0a:	1e05      	subs	r5, r0, #0
 8008d0c:	d110      	bne.n	8008d30 <__mdiff+0x38>
 8008d0e:	4629      	mov	r1, r5
 8008d10:	4630      	mov	r0, r6
 8008d12:	f7ff fd09 	bl	8008728 <_Balloc>
 8008d16:	b930      	cbnz	r0, 8008d26 <__mdiff+0x2e>
 8008d18:	4b3a      	ldr	r3, [pc, #232]	; (8008e04 <__mdiff+0x10c>)
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	f240 2132 	movw	r1, #562	; 0x232
 8008d20:	4839      	ldr	r0, [pc, #228]	; (8008e08 <__mdiff+0x110>)
 8008d22:	f000 fe47 	bl	80099b4 <__assert_func>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d30:	bfa4      	itt	ge
 8008d32:	4643      	movge	r3, r8
 8008d34:	46a0      	movge	r8, r4
 8008d36:	4630      	mov	r0, r6
 8008d38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d3c:	bfa6      	itte	ge
 8008d3e:	461c      	movge	r4, r3
 8008d40:	2500      	movge	r5, #0
 8008d42:	2501      	movlt	r5, #1
 8008d44:	f7ff fcf0 	bl	8008728 <_Balloc>
 8008d48:	b920      	cbnz	r0, 8008d54 <__mdiff+0x5c>
 8008d4a:	4b2e      	ldr	r3, [pc, #184]	; (8008e04 <__mdiff+0x10c>)
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d52:	e7e5      	b.n	8008d20 <__mdiff+0x28>
 8008d54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d58:	6926      	ldr	r6, [r4, #16]
 8008d5a:	60c5      	str	r5, [r0, #12]
 8008d5c:	f104 0914 	add.w	r9, r4, #20
 8008d60:	f108 0514 	add.w	r5, r8, #20
 8008d64:	f100 0e14 	add.w	lr, r0, #20
 8008d68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d70:	f108 0210 	add.w	r2, r8, #16
 8008d74:	46f2      	mov	sl, lr
 8008d76:	2100      	movs	r1, #0
 8008d78:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d80:	fa1f f883 	uxth.w	r8, r3
 8008d84:	fa11 f18b 	uxtah	r1, r1, fp
 8008d88:	0c1b      	lsrs	r3, r3, #16
 8008d8a:	eba1 0808 	sub.w	r8, r1, r8
 8008d8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d96:	fa1f f888 	uxth.w	r8, r8
 8008d9a:	1419      	asrs	r1, r3, #16
 8008d9c:	454e      	cmp	r6, r9
 8008d9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008da2:	f84a 3b04 	str.w	r3, [sl], #4
 8008da6:	d8e7      	bhi.n	8008d78 <__mdiff+0x80>
 8008da8:	1b33      	subs	r3, r6, r4
 8008daa:	3b15      	subs	r3, #21
 8008dac:	f023 0303 	bic.w	r3, r3, #3
 8008db0:	3304      	adds	r3, #4
 8008db2:	3415      	adds	r4, #21
 8008db4:	42a6      	cmp	r6, r4
 8008db6:	bf38      	it	cc
 8008db8:	2304      	movcc	r3, #4
 8008dba:	441d      	add	r5, r3
 8008dbc:	4473      	add	r3, lr
 8008dbe:	469e      	mov	lr, r3
 8008dc0:	462e      	mov	r6, r5
 8008dc2:	4566      	cmp	r6, ip
 8008dc4:	d30e      	bcc.n	8008de4 <__mdiff+0xec>
 8008dc6:	f10c 0203 	add.w	r2, ip, #3
 8008dca:	1b52      	subs	r2, r2, r5
 8008dcc:	f022 0203 	bic.w	r2, r2, #3
 8008dd0:	3d03      	subs	r5, #3
 8008dd2:	45ac      	cmp	ip, r5
 8008dd4:	bf38      	it	cc
 8008dd6:	2200      	movcc	r2, #0
 8008dd8:	441a      	add	r2, r3
 8008dda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008dde:	b17b      	cbz	r3, 8008e00 <__mdiff+0x108>
 8008de0:	6107      	str	r7, [r0, #16]
 8008de2:	e7a3      	b.n	8008d2c <__mdiff+0x34>
 8008de4:	f856 8b04 	ldr.w	r8, [r6], #4
 8008de8:	fa11 f288 	uxtah	r2, r1, r8
 8008dec:	1414      	asrs	r4, r2, #16
 8008dee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008df2:	b292      	uxth	r2, r2
 8008df4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008df8:	f84e 2b04 	str.w	r2, [lr], #4
 8008dfc:	1421      	asrs	r1, r4, #16
 8008dfe:	e7e0      	b.n	8008dc2 <__mdiff+0xca>
 8008e00:	3f01      	subs	r7, #1
 8008e02:	e7ea      	b.n	8008dda <__mdiff+0xe2>
 8008e04:	0800a2d0 	.word	0x0800a2d0
 8008e08:	0800a3c0 	.word	0x0800a3c0

08008e0c <__ulp>:
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	ed8d 0b00 	vstr	d0, [sp]
 8008e12:	9b01      	ldr	r3, [sp, #4]
 8008e14:	4912      	ldr	r1, [pc, #72]	; (8008e60 <__ulp+0x54>)
 8008e16:	4019      	ands	r1, r3
 8008e18:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008e1c:	2900      	cmp	r1, #0
 8008e1e:	dd05      	ble.n	8008e2c <__ulp+0x20>
 8008e20:	2200      	movs	r2, #0
 8008e22:	460b      	mov	r3, r1
 8008e24:	ec43 2b10 	vmov	d0, r2, r3
 8008e28:	b002      	add	sp, #8
 8008e2a:	4770      	bx	lr
 8008e2c:	4249      	negs	r1, r1
 8008e2e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008e32:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008e36:	f04f 0200 	mov.w	r2, #0
 8008e3a:	f04f 0300 	mov.w	r3, #0
 8008e3e:	da04      	bge.n	8008e4a <__ulp+0x3e>
 8008e40:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008e44:	fa41 f300 	asr.w	r3, r1, r0
 8008e48:	e7ec      	b.n	8008e24 <__ulp+0x18>
 8008e4a:	f1a0 0114 	sub.w	r1, r0, #20
 8008e4e:	291e      	cmp	r1, #30
 8008e50:	bfda      	itte	le
 8008e52:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008e56:	fa20 f101 	lsrle.w	r1, r0, r1
 8008e5a:	2101      	movgt	r1, #1
 8008e5c:	460a      	mov	r2, r1
 8008e5e:	e7e1      	b.n	8008e24 <__ulp+0x18>
 8008e60:	7ff00000 	.word	0x7ff00000

08008e64 <__b2d>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	6905      	ldr	r5, [r0, #16]
 8008e68:	f100 0714 	add.w	r7, r0, #20
 8008e6c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008e70:	1f2e      	subs	r6, r5, #4
 8008e72:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008e76:	4620      	mov	r0, r4
 8008e78:	f7ff fd48 	bl	800890c <__hi0bits>
 8008e7c:	f1c0 0320 	rsb	r3, r0, #32
 8008e80:	280a      	cmp	r0, #10
 8008e82:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008f00 <__b2d+0x9c>
 8008e86:	600b      	str	r3, [r1, #0]
 8008e88:	dc14      	bgt.n	8008eb4 <__b2d+0x50>
 8008e8a:	f1c0 0e0b 	rsb	lr, r0, #11
 8008e8e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008e92:	42b7      	cmp	r7, r6
 8008e94:	ea41 030c 	orr.w	r3, r1, ip
 8008e98:	bf34      	ite	cc
 8008e9a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008e9e:	2100      	movcs	r1, #0
 8008ea0:	3015      	adds	r0, #21
 8008ea2:	fa04 f000 	lsl.w	r0, r4, r0
 8008ea6:	fa21 f10e 	lsr.w	r1, r1, lr
 8008eaa:	ea40 0201 	orr.w	r2, r0, r1
 8008eae:	ec43 2b10 	vmov	d0, r2, r3
 8008eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb4:	42b7      	cmp	r7, r6
 8008eb6:	bf3a      	itte	cc
 8008eb8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008ebc:	f1a5 0608 	subcc.w	r6, r5, #8
 8008ec0:	2100      	movcs	r1, #0
 8008ec2:	380b      	subs	r0, #11
 8008ec4:	d017      	beq.n	8008ef6 <__b2d+0x92>
 8008ec6:	f1c0 0c20 	rsb	ip, r0, #32
 8008eca:	fa04 f500 	lsl.w	r5, r4, r0
 8008ece:	42be      	cmp	r6, r7
 8008ed0:	fa21 f40c 	lsr.w	r4, r1, ip
 8008ed4:	ea45 0504 	orr.w	r5, r5, r4
 8008ed8:	bf8c      	ite	hi
 8008eda:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008ede:	2400      	movls	r4, #0
 8008ee0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008ee4:	fa01 f000 	lsl.w	r0, r1, r0
 8008ee8:	fa24 f40c 	lsr.w	r4, r4, ip
 8008eec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ef0:	ea40 0204 	orr.w	r2, r0, r4
 8008ef4:	e7db      	b.n	8008eae <__b2d+0x4a>
 8008ef6:	ea44 030c 	orr.w	r3, r4, ip
 8008efa:	460a      	mov	r2, r1
 8008efc:	e7d7      	b.n	8008eae <__b2d+0x4a>
 8008efe:	bf00      	nop
 8008f00:	3ff00000 	.word	0x3ff00000

08008f04 <__d2b>:
 8008f04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f08:	4689      	mov	r9, r1
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	ec57 6b10 	vmov	r6, r7, d0
 8008f10:	4690      	mov	r8, r2
 8008f12:	f7ff fc09 	bl	8008728 <_Balloc>
 8008f16:	4604      	mov	r4, r0
 8008f18:	b930      	cbnz	r0, 8008f28 <__d2b+0x24>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	4b25      	ldr	r3, [pc, #148]	; (8008fb4 <__d2b+0xb0>)
 8008f1e:	4826      	ldr	r0, [pc, #152]	; (8008fb8 <__d2b+0xb4>)
 8008f20:	f240 310a 	movw	r1, #778	; 0x30a
 8008f24:	f000 fd46 	bl	80099b4 <__assert_func>
 8008f28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f30:	bb35      	cbnz	r5, 8008f80 <__d2b+0x7c>
 8008f32:	2e00      	cmp	r6, #0
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	d028      	beq.n	8008f8a <__d2b+0x86>
 8008f38:	4668      	mov	r0, sp
 8008f3a:	9600      	str	r6, [sp, #0]
 8008f3c:	f7ff fd06 	bl	800894c <__lo0bits>
 8008f40:	9900      	ldr	r1, [sp, #0]
 8008f42:	b300      	cbz	r0, 8008f86 <__d2b+0x82>
 8008f44:	9a01      	ldr	r2, [sp, #4]
 8008f46:	f1c0 0320 	rsb	r3, r0, #32
 8008f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4e:	430b      	orrs	r3, r1
 8008f50:	40c2      	lsrs	r2, r0
 8008f52:	6163      	str	r3, [r4, #20]
 8008f54:	9201      	str	r2, [sp, #4]
 8008f56:	9b01      	ldr	r3, [sp, #4]
 8008f58:	61a3      	str	r3, [r4, #24]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bf14      	ite	ne
 8008f5e:	2202      	movne	r2, #2
 8008f60:	2201      	moveq	r2, #1
 8008f62:	6122      	str	r2, [r4, #16]
 8008f64:	b1d5      	cbz	r5, 8008f9c <__d2b+0x98>
 8008f66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f6a:	4405      	add	r5, r0
 8008f6c:	f8c9 5000 	str.w	r5, [r9]
 8008f70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f74:	f8c8 0000 	str.w	r0, [r8]
 8008f78:	4620      	mov	r0, r4
 8008f7a:	b003      	add	sp, #12
 8008f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f84:	e7d5      	b.n	8008f32 <__d2b+0x2e>
 8008f86:	6161      	str	r1, [r4, #20]
 8008f88:	e7e5      	b.n	8008f56 <__d2b+0x52>
 8008f8a:	a801      	add	r0, sp, #4
 8008f8c:	f7ff fcde 	bl	800894c <__lo0bits>
 8008f90:	9b01      	ldr	r3, [sp, #4]
 8008f92:	6163      	str	r3, [r4, #20]
 8008f94:	2201      	movs	r2, #1
 8008f96:	6122      	str	r2, [r4, #16]
 8008f98:	3020      	adds	r0, #32
 8008f9a:	e7e3      	b.n	8008f64 <__d2b+0x60>
 8008f9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fa0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fa4:	f8c9 0000 	str.w	r0, [r9]
 8008fa8:	6918      	ldr	r0, [r3, #16]
 8008faa:	f7ff fcaf 	bl	800890c <__hi0bits>
 8008fae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fb2:	e7df      	b.n	8008f74 <__d2b+0x70>
 8008fb4:	0800a2d0 	.word	0x0800a2d0
 8008fb8:	0800a3c0 	.word	0x0800a3c0

08008fbc <__ratio>:
 8008fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc0:	4688      	mov	r8, r1
 8008fc2:	4669      	mov	r1, sp
 8008fc4:	4681      	mov	r9, r0
 8008fc6:	f7ff ff4d 	bl	8008e64 <__b2d>
 8008fca:	a901      	add	r1, sp, #4
 8008fcc:	4640      	mov	r0, r8
 8008fce:	ec55 4b10 	vmov	r4, r5, d0
 8008fd2:	f7ff ff47 	bl	8008e64 <__b2d>
 8008fd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fda:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008fde:	eba3 0c02 	sub.w	ip, r3, r2
 8008fe2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008fe6:	1a9b      	subs	r3, r3, r2
 8008fe8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008fec:	ec51 0b10 	vmov	r0, r1, d0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	bfd6      	itet	le
 8008ff4:	460a      	movle	r2, r1
 8008ff6:	462a      	movgt	r2, r5
 8008ff8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ffc:	468b      	mov	fp, r1
 8008ffe:	462f      	mov	r7, r5
 8009000:	bfd4      	ite	le
 8009002:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009006:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800900a:	4620      	mov	r0, r4
 800900c:	ee10 2a10 	vmov	r2, s0
 8009010:	465b      	mov	r3, fp
 8009012:	4639      	mov	r1, r7
 8009014:	f7f7 fc42 	bl	800089c <__aeabi_ddiv>
 8009018:	ec41 0b10 	vmov	d0, r0, r1
 800901c:	b003      	add	sp, #12
 800901e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009022 <__copybits>:
 8009022:	3901      	subs	r1, #1
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	1149      	asrs	r1, r1, #5
 8009028:	6914      	ldr	r4, [r2, #16]
 800902a:	3101      	adds	r1, #1
 800902c:	f102 0314 	add.w	r3, r2, #20
 8009030:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009034:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009038:	1f05      	subs	r5, r0, #4
 800903a:	42a3      	cmp	r3, r4
 800903c:	d30c      	bcc.n	8009058 <__copybits+0x36>
 800903e:	1aa3      	subs	r3, r4, r2
 8009040:	3b11      	subs	r3, #17
 8009042:	f023 0303 	bic.w	r3, r3, #3
 8009046:	3211      	adds	r2, #17
 8009048:	42a2      	cmp	r2, r4
 800904a:	bf88      	it	hi
 800904c:	2300      	movhi	r3, #0
 800904e:	4418      	add	r0, r3
 8009050:	2300      	movs	r3, #0
 8009052:	4288      	cmp	r0, r1
 8009054:	d305      	bcc.n	8009062 <__copybits+0x40>
 8009056:	bd70      	pop	{r4, r5, r6, pc}
 8009058:	f853 6b04 	ldr.w	r6, [r3], #4
 800905c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009060:	e7eb      	b.n	800903a <__copybits+0x18>
 8009062:	f840 3b04 	str.w	r3, [r0], #4
 8009066:	e7f4      	b.n	8009052 <__copybits+0x30>

08009068 <__any_on>:
 8009068:	f100 0214 	add.w	r2, r0, #20
 800906c:	6900      	ldr	r0, [r0, #16]
 800906e:	114b      	asrs	r3, r1, #5
 8009070:	4298      	cmp	r0, r3
 8009072:	b510      	push	{r4, lr}
 8009074:	db11      	blt.n	800909a <__any_on+0x32>
 8009076:	dd0a      	ble.n	800908e <__any_on+0x26>
 8009078:	f011 011f 	ands.w	r1, r1, #31
 800907c:	d007      	beq.n	800908e <__any_on+0x26>
 800907e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009082:	fa24 f001 	lsr.w	r0, r4, r1
 8009086:	fa00 f101 	lsl.w	r1, r0, r1
 800908a:	428c      	cmp	r4, r1
 800908c:	d10b      	bne.n	80090a6 <__any_on+0x3e>
 800908e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009092:	4293      	cmp	r3, r2
 8009094:	d803      	bhi.n	800909e <__any_on+0x36>
 8009096:	2000      	movs	r0, #0
 8009098:	bd10      	pop	{r4, pc}
 800909a:	4603      	mov	r3, r0
 800909c:	e7f7      	b.n	800908e <__any_on+0x26>
 800909e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090a2:	2900      	cmp	r1, #0
 80090a4:	d0f5      	beq.n	8009092 <__any_on+0x2a>
 80090a6:	2001      	movs	r0, #1
 80090a8:	e7f6      	b.n	8009098 <__any_on+0x30>

080090aa <_calloc_r>:
 80090aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090ac:	fba1 2402 	umull	r2, r4, r1, r2
 80090b0:	b94c      	cbnz	r4, 80090c6 <_calloc_r+0x1c>
 80090b2:	4611      	mov	r1, r2
 80090b4:	9201      	str	r2, [sp, #4]
 80090b6:	f000 f87b 	bl	80091b0 <_malloc_r>
 80090ba:	9a01      	ldr	r2, [sp, #4]
 80090bc:	4605      	mov	r5, r0
 80090be:	b930      	cbnz	r0, 80090ce <_calloc_r+0x24>
 80090c0:	4628      	mov	r0, r5
 80090c2:	b003      	add	sp, #12
 80090c4:	bd30      	pop	{r4, r5, pc}
 80090c6:	220c      	movs	r2, #12
 80090c8:	6002      	str	r2, [r0, #0]
 80090ca:	2500      	movs	r5, #0
 80090cc:	e7f8      	b.n	80090c0 <_calloc_r+0x16>
 80090ce:	4621      	mov	r1, r4
 80090d0:	f7fc f83e 	bl	8005150 <memset>
 80090d4:	e7f4      	b.n	80090c0 <_calloc_r+0x16>
	...

080090d8 <_free_r>:
 80090d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090da:	2900      	cmp	r1, #0
 80090dc:	d044      	beq.n	8009168 <_free_r+0x90>
 80090de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090e2:	9001      	str	r0, [sp, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f1a1 0404 	sub.w	r4, r1, #4
 80090ea:	bfb8      	it	lt
 80090ec:	18e4      	addlt	r4, r4, r3
 80090ee:	f000 fcef 	bl	8009ad0 <__malloc_lock>
 80090f2:	4a1e      	ldr	r2, [pc, #120]	; (800916c <_free_r+0x94>)
 80090f4:	9801      	ldr	r0, [sp, #4]
 80090f6:	6813      	ldr	r3, [r2, #0]
 80090f8:	b933      	cbnz	r3, 8009108 <_free_r+0x30>
 80090fa:	6063      	str	r3, [r4, #4]
 80090fc:	6014      	str	r4, [r2, #0]
 80090fe:	b003      	add	sp, #12
 8009100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009104:	f000 bcea 	b.w	8009adc <__malloc_unlock>
 8009108:	42a3      	cmp	r3, r4
 800910a:	d908      	bls.n	800911e <_free_r+0x46>
 800910c:	6825      	ldr	r5, [r4, #0]
 800910e:	1961      	adds	r1, r4, r5
 8009110:	428b      	cmp	r3, r1
 8009112:	bf01      	itttt	eq
 8009114:	6819      	ldreq	r1, [r3, #0]
 8009116:	685b      	ldreq	r3, [r3, #4]
 8009118:	1949      	addeq	r1, r1, r5
 800911a:	6021      	streq	r1, [r4, #0]
 800911c:	e7ed      	b.n	80090fa <_free_r+0x22>
 800911e:	461a      	mov	r2, r3
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	b10b      	cbz	r3, 8009128 <_free_r+0x50>
 8009124:	42a3      	cmp	r3, r4
 8009126:	d9fa      	bls.n	800911e <_free_r+0x46>
 8009128:	6811      	ldr	r1, [r2, #0]
 800912a:	1855      	adds	r5, r2, r1
 800912c:	42a5      	cmp	r5, r4
 800912e:	d10b      	bne.n	8009148 <_free_r+0x70>
 8009130:	6824      	ldr	r4, [r4, #0]
 8009132:	4421      	add	r1, r4
 8009134:	1854      	adds	r4, r2, r1
 8009136:	42a3      	cmp	r3, r4
 8009138:	6011      	str	r1, [r2, #0]
 800913a:	d1e0      	bne.n	80090fe <_free_r+0x26>
 800913c:	681c      	ldr	r4, [r3, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	6053      	str	r3, [r2, #4]
 8009142:	4421      	add	r1, r4
 8009144:	6011      	str	r1, [r2, #0]
 8009146:	e7da      	b.n	80090fe <_free_r+0x26>
 8009148:	d902      	bls.n	8009150 <_free_r+0x78>
 800914a:	230c      	movs	r3, #12
 800914c:	6003      	str	r3, [r0, #0]
 800914e:	e7d6      	b.n	80090fe <_free_r+0x26>
 8009150:	6825      	ldr	r5, [r4, #0]
 8009152:	1961      	adds	r1, r4, r5
 8009154:	428b      	cmp	r3, r1
 8009156:	bf04      	itt	eq
 8009158:	6819      	ldreq	r1, [r3, #0]
 800915a:	685b      	ldreq	r3, [r3, #4]
 800915c:	6063      	str	r3, [r4, #4]
 800915e:	bf04      	itt	eq
 8009160:	1949      	addeq	r1, r1, r5
 8009162:	6021      	streq	r1, [r4, #0]
 8009164:	6054      	str	r4, [r2, #4]
 8009166:	e7ca      	b.n	80090fe <_free_r+0x26>
 8009168:	b003      	add	sp, #12
 800916a:	bd30      	pop	{r4, r5, pc}
 800916c:	20000304 	.word	0x20000304

08009170 <sbrk_aligned>:
 8009170:	b570      	push	{r4, r5, r6, lr}
 8009172:	4e0e      	ldr	r6, [pc, #56]	; (80091ac <sbrk_aligned+0x3c>)
 8009174:	460c      	mov	r4, r1
 8009176:	6831      	ldr	r1, [r6, #0]
 8009178:	4605      	mov	r5, r0
 800917a:	b911      	cbnz	r1, 8009182 <sbrk_aligned+0x12>
 800917c:	f000 fb94 	bl	80098a8 <_sbrk_r>
 8009180:	6030      	str	r0, [r6, #0]
 8009182:	4621      	mov	r1, r4
 8009184:	4628      	mov	r0, r5
 8009186:	f000 fb8f 	bl	80098a8 <_sbrk_r>
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	d00a      	beq.n	80091a4 <sbrk_aligned+0x34>
 800918e:	1cc4      	adds	r4, r0, #3
 8009190:	f024 0403 	bic.w	r4, r4, #3
 8009194:	42a0      	cmp	r0, r4
 8009196:	d007      	beq.n	80091a8 <sbrk_aligned+0x38>
 8009198:	1a21      	subs	r1, r4, r0
 800919a:	4628      	mov	r0, r5
 800919c:	f000 fb84 	bl	80098a8 <_sbrk_r>
 80091a0:	3001      	adds	r0, #1
 80091a2:	d101      	bne.n	80091a8 <sbrk_aligned+0x38>
 80091a4:	f04f 34ff 	mov.w	r4, #4294967295
 80091a8:	4620      	mov	r0, r4
 80091aa:	bd70      	pop	{r4, r5, r6, pc}
 80091ac:	20000308 	.word	0x20000308

080091b0 <_malloc_r>:
 80091b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b4:	1ccd      	adds	r5, r1, #3
 80091b6:	f025 0503 	bic.w	r5, r5, #3
 80091ba:	3508      	adds	r5, #8
 80091bc:	2d0c      	cmp	r5, #12
 80091be:	bf38      	it	cc
 80091c0:	250c      	movcc	r5, #12
 80091c2:	2d00      	cmp	r5, #0
 80091c4:	4607      	mov	r7, r0
 80091c6:	db01      	blt.n	80091cc <_malloc_r+0x1c>
 80091c8:	42a9      	cmp	r1, r5
 80091ca:	d905      	bls.n	80091d8 <_malloc_r+0x28>
 80091cc:	230c      	movs	r3, #12
 80091ce:	603b      	str	r3, [r7, #0]
 80091d0:	2600      	movs	r6, #0
 80091d2:	4630      	mov	r0, r6
 80091d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d8:	4e2e      	ldr	r6, [pc, #184]	; (8009294 <_malloc_r+0xe4>)
 80091da:	f000 fc79 	bl	8009ad0 <__malloc_lock>
 80091de:	6833      	ldr	r3, [r6, #0]
 80091e0:	461c      	mov	r4, r3
 80091e2:	bb34      	cbnz	r4, 8009232 <_malloc_r+0x82>
 80091e4:	4629      	mov	r1, r5
 80091e6:	4638      	mov	r0, r7
 80091e8:	f7ff ffc2 	bl	8009170 <sbrk_aligned>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	4604      	mov	r4, r0
 80091f0:	d14d      	bne.n	800928e <_malloc_r+0xde>
 80091f2:	6834      	ldr	r4, [r6, #0]
 80091f4:	4626      	mov	r6, r4
 80091f6:	2e00      	cmp	r6, #0
 80091f8:	d140      	bne.n	800927c <_malloc_r+0xcc>
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	4631      	mov	r1, r6
 80091fe:	4638      	mov	r0, r7
 8009200:	eb04 0803 	add.w	r8, r4, r3
 8009204:	f000 fb50 	bl	80098a8 <_sbrk_r>
 8009208:	4580      	cmp	r8, r0
 800920a:	d13a      	bne.n	8009282 <_malloc_r+0xd2>
 800920c:	6821      	ldr	r1, [r4, #0]
 800920e:	3503      	adds	r5, #3
 8009210:	1a6d      	subs	r5, r5, r1
 8009212:	f025 0503 	bic.w	r5, r5, #3
 8009216:	3508      	adds	r5, #8
 8009218:	2d0c      	cmp	r5, #12
 800921a:	bf38      	it	cc
 800921c:	250c      	movcc	r5, #12
 800921e:	4629      	mov	r1, r5
 8009220:	4638      	mov	r0, r7
 8009222:	f7ff ffa5 	bl	8009170 <sbrk_aligned>
 8009226:	3001      	adds	r0, #1
 8009228:	d02b      	beq.n	8009282 <_malloc_r+0xd2>
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	442b      	add	r3, r5
 800922e:	6023      	str	r3, [r4, #0]
 8009230:	e00e      	b.n	8009250 <_malloc_r+0xa0>
 8009232:	6822      	ldr	r2, [r4, #0]
 8009234:	1b52      	subs	r2, r2, r5
 8009236:	d41e      	bmi.n	8009276 <_malloc_r+0xc6>
 8009238:	2a0b      	cmp	r2, #11
 800923a:	d916      	bls.n	800926a <_malloc_r+0xba>
 800923c:	1961      	adds	r1, r4, r5
 800923e:	42a3      	cmp	r3, r4
 8009240:	6025      	str	r5, [r4, #0]
 8009242:	bf18      	it	ne
 8009244:	6059      	strne	r1, [r3, #4]
 8009246:	6863      	ldr	r3, [r4, #4]
 8009248:	bf08      	it	eq
 800924a:	6031      	streq	r1, [r6, #0]
 800924c:	5162      	str	r2, [r4, r5]
 800924e:	604b      	str	r3, [r1, #4]
 8009250:	4638      	mov	r0, r7
 8009252:	f104 060b 	add.w	r6, r4, #11
 8009256:	f000 fc41 	bl	8009adc <__malloc_unlock>
 800925a:	f026 0607 	bic.w	r6, r6, #7
 800925e:	1d23      	adds	r3, r4, #4
 8009260:	1af2      	subs	r2, r6, r3
 8009262:	d0b6      	beq.n	80091d2 <_malloc_r+0x22>
 8009264:	1b9b      	subs	r3, r3, r6
 8009266:	50a3      	str	r3, [r4, r2]
 8009268:	e7b3      	b.n	80091d2 <_malloc_r+0x22>
 800926a:	6862      	ldr	r2, [r4, #4]
 800926c:	42a3      	cmp	r3, r4
 800926e:	bf0c      	ite	eq
 8009270:	6032      	streq	r2, [r6, #0]
 8009272:	605a      	strne	r2, [r3, #4]
 8009274:	e7ec      	b.n	8009250 <_malloc_r+0xa0>
 8009276:	4623      	mov	r3, r4
 8009278:	6864      	ldr	r4, [r4, #4]
 800927a:	e7b2      	b.n	80091e2 <_malloc_r+0x32>
 800927c:	4634      	mov	r4, r6
 800927e:	6876      	ldr	r6, [r6, #4]
 8009280:	e7b9      	b.n	80091f6 <_malloc_r+0x46>
 8009282:	230c      	movs	r3, #12
 8009284:	603b      	str	r3, [r7, #0]
 8009286:	4638      	mov	r0, r7
 8009288:	f000 fc28 	bl	8009adc <__malloc_unlock>
 800928c:	e7a1      	b.n	80091d2 <_malloc_r+0x22>
 800928e:	6025      	str	r5, [r4, #0]
 8009290:	e7de      	b.n	8009250 <_malloc_r+0xa0>
 8009292:	bf00      	nop
 8009294:	20000304 	.word	0x20000304

08009298 <__ssputs_r>:
 8009298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800929c:	688e      	ldr	r6, [r1, #8]
 800929e:	429e      	cmp	r6, r3
 80092a0:	4682      	mov	sl, r0
 80092a2:	460c      	mov	r4, r1
 80092a4:	4690      	mov	r8, r2
 80092a6:	461f      	mov	r7, r3
 80092a8:	d838      	bhi.n	800931c <__ssputs_r+0x84>
 80092aa:	898a      	ldrh	r2, [r1, #12]
 80092ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092b0:	d032      	beq.n	8009318 <__ssputs_r+0x80>
 80092b2:	6825      	ldr	r5, [r4, #0]
 80092b4:	6909      	ldr	r1, [r1, #16]
 80092b6:	eba5 0901 	sub.w	r9, r5, r1
 80092ba:	6965      	ldr	r5, [r4, #20]
 80092bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092c4:	3301      	adds	r3, #1
 80092c6:	444b      	add	r3, r9
 80092c8:	106d      	asrs	r5, r5, #1
 80092ca:	429d      	cmp	r5, r3
 80092cc:	bf38      	it	cc
 80092ce:	461d      	movcc	r5, r3
 80092d0:	0553      	lsls	r3, r2, #21
 80092d2:	d531      	bpl.n	8009338 <__ssputs_r+0xa0>
 80092d4:	4629      	mov	r1, r5
 80092d6:	f7ff ff6b 	bl	80091b0 <_malloc_r>
 80092da:	4606      	mov	r6, r0
 80092dc:	b950      	cbnz	r0, 80092f4 <__ssputs_r+0x5c>
 80092de:	230c      	movs	r3, #12
 80092e0:	f8ca 3000 	str.w	r3, [sl]
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ea:	81a3      	strh	r3, [r4, #12]
 80092ec:	f04f 30ff 	mov.w	r0, #4294967295
 80092f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f4:	6921      	ldr	r1, [r4, #16]
 80092f6:	464a      	mov	r2, r9
 80092f8:	f7ff fa08 	bl	800870c <memcpy>
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	6126      	str	r6, [r4, #16]
 800930a:	6165      	str	r5, [r4, #20]
 800930c:	444e      	add	r6, r9
 800930e:	eba5 0509 	sub.w	r5, r5, r9
 8009312:	6026      	str	r6, [r4, #0]
 8009314:	60a5      	str	r5, [r4, #8]
 8009316:	463e      	mov	r6, r7
 8009318:	42be      	cmp	r6, r7
 800931a:	d900      	bls.n	800931e <__ssputs_r+0x86>
 800931c:	463e      	mov	r6, r7
 800931e:	6820      	ldr	r0, [r4, #0]
 8009320:	4632      	mov	r2, r6
 8009322:	4641      	mov	r1, r8
 8009324:	f000 fbba 	bl	8009a9c <memmove>
 8009328:	68a3      	ldr	r3, [r4, #8]
 800932a:	1b9b      	subs	r3, r3, r6
 800932c:	60a3      	str	r3, [r4, #8]
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	4433      	add	r3, r6
 8009332:	6023      	str	r3, [r4, #0]
 8009334:	2000      	movs	r0, #0
 8009336:	e7db      	b.n	80092f0 <__ssputs_r+0x58>
 8009338:	462a      	mov	r2, r5
 800933a:	f000 fbd5 	bl	8009ae8 <_realloc_r>
 800933e:	4606      	mov	r6, r0
 8009340:	2800      	cmp	r0, #0
 8009342:	d1e1      	bne.n	8009308 <__ssputs_r+0x70>
 8009344:	6921      	ldr	r1, [r4, #16]
 8009346:	4650      	mov	r0, sl
 8009348:	f7ff fec6 	bl	80090d8 <_free_r>
 800934c:	e7c7      	b.n	80092de <__ssputs_r+0x46>
	...

08009350 <_svfiprintf_r>:
 8009350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	4698      	mov	r8, r3
 8009356:	898b      	ldrh	r3, [r1, #12]
 8009358:	061b      	lsls	r3, r3, #24
 800935a:	b09d      	sub	sp, #116	; 0x74
 800935c:	4607      	mov	r7, r0
 800935e:	460d      	mov	r5, r1
 8009360:	4614      	mov	r4, r2
 8009362:	d50e      	bpl.n	8009382 <_svfiprintf_r+0x32>
 8009364:	690b      	ldr	r3, [r1, #16]
 8009366:	b963      	cbnz	r3, 8009382 <_svfiprintf_r+0x32>
 8009368:	2140      	movs	r1, #64	; 0x40
 800936a:	f7ff ff21 	bl	80091b0 <_malloc_r>
 800936e:	6028      	str	r0, [r5, #0]
 8009370:	6128      	str	r0, [r5, #16]
 8009372:	b920      	cbnz	r0, 800937e <_svfiprintf_r+0x2e>
 8009374:	230c      	movs	r3, #12
 8009376:	603b      	str	r3, [r7, #0]
 8009378:	f04f 30ff 	mov.w	r0, #4294967295
 800937c:	e0d1      	b.n	8009522 <_svfiprintf_r+0x1d2>
 800937e:	2340      	movs	r3, #64	; 0x40
 8009380:	616b      	str	r3, [r5, #20]
 8009382:	2300      	movs	r3, #0
 8009384:	9309      	str	r3, [sp, #36]	; 0x24
 8009386:	2320      	movs	r3, #32
 8009388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800938c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009390:	2330      	movs	r3, #48	; 0x30
 8009392:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800953c <_svfiprintf_r+0x1ec>
 8009396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800939a:	f04f 0901 	mov.w	r9, #1
 800939e:	4623      	mov	r3, r4
 80093a0:	469a      	mov	sl, r3
 80093a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093a6:	b10a      	cbz	r2, 80093ac <_svfiprintf_r+0x5c>
 80093a8:	2a25      	cmp	r2, #37	; 0x25
 80093aa:	d1f9      	bne.n	80093a0 <_svfiprintf_r+0x50>
 80093ac:	ebba 0b04 	subs.w	fp, sl, r4
 80093b0:	d00b      	beq.n	80093ca <_svfiprintf_r+0x7a>
 80093b2:	465b      	mov	r3, fp
 80093b4:	4622      	mov	r2, r4
 80093b6:	4629      	mov	r1, r5
 80093b8:	4638      	mov	r0, r7
 80093ba:	f7ff ff6d 	bl	8009298 <__ssputs_r>
 80093be:	3001      	adds	r0, #1
 80093c0:	f000 80aa 	beq.w	8009518 <_svfiprintf_r+0x1c8>
 80093c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093c6:	445a      	add	r2, fp
 80093c8:	9209      	str	r2, [sp, #36]	; 0x24
 80093ca:	f89a 3000 	ldrb.w	r3, [sl]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 80a2 	beq.w	8009518 <_svfiprintf_r+0x1c8>
 80093d4:	2300      	movs	r3, #0
 80093d6:	f04f 32ff 	mov.w	r2, #4294967295
 80093da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093de:	f10a 0a01 	add.w	sl, sl, #1
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	9307      	str	r3, [sp, #28]
 80093e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093ea:	931a      	str	r3, [sp, #104]	; 0x68
 80093ec:	4654      	mov	r4, sl
 80093ee:	2205      	movs	r2, #5
 80093f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f4:	4851      	ldr	r0, [pc, #324]	; (800953c <_svfiprintf_r+0x1ec>)
 80093f6:	f7f6 ff1b 	bl	8000230 <memchr>
 80093fa:	9a04      	ldr	r2, [sp, #16]
 80093fc:	b9d8      	cbnz	r0, 8009436 <_svfiprintf_r+0xe6>
 80093fe:	06d0      	lsls	r0, r2, #27
 8009400:	bf44      	itt	mi
 8009402:	2320      	movmi	r3, #32
 8009404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009408:	0711      	lsls	r1, r2, #28
 800940a:	bf44      	itt	mi
 800940c:	232b      	movmi	r3, #43	; 0x2b
 800940e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009412:	f89a 3000 	ldrb.w	r3, [sl]
 8009416:	2b2a      	cmp	r3, #42	; 0x2a
 8009418:	d015      	beq.n	8009446 <_svfiprintf_r+0xf6>
 800941a:	9a07      	ldr	r2, [sp, #28]
 800941c:	4654      	mov	r4, sl
 800941e:	2000      	movs	r0, #0
 8009420:	f04f 0c0a 	mov.w	ip, #10
 8009424:	4621      	mov	r1, r4
 8009426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800942a:	3b30      	subs	r3, #48	; 0x30
 800942c:	2b09      	cmp	r3, #9
 800942e:	d94e      	bls.n	80094ce <_svfiprintf_r+0x17e>
 8009430:	b1b0      	cbz	r0, 8009460 <_svfiprintf_r+0x110>
 8009432:	9207      	str	r2, [sp, #28]
 8009434:	e014      	b.n	8009460 <_svfiprintf_r+0x110>
 8009436:	eba0 0308 	sub.w	r3, r0, r8
 800943a:	fa09 f303 	lsl.w	r3, r9, r3
 800943e:	4313      	orrs	r3, r2
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	46a2      	mov	sl, r4
 8009444:	e7d2      	b.n	80093ec <_svfiprintf_r+0x9c>
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	1d19      	adds	r1, r3, #4
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	9103      	str	r1, [sp, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	bfbb      	ittet	lt
 8009452:	425b      	neglt	r3, r3
 8009454:	f042 0202 	orrlt.w	r2, r2, #2
 8009458:	9307      	strge	r3, [sp, #28]
 800945a:	9307      	strlt	r3, [sp, #28]
 800945c:	bfb8      	it	lt
 800945e:	9204      	strlt	r2, [sp, #16]
 8009460:	7823      	ldrb	r3, [r4, #0]
 8009462:	2b2e      	cmp	r3, #46	; 0x2e
 8009464:	d10c      	bne.n	8009480 <_svfiprintf_r+0x130>
 8009466:	7863      	ldrb	r3, [r4, #1]
 8009468:	2b2a      	cmp	r3, #42	; 0x2a
 800946a:	d135      	bne.n	80094d8 <_svfiprintf_r+0x188>
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	1d1a      	adds	r2, r3, #4
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	9203      	str	r2, [sp, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	bfb8      	it	lt
 8009478:	f04f 33ff 	movlt.w	r3, #4294967295
 800947c:	3402      	adds	r4, #2
 800947e:	9305      	str	r3, [sp, #20]
 8009480:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800954c <_svfiprintf_r+0x1fc>
 8009484:	7821      	ldrb	r1, [r4, #0]
 8009486:	2203      	movs	r2, #3
 8009488:	4650      	mov	r0, sl
 800948a:	f7f6 fed1 	bl	8000230 <memchr>
 800948e:	b140      	cbz	r0, 80094a2 <_svfiprintf_r+0x152>
 8009490:	2340      	movs	r3, #64	; 0x40
 8009492:	eba0 000a 	sub.w	r0, r0, sl
 8009496:	fa03 f000 	lsl.w	r0, r3, r0
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	4303      	orrs	r3, r0
 800949e:	3401      	adds	r4, #1
 80094a0:	9304      	str	r3, [sp, #16]
 80094a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a6:	4826      	ldr	r0, [pc, #152]	; (8009540 <_svfiprintf_r+0x1f0>)
 80094a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ac:	2206      	movs	r2, #6
 80094ae:	f7f6 febf 	bl	8000230 <memchr>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d038      	beq.n	8009528 <_svfiprintf_r+0x1d8>
 80094b6:	4b23      	ldr	r3, [pc, #140]	; (8009544 <_svfiprintf_r+0x1f4>)
 80094b8:	bb1b      	cbnz	r3, 8009502 <_svfiprintf_r+0x1b2>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	3307      	adds	r3, #7
 80094be:	f023 0307 	bic.w	r3, r3, #7
 80094c2:	3308      	adds	r3, #8
 80094c4:	9303      	str	r3, [sp, #12]
 80094c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c8:	4433      	add	r3, r6
 80094ca:	9309      	str	r3, [sp, #36]	; 0x24
 80094cc:	e767      	b.n	800939e <_svfiprintf_r+0x4e>
 80094ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d2:	460c      	mov	r4, r1
 80094d4:	2001      	movs	r0, #1
 80094d6:	e7a5      	b.n	8009424 <_svfiprintf_r+0xd4>
 80094d8:	2300      	movs	r3, #0
 80094da:	3401      	adds	r4, #1
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	4619      	mov	r1, r3
 80094e0:	f04f 0c0a 	mov.w	ip, #10
 80094e4:	4620      	mov	r0, r4
 80094e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ea:	3a30      	subs	r2, #48	; 0x30
 80094ec:	2a09      	cmp	r2, #9
 80094ee:	d903      	bls.n	80094f8 <_svfiprintf_r+0x1a8>
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0c5      	beq.n	8009480 <_svfiprintf_r+0x130>
 80094f4:	9105      	str	r1, [sp, #20]
 80094f6:	e7c3      	b.n	8009480 <_svfiprintf_r+0x130>
 80094f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80094fc:	4604      	mov	r4, r0
 80094fe:	2301      	movs	r3, #1
 8009500:	e7f0      	b.n	80094e4 <_svfiprintf_r+0x194>
 8009502:	ab03      	add	r3, sp, #12
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	462a      	mov	r2, r5
 8009508:	4b0f      	ldr	r3, [pc, #60]	; (8009548 <_svfiprintf_r+0x1f8>)
 800950a:	a904      	add	r1, sp, #16
 800950c:	4638      	mov	r0, r7
 800950e:	f7fb fec7 	bl	80052a0 <_printf_float>
 8009512:	1c42      	adds	r2, r0, #1
 8009514:	4606      	mov	r6, r0
 8009516:	d1d6      	bne.n	80094c6 <_svfiprintf_r+0x176>
 8009518:	89ab      	ldrh	r3, [r5, #12]
 800951a:	065b      	lsls	r3, r3, #25
 800951c:	f53f af2c 	bmi.w	8009378 <_svfiprintf_r+0x28>
 8009520:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009522:	b01d      	add	sp, #116	; 0x74
 8009524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009528:	ab03      	add	r3, sp, #12
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	462a      	mov	r2, r5
 800952e:	4b06      	ldr	r3, [pc, #24]	; (8009548 <_svfiprintf_r+0x1f8>)
 8009530:	a904      	add	r1, sp, #16
 8009532:	4638      	mov	r0, r7
 8009534:	f7fc f958 	bl	80057e8 <_printf_i>
 8009538:	e7eb      	b.n	8009512 <_svfiprintf_r+0x1c2>
 800953a:	bf00      	nop
 800953c:	0800a51c 	.word	0x0800a51c
 8009540:	0800a526 	.word	0x0800a526
 8009544:	080052a1 	.word	0x080052a1
 8009548:	08009299 	.word	0x08009299
 800954c:	0800a522 	.word	0x0800a522

08009550 <__sfputc_r>:
 8009550:	6893      	ldr	r3, [r2, #8]
 8009552:	3b01      	subs	r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	b410      	push	{r4}
 8009558:	6093      	str	r3, [r2, #8]
 800955a:	da08      	bge.n	800956e <__sfputc_r+0x1e>
 800955c:	6994      	ldr	r4, [r2, #24]
 800955e:	42a3      	cmp	r3, r4
 8009560:	db01      	blt.n	8009566 <__sfputc_r+0x16>
 8009562:	290a      	cmp	r1, #10
 8009564:	d103      	bne.n	800956e <__sfputc_r+0x1e>
 8009566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800956a:	f7fd bbe9 	b.w	8006d40 <__swbuf_r>
 800956e:	6813      	ldr	r3, [r2, #0]
 8009570:	1c58      	adds	r0, r3, #1
 8009572:	6010      	str	r0, [r2, #0]
 8009574:	7019      	strb	r1, [r3, #0]
 8009576:	4608      	mov	r0, r1
 8009578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800957c:	4770      	bx	lr

0800957e <__sfputs_r>:
 800957e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009580:	4606      	mov	r6, r0
 8009582:	460f      	mov	r7, r1
 8009584:	4614      	mov	r4, r2
 8009586:	18d5      	adds	r5, r2, r3
 8009588:	42ac      	cmp	r4, r5
 800958a:	d101      	bne.n	8009590 <__sfputs_r+0x12>
 800958c:	2000      	movs	r0, #0
 800958e:	e007      	b.n	80095a0 <__sfputs_r+0x22>
 8009590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009594:	463a      	mov	r2, r7
 8009596:	4630      	mov	r0, r6
 8009598:	f7ff ffda 	bl	8009550 <__sfputc_r>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d1f3      	bne.n	8009588 <__sfputs_r+0xa>
 80095a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095a4 <_vfiprintf_r>:
 80095a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	460d      	mov	r5, r1
 80095aa:	b09d      	sub	sp, #116	; 0x74
 80095ac:	4614      	mov	r4, r2
 80095ae:	4698      	mov	r8, r3
 80095b0:	4606      	mov	r6, r0
 80095b2:	b118      	cbz	r0, 80095bc <_vfiprintf_r+0x18>
 80095b4:	6983      	ldr	r3, [r0, #24]
 80095b6:	b90b      	cbnz	r3, 80095bc <_vfiprintf_r+0x18>
 80095b8:	f7fe fc16 	bl	8007de8 <__sinit>
 80095bc:	4b89      	ldr	r3, [pc, #548]	; (80097e4 <_vfiprintf_r+0x240>)
 80095be:	429d      	cmp	r5, r3
 80095c0:	d11b      	bne.n	80095fa <_vfiprintf_r+0x56>
 80095c2:	6875      	ldr	r5, [r6, #4]
 80095c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095c6:	07d9      	lsls	r1, r3, #31
 80095c8:	d405      	bmi.n	80095d6 <_vfiprintf_r+0x32>
 80095ca:	89ab      	ldrh	r3, [r5, #12]
 80095cc:	059a      	lsls	r2, r3, #22
 80095ce:	d402      	bmi.n	80095d6 <_vfiprintf_r+0x32>
 80095d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095d2:	f7ff f81a 	bl	800860a <__retarget_lock_acquire_recursive>
 80095d6:	89ab      	ldrh	r3, [r5, #12]
 80095d8:	071b      	lsls	r3, r3, #28
 80095da:	d501      	bpl.n	80095e0 <_vfiprintf_r+0x3c>
 80095dc:	692b      	ldr	r3, [r5, #16]
 80095de:	b9eb      	cbnz	r3, 800961c <_vfiprintf_r+0x78>
 80095e0:	4629      	mov	r1, r5
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7fd fbfe 	bl	8006de4 <__swsetup_r>
 80095e8:	b1c0      	cbz	r0, 800961c <_vfiprintf_r+0x78>
 80095ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095ec:	07dc      	lsls	r4, r3, #31
 80095ee:	d50e      	bpl.n	800960e <_vfiprintf_r+0x6a>
 80095f0:	f04f 30ff 	mov.w	r0, #4294967295
 80095f4:	b01d      	add	sp, #116	; 0x74
 80095f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fa:	4b7b      	ldr	r3, [pc, #492]	; (80097e8 <_vfiprintf_r+0x244>)
 80095fc:	429d      	cmp	r5, r3
 80095fe:	d101      	bne.n	8009604 <_vfiprintf_r+0x60>
 8009600:	68b5      	ldr	r5, [r6, #8]
 8009602:	e7df      	b.n	80095c4 <_vfiprintf_r+0x20>
 8009604:	4b79      	ldr	r3, [pc, #484]	; (80097ec <_vfiprintf_r+0x248>)
 8009606:	429d      	cmp	r5, r3
 8009608:	bf08      	it	eq
 800960a:	68f5      	ldreq	r5, [r6, #12]
 800960c:	e7da      	b.n	80095c4 <_vfiprintf_r+0x20>
 800960e:	89ab      	ldrh	r3, [r5, #12]
 8009610:	0598      	lsls	r0, r3, #22
 8009612:	d4ed      	bmi.n	80095f0 <_vfiprintf_r+0x4c>
 8009614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009616:	f7fe fff9 	bl	800860c <__retarget_lock_release_recursive>
 800961a:	e7e9      	b.n	80095f0 <_vfiprintf_r+0x4c>
 800961c:	2300      	movs	r3, #0
 800961e:	9309      	str	r3, [sp, #36]	; 0x24
 8009620:	2320      	movs	r3, #32
 8009622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009626:	f8cd 800c 	str.w	r8, [sp, #12]
 800962a:	2330      	movs	r3, #48	; 0x30
 800962c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097f0 <_vfiprintf_r+0x24c>
 8009630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009634:	f04f 0901 	mov.w	r9, #1
 8009638:	4623      	mov	r3, r4
 800963a:	469a      	mov	sl, r3
 800963c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009640:	b10a      	cbz	r2, 8009646 <_vfiprintf_r+0xa2>
 8009642:	2a25      	cmp	r2, #37	; 0x25
 8009644:	d1f9      	bne.n	800963a <_vfiprintf_r+0x96>
 8009646:	ebba 0b04 	subs.w	fp, sl, r4
 800964a:	d00b      	beq.n	8009664 <_vfiprintf_r+0xc0>
 800964c:	465b      	mov	r3, fp
 800964e:	4622      	mov	r2, r4
 8009650:	4629      	mov	r1, r5
 8009652:	4630      	mov	r0, r6
 8009654:	f7ff ff93 	bl	800957e <__sfputs_r>
 8009658:	3001      	adds	r0, #1
 800965a:	f000 80aa 	beq.w	80097b2 <_vfiprintf_r+0x20e>
 800965e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009660:	445a      	add	r2, fp
 8009662:	9209      	str	r2, [sp, #36]	; 0x24
 8009664:	f89a 3000 	ldrb.w	r3, [sl]
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 80a2 	beq.w	80097b2 <_vfiprintf_r+0x20e>
 800966e:	2300      	movs	r3, #0
 8009670:	f04f 32ff 	mov.w	r2, #4294967295
 8009674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009678:	f10a 0a01 	add.w	sl, sl, #1
 800967c:	9304      	str	r3, [sp, #16]
 800967e:	9307      	str	r3, [sp, #28]
 8009680:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009684:	931a      	str	r3, [sp, #104]	; 0x68
 8009686:	4654      	mov	r4, sl
 8009688:	2205      	movs	r2, #5
 800968a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800968e:	4858      	ldr	r0, [pc, #352]	; (80097f0 <_vfiprintf_r+0x24c>)
 8009690:	f7f6 fdce 	bl	8000230 <memchr>
 8009694:	9a04      	ldr	r2, [sp, #16]
 8009696:	b9d8      	cbnz	r0, 80096d0 <_vfiprintf_r+0x12c>
 8009698:	06d1      	lsls	r1, r2, #27
 800969a:	bf44      	itt	mi
 800969c:	2320      	movmi	r3, #32
 800969e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096a2:	0713      	lsls	r3, r2, #28
 80096a4:	bf44      	itt	mi
 80096a6:	232b      	movmi	r3, #43	; 0x2b
 80096a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ac:	f89a 3000 	ldrb.w	r3, [sl]
 80096b0:	2b2a      	cmp	r3, #42	; 0x2a
 80096b2:	d015      	beq.n	80096e0 <_vfiprintf_r+0x13c>
 80096b4:	9a07      	ldr	r2, [sp, #28]
 80096b6:	4654      	mov	r4, sl
 80096b8:	2000      	movs	r0, #0
 80096ba:	f04f 0c0a 	mov.w	ip, #10
 80096be:	4621      	mov	r1, r4
 80096c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096c4:	3b30      	subs	r3, #48	; 0x30
 80096c6:	2b09      	cmp	r3, #9
 80096c8:	d94e      	bls.n	8009768 <_vfiprintf_r+0x1c4>
 80096ca:	b1b0      	cbz	r0, 80096fa <_vfiprintf_r+0x156>
 80096cc:	9207      	str	r2, [sp, #28]
 80096ce:	e014      	b.n	80096fa <_vfiprintf_r+0x156>
 80096d0:	eba0 0308 	sub.w	r3, r0, r8
 80096d4:	fa09 f303 	lsl.w	r3, r9, r3
 80096d8:	4313      	orrs	r3, r2
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	46a2      	mov	sl, r4
 80096de:	e7d2      	b.n	8009686 <_vfiprintf_r+0xe2>
 80096e0:	9b03      	ldr	r3, [sp, #12]
 80096e2:	1d19      	adds	r1, r3, #4
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	9103      	str	r1, [sp, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	bfbb      	ittet	lt
 80096ec:	425b      	neglt	r3, r3
 80096ee:	f042 0202 	orrlt.w	r2, r2, #2
 80096f2:	9307      	strge	r3, [sp, #28]
 80096f4:	9307      	strlt	r3, [sp, #28]
 80096f6:	bfb8      	it	lt
 80096f8:	9204      	strlt	r2, [sp, #16]
 80096fa:	7823      	ldrb	r3, [r4, #0]
 80096fc:	2b2e      	cmp	r3, #46	; 0x2e
 80096fe:	d10c      	bne.n	800971a <_vfiprintf_r+0x176>
 8009700:	7863      	ldrb	r3, [r4, #1]
 8009702:	2b2a      	cmp	r3, #42	; 0x2a
 8009704:	d135      	bne.n	8009772 <_vfiprintf_r+0x1ce>
 8009706:	9b03      	ldr	r3, [sp, #12]
 8009708:	1d1a      	adds	r2, r3, #4
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	9203      	str	r2, [sp, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	bfb8      	it	lt
 8009712:	f04f 33ff 	movlt.w	r3, #4294967295
 8009716:	3402      	adds	r4, #2
 8009718:	9305      	str	r3, [sp, #20]
 800971a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009800 <_vfiprintf_r+0x25c>
 800971e:	7821      	ldrb	r1, [r4, #0]
 8009720:	2203      	movs	r2, #3
 8009722:	4650      	mov	r0, sl
 8009724:	f7f6 fd84 	bl	8000230 <memchr>
 8009728:	b140      	cbz	r0, 800973c <_vfiprintf_r+0x198>
 800972a:	2340      	movs	r3, #64	; 0x40
 800972c:	eba0 000a 	sub.w	r0, r0, sl
 8009730:	fa03 f000 	lsl.w	r0, r3, r0
 8009734:	9b04      	ldr	r3, [sp, #16]
 8009736:	4303      	orrs	r3, r0
 8009738:	3401      	adds	r4, #1
 800973a:	9304      	str	r3, [sp, #16]
 800973c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009740:	482c      	ldr	r0, [pc, #176]	; (80097f4 <_vfiprintf_r+0x250>)
 8009742:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009746:	2206      	movs	r2, #6
 8009748:	f7f6 fd72 	bl	8000230 <memchr>
 800974c:	2800      	cmp	r0, #0
 800974e:	d03f      	beq.n	80097d0 <_vfiprintf_r+0x22c>
 8009750:	4b29      	ldr	r3, [pc, #164]	; (80097f8 <_vfiprintf_r+0x254>)
 8009752:	bb1b      	cbnz	r3, 800979c <_vfiprintf_r+0x1f8>
 8009754:	9b03      	ldr	r3, [sp, #12]
 8009756:	3307      	adds	r3, #7
 8009758:	f023 0307 	bic.w	r3, r3, #7
 800975c:	3308      	adds	r3, #8
 800975e:	9303      	str	r3, [sp, #12]
 8009760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009762:	443b      	add	r3, r7
 8009764:	9309      	str	r3, [sp, #36]	; 0x24
 8009766:	e767      	b.n	8009638 <_vfiprintf_r+0x94>
 8009768:	fb0c 3202 	mla	r2, ip, r2, r3
 800976c:	460c      	mov	r4, r1
 800976e:	2001      	movs	r0, #1
 8009770:	e7a5      	b.n	80096be <_vfiprintf_r+0x11a>
 8009772:	2300      	movs	r3, #0
 8009774:	3401      	adds	r4, #1
 8009776:	9305      	str	r3, [sp, #20]
 8009778:	4619      	mov	r1, r3
 800977a:	f04f 0c0a 	mov.w	ip, #10
 800977e:	4620      	mov	r0, r4
 8009780:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009784:	3a30      	subs	r2, #48	; 0x30
 8009786:	2a09      	cmp	r2, #9
 8009788:	d903      	bls.n	8009792 <_vfiprintf_r+0x1ee>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0c5      	beq.n	800971a <_vfiprintf_r+0x176>
 800978e:	9105      	str	r1, [sp, #20]
 8009790:	e7c3      	b.n	800971a <_vfiprintf_r+0x176>
 8009792:	fb0c 2101 	mla	r1, ip, r1, r2
 8009796:	4604      	mov	r4, r0
 8009798:	2301      	movs	r3, #1
 800979a:	e7f0      	b.n	800977e <_vfiprintf_r+0x1da>
 800979c:	ab03      	add	r3, sp, #12
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	462a      	mov	r2, r5
 80097a2:	4b16      	ldr	r3, [pc, #88]	; (80097fc <_vfiprintf_r+0x258>)
 80097a4:	a904      	add	r1, sp, #16
 80097a6:	4630      	mov	r0, r6
 80097a8:	f7fb fd7a 	bl	80052a0 <_printf_float>
 80097ac:	4607      	mov	r7, r0
 80097ae:	1c78      	adds	r0, r7, #1
 80097b0:	d1d6      	bne.n	8009760 <_vfiprintf_r+0x1bc>
 80097b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097b4:	07d9      	lsls	r1, r3, #31
 80097b6:	d405      	bmi.n	80097c4 <_vfiprintf_r+0x220>
 80097b8:	89ab      	ldrh	r3, [r5, #12]
 80097ba:	059a      	lsls	r2, r3, #22
 80097bc:	d402      	bmi.n	80097c4 <_vfiprintf_r+0x220>
 80097be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097c0:	f7fe ff24 	bl	800860c <__retarget_lock_release_recursive>
 80097c4:	89ab      	ldrh	r3, [r5, #12]
 80097c6:	065b      	lsls	r3, r3, #25
 80097c8:	f53f af12 	bmi.w	80095f0 <_vfiprintf_r+0x4c>
 80097cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ce:	e711      	b.n	80095f4 <_vfiprintf_r+0x50>
 80097d0:	ab03      	add	r3, sp, #12
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	462a      	mov	r2, r5
 80097d6:	4b09      	ldr	r3, [pc, #36]	; (80097fc <_vfiprintf_r+0x258>)
 80097d8:	a904      	add	r1, sp, #16
 80097da:	4630      	mov	r0, r6
 80097dc:	f7fc f804 	bl	80057e8 <_printf_i>
 80097e0:	e7e4      	b.n	80097ac <_vfiprintf_r+0x208>
 80097e2:	bf00      	nop
 80097e4:	0800a304 	.word	0x0800a304
 80097e8:	0800a324 	.word	0x0800a324
 80097ec:	0800a2e4 	.word	0x0800a2e4
 80097f0:	0800a51c 	.word	0x0800a51c
 80097f4:	0800a526 	.word	0x0800a526
 80097f8:	080052a1 	.word	0x080052a1
 80097fc:	0800957f 	.word	0x0800957f
 8009800:	0800a522 	.word	0x0800a522

08009804 <_putc_r>:
 8009804:	b570      	push	{r4, r5, r6, lr}
 8009806:	460d      	mov	r5, r1
 8009808:	4614      	mov	r4, r2
 800980a:	4606      	mov	r6, r0
 800980c:	b118      	cbz	r0, 8009816 <_putc_r+0x12>
 800980e:	6983      	ldr	r3, [r0, #24]
 8009810:	b90b      	cbnz	r3, 8009816 <_putc_r+0x12>
 8009812:	f7fe fae9 	bl	8007de8 <__sinit>
 8009816:	4b1c      	ldr	r3, [pc, #112]	; (8009888 <_putc_r+0x84>)
 8009818:	429c      	cmp	r4, r3
 800981a:	d124      	bne.n	8009866 <_putc_r+0x62>
 800981c:	6874      	ldr	r4, [r6, #4]
 800981e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009820:	07d8      	lsls	r0, r3, #31
 8009822:	d405      	bmi.n	8009830 <_putc_r+0x2c>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	0599      	lsls	r1, r3, #22
 8009828:	d402      	bmi.n	8009830 <_putc_r+0x2c>
 800982a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800982c:	f7fe feed 	bl	800860a <__retarget_lock_acquire_recursive>
 8009830:	68a3      	ldr	r3, [r4, #8]
 8009832:	3b01      	subs	r3, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	60a3      	str	r3, [r4, #8]
 8009838:	da05      	bge.n	8009846 <_putc_r+0x42>
 800983a:	69a2      	ldr	r2, [r4, #24]
 800983c:	4293      	cmp	r3, r2
 800983e:	db1c      	blt.n	800987a <_putc_r+0x76>
 8009840:	b2eb      	uxtb	r3, r5
 8009842:	2b0a      	cmp	r3, #10
 8009844:	d019      	beq.n	800987a <_putc_r+0x76>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	6022      	str	r2, [r4, #0]
 800984c:	701d      	strb	r5, [r3, #0]
 800984e:	b2ed      	uxtb	r5, r5
 8009850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009852:	07da      	lsls	r2, r3, #31
 8009854:	d405      	bmi.n	8009862 <_putc_r+0x5e>
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	059b      	lsls	r3, r3, #22
 800985a:	d402      	bmi.n	8009862 <_putc_r+0x5e>
 800985c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800985e:	f7fe fed5 	bl	800860c <__retarget_lock_release_recursive>
 8009862:	4628      	mov	r0, r5
 8009864:	bd70      	pop	{r4, r5, r6, pc}
 8009866:	4b09      	ldr	r3, [pc, #36]	; (800988c <_putc_r+0x88>)
 8009868:	429c      	cmp	r4, r3
 800986a:	d101      	bne.n	8009870 <_putc_r+0x6c>
 800986c:	68b4      	ldr	r4, [r6, #8]
 800986e:	e7d6      	b.n	800981e <_putc_r+0x1a>
 8009870:	4b07      	ldr	r3, [pc, #28]	; (8009890 <_putc_r+0x8c>)
 8009872:	429c      	cmp	r4, r3
 8009874:	bf08      	it	eq
 8009876:	68f4      	ldreq	r4, [r6, #12]
 8009878:	e7d1      	b.n	800981e <_putc_r+0x1a>
 800987a:	4629      	mov	r1, r5
 800987c:	4622      	mov	r2, r4
 800987e:	4630      	mov	r0, r6
 8009880:	f7fd fa5e 	bl	8006d40 <__swbuf_r>
 8009884:	4605      	mov	r5, r0
 8009886:	e7e3      	b.n	8009850 <_putc_r+0x4c>
 8009888:	0800a304 	.word	0x0800a304
 800988c:	0800a324 	.word	0x0800a324
 8009890:	0800a2e4 	.word	0x0800a2e4
 8009894:	00000000 	.word	0x00000000

08009898 <nan>:
 8009898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80098a0 <nan+0x8>
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	00000000 	.word	0x00000000
 80098a4:	7ff80000 	.word	0x7ff80000

080098a8 <_sbrk_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4d06      	ldr	r5, [pc, #24]	; (80098c4 <_sbrk_r+0x1c>)
 80098ac:	2300      	movs	r3, #0
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	602b      	str	r3, [r5, #0]
 80098b4:	f7f8 f854 	bl	8001960 <_sbrk>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <_sbrk_r+0x1a>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	b103      	cbz	r3, 80098c2 <_sbrk_r+0x1a>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	2000030c 	.word	0x2000030c

080098c8 <__sread>:
 80098c8:	b510      	push	{r4, lr}
 80098ca:	460c      	mov	r4, r1
 80098cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d0:	f000 f93a 	bl	8009b48 <_read_r>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	bfab      	itete	ge
 80098d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098da:	89a3      	ldrhlt	r3, [r4, #12]
 80098dc:	181b      	addge	r3, r3, r0
 80098de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098e2:	bfac      	ite	ge
 80098e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098e6:	81a3      	strhlt	r3, [r4, #12]
 80098e8:	bd10      	pop	{r4, pc}

080098ea <__swrite>:
 80098ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ee:	461f      	mov	r7, r3
 80098f0:	898b      	ldrh	r3, [r1, #12]
 80098f2:	05db      	lsls	r3, r3, #23
 80098f4:	4605      	mov	r5, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	4616      	mov	r6, r2
 80098fa:	d505      	bpl.n	8009908 <__swrite+0x1e>
 80098fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009900:	2302      	movs	r3, #2
 8009902:	2200      	movs	r2, #0
 8009904:	f000 f8b8 	bl	8009a78 <_lseek_r>
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800990e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	4632      	mov	r2, r6
 8009916:	463b      	mov	r3, r7
 8009918:	4628      	mov	r0, r5
 800991a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800991e:	f000 b837 	b.w	8009990 <_write_r>

08009922 <__sseek>:
 8009922:	b510      	push	{r4, lr}
 8009924:	460c      	mov	r4, r1
 8009926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992a:	f000 f8a5 	bl	8009a78 <_lseek_r>
 800992e:	1c43      	adds	r3, r0, #1
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	bf15      	itete	ne
 8009934:	6560      	strne	r0, [r4, #84]	; 0x54
 8009936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800993a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800993e:	81a3      	strheq	r3, [r4, #12]
 8009940:	bf18      	it	ne
 8009942:	81a3      	strhne	r3, [r4, #12]
 8009944:	bd10      	pop	{r4, pc}

08009946 <__sclose>:
 8009946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994a:	f000 b851 	b.w	80099f0 <_close_r>

0800994e <strncmp>:
 800994e:	b510      	push	{r4, lr}
 8009950:	b17a      	cbz	r2, 8009972 <strncmp+0x24>
 8009952:	4603      	mov	r3, r0
 8009954:	3901      	subs	r1, #1
 8009956:	1884      	adds	r4, r0, r2
 8009958:	f813 0b01 	ldrb.w	r0, [r3], #1
 800995c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009960:	4290      	cmp	r0, r2
 8009962:	d101      	bne.n	8009968 <strncmp+0x1a>
 8009964:	42a3      	cmp	r3, r4
 8009966:	d101      	bne.n	800996c <strncmp+0x1e>
 8009968:	1a80      	subs	r0, r0, r2
 800996a:	bd10      	pop	{r4, pc}
 800996c:	2800      	cmp	r0, #0
 800996e:	d1f3      	bne.n	8009958 <strncmp+0xa>
 8009970:	e7fa      	b.n	8009968 <strncmp+0x1a>
 8009972:	4610      	mov	r0, r2
 8009974:	e7f9      	b.n	800996a <strncmp+0x1c>

08009976 <__ascii_wctomb>:
 8009976:	b149      	cbz	r1, 800998c <__ascii_wctomb+0x16>
 8009978:	2aff      	cmp	r2, #255	; 0xff
 800997a:	bf85      	ittet	hi
 800997c:	238a      	movhi	r3, #138	; 0x8a
 800997e:	6003      	strhi	r3, [r0, #0]
 8009980:	700a      	strbls	r2, [r1, #0]
 8009982:	f04f 30ff 	movhi.w	r0, #4294967295
 8009986:	bf98      	it	ls
 8009988:	2001      	movls	r0, #1
 800998a:	4770      	bx	lr
 800998c:	4608      	mov	r0, r1
 800998e:	4770      	bx	lr

08009990 <_write_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d07      	ldr	r5, [pc, #28]	; (80099b0 <_write_r+0x20>)
 8009994:	4604      	mov	r4, r0
 8009996:	4608      	mov	r0, r1
 8009998:	4611      	mov	r1, r2
 800999a:	2200      	movs	r2, #0
 800999c:	602a      	str	r2, [r5, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	f7f7 ff8d 	bl	80018be <_write>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_write_r+0x1e>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_write_r+0x1e>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	2000030c 	.word	0x2000030c

080099b4 <__assert_func>:
 80099b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099b6:	4614      	mov	r4, r2
 80099b8:	461a      	mov	r2, r3
 80099ba:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <__assert_func+0x2c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4605      	mov	r5, r0
 80099c0:	68d8      	ldr	r0, [r3, #12]
 80099c2:	b14c      	cbz	r4, 80099d8 <__assert_func+0x24>
 80099c4:	4b07      	ldr	r3, [pc, #28]	; (80099e4 <__assert_func+0x30>)
 80099c6:	9100      	str	r1, [sp, #0]
 80099c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099cc:	4906      	ldr	r1, [pc, #24]	; (80099e8 <__assert_func+0x34>)
 80099ce:	462b      	mov	r3, r5
 80099d0:	f000 f81e 	bl	8009a10 <fiprintf>
 80099d4:	f000 f8ca 	bl	8009b6c <abort>
 80099d8:	4b04      	ldr	r3, [pc, #16]	; (80099ec <__assert_func+0x38>)
 80099da:	461c      	mov	r4, r3
 80099dc:	e7f3      	b.n	80099c6 <__assert_func+0x12>
 80099de:	bf00      	nop
 80099e0:	2000000c 	.word	0x2000000c
 80099e4:	0800a52d 	.word	0x0800a52d
 80099e8:	0800a53a 	.word	0x0800a53a
 80099ec:	0800a568 	.word	0x0800a568

080099f0 <_close_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d06      	ldr	r5, [pc, #24]	; (8009a0c <_close_r+0x1c>)
 80099f4:	2300      	movs	r3, #0
 80099f6:	4604      	mov	r4, r0
 80099f8:	4608      	mov	r0, r1
 80099fa:	602b      	str	r3, [r5, #0]
 80099fc:	f7f7 ff7b 	bl	80018f6 <_close>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_close_r+0x1a>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_close_r+0x1a>
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	2000030c 	.word	0x2000030c

08009a10 <fiprintf>:
 8009a10:	b40e      	push	{r1, r2, r3}
 8009a12:	b503      	push	{r0, r1, lr}
 8009a14:	4601      	mov	r1, r0
 8009a16:	ab03      	add	r3, sp, #12
 8009a18:	4805      	ldr	r0, [pc, #20]	; (8009a30 <fiprintf+0x20>)
 8009a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a1e:	6800      	ldr	r0, [r0, #0]
 8009a20:	9301      	str	r3, [sp, #4]
 8009a22:	f7ff fdbf 	bl	80095a4 <_vfiprintf_r>
 8009a26:	b002      	add	sp, #8
 8009a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a2c:	b003      	add	sp, #12
 8009a2e:	4770      	bx	lr
 8009a30:	2000000c 	.word	0x2000000c

08009a34 <_fstat_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	4d07      	ldr	r5, [pc, #28]	; (8009a54 <_fstat_r+0x20>)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	4611      	mov	r1, r2
 8009a40:	602b      	str	r3, [r5, #0]
 8009a42:	f7f7 ff64 	bl	800190e <_fstat>
 8009a46:	1c43      	adds	r3, r0, #1
 8009a48:	d102      	bne.n	8009a50 <_fstat_r+0x1c>
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	b103      	cbz	r3, 8009a50 <_fstat_r+0x1c>
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	bd38      	pop	{r3, r4, r5, pc}
 8009a52:	bf00      	nop
 8009a54:	2000030c 	.word	0x2000030c

08009a58 <_isatty_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d06      	ldr	r5, [pc, #24]	; (8009a74 <_isatty_r+0x1c>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	f7f7 ff63 	bl	800192e <_isatty>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d102      	bne.n	8009a72 <_isatty_r+0x1a>
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	b103      	cbz	r3, 8009a72 <_isatty_r+0x1a>
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	2000030c 	.word	0x2000030c

08009a78 <_lseek_r>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4d07      	ldr	r5, [pc, #28]	; (8009a98 <_lseek_r+0x20>)
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	4608      	mov	r0, r1
 8009a80:	4611      	mov	r1, r2
 8009a82:	2200      	movs	r2, #0
 8009a84:	602a      	str	r2, [r5, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	f7f7 ff5c 	bl	8001944 <_lseek>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_lseek_r+0x1e>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_lseek_r+0x1e>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	2000030c 	.word	0x2000030c

08009a9c <memmove>:
 8009a9c:	4288      	cmp	r0, r1
 8009a9e:	b510      	push	{r4, lr}
 8009aa0:	eb01 0402 	add.w	r4, r1, r2
 8009aa4:	d902      	bls.n	8009aac <memmove+0x10>
 8009aa6:	4284      	cmp	r4, r0
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	d807      	bhi.n	8009abc <memmove+0x20>
 8009aac:	1e43      	subs	r3, r0, #1
 8009aae:	42a1      	cmp	r1, r4
 8009ab0:	d008      	beq.n	8009ac4 <memmove+0x28>
 8009ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009aba:	e7f8      	b.n	8009aae <memmove+0x12>
 8009abc:	4402      	add	r2, r0
 8009abe:	4601      	mov	r1, r0
 8009ac0:	428a      	cmp	r2, r1
 8009ac2:	d100      	bne.n	8009ac6 <memmove+0x2a>
 8009ac4:	bd10      	pop	{r4, pc}
 8009ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ace:	e7f7      	b.n	8009ac0 <memmove+0x24>

08009ad0 <__malloc_lock>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	; (8009ad8 <__malloc_lock+0x8>)
 8009ad2:	f7fe bd9a 	b.w	800860a <__retarget_lock_acquire_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	20000300 	.word	0x20000300

08009adc <__malloc_unlock>:
 8009adc:	4801      	ldr	r0, [pc, #4]	; (8009ae4 <__malloc_unlock+0x8>)
 8009ade:	f7fe bd95 	b.w	800860c <__retarget_lock_release_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	20000300 	.word	0x20000300

08009ae8 <_realloc_r>:
 8009ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aec:	4680      	mov	r8, r0
 8009aee:	4614      	mov	r4, r2
 8009af0:	460e      	mov	r6, r1
 8009af2:	b921      	cbnz	r1, 8009afe <_realloc_r+0x16>
 8009af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009af8:	4611      	mov	r1, r2
 8009afa:	f7ff bb59 	b.w	80091b0 <_malloc_r>
 8009afe:	b92a      	cbnz	r2, 8009b0c <_realloc_r+0x24>
 8009b00:	f7ff faea 	bl	80090d8 <_free_r>
 8009b04:	4625      	mov	r5, r4
 8009b06:	4628      	mov	r0, r5
 8009b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b0c:	f000 f835 	bl	8009b7a <_malloc_usable_size_r>
 8009b10:	4284      	cmp	r4, r0
 8009b12:	4607      	mov	r7, r0
 8009b14:	d802      	bhi.n	8009b1c <_realloc_r+0x34>
 8009b16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b1a:	d812      	bhi.n	8009b42 <_realloc_r+0x5a>
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	4640      	mov	r0, r8
 8009b20:	f7ff fb46 	bl	80091b0 <_malloc_r>
 8009b24:	4605      	mov	r5, r0
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d0ed      	beq.n	8009b06 <_realloc_r+0x1e>
 8009b2a:	42bc      	cmp	r4, r7
 8009b2c:	4622      	mov	r2, r4
 8009b2e:	4631      	mov	r1, r6
 8009b30:	bf28      	it	cs
 8009b32:	463a      	movcs	r2, r7
 8009b34:	f7fe fdea 	bl	800870c <memcpy>
 8009b38:	4631      	mov	r1, r6
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	f7ff facc 	bl	80090d8 <_free_r>
 8009b40:	e7e1      	b.n	8009b06 <_realloc_r+0x1e>
 8009b42:	4635      	mov	r5, r6
 8009b44:	e7df      	b.n	8009b06 <_realloc_r+0x1e>
	...

08009b48 <_read_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4d07      	ldr	r5, [pc, #28]	; (8009b68 <_read_r+0x20>)
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	4608      	mov	r0, r1
 8009b50:	4611      	mov	r1, r2
 8009b52:	2200      	movs	r2, #0
 8009b54:	602a      	str	r2, [r5, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	f7f7 fe94 	bl	8001884 <_read>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d102      	bne.n	8009b66 <_read_r+0x1e>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	b103      	cbz	r3, 8009b66 <_read_r+0x1e>
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	2000030c 	.word	0x2000030c

08009b6c <abort>:
 8009b6c:	b508      	push	{r3, lr}
 8009b6e:	2006      	movs	r0, #6
 8009b70:	f000 f834 	bl	8009bdc <raise>
 8009b74:	2001      	movs	r0, #1
 8009b76:	f7f7 fe7b 	bl	8001870 <_exit>

08009b7a <_malloc_usable_size_r>:
 8009b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b7e:	1f18      	subs	r0, r3, #4
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	bfbc      	itt	lt
 8009b84:	580b      	ldrlt	r3, [r1, r0]
 8009b86:	18c0      	addlt	r0, r0, r3
 8009b88:	4770      	bx	lr

08009b8a <_raise_r>:
 8009b8a:	291f      	cmp	r1, #31
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4604      	mov	r4, r0
 8009b90:	460d      	mov	r5, r1
 8009b92:	d904      	bls.n	8009b9e <_raise_r+0x14>
 8009b94:	2316      	movs	r3, #22
 8009b96:	6003      	str	r3, [r0, #0]
 8009b98:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9c:	bd38      	pop	{r3, r4, r5, pc}
 8009b9e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ba0:	b112      	cbz	r2, 8009ba8 <_raise_r+0x1e>
 8009ba2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ba6:	b94b      	cbnz	r3, 8009bbc <_raise_r+0x32>
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f000 f831 	bl	8009c10 <_getpid_r>
 8009bae:	462a      	mov	r2, r5
 8009bb0:	4601      	mov	r1, r0
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bb8:	f000 b818 	b.w	8009bec <_kill_r>
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d00a      	beq.n	8009bd6 <_raise_r+0x4c>
 8009bc0:	1c59      	adds	r1, r3, #1
 8009bc2:	d103      	bne.n	8009bcc <_raise_r+0x42>
 8009bc4:	2316      	movs	r3, #22
 8009bc6:	6003      	str	r3, [r0, #0]
 8009bc8:	2001      	movs	r0, #1
 8009bca:	e7e7      	b.n	8009b9c <_raise_r+0x12>
 8009bcc:	2400      	movs	r4, #0
 8009bce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	4798      	blx	r3
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	e7e0      	b.n	8009b9c <_raise_r+0x12>
	...

08009bdc <raise>:
 8009bdc:	4b02      	ldr	r3, [pc, #8]	; (8009be8 <raise+0xc>)
 8009bde:	4601      	mov	r1, r0
 8009be0:	6818      	ldr	r0, [r3, #0]
 8009be2:	f7ff bfd2 	b.w	8009b8a <_raise_r>
 8009be6:	bf00      	nop
 8009be8:	2000000c 	.word	0x2000000c

08009bec <_kill_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4d07      	ldr	r5, [pc, #28]	; (8009c0c <_kill_r+0x20>)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	602b      	str	r3, [r5, #0]
 8009bfa:	f7f7 fe29 	bl	8001850 <_kill>
 8009bfe:	1c43      	adds	r3, r0, #1
 8009c00:	d102      	bne.n	8009c08 <_kill_r+0x1c>
 8009c02:	682b      	ldr	r3, [r5, #0]
 8009c04:	b103      	cbz	r3, 8009c08 <_kill_r+0x1c>
 8009c06:	6023      	str	r3, [r4, #0]
 8009c08:	bd38      	pop	{r3, r4, r5, pc}
 8009c0a:	bf00      	nop
 8009c0c:	2000030c 	.word	0x2000030c

08009c10 <_getpid_r>:
 8009c10:	f7f7 be16 	b.w	8001840 <_getpid>

08009c14 <_init>:
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	bf00      	nop
 8009c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c1a:	bc08      	pop	{r3}
 8009c1c:	469e      	mov	lr, r3
 8009c1e:	4770      	bx	lr

08009c20 <_fini>:
 8009c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c22:	bf00      	nop
 8009c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c26:	bc08      	pop	{r3}
 8009c28:	469e      	mov	lr, r3
 8009c2a:	4770      	bx	lr
