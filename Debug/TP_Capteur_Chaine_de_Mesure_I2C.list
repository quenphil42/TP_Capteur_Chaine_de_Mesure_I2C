
TP_Capteur_Chaine_de_Mesure_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acd4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  0800aeb8  0800aeb8  0001aeb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b898  0800b898  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b898  0800b898  0001b898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8a0  0800b8a0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8a0  0800b8a0  0001b8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8a4  0800b8a4  0001b8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b8a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200001e0  0800ba88  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  0800ba88  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b92  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002767  00000000  00000000  00031da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00034510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  000352a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eee8  00000000  00000000  00035f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120ee  00000000  00000000  00054e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb98e  00000000  00000000  00066eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012287c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a8  00000000  00000000  001228cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ae9c 	.word	0x0800ae9c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800ae9c 	.word	0x0800ae9c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <SearchBMP280>:
 * @param bcom
 *
 * @retval None
 */
void SearchBMP280()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8
	int result;
	uint8_t bcom[MAX_COM_BUF];

	bcom[0] = BMP_ID_REG;
 800104e:	23e0      	movs	r3, #224	; 0xe0
 8001050:	713b      	strb	r3, [r7, #4]
	printf("Recherche Capteur BMP280\r\n\n");
 8001052:	481e      	ldr	r0, [pc, #120]	; (80010cc <SearchBMP280+0x84>)
 8001054:	f005 f996 	bl	8006384 <puts>

	result = HAL_I2C_Master_Transmit(&hi2c1, BMP_ADDR, bcom, 1, HAL_TIMEOUT); //bcom = addresse de bcom[0]
 8001058:	1d3a      	adds	r2, r7, #4
 800105a:	2303      	movs	r3, #3
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	21ee      	movs	r1, #238	; 0xee
 8001062:	481b      	ldr	r0, [pc, #108]	; (80010d0 <SearchBMP280+0x88>)
 8001064:	f001 fb2c 	bl	80026c0 <HAL_I2C_Master_Transmit>
 8001068:	4603      	mov	r3, r0
 800106a:	60fb      	str	r3, [r7, #12]
	if(result != HAL_OK)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <SearchBMP280+0x34>
		{
			printf("Error I2C Transmit SearchBMP280\r\n");
 8001072:	4818      	ldr	r0, [pc, #96]	; (80010d4 <SearchBMP280+0x8c>)
 8001074:	f005 f986 	bl	8006384 <puts>
			Error_Handler();
 8001078:	f000 fd74 	bl	8001b64 <Error_Handler>
		}

	result = HAL_I2C_Master_Receive(&hi2c1, BMP_ADDR, bcom+1, 1, HAL_TIMEOUT);
 800107c:	1d3a      	adds	r2, r7, #4
 800107e:	3201      	adds	r2, #1
 8001080:	2303      	movs	r3, #3
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	21ee      	movs	r1, #238	; 0xee
 8001088:	4811      	ldr	r0, [pc, #68]	; (80010d0 <SearchBMP280+0x88>)
 800108a:	f001 fc0d 	bl	80028a8 <HAL_I2C_Master_Receive>
 800108e:	4603      	mov	r3, r0
 8001090:	60fb      	str	r3, [r7, #12]
	if(result != HAL_OK)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <SearchBMP280+0x5a>
		{
			printf("Error I2C Receive SearchBMP280\r\n");
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <SearchBMP280+0x90>)
 800109a:	f005 f973 	bl	8006384 <puts>
			Error_Handler();
 800109e:	f000 fd61 	bl	8001b64 <Error_Handler>
		}

	printf("Registre : %d et contenu %d\r\n\n", bcom[0], bcom[1]);
 80010a2:	793b      	ldrb	r3, [r7, #4]
 80010a4:	4619      	mov	r1, r3
 80010a6:	797b      	ldrb	r3, [r7, #5]
 80010a8:	461a      	mov	r2, r3
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <SearchBMP280+0x94>)
 80010ac:	f005 f8ce 	bl	800624c <iprintf>
	if (bcom[1]==BMP_WHO_AM_I_ID_VAL) printf("Capteur BMP280 trouve\r\n\n");
 80010b0:	797b      	ldrb	r3, [r7, #5]
 80010b2:	2b58      	cmp	r3, #88	; 0x58
 80010b4:	d103      	bne.n	80010be <SearchBMP280+0x76>
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <SearchBMP280+0x98>)
 80010b8:	f005 f964 	bl	8006384 <puts>
	else printf("Error : Capteur non trouve, verifier addresse ID_REG\r\n\n\n");
}
 80010bc:	e002      	b.n	80010c4 <SearchBMP280+0x7c>
	else printf("Error : Capteur non trouve, verifier addresse ID_REG\r\n\n\n");
 80010be:	4809      	ldr	r0, [pc, #36]	; (80010e4 <SearchBMP280+0x9c>)
 80010c0:	f005 f960 	bl	8006384 <puts>
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	0800aeb8 	.word	0x0800aeb8
 80010d0:	200001fc 	.word	0x200001fc
 80010d4:	0800aed4 	.word	0x0800aed4
 80010d8:	0800aef8 	.word	0x0800aef8
 80010dc:	0800af18 	.word	0x0800af18
 80010e0:	0800af38 	.word	0x0800af38
 80010e4:	0800af50 	.word	0x0800af50

080010e8 <SearchMPU9250>:
 * @param bcom (uint8)
 *
 * @retval None
 */
void SearchMPU9250()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af02      	add	r7, sp, #8
	  int result;
	  uint8_t bcom[MAX_COM_BUF];

	  bcom[0] = MPU_ID_REG;
 80010ee:	2375      	movs	r3, #117	; 0x75
 80010f0:	713b      	strb	r3, [r7, #4]
	  //Ici je vais envoyer à l'adresse hardware un handshake pr lui demander la valeur qu'il a à l'adresse WHO_AMI_I
	  printf("Recherche Capteur MPU9250\r\n\n");
 80010f2:	481e      	ldr	r0, [pc, #120]	; (800116c <SearchMPU9250+0x84>)
 80010f4:	f005 f946 	bl	8006384 <puts>

	  result = HAL_I2C_Master_Transmit(&hi2c1, MPU_ADDR, bcom, 1, HAL_TIMEOUT); //bcom = addresse de bcom[0]
 80010f8:	1d3a      	adds	r2, r7, #4
 80010fa:	2303      	movs	r3, #3
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	21d0      	movs	r1, #208	; 0xd0
 8001102:	481b      	ldr	r0, [pc, #108]	; (8001170 <SearchMPU9250+0x88>)
 8001104:	f001 fadc 	bl	80026c0 <HAL_I2C_Master_Transmit>
 8001108:	4603      	mov	r3, r0
 800110a:	60fb      	str	r3, [r7, #12]
	  if(result != HAL_OK)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <SearchMPU9250+0x34>
		{
		  printf("Error I2C Transmit SearchMPU9250\r\n");
 8001112:	4818      	ldr	r0, [pc, #96]	; (8001174 <SearchMPU9250+0x8c>)
 8001114:	f005 f936 	bl	8006384 <puts>
		  Error_Handler();
 8001118:	f000 fd24 	bl	8001b64 <Error_Handler>
		}

	  result = HAL_I2C_Master_Receive(&hi2c1, MPU_ADDR, bcom+1, 1, HAL_TIMEOUT);
 800111c:	1d3a      	adds	r2, r7, #4
 800111e:	3201      	adds	r2, #1
 8001120:	2303      	movs	r3, #3
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	21d0      	movs	r1, #208	; 0xd0
 8001128:	4811      	ldr	r0, [pc, #68]	; (8001170 <SearchMPU9250+0x88>)
 800112a:	f001 fbbd 	bl	80028a8 <HAL_I2C_Master_Receive>
 800112e:	4603      	mov	r3, r0
 8001130:	60fb      	str	r3, [r7, #12]
	  if(result != HAL_OK)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <SearchMPU9250+0x5a>
	  {
	  	printf("Error I2C Receive SearchMPU9250\r\n");
 8001138:	480f      	ldr	r0, [pc, #60]	; (8001178 <SearchMPU9250+0x90>)
 800113a:	f005 f923 	bl	8006384 <puts>
	  	Error_Handler();
 800113e:	f000 fd11 	bl	8001b64 <Error_Handler>
	  }

	  printf("En decimal, Registre : %d et contenu %d\r\n\n", bcom[0], bcom[1]);
 8001142:	793b      	ldrb	r3, [r7, #4]
 8001144:	4619      	mov	r1, r3
 8001146:	797b      	ldrb	r3, [r7, #5]
 8001148:	461a      	mov	r2, r3
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <SearchMPU9250+0x94>)
 800114c:	f005 f87e 	bl	800624c <iprintf>
	  if (bcom[1]==MPU_WHO_AM_I_ID_VAL) printf("Capteur MPU9250 trouve\r\n\n");
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	2b71      	cmp	r3, #113	; 0x71
 8001154:	d103      	bne.n	800115e <SearchMPU9250+0x76>
 8001156:	480a      	ldr	r0, [pc, #40]	; (8001180 <SearchMPU9250+0x98>)
 8001158:	f005 f914 	bl	8006384 <puts>
	  else printf("Error : Capteur non trouve, verifier addresse WHO_AM_I_MPU9250\r\n\n\n");
}
 800115c:	e002      	b.n	8001164 <SearchMPU9250+0x7c>
	  else printf("Error : Capteur non trouve, verifier addresse WHO_AM_I_MPU9250\r\n\n\n");
 800115e:	4809      	ldr	r0, [pc, #36]	; (8001184 <SearchMPU9250+0x9c>)
 8001160:	f005 f910 	bl	8006384 <puts>
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	0800af88 	.word	0x0800af88
 8001170:	200001fc 	.word	0x200001fc
 8001174:	0800afa4 	.word	0x0800afa4
 8001178:	0800afc8 	.word	0x0800afc8
 800117c:	0800afec 	.word	0x0800afec
 8001180:	0800b018 	.word	0x0800b018
 8001184:	0800b034 	.word	0x0800b034

08001188 <TestSensorOnI2C>:
 * @param None
 *
 * @retval None
 */
void TestSensorOnI2C(int * tab)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	 int u = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

	 printf("debut de lecture du bus I2c\r\n\n");
 8001194:	4818      	ldr	r0, [pc, #96]	; (80011f8 <TestSensorOnI2C+0x70>)
 8001196:	f005 f8f5 	bl	8006384 <puts>
	  for(int i =0; i< 256; i++)
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	e021      	b.n	80011e4 <TestSensorOnI2C+0x5c>
	  {
		  int result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i),2,2);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	b299      	uxth	r1, r3
 80011a4:	2302      	movs	r3, #2
 80011a6:	2202      	movs	r2, #2
 80011a8:	4814      	ldr	r0, [pc, #80]	; (80011fc <TestSensorOnI2C+0x74>)
 80011aa:	f001 fea1 	bl	8002ef0 <HAL_I2C_IsDeviceReady>
 80011ae:	4603      	mov	r3, r0
 80011b0:	60fb      	str	r3, [r7, #12]
		  if (result != HAL_OK)//HAL_ERROR or HAL_TIMEOUT
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <TestSensorOnI2C+0x36>
		  {
			  printf("."); //No ACKreceived at the address
 80011b8:	202e      	movs	r0, #46	; 0x2e
 80011ba:	f005 f85f 	bl	800627c <putchar>
		  }
		  if (result == HAL_OK)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10c      	bne.n	80011de <TestSensorOnI2C+0x56>
		  {
			  tab[u] = i;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
			  u++;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
			  printf("0x%X",i); //Received an ACK at the address
 80011d6:	6939      	ldr	r1, [r7, #16]
 80011d8:	4809      	ldr	r0, [pc, #36]	; (8001200 <TestSensorOnI2C+0x78>)
 80011da:	f005 f837 	bl	800624c <iprintf>
	  for(int i =0; i< 256; i++)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	3301      	adds	r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	2bff      	cmp	r3, #255	; 0xff
 80011e8:	ddda      	ble.n	80011a0 <TestSensorOnI2C+0x18>
		  }
	  }
	  printf("\r\n\nfin de lecture du bus I2C\r\n\n\n");
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <TestSensorOnI2C+0x7c>)
 80011ec:	f005 f8ca 	bl	8006384 <puts>
}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	0800b078 	.word	0x0800b078
 80011fc:	200001fc 	.word	0x200001fc
 8001200:	0800b098 	.word	0x0800b098
 8001204:	0800b0a0 	.word	0x0800b0a0

08001208 <PrintTab>:
 * @param tab
 *
 * @retval None
 */
void PrintTab(int * tab)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	printf("les adresses detectees sont :\r\n");
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <PrintTab+0x58>)
 8001212:	f005 f8b7 	bl	8006384 <puts>
	for(int i = 0; i<8; i++)
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e016      	b.n	800124a <PrintTab+0x42>
	{
		if(tab[i]!=0) printf("%d\r\n", tab[i]);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d009      	beq.n	800123e <PrintTab+0x36>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	480b      	ldr	r0, [pc, #44]	; (8001264 <PrintTab+0x5c>)
 8001238:	f005 f808 	bl	800624c <iprintf>
 800123c:	e002      	b.n	8001244 <PrintTab+0x3c>
		else printf("NULL\r\n");
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <PrintTab+0x60>)
 8001240:	f005 f8a0 	bl	8006384 <puts>
	for(int i = 0; i<8; i++)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3301      	adds	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b07      	cmp	r3, #7
 800124e:	dde5      	ble.n	800121c <PrintTab+0x14>
	}

	printf("Rappel : \r\nLes adresses paires sont en ecritures\r\n"
 8001250:	4806      	ldr	r0, [pc, #24]	; (800126c <PrintTab+0x64>)
 8001252:	f005 f897 	bl	8006384 <puts>
			"les adresses impaires sont en lecture\r\n\n");

}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	0800b0c0 	.word	0x0800b0c0
 8001264:	0800b0e0 	.word	0x0800b0e0
 8001268:	0800b0e8 	.word	0x0800b0e8
 800126c:	0800b0f0 	.word	0x0800b0f0

08001270 <Init_IMU_10DOF>:
 * @param i2c_handle
 *
 * @retval None
 */
void Init_IMU_10DOF(I2C_HandleTypeDef* i2c_handle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af04      	add	r7, sp, #16
 8001276:	6078      	str	r0, [r7, #4]
	int result;
	uint8_t bcom[MAX_COM_BUF];


	//HW Reset
	printf("debut reset value\r\n");
 8001278:	4854      	ldr	r0, [pc, #336]	; (80013cc <Init_IMU_10DOF+0x15c>)
 800127a:	f005 f883 	bl	8006384 <puts>

	printf("debut set PLL\r\n");
 800127e:	4854      	ldr	r0, [pc, #336]	; (80013d0 <Init_IMU_10DOF+0x160>)
 8001280:	f005 f880 	bl	8006384 <puts>
	bcom[0] = 0x02; //choix de la PLL donnant le plus de precision
 8001284:	2302      	movs	r3, #2
 8001286:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR, PWR_MGMT_1,1, bcom, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	2301      	movs	r3, #1
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	226b      	movs	r2, #107	; 0x6b
 800129c:	21d0      	movs	r1, #208	; 0xd0
 800129e:	484d      	ldr	r0, [pc, #308]	; (80013d4 <Init_IMU_10DOF+0x164>)
 80012a0:	f001 fbf8 	bl	8002a94 <HAL_I2C_Mem_Write>
 80012a4:	4603      	mov	r3, r0
 80012a6:	617b      	str	r3, [r7, #20]
	if(result != HAL_OK)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d004      	beq.n	80012b8 <Init_IMU_10DOF+0x48>
	{
		printf("Error I2C Mem Write Init_IMU_10_DOF Reset MPU\r\n");
 80012ae:	484a      	ldr	r0, [pc, #296]	; (80013d8 <Init_IMU_10DOF+0x168>)
 80012b0:	f005 f868 	bl	8006384 <puts>
		Error_Handler();
 80012b4:	f000 fc56 	bl	8001b64 <Error_Handler>
	}

	HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR, PWR_MGMT_1, 1, bcom, 1, HAL_MAX_DELAY);
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
 80012bc:	9302      	str	r3, [sp, #8]
 80012be:	2301      	movs	r3, #1
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2301      	movs	r3, #1
 80012ca:	226b      	movs	r2, #107	; 0x6b
 80012cc:	21d0      	movs	r1, #208	; 0xd0
 80012ce:	4841      	ldr	r0, [pc, #260]	; (80013d4 <Init_IMU_10DOF+0x164>)
 80012d0:	f001 fcf4 	bl	8002cbc <HAL_I2C_Mem_Read>
	printf("La valeur de la PLL est : 0x%x\r\n", bcom[0]);
 80012d4:	7b3b      	ldrb	r3, [r7, #12]
 80012d6:	4619      	mov	r1, r3
 80012d8:	4840      	ldr	r0, [pc, #256]	; (80013dc <Init_IMU_10DOF+0x16c>)
 80012da:	f004 ffb7 	bl	800624c <iprintf>


	printf("Init MPU\r\n");
 80012de:	4840      	ldr	r0, [pc, #256]	; (80013e0 <Init_IMU_10DOF+0x170>)
 80012e0:	f005 f850 	bl	8006384 <puts>

	bcom[0] = MPU_RESET_VALUE;
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR, PWR_MGMT_1,1, bcom, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	226b      	movs	r2, #107	; 0x6b
 80012fc:	21d0      	movs	r1, #208	; 0xd0
 80012fe:	4835      	ldr	r0, [pc, #212]	; (80013d4 <Init_IMU_10DOF+0x164>)
 8001300:	f001 fbc8 	bl	8002a94 <HAL_I2C_Mem_Write>
 8001304:	4603      	mov	r3, r0
 8001306:	617b      	str	r3, [r7, #20]
	if(result != HAL_OK)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d004      	beq.n	8001318 <Init_IMU_10DOF+0xa8>
	{
		printf("Error I2C Mem Write Init_IMU_10_DOF Reset MPU\r\n");
 800130e:	4832      	ldr	r0, [pc, #200]	; (80013d8 <Init_IMU_10DOF+0x168>)
 8001310:	f005 f838 	bl	8006384 <puts>
		Error_Handler();
 8001314:	f000 fc26 	bl	8001b64 <Error_Handler>
	}
	result = HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR, PWR_MGMT_1,1, bcom+1, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	3301      	adds	r3, #1
 800131e:	f04f 32ff 	mov.w	r2, #4294967295
 8001322:	9202      	str	r2, [sp, #8]
 8001324:	2201      	movs	r2, #1
 8001326:	9201      	str	r2, [sp, #4]
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	226b      	movs	r2, #107	; 0x6b
 800132e:	21d0      	movs	r1, #208	; 0xd0
 8001330:	4828      	ldr	r0, [pc, #160]	; (80013d4 <Init_IMU_10DOF+0x164>)
 8001332:	f001 fcc3 	bl	8002cbc <HAL_I2C_Mem_Read>
 8001336:	4603      	mov	r3, r0
 8001338:	617b      	str	r3, [r7, #20]





	printf("\nInit BMP\r\n");
 800133a:	482a      	ldr	r0, [pc, #168]	; (80013e4 <Init_IMU_10DOF+0x174>)
 800133c:	f005 f822 	bl	8006384 <puts>


	bcom[0] = BMP_RESET_VALUE;
 8001340:	23b6      	movs	r3, #182	; 0xb6
 8001342:	733b      	strb	r3, [r7, #12]
	result = HAL_I2C_Mem_Write(&hi2c1, BMP_ADDR, PWR_MGMT_1,1, bcom, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2301      	movs	r3, #1
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	226b      	movs	r2, #107	; 0x6b
 8001358:	21ee      	movs	r1, #238	; 0xee
 800135a:	481e      	ldr	r0, [pc, #120]	; (80013d4 <Init_IMU_10DOF+0x164>)
 800135c:	f001 fb9a 	bl	8002a94 <HAL_I2C_Mem_Write>
 8001360:	4603      	mov	r3, r0
 8001362:	617b      	str	r3, [r7, #20]
	if(result != HAL_OK)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <Init_IMU_10DOF+0x104>
	{
		printf("Error I2C Mem Write Init_IMU_10_DOF Reset BMP\r\n");
 800136a:	481f      	ldr	r0, [pc, #124]	; (80013e8 <Init_IMU_10DOF+0x178>)
 800136c:	f005 f80a 	bl	8006384 <puts>
		Error_Handler();
 8001370:	f000 fbf8 	bl	8001b64 <Error_Handler>
	}
	result = HAL_I2C_Mem_Read(&hi2c1, BMP_ADDR, PWR_MGMT_1,1, bcom+1, 1, HAL_MAX_DELAY); //bcom = addresse de bcom[0]
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	3301      	adds	r3, #1
 800137a:	f04f 32ff 	mov.w	r2, #4294967295
 800137e:	9202      	str	r2, [sp, #8]
 8001380:	2201      	movs	r2, #1
 8001382:	9201      	str	r2, [sp, #4]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	226b      	movs	r2, #107	; 0x6b
 800138a:	21ee      	movs	r1, #238	; 0xee
 800138c:	4811      	ldr	r0, [pc, #68]	; (80013d4 <Init_IMU_10DOF+0x164>)
 800138e:	f001 fc95 	bl	8002cbc <HAL_I2C_Mem_Read>
 8001392:	4603      	mov	r3, r0
 8001394:	617b      	str	r3, [r7, #20]
	if(result != HAL_OK)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d008      	beq.n	80013ae <Init_IMU_10DOF+0x13e>
	{
		printf("Error I2C Mem Read Init_IMU_10_DOF Reset BMP\r\n");
 800139c:	4813      	ldr	r0, [pc, #76]	; (80013ec <Init_IMU_10DOF+0x17c>)
 800139e:	f004 fff1 	bl	8006384 <puts>
		printf("result = %d\r\n", result);
 80013a2:	6979      	ldr	r1, [r7, #20]
 80013a4:	4812      	ldr	r0, [pc, #72]	; (80013f0 <Init_IMU_10DOF+0x180>)
 80013a6:	f004 ff51 	bl	800624c <iprintf>
		Error_Handler();
 80013aa:	f000 fbdb 	bl	8001b64 <Error_Handler>
	}
	printf("reset value BMP = 0x%x\r\n",bcom[1]);
 80013ae:	7b7b      	ldrb	r3, [r7, #13]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4810      	ldr	r0, [pc, #64]	; (80013f4 <Init_IMU_10DOF+0x184>)
 80013b4:	f004 ff4a 	bl	800624c <iprintf>


	HAL_Delay(100); //laisse le temps d'effacer tous les registres
 80013b8:	2064      	movs	r0, #100	; 0x64
 80013ba:	f000 fe51 	bl	8002060 <HAL_Delay>
	printf("\nfin reset value\r\n\n");
 80013be:	480e      	ldr	r0, [pc, #56]	; (80013f8 <Init_IMU_10DOF+0x188>)
 80013c0:	f004 ffe0 	bl	8006384 <puts>


}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	0800b14c 	.word	0x0800b14c
 80013d0:	0800b160 	.word	0x0800b160
 80013d4:	200001fc 	.word	0x200001fc
 80013d8:	0800b170 	.word	0x0800b170
 80013dc:	0800b1a0 	.word	0x0800b1a0
 80013e0:	0800b1c4 	.word	0x0800b1c4
 80013e4:	0800b1d0 	.word	0x0800b1d0
 80013e8:	0800b1dc 	.word	0x0800b1dc
 80013ec:	0800b20c 	.word	0x0800b20c
 80013f0:	0800b23c 	.word	0x0800b23c
 80013f4:	0800b24c 	.word	0x0800b24c
 80013f8:	0800b268 	.word	0x0800b268
 80013fc:	00000000 	.word	0x00000000

08001400 <Measure_T>:
 * @param I2C_HandleTypeDef* i2c_handle, double* temp
 *
 * @retval None
 */
void Measure_T(I2C_HandleTypeDef* i2c_handle, double* temp)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af04      	add	r7, sp, #16
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	uint8_t tab_temp[2]; //car valeures non signées

	HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR, TEMP_OUT_H, 1, tab_temp, 2, HAL_MAX_DELAY);
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	2302      	movs	r3, #2
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2301      	movs	r3, #1
 800141c:	2241      	movs	r2, #65	; 0x41
 800141e:	21d0      	movs	r1, #208	; 0xd0
 8001420:	4819      	ldr	r0, [pc, #100]	; (8001488 <Measure_T+0x88>)
 8001422:	f001 fc4b 	bl	8002cbc <HAL_I2C_Mem_Read>
	*temp = (((tab_temp[0]<<8)+tab_temp[1]) - 21.0)/333.87 + 21.0;
 8001426:	7b3b      	ldrb	r3, [r7, #12]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	7b7a      	ldrb	r2, [r7, #13]
 800142c:	4413      	add	r3, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f8a0 	bl	8000574 <__aeabi_i2d>
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <Measure_T+0x8c>)
 800143a:	f7fe ff4d 	bl	80002d8 <__aeabi_dsub>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	a30e      	add	r3, pc, #56	; (adr r3, 8001480 <Measure_T+0x80>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff fa26 	bl	800089c <__aeabi_ddiv>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <Measure_T+0x8c>)
 800145e:	f7fe ff3d 	bl	80002dc <__adddf3>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	6839      	ldr	r1, [r7, #0]
 8001468:	e9c1 2300 	strd	r2, r3, [r1]
	printf("temp = %1.1f\r\n", *temp);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	4807      	ldr	r0, [pc, #28]	; (8001490 <Measure_T+0x90>)
 8001474:	f004 feea 	bl	800624c <iprintf>
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	851eb852 	.word	0x851eb852
 8001484:	4074ddeb 	.word	0x4074ddeb
 8001488:	200001fc 	.word	0x200001fc
 800148c:	40350000 	.word	0x40350000
 8001490:	0800b27c 	.word	0x0800b27c
 8001494:	00000000 	.word	0x00000000

08001498 <Measure_A>:

void Measure_A(I2C_HandleTypeDef* i2c_handle, double* accel)
{
 8001498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800149c:	b090      	sub	sp, #64	; 0x40
 800149e:	af06      	add	r7, sp, #24
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
	uint8_t tab_accel[6]; //car valeures signées

	HAL_I2C_Mem_Read(i2c_handle, MPU_ADDR, ACCEL_XOUT_H, 1, tab_accel, 6, HAL_MAX_DELAY);
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2306      	movs	r3, #6
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2301      	movs	r3, #1
 80014b6:	223b      	movs	r2, #59	; 0x3b
 80014b8:	21d0      	movs	r1, #208	; 0xd0
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f001 fbfe 	bl	8002cbc <HAL_I2C_Mem_Read>

	int16_t Xbrut = ((tab_accel[0]<<8) + tab_accel[1]) ;
 80014c0:	7a3b      	ldrb	r3, [r7, #8]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	7a7b      	ldrb	r3, [r7, #9]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	4413      	add	r3, r2
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t Ybrut = ((tab_accel[2]<<8) + tab_accel[3]) ;
 80014d2:	7abb      	ldrb	r3, [r7, #10]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	b29a      	uxth	r2, r3
 80014da:	7afb      	ldrb	r3, [r7, #11]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4413      	add	r3, r2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t Zbrut = ((tab_accel[4]<<8) + tab_accel[5]) ;
 80014e4:	7b3b      	ldrb	r3, [r7, #12]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	7b7b      	ldrb	r3, [r7, #13]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	847b      	strh	r3, [r7, #34]	; 0x22

	float X = Xbrut / ACCEL_FS_SEL_2G;
 80014f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f83a 	bl	8000574 <__aeabi_i2d>
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	4b54      	ldr	r3, [pc, #336]	; (8001658 <Measure_A+0x1c0>)
 8001506:	f7ff f9c9 	bl	800089c <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fb91 	bl	8000c38 <__aeabi_d2f>
 8001516:	4603      	mov	r3, r0
 8001518:	61fb      	str	r3, [r7, #28]
	float Y = Ybrut / ACCEL_FS_SEL_2G;
 800151a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f828 	bl	8000574 <__aeabi_i2d>
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <Measure_A+0x1c0>)
 800152a:	f7ff f9b7 	bl	800089c <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fb7f 	bl	8000c38 <__aeabi_d2f>
 800153a:	4603      	mov	r3, r0
 800153c:	61bb      	str	r3, [r7, #24]
	float Z = Zbrut / ACCEL_FS_SEL_2G;
 800153e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f816 	bl	8000574 <__aeabi_i2d>
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4b42      	ldr	r3, [pc, #264]	; (8001658 <Measure_A+0x1c0>)
 800154e:	f7ff f9a5 	bl	800089c <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fb6d 	bl	8000c38 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
 8001560:	617b      	str	r3, [r7, #20]

	float G = sqrt(pow(Xbrut, 2)+pow(Ybrut, 2)+pow(Zbrut, 2))/ ACCEL_FS_SEL_2G;
 8001562:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f804 	bl	8000574 <__aeabi_i2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001650 <Measure_A+0x1b8>
 8001574:	ec43 2b10 	vmov	d0, r2, r3
 8001578:	f008 fd48 	bl	800a00c <pow>
 800157c:	ec55 4b10 	vmov	r4, r5, d0
 8001580:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fff5 	bl	8000574 <__aeabi_i2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001650 <Measure_A+0x1b8>
 8001592:	ec43 2b10 	vmov	d0, r2, r3
 8001596:	f008 fd39 	bl	800a00c <pow>
 800159a:	ec53 2b10 	vmov	r2, r3, d0
 800159e:	4620      	mov	r0, r4
 80015a0:	4629      	mov	r1, r5
 80015a2:	f7fe fe9b 	bl	80002dc <__adddf3>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4614      	mov	r4, r2
 80015ac:	461d      	mov	r5, r3
 80015ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffde 	bl	8000574 <__aeabi_i2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8001650 <Measure_A+0x1b8>
 80015c0:	ec43 2b10 	vmov	d0, r2, r3
 80015c4:	f008 fd22 	bl	800a00c <pow>
 80015c8:	ec53 2b10 	vmov	r2, r3, d0
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7fe fe84 	bl	80002dc <__adddf3>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	ec43 2b17 	vmov	d7, r2, r3
 80015dc:	eeb0 0a47 	vmov.f32	s0, s14
 80015e0:	eef0 0a67 	vmov.f32	s1, s15
 80015e4:	f008 fd82 	bl	800a0ec <sqrt>
 80015e8:	ec51 0b10 	vmov	r0, r1, d0
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <Measure_A+0x1c0>)
 80015f2:	f7ff f953 	bl	800089c <__aeabi_ddiv>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f7ff fb1b 	bl	8000c38 <__aeabi_d2f>
 8001602:	4603      	mov	r3, r0
 8001604:	613b      	str	r3, [r7, #16]

	printf("X = %f		Y = %f		Z = %f		G = %f\r\n", X,Y,Z,G);
 8001606:	69f8      	ldr	r0, [r7, #28]
 8001608:	f7fe ffc6 	bl	8000598 <__aeabi_f2d>
 800160c:	4682      	mov	sl, r0
 800160e:	468b      	mov	fp, r1
 8001610:	69b8      	ldr	r0, [r7, #24]
 8001612:	f7fe ffc1 	bl	8000598 <__aeabi_f2d>
 8001616:	4604      	mov	r4, r0
 8001618:	460d      	mov	r5, r1
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7fe ffbc 	bl	8000598 <__aeabi_f2d>
 8001620:	4680      	mov	r8, r0
 8001622:	4689      	mov	r9, r1
 8001624:	6938      	ldr	r0, [r7, #16]
 8001626:	f7fe ffb7 	bl	8000598 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001632:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001636:	e9cd 4500 	strd	r4, r5, [sp]
 800163a:	4652      	mov	r2, sl
 800163c:	465b      	mov	r3, fp
 800163e:	4807      	ldr	r0, [pc, #28]	; (800165c <Measure_A+0x1c4>)
 8001640:	f004 fe04 	bl	800624c <iprintf>
}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800164e:	bf00      	nop
 8001650:	00000000 	.word	0x00000000
 8001654:	40000000 	.word	0x40000000
 8001658:	40d00000 	.word	0x40d00000
 800165c:	0800b28c 	.word	0x0800b28c

08001660 <Measure_G>:

void Measure_G(I2C_HandleTypeDef* i2c_handle, double* gyro)
{
 8001660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001664:	b090      	sub	sp, #64	; 0x40
 8001666:	af06      	add	r7, sp, #24
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
	uint8_t tab_gyro[6]; //car valeures signées

	HAL_I2C_Mem_Read(i2c_handle, MPU_ADDR, GYRO_XOUT_H, 1, tab_gyro, 6, HAL_MAX_DELAY);
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	2306      	movs	r3, #6
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2301      	movs	r3, #1
 800167e:	2243      	movs	r2, #67	; 0x43
 8001680:	21d0      	movs	r1, #208	; 0xd0
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f001 fb1a 	bl	8002cbc <HAL_I2C_Mem_Read>

	int16_t Xbrut = ((tab_gyro[0]<<8) + tab_gyro[1]) ;
 8001688:	7a3b      	ldrb	r3, [r7, #8]
 800168a:	b29b      	uxth	r3, r3
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b29a      	uxth	r2, r3
 8001690:	7a7b      	ldrb	r3, [r7, #9]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4413      	add	r3, r2
 8001696:	b29b      	uxth	r3, r3
 8001698:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t Ybrut = ((tab_gyro[2]<<8) + tab_gyro[3]) ;
 800169a:	7abb      	ldrb	r3, [r7, #10]
 800169c:	b29b      	uxth	r3, r3
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	7afb      	ldrb	r3, [r7, #11]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t Zbrut = ((tab_gyro[4]<<8) + tab_gyro[5]) ;
 80016ac:	7b3b      	ldrb	r3, [r7, #12]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	7b7b      	ldrb	r3, [r7, #13]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	847b      	strh	r3, [r7, #34]	; 0x22

	float X = Xbrut / SENSITIVITY_SCALE_FACTOR;
 80016be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff56 	bl	8000574 <__aeabi_i2d>
 80016c8:	a356      	add	r3, pc, #344	; (adr r3, 8001824 <Measure_G+0x1c4>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7ff f8e5 	bl	800089c <__aeabi_ddiv>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff faad 	bl	8000c38 <__aeabi_d2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	61fb      	str	r3, [r7, #28]
	float Y = Ybrut / SENSITIVITY_SCALE_FACTOR;
 80016e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff44 	bl	8000574 <__aeabi_i2d>
 80016ec:	a34d      	add	r3, pc, #308	; (adr r3, 8001824 <Measure_G+0x1c4>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7ff f8d3 	bl	800089c <__aeabi_ddiv>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f7ff fa9b 	bl	8000c38 <__aeabi_d2f>
 8001702:	4603      	mov	r3, r0
 8001704:	61bb      	str	r3, [r7, #24]
	float Z = Zbrut / SENSITIVITY_SCALE_FACTOR;
 8001706:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff32 	bl	8000574 <__aeabi_i2d>
 8001710:	a344      	add	r3, pc, #272	; (adr r3, 8001824 <Measure_G+0x1c4>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7ff f8c1 	bl	800089c <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff fa89 	bl	8000c38 <__aeabi_d2f>
 8001726:	4603      	mov	r3, r0
 8001728:	617b      	str	r3, [r7, #20]

	float V = sqrt(pow(Xbrut, 2)+pow(Ybrut, 2)+pow(Zbrut, 2))/ SENSITIVITY_SCALE_FACTOR;
 800172a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff20 	bl	8000574 <__aeabi_i2d>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001818 <Measure_G+0x1b8>
 800173c:	ec43 2b10 	vmov	d0, r2, r3
 8001740:	f008 fc64 	bl	800a00c <pow>
 8001744:	ec55 4b10 	vmov	r4, r5, d0
 8001748:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff11 	bl	8000574 <__aeabi_i2d>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001818 <Measure_G+0x1b8>
 800175a:	ec43 2b10 	vmov	d0, r2, r3
 800175e:	f008 fc55 	bl	800a00c <pow>
 8001762:	ec53 2b10 	vmov	r2, r3, d0
 8001766:	4620      	mov	r0, r4
 8001768:	4629      	mov	r1, r5
 800176a:	f7fe fdb7 	bl	80002dc <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4614      	mov	r4, r2
 8001774:	461d      	mov	r5, r3
 8001776:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fefa 	bl	8000574 <__aeabi_i2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8001818 <Measure_G+0x1b8>
 8001788:	ec43 2b10 	vmov	d0, r2, r3
 800178c:	f008 fc3e 	bl	800a00c <pow>
 8001790:	ec53 2b10 	vmov	r2, r3, d0
 8001794:	4620      	mov	r0, r4
 8001796:	4629      	mov	r1, r5
 8001798:	f7fe fda0 	bl	80002dc <__adddf3>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	ec43 2b17 	vmov	d7, r2, r3
 80017a4:	eeb0 0a47 	vmov.f32	s0, s14
 80017a8:	eef0 0a67 	vmov.f32	s1, s15
 80017ac:	f008 fc9e 	bl	800a0ec <sqrt>
 80017b0:	ec51 0b10 	vmov	r0, r1, d0
 80017b4:	a31b      	add	r3, pc, #108	; (adr r3, 8001824 <Measure_G+0x1c4>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7ff f86f 	bl	800089c <__aeabi_ddiv>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fa37 	bl	8000c38 <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	613b      	str	r3, [r7, #16]

	printf("Vx = %f		Vy = %f		Vz = %f		V = %f\r\n", X,Y,Z,V);
 80017ce:	69f8      	ldr	r0, [r7, #28]
 80017d0:	f7fe fee2 	bl	8000598 <__aeabi_f2d>
 80017d4:	4682      	mov	sl, r0
 80017d6:	468b      	mov	fp, r1
 80017d8:	69b8      	ldr	r0, [r7, #24]
 80017da:	f7fe fedd 	bl	8000598 <__aeabi_f2d>
 80017de:	4604      	mov	r4, r0
 80017e0:	460d      	mov	r5, r1
 80017e2:	6978      	ldr	r0, [r7, #20]
 80017e4:	f7fe fed8 	bl	8000598 <__aeabi_f2d>
 80017e8:	4680      	mov	r8, r0
 80017ea:	4689      	mov	r9, r1
 80017ec:	6938      	ldr	r0, [r7, #16]
 80017ee:	f7fe fed3 	bl	8000598 <__aeabi_f2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017fe:	e9cd 4500 	strd	r4, r5, [sp]
 8001802:	4652      	mov	r2, sl
 8001804:	465b      	mov	r3, fp
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <Measure_G+0x1c0>)
 8001808:	f004 fd20 	bl	800624c <iprintf>

}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001816:	bf00      	nop
 8001818:	00000000 	.word	0x00000000
 800181c:	40000000 	.word	0x40000000
 8001820:	0800b2b0 	.word	0x0800b2b0
 8001824:	00000000 	.word	0x00000000
 8001828:	40606000 	.word	0x40606000

0800182c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <MX_GPIO_Init+0xc4>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a2a      	ldr	r2, [pc, #168]	; (80018f0 <MX_GPIO_Init+0xc4>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <MX_GPIO_Init+0xc4>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <MX_GPIO_Init+0xc4>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <MX_GPIO_Init+0xc4>)
 8001860:	f043 0320 	orr.w	r3, r3, #32
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <MX_GPIO_Init+0xc4>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <MX_GPIO_Init+0xc4>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <MX_GPIO_Init+0xc4>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_GPIO_Init+0xc4>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_GPIO_Init+0xc4>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <MX_GPIO_Init+0xc4>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_GPIO_Init+0xc4>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2120      	movs	r1, #32
 80018a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018aa:	f000 fe61 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	480b      	ldr	r0, [pc, #44]	; (80018f4 <MX_GPIO_Init+0xc8>)
 80018c6:	f000 fcd1 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018ca:	2320      	movs	r3, #32
 80018cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e4:	f000 fcc2 	bl	800226c <HAL_GPIO_Init>

}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	; 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	48000800 	.word	0x48000800

080018f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <MX_I2C1_Init+0x74>)
 80018fe:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <MX_I2C1_Init+0x78>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <MX_I2C1_Init+0x74>)
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <MX_I2C1_Init+0x7c>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_I2C1_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <MX_I2C1_Init+0x74>)
 8001910:	2201      	movs	r2, #1
 8001912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <MX_I2C1_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_I2C1_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_I2C1_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_I2C1_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_I2C1_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001932:	480e      	ldr	r0, [pc, #56]	; (800196c <MX_I2C1_Init+0x74>)
 8001934:	f000 fe34 	bl	80025a0 <HAL_I2C_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800193e:	f000 f911 	bl	8001b64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001942:	2100      	movs	r1, #0
 8001944:	4809      	ldr	r0, [pc, #36]	; (800196c <MX_I2C1_Init+0x74>)
 8001946:	f001 fefb 	bl	8003740 <HAL_I2CEx_ConfigAnalogFilter>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001950:	f000 f908 	bl	8001b64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001954:	2100      	movs	r1, #0
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_I2C1_Init+0x74>)
 8001958:	f001 ff3d 	bl	80037d6 <HAL_I2CEx_ConfigDigitalFilter>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001962:	f000 f8ff 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200001fc 	.word	0x200001fc
 8001970:	40005400 	.word	0x40005400
 8001974:	30a0a7fb 	.word	0x30a0a7fb

08001978 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b09a      	sub	sp, #104	; 0x68
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	2244      	movs	r2, #68	; 0x44
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fdd5 	bl	8005548 <memset>
  if(i2cHandle->Instance==I2C1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <HAL_I2C_MspInit+0xa8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d136      	bne.n	8001a16 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019a8:	2340      	movs	r3, #64	; 0x40
 80019aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fd43 	bl	8004440 <HAL_RCCEx_PeriphCLKConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019c0:	f000 f8d0 	bl	8001b64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_I2C_MspInit+0xac>)
 80019c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c8:	4a16      	ldr	r2, [pc, #88]	; (8001a24 <HAL_I2C_MspInit+0xac>)
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_I2C_MspInit+0xac>)
 80019d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019e0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e2:	2312      	movs	r3, #18
 80019e4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ee:	2304      	movs	r3, #4
 80019f0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019f6:	4619      	mov	r1, r3
 80019f8:	480b      	ldr	r0, [pc, #44]	; (8001a28 <HAL_I2C_MspInit+0xb0>)
 80019fa:	f000 fc37 	bl	800226c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_I2C_MspInit+0xac>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_I2C_MspInit+0xac>)
 8001a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a08:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_I2C_MspInit+0xac>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a16:	bf00      	nop
 8001a18:	3768      	adds	r7, #104	; 0x68
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40005400 	.word	0x40005400
 8001a24:	40021000 	.word	0x40021000
 8001a28:	48000400 	.word	0x48000400

08001a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	double temp = 0;
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double accel = 0;
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double gyro = 0;
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a56:	f000 fa92 	bl	8001f7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a5a:	f000 f837 	bl	8001acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5e:	f7ff fee5 	bl	800182c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a62:	f7ff ff49 	bl	80018f8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001a66:	f000 f9bf 	bl	8001de8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //SIG INIT STM32
  printf("-----------------------------------------------\r\n"
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <main+0x90>)
 8001a6c:	f004 fc8a 	bl	8006384 <puts>

  // INIT SENSORS

  //Presence capteurs sur le bus I2C

  TestSensorOnI2C(tabI2CAdd);
 8001a70:	4813      	ldr	r0, [pc, #76]	; (8001ac0 <main+0x94>)
 8001a72:	f7ff fb89 	bl	8001188 <TestSensorOnI2C>

  // On cherche le MPU9250

  SearchMPU9250();
 8001a76:	f7ff fb37 	bl	80010e8 <SearchMPU9250>

  // On cherche le BMP280

  SearchBMP280();
 8001a7a:	f7ff fae5 	bl	8001048 <SearchBMP280>

  PrintTab(tabI2CAdd); //on affiche les valeurs du tableau d'addresse
 8001a7e:	4810      	ldr	r0, [pc, #64]	; (8001ac0 <main+0x94>)
 8001a80:	f7ff fbc2 	bl	8001208 <PrintTab>

  Init_IMU_10DOF(&hi2c1);
 8001a84:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <main+0x98>)
 8001a86:	f7ff fbf3 	bl	8001270 <Init_IMU_10DOF>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Measure_T(&hi2c1,&temp);
 8001a8a:	f107 0310 	add.w	r3, r7, #16
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <main+0x98>)
 8001a92:	f7ff fcb5 	bl	8001400 <Measure_T>
	  Measure_A(&hi2c1,&accel);
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <main+0x98>)
 8001a9e:	f7ff fcfb 	bl	8001498 <Measure_A>
	  Measure_G(&hi2c1,&gyro);
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <main+0x98>)
 8001aa8:	f7ff fdda 	bl	8001660 <Measure_G>
	  printf("\r\n");
 8001aac:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <main+0x9c>)
 8001aae:	f004 fc69 	bl	8006384 <puts>
	  HAL_Delay(1000);
 8001ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ab6:	f000 fad3 	bl	8002060 <HAL_Delay>
	  Measure_T(&hi2c1,&temp);
 8001aba:	e7e6      	b.n	8001a8a <main+0x5e>
 8001abc:	0800b2d4 	.word	0x0800b2d4
 8001ac0:	20000248 	.word	0x20000248
 8001ac4:	200001fc 	.word	0x200001fc
 8001ac8:	0800b348 	.word	0x0800b348

08001acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b094      	sub	sp, #80	; 0x50
 8001ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	2238      	movs	r2, #56	; 0x38
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fd34 	bl	8005548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f001 febe 	bl	8003870 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001afe:	2340      	movs	r3, #64	; 0x40
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b02:	2302      	movs	r3, #2
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b06:	2302      	movs	r3, #2
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b0e:	2355      	movs	r3, #85	; 0x55
 8001b10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b12:	2302      	movs	r3, #2
 8001b14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1e:	f107 0318 	add.w	r3, r7, #24
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 ff58 	bl	80039d8 <HAL_RCC_OscConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b2e:	f000 f819 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b32:	230f      	movs	r3, #15
 8001b34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b36:	2303      	movs	r3, #3
 8001b38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2104      	movs	r1, #4
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fa5c 	bl	8004008 <HAL_RCC_ClockConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b56:	f000 f805 	bl	8001b64 <Error_Handler>
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3750      	adds	r7, #80	; 0x50
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  printf("an Error Occur, please Reset system\r\n");
 8001b6c:	4801      	ldr	r0, [pc, #4]	; (8001b74 <Error_Handler+0x10>)
 8001b6e:	f004 fc09 	bl	8006384 <puts>

  while (1)
 8001b72:	e7fe      	b.n	8001b72 <Error_Handler+0xe>
 8001b74:	0800b34c 	.word	0x0800b34c

08001b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_MspInit+0x44>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_MspInit+0x44>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_MspInit+0x44>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_MspInit+0x44>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <HAL_MspInit+0x44>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_MspInit+0x44>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bae:	f001 ff03 	bl	80039b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001bc8:	1d39      	adds	r1, r7, #4
 8001bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <__io_putchar+0x20>)
 8001bd2:	f002 fe75 	bl	80048c0 <HAL_UART_Transmit>

  return ch;
 8001bd6:	687b      	ldr	r3, [r7, #4]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000026c 	.word	0x2000026c

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c30:	f000 f9f8 	bl	8002024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_kill>:

int _kill(int pid, int sig)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c52:	f003 fc4f 	bl	80054f4 <__errno>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2216      	movs	r2, #22
 8001c5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_exit>:

void _exit (int status)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ffe7 	bl	8001c48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c7a:	e7fe      	b.n	8001c7a <_exit+0x12>

08001c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e00a      	b.n	8001ca4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c8e:	f3af 8000 	nop.w
 8001c92:	4601      	mov	r1, r0
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	b2ca      	uxtb	r2, r1
 8001c9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf0      	blt.n	8001c8e <_read+0x12>
	}

return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e009      	b.n	8001cdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff75 	bl	8001bc0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbf1      	blt.n	8001cc8 <_write+0x12>
	}
	return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_close>:

int _close(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d16:	605a      	str	r2, [r3, #4]
	return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_isatty>:

int _isatty(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f003 fbb4 	bl	80054f4 <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20008000 	.word	0x20008000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	20000268 	.word	0x20000268
 8001dc0:	20000310 	.word	0x20000310

08001dc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001dec:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001dee:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <MX_LPUART1_UART_Init+0x90>)
 8001df0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001e2a:	4812      	ldr	r0, [pc, #72]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001e2c:	f002 fcf8 	bl	8004820 <HAL_UART_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e36:	f7ff fe95 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001e3e:	f003 fa8f 	bl	8005360 <HAL_UARTEx_SetTxFifoThreshold>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001e48:	f7ff fe8c 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4809      	ldr	r0, [pc, #36]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001e50:	f003 fac4 	bl	80053dc <HAL_UARTEx_SetRxFifoThreshold>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001e5a:	f7ff fe83 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_LPUART1_UART_Init+0x8c>)
 8001e60:	f003 fa45 	bl	80052ee <HAL_UARTEx_DisableFifoMode>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001e6a:	f7ff fe7b 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000026c 	.word	0x2000026c
 8001e78:	40008000 	.word	0x40008000

08001e7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b09a      	sub	sp, #104	; 0x68
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	2244      	movs	r2, #68	; 0x44
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fb53 	bl	8005548 <memset>
  if(uartHandle->Instance==LPUART1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <HAL_UART_MspInit+0xa8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d136      	bne.n	8001f1a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001eac:	2320      	movs	r3, #32
 8001eae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 fac1 	bl	8004440 <HAL_RCCEx_PeriphCLKConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ec4:	f7ff fe4e 	bl	8001b64 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_UART_MspInit+0xac>)
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <HAL_UART_MspInit+0xac>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <HAL_UART_MspInit+0xac>)
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_UART_MspInit+0xac>)
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee4:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <HAL_UART_MspInit+0xac>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_UART_MspInit+0xac>)
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001ef8:	230c      	movs	r3, #12
 8001efa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001f08:	230c      	movs	r3, #12
 8001f0a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f10:	4619      	mov	r1, r3
 8001f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f16:	f000 f9a9 	bl	800226c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3768      	adds	r7, #104	; 0x68
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40008000 	.word	0x40008000
 8001f28:	40021000 	.word	0x40021000

08001f2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f30:	480d      	ldr	r0, [pc, #52]	; (8001f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f32:	490e      	ldr	r1, [pc, #56]	; (8001f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f34:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <LoopForever+0xe>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f38:	e002      	b.n	8001f40 <LoopCopyDataInit>

08001f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3e:	3304      	adds	r3, #4

08001f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f44:	d3f9      	bcc.n	8001f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f48:	4c0b      	ldr	r4, [pc, #44]	; (8001f78 <LoopForever+0x16>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f4c:	e001      	b.n	8001f52 <LoopFillZerobss>

08001f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f50:	3204      	adds	r2, #4

08001f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f54:	d3fb      	bcc.n	8001f4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f56:	f7ff ff35 	bl	8001dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5a:	f003 fad1 	bl	8005500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f5e:	f7ff fd65 	bl	8001a2c <main>

08001f62 <LoopForever>:

LoopForever:
    b LoopForever
 8001f62:	e7fe      	b.n	8001f62 <LoopForever>
  ldr   r0, =_estack
 8001f64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f6c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f70:	0800b8a8 	.word	0x0800b8a8
  ldr r2, =_sbss
 8001f74:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f78:	20000310 	.word	0x20000310

08001f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f7c:	e7fe      	b.n	8001f7c <ADC1_2_IRQHandler>

08001f7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 f93d 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f000 f80e 	bl	8001fb0 <HAL_InitTick>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	71fb      	strb	r3, [r7, #7]
 8001f9e:	e001      	b.n	8001fa4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fa0:	f7ff fdea 	bl	8001b78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fa4:	79fb      	ldrb	r3, [r7, #7]

}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_InitTick+0x68>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d022      	beq.n	800200a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fc4:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_InitTick+0x6c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_InitTick+0x68>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f93a 	bl	8002252 <HAL_SYSTICK_Config>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10f      	bne.n	8002004 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	d809      	bhi.n	8001ffe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fea:	2200      	movs	r2, #0
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff2:	f000 f914 	bl	800221e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <HAL_InitTick+0x70>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	e007      	b.n	800200e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	e004      	b.n	800200e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e001      	b.n	800200e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000008 	.word	0x20000008
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_IncTick+0x1c>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_IncTick+0x20>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4413      	add	r3, r2
 8002032:	4a03      	ldr	r2, [pc, #12]	; (8002040 <HAL_IncTick+0x1c>)
 8002034:	6013      	str	r3, [r2, #0]
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	200002fc 	.word	0x200002fc
 8002044:	20000008 	.word	0x20000008

08002048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_GetTick+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	200002fc 	.word	0x200002fc

08002060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff ffee 	bl	8002048 <HAL_GetTick>
 800206c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d004      	beq.n	8002084 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_Delay+0x40>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4413      	add	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002084:	bf00      	nop
 8002086:	f7ff ffdf 	bl	8002048 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	429a      	cmp	r2, r3
 8002094:	d8f7      	bhi.n	8002086 <HAL_Delay+0x26>
  {
  }
}
 8002096:	bf00      	nop
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000008 	.word	0x20000008

080020a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	; (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	; (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
         );
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff47 	bl	80020a4 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff5e 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff90 	bl	800215c <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5f 	bl	8002108 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffb2 	bl	80021c4 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800227a:	e15a      	b.n	8002532 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 814c 	beq.w	800252c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d005      	beq.n	80022ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d130      	bne.n	800230e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022e2:	2201      	movs	r2, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 0201 	and.w	r2, r3, #1
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b03      	cmp	r3, #3
 8002318:	d017      	beq.n	800234a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d123      	bne.n	800239e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	6939      	ldr	r1, [r7, #16]
 800239a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0203 	and.w	r2, r3, #3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80a6 	beq.w	800252c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e0:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <HAL_GPIO_Init+0x2e4>)
 80023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e4:	4a5a      	ldr	r2, [pc, #360]	; (8002550 <HAL_GPIO_Init+0x2e4>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6613      	str	r3, [r2, #96]	; 0x60
 80023ec:	4b58      	ldr	r3, [pc, #352]	; (8002550 <HAL_GPIO_Init+0x2e4>)
 80023ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f8:	4a56      	ldr	r2, [pc, #344]	; (8002554 <HAL_GPIO_Init+0x2e8>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002422:	d01f      	beq.n	8002464 <HAL_GPIO_Init+0x1f8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a4c      	ldr	r2, [pc, #304]	; (8002558 <HAL_GPIO_Init+0x2ec>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d019      	beq.n	8002460 <HAL_GPIO_Init+0x1f4>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a4b      	ldr	r2, [pc, #300]	; (800255c <HAL_GPIO_Init+0x2f0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d013      	beq.n	800245c <HAL_GPIO_Init+0x1f0>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a4a      	ldr	r2, [pc, #296]	; (8002560 <HAL_GPIO_Init+0x2f4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d00d      	beq.n	8002458 <HAL_GPIO_Init+0x1ec>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a49      	ldr	r2, [pc, #292]	; (8002564 <HAL_GPIO_Init+0x2f8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d007      	beq.n	8002454 <HAL_GPIO_Init+0x1e8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a48      	ldr	r2, [pc, #288]	; (8002568 <HAL_GPIO_Init+0x2fc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d101      	bne.n	8002450 <HAL_GPIO_Init+0x1e4>
 800244c:	2305      	movs	r3, #5
 800244e:	e00a      	b.n	8002466 <HAL_GPIO_Init+0x1fa>
 8002450:	2306      	movs	r3, #6
 8002452:	e008      	b.n	8002466 <HAL_GPIO_Init+0x1fa>
 8002454:	2304      	movs	r3, #4
 8002456:	e006      	b.n	8002466 <HAL_GPIO_Init+0x1fa>
 8002458:	2303      	movs	r3, #3
 800245a:	e004      	b.n	8002466 <HAL_GPIO_Init+0x1fa>
 800245c:	2302      	movs	r3, #2
 800245e:	e002      	b.n	8002466 <HAL_GPIO_Init+0x1fa>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_GPIO_Init+0x1fa>
 8002464:	2300      	movs	r3, #0
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	f002 0203 	and.w	r2, r2, #3
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	4093      	lsls	r3, r2
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002476:	4937      	ldr	r1, [pc, #220]	; (8002554 <HAL_GPIO_Init+0x2e8>)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002484:	4b39      	ldr	r3, [pc, #228]	; (800256c <HAL_GPIO_Init+0x300>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024a8:	4a30      	ldr	r2, [pc, #192]	; (800256c <HAL_GPIO_Init+0x300>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024ae:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_GPIO_Init+0x300>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024d2:	4a26      	ldr	r2, [pc, #152]	; (800256c <HAL_GPIO_Init+0x300>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80024d8:	4b24      	ldr	r3, [pc, #144]	; (800256c <HAL_GPIO_Init+0x300>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <HAL_GPIO_Init+0x300>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_GPIO_Init+0x300>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002526:	4a11      	ldr	r2, [pc, #68]	; (800256c <HAL_GPIO_Init+0x300>)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3301      	adds	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f ae9d 	bne.w	800227c <HAL_GPIO_Init+0x10>
  }
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40021000 	.word	0x40021000
 8002554:	40010000 	.word	0x40010000
 8002558:	48000400 	.word	0x48000400
 800255c:	48000800 	.word	0x48000800
 8002560:	48000c00 	.word	0x48000c00
 8002564:	48001000 	.word	0x48001000
 8002568:	48001400 	.word	0x48001400
 800256c:	40010400 	.word	0x40010400

08002570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800258c:	e002      	b.n	8002594 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e081      	b.n	80026b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff f9d6 	bl	8001978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2224      	movs	r2, #36	; 0x24
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002600:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d107      	bne.n	800261a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	e006      	b.n	8002628 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002626:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d104      	bne.n	800263a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002638:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800264c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69d9      	ldr	r1, [r3, #28]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1a      	ldr	r2, [r3, #32]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	461a      	mov	r2, r3
 80026cc:	460b      	mov	r3, r1
 80026ce:	817b      	strh	r3, [r7, #10]
 80026d0:	4613      	mov	r3, r2
 80026d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b20      	cmp	r3, #32
 80026de:	f040 80da 	bne.w	8002896 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_I2C_Master_Transmit+0x30>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e0d3      	b.n	8002898 <HAL_I2C_Master_Transmit+0x1d8>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026f8:	f7ff fca6 	bl	8002048 <HAL_GetTick>
 80026fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2319      	movs	r3, #25
 8002704:	2201      	movs	r2, #1
 8002706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fdc4 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0be      	b.n	8002898 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2221      	movs	r2, #33	; 0x21
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2210      	movs	r2, #16
 8002726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	893a      	ldrh	r2, [r7, #8]
 800273a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	2bff      	cmp	r3, #255	; 0xff
 800274a:	d90e      	bls.n	800276a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	22ff      	movs	r2, #255	; 0xff
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	b2da      	uxtb	r2, r3
 8002758:	8979      	ldrh	r1, [r7, #10]
 800275a:	4b51      	ldr	r3, [pc, #324]	; (80028a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 ffba 	bl	80036dc <I2C_TransferConfig>
 8002768:	e06c      	b.n	8002844 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	b2da      	uxtb	r2, r3
 800277a:	8979      	ldrh	r1, [r7, #10]
 800277c:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 ffa9 	bl	80036dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800278a:	e05b      	b.n	8002844 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	6a39      	ldr	r1, [r7, #32]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fdc1 	bl	8003318 <I2C_WaitOnTXISFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e07b      	b.n	8002898 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d034      	beq.n	8002844 <HAL_I2C_Master_Transmit+0x184>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d130      	bne.n	8002844 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	2200      	movs	r2, #0
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fd53 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e04d      	b.n	8002898 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	2bff      	cmp	r3, #255	; 0xff
 8002804:	d90e      	bls.n	8002824 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	22ff      	movs	r2, #255	; 0xff
 800280a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002810:	b2da      	uxtb	r2, r3
 8002812:	8979      	ldrh	r1, [r7, #10]
 8002814:	2300      	movs	r3, #0
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 ff5d 	bl	80036dc <I2C_TransferConfig>
 8002822:	e00f      	b.n	8002844 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	b2da      	uxtb	r2, r3
 8002834:	8979      	ldrh	r1, [r7, #10]
 8002836:	2300      	movs	r3, #0
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 ff4c 	bl	80036dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d19e      	bne.n	800278c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fda0 	bl	8003398 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e01a      	b.n	8002898 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2220      	movs	r2, #32
 8002868:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002876:	400b      	ands	r3, r1
 8002878:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	e000      	b.n	8002898 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002896:	2302      	movs	r3, #2
  }
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	80002000 	.word	0x80002000
 80028a4:	fe00e800 	.word	0xfe00e800

080028a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	461a      	mov	r2, r3
 80028b4:	460b      	mov	r3, r1
 80028b6:	817b      	strh	r3, [r7, #10]
 80028b8:	4613      	mov	r3, r2
 80028ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	f040 80db 	bne.w	8002a80 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_I2C_Master_Receive+0x30>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e0d4      	b.n	8002a82 <HAL_I2C_Master_Receive+0x1da>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028e0:	f7ff fbb2 	bl	8002048 <HAL_GetTick>
 80028e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2319      	movs	r3, #25
 80028ec:	2201      	movs	r2, #1
 80028ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fcd0 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0bf      	b.n	8002a82 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2222      	movs	r2, #34	; 0x22
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2210      	movs	r2, #16
 800290e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	893a      	ldrh	r2, [r7, #8]
 8002922:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	2bff      	cmp	r3, #255	; 0xff
 8002932:	d90e      	bls.n	8002952 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	22ff      	movs	r2, #255	; 0xff
 8002938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	b2da      	uxtb	r2, r3
 8002940:	8979      	ldrh	r1, [r7, #10]
 8002942:	4b52      	ldr	r3, [pc, #328]	; (8002a8c <HAL_I2C_Master_Receive+0x1e4>)
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fec6 	bl	80036dc <I2C_TransferConfig>
 8002950:	e06d      	b.n	8002a2e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	b2da      	uxtb	r2, r3
 8002962:	8979      	ldrh	r1, [r7, #10]
 8002964:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <HAL_I2C_Master_Receive+0x1e4>)
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 feb5 	bl	80036dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002972:	e05c      	b.n	8002a2e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	6a39      	ldr	r1, [r7, #32]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fd49 	bl	8003410 <I2C_WaitOnRXNEFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e07c      	b.n	8002a82 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d034      	beq.n	8002a2e <HAL_I2C_Master_Receive+0x186>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d130      	bne.n	8002a2e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	2200      	movs	r2, #0
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fc5e 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e04d      	b.n	8002a82 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2bff      	cmp	r3, #255	; 0xff
 80029ee:	d90e      	bls.n	8002a0e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	22ff      	movs	r2, #255	; 0xff
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	8979      	ldrh	r1, [r7, #10]
 80029fe:	2300      	movs	r3, #0
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fe68 	bl	80036dc <I2C_TransferConfig>
 8002a0c:	e00f      	b.n	8002a2e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	8979      	ldrh	r1, [r7, #10]
 8002a20:	2300      	movs	r3, #0
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fe57 	bl	80036dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d19d      	bne.n	8002974 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	6a39      	ldr	r1, [r7, #32]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fcab 	bl	8003398 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e01a      	b.n	8002a82 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2220      	movs	r2, #32
 8002a52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <HAL_I2C_Master_Receive+0x1e8>)
 8002a60:	400b      	ands	r3, r1
 8002a62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	80002400 	.word	0x80002400
 8002a90:	fe00e800 	.word	0xfe00e800

08002a94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	817b      	strh	r3, [r7, #10]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	813b      	strh	r3, [r7, #8]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	f040 80f9 	bne.w	8002cae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_I2C_Mem_Write+0x34>
 8002ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0ed      	b.n	8002cb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2C_Mem_Write+0x4e>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e0e6      	b.n	8002cb0 <HAL_I2C_Mem_Write+0x21c>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aea:	f7ff faad 	bl	8002048 <HAL_GetTick>
 8002aee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	2319      	movs	r3, #25
 8002af6:	2201      	movs	r2, #1
 8002af8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fbcb 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0d1      	b.n	8002cb0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2221      	movs	r2, #33	; 0x21
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a3a      	ldr	r2, [r7, #32]
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b34:	88f8      	ldrh	r0, [r7, #6]
 8002b36:	893a      	ldrh	r2, [r7, #8]
 8002b38:	8979      	ldrh	r1, [r7, #10]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	4603      	mov	r3, r0
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 fadb 	bl	8003100 <I2C_RequestMemoryWrite>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0a9      	b.n	8002cb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2bff      	cmp	r3, #255	; 0xff
 8002b64:	d90e      	bls.n	8002b84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	22ff      	movs	r2, #255	; 0xff
 8002b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	8979      	ldrh	r1, [r7, #10]
 8002b74:	2300      	movs	r3, #0
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fdad 	bl	80036dc <I2C_TransferConfig>
 8002b82:	e00f      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	8979      	ldrh	r1, [r7, #10]
 8002b96:	2300      	movs	r3, #0
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fd9c 	bl	80036dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fbb5 	bl	8003318 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e07b      	b.n	8002cb0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	781a      	ldrb	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d034      	beq.n	8002c5c <HAL_I2C_Mem_Write+0x1c8>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d130      	bne.n	8002c5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	2200      	movs	r2, #0
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fb47 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e04d      	b.n	8002cb0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2bff      	cmp	r3, #255	; 0xff
 8002c1c:	d90e      	bls.n	8002c3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	22ff      	movs	r2, #255	; 0xff
 8002c22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	8979      	ldrh	r1, [r7, #10]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fd51 	bl	80036dc <I2C_TransferConfig>
 8002c3a:	e00f      	b.n	8002c5c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	8979      	ldrh	r1, [r7, #10]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fd40 	bl	80036dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d19e      	bne.n	8002ba4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fb94 	bl	8003398 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e01a      	b.n	8002cb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_I2C_Mem_Write+0x224>)
 8002c8e:	400b      	ands	r3, r1
 8002c90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	fe00e800 	.word	0xfe00e800

08002cbc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	817b      	strh	r3, [r7, #10]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	813b      	strh	r3, [r7, #8]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	f040 80fd 	bne.w	8002ede <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_I2C_Mem_Read+0x34>
 8002cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0f1      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_I2C_Mem_Read+0x4e>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e0ea      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x224>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d12:	f7ff f999 	bl	8002048 <HAL_GetTick>
 8002d16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	2319      	movs	r3, #25
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fab7 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0d5      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2222      	movs	r2, #34	; 0x22
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2240      	movs	r2, #64	; 0x40
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a3a      	ldr	r2, [r7, #32]
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d5c:	88f8      	ldrh	r0, [r7, #6]
 8002d5e:	893a      	ldrh	r2, [r7, #8]
 8002d60:	8979      	ldrh	r1, [r7, #10]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fa1b 	bl	80031a8 <I2C_RequestMemoryRead>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0ad      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2bff      	cmp	r3, #255	; 0xff
 8002d8c:	d90e      	bls.n	8002dac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	22ff      	movs	r2, #255	; 0xff
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	8979      	ldrh	r1, [r7, #10]
 8002d9c:	4b52      	ldr	r3, [pc, #328]	; (8002ee8 <HAL_I2C_Mem_Read+0x22c>)
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fc99 	bl	80036dc <I2C_TransferConfig>
 8002daa:	e00f      	b.n	8002dcc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	8979      	ldrh	r1, [r7, #10]
 8002dbe:	4b4a      	ldr	r3, [pc, #296]	; (8002ee8 <HAL_I2C_Mem_Read+0x22c>)
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fc88 	bl	80036dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2104      	movs	r1, #4
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fa5e 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e07c      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d034      	beq.n	8002e8c <HAL_I2C_Mem_Read+0x1d0>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d130      	bne.n	8002e8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	2200      	movs	r2, #0
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 fa2f 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e04d      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2bff      	cmp	r3, #255	; 0xff
 8002e4c:	d90e      	bls.n	8002e6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	22ff      	movs	r2, #255	; 0xff
 8002e52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	8979      	ldrh	r1, [r7, #10]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fc39 	bl	80036dc <I2C_TransferConfig>
 8002e6a:	e00f      	b.n	8002e8c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	8979      	ldrh	r1, [r7, #10]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fc28 	bl	80036dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d19a      	bne.n	8002dcc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 fa7c 	bl	8003398 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e01a      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_I2C_Mem_Read+0x230>)
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	80002400 	.word	0x80002400
 8002eec:	fe00e800 	.word	0xfe00e800

08002ef0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	460b      	mov	r3, r1
 8002efe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	f040 80f1 	bne.w	80030f4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f20:	d101      	bne.n	8002f26 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
 8002f24:	e0e7      	b.n	80030f6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_I2C_IsDeviceReady+0x44>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e0e0      	b.n	80030f6 <HAL_I2C_IsDeviceReady+0x206>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2224      	movs	r2, #36	; 0x24
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_I2C_IsDeviceReady+0x72>
 8002f52:	897b      	ldrh	r3, [r7, #10]
 8002f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f60:	e004      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x7c>
 8002f62:	897b      	ldrh	r3, [r7, #10]
 8002f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f68:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002f72:	f7ff f869 	bl	8002048 <HAL_GetTick>
 8002f76:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002fa4:	e034      	b.n	8003010 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d01a      	beq.n	8002fe4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7ff f84b 	bl	8002048 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <HAL_I2C_IsDeviceReady+0xd4>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10f      	bne.n	8002fe4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e088      	b.n	80030f6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	bf0c      	ite	eq
 8002ff2:	2301      	moveq	r3, #1
 8002ff4:	2300      	movne	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b10      	cmp	r3, #16
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003010:	7ffb      	ldrb	r3, [r7, #31]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_I2C_IsDeviceReady+0x12c>
 8003016:	7fbb      	ldrb	r3, [r7, #30]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0c4      	beq.n	8002fa6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b10      	cmp	r3, #16
 8003028:	d01a      	beq.n	8003060 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2200      	movs	r2, #0
 8003032:	2120      	movs	r1, #32
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f92f 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e058      	b.n	80030f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2220      	movs	r2, #32
 800304a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	e04a      	b.n	80030f6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2200      	movs	r2, #0
 8003068:	2120      	movs	r1, #32
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f914 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e03d      	b.n	80030f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2210      	movs	r2, #16
 8003080:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2220      	movs	r2, #32
 8003088:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	429a      	cmp	r2, r3
 8003090:	d118      	bne.n	80030c4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2200      	movs	r2, #0
 80030aa:	2120      	movs	r1, #32
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f8f3 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e01c      	b.n	80030f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2220      	movs	r2, #32
 80030c2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	3301      	adds	r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	f63f af3b 	bhi.w	8002f4a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	817b      	strh	r3, [r7, #10]
 8003112:	460b      	mov	r3, r1
 8003114:	813b      	strh	r3, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	8979      	ldrh	r1, [r7, #10]
 8003120:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <I2C_RequestMemoryWrite+0xa4>)
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fad7 	bl	80036dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f8f0 	bl	8003318 <I2C_WaitOnTXISFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e02c      	b.n	800319c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d105      	bne.n	8003154 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003148:	893b      	ldrh	r3, [r7, #8]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
 8003152:	e015      	b.n	8003180 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003154:	893b      	ldrh	r3, [r7, #8]
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	b29b      	uxth	r3, r3
 800315a:	b2da      	uxtb	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	69b9      	ldr	r1, [r7, #24]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f8d6 	bl	8003318 <I2C_WaitOnTXISFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e012      	b.n	800319c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003176:	893b      	ldrh	r3, [r7, #8]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2200      	movs	r2, #0
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f884 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	80002000 	.word	0x80002000

080031a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	4608      	mov	r0, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	817b      	strh	r3, [r7, #10]
 80031ba:	460b      	mov	r3, r1
 80031bc:	813b      	strh	r3, [r7, #8]
 80031be:	4613      	mov	r3, r2
 80031c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	8979      	ldrh	r1, [r7, #10]
 80031c8:	4b20      	ldr	r3, [pc, #128]	; (800324c <I2C_RequestMemoryRead+0xa4>)
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2300      	movs	r3, #0
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fa84 	bl	80036dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	69b9      	ldr	r1, [r7, #24]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f89d 	bl	8003318 <I2C_WaitOnTXISFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e02c      	b.n	8003242 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031ee:	893b      	ldrh	r3, [r7, #8]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
 80031f8:	e015      	b.n	8003226 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031fa:	893b      	ldrh	r3, [r7, #8]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	b29b      	uxth	r3, r3
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	69b9      	ldr	r1, [r7, #24]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f883 	bl	8003318 <I2C_WaitOnTXISFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e012      	b.n	8003242 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800321c:	893b      	ldrh	r3, [r7, #8]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2200      	movs	r2, #0
 800322e:	2140      	movs	r1, #64	; 0x40
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f831 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	80002000 	.word	0x80002000

08003250 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d103      	bne.n	800326e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2200      	movs	r2, #0
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d007      	beq.n	800328c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	619a      	str	r2, [r3, #24]
  }
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a8:	e022      	b.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d01e      	beq.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b2:	f7fe fec9 	bl	8002048 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d113      	bne.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e00f      	b.n	8003310 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4013      	ands	r3, r2
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	429a      	cmp	r2, r3
 800330c:	d0cd      	beq.n	80032aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003324:	e02c      	b.n	8003380 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f8ea 	bl	8003504 <I2C_IsErrorOccurred>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e02a      	b.n	8003390 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d01e      	beq.n	8003380 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003342:	f7fe fe81 	bl	8002048 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	429a      	cmp	r2, r3
 8003350:	d302      	bcc.n	8003358 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d113      	bne.n	8003380 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e007      	b.n	8003390 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b02      	cmp	r3, #2
 800338c:	d1cb      	bne.n	8003326 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033a4:	e028      	b.n	80033f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f8aa 	bl	8003504 <I2C_IsErrorOccurred>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e026      	b.n	8003408 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7fe fe45 	bl	8002048 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d113      	bne.n	80033f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e007      	b.n	8003408 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b20      	cmp	r3, #32
 8003404:	d1cf      	bne.n	80033a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800341c:	e064      	b.n	80034e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f86e 	bl	8003504 <I2C_IsErrorOccurred>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e062      	b.n	80034f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b20      	cmp	r3, #32
 800343e:	d138      	bne.n	80034b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d105      	bne.n	800345a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e04e      	b.n	80034f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b10      	cmp	r3, #16
 8003466:	d107      	bne.n	8003478 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2210      	movs	r2, #16
 800346e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2204      	movs	r2, #4
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
 8003476:	e002      	b.n	800347e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2220      	movs	r2, #32
 8003484:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6859      	ldr	r1, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003492:	400b      	ands	r3, r1
 8003494:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e022      	b.n	80034f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b2:	f7fe fdc9 	bl	8002048 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d302      	bcc.n	80034c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10f      	bne.n	80034e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	f043 0220 	orr.w	r2, r3, #32
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e007      	b.n	80034f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d193      	bne.n	800341e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	fe00e800 	.word	0xfe00e800

08003504 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d075      	beq.n	800361c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2210      	movs	r2, #16
 8003536:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003538:	e056      	b.n	80035e8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003540:	d052      	beq.n	80035e8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003542:	f7fe fd81 	bl	8002048 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	429a      	cmp	r2, r3
 8003550:	d302      	bcc.n	8003558 <I2C_IsErrorOccurred+0x54>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d147      	bne.n	80035e8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003562:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800356a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357a:	d12e      	bne.n	80035da <I2C_IsErrorOccurred+0xd6>
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003582:	d02a      	beq.n	80035da <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	2b20      	cmp	r3, #32
 8003588:	d027      	beq.n	80035da <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003598:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800359a:	f7fe fd55 	bl	8002048 <HAL_GetTick>
 800359e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a0:	e01b      	b.n	80035da <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035a2:	f7fe fd51 	bl	8002048 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b19      	cmp	r3, #25
 80035ae:	d914      	bls.n	80035da <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d1dc      	bne.n	80035a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d003      	beq.n	80035fe <I2C_IsErrorOccurred+0xfa>
 80035f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d09d      	beq.n	800353a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2220      	movs	r2, #32
 800360c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f043 0304 	orr.w	r3, r3, #4
 8003614:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00b      	beq.n	8003668 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	f043 0308 	orr.w	r3, r3, #8
 8003656:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003660:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003682:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800368a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01c      	beq.n	80036cc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7ff fddc 	bl	8003250 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <I2C_IsErrorOccurred+0x1d4>)
 80036a4:	400b      	ands	r3, r1
 80036a6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80036cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3728      	adds	r7, #40	; 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	fe00e800 	.word	0xfe00e800

080036dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	817b      	strh	r3, [r7, #10]
 80036ea:	4613      	mov	r3, r2
 80036ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036ee:	897b      	ldrh	r3, [r7, #10]
 80036f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036f4:	7a7b      	ldrb	r3, [r7, #9]
 80036f6:	041b      	lsls	r3, r3, #16
 80036f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036fc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	4313      	orrs	r3, r2
 8003706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800370a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	0d5b      	lsrs	r3, r3, #21
 8003716:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <I2C_TransferConfig+0x60>)
 800371c:	430b      	orrs	r3, r1
 800371e:	43db      	mvns	r3, r3
 8003720:	ea02 0103 	and.w	r1, r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	03ff63ff 	.word	0x03ff63ff

08003740 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b20      	cmp	r3, #32
 8003754:	d138      	bne.n	80037c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003760:	2302      	movs	r3, #2
 8003762:	e032      	b.n	80037ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003792:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d139      	bne.n	8003860 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e033      	b.n	8003862 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2224      	movs	r2, #36	; 0x24
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003828:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	e000      	b.n	8003862 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
  }
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d141      	bne.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800387e:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	d131      	bne.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800388c:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003892:	4a46      	ldr	r2, [pc, #280]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800389c:	4b43      	ldr	r3, [pc, #268]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038a4:	4a41      	ldr	r2, [pc, #260]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038ac:	4b40      	ldr	r3, [pc, #256]	; (80039b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2232      	movs	r2, #50	; 0x32
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	4a3f      	ldr	r2, [pc, #252]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	0c9b      	lsrs	r3, r3, #18
 80038be:	3301      	adds	r3, #1
 80038c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c2:	e002      	b.n	80038ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d6:	d102      	bne.n	80038de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f2      	bne.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038de:	4b33      	ldr	r3, [pc, #204]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ea:	d158      	bne.n	800399e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e057      	b.n	80039a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038f0:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f6:	4a2d      	ldr	r2, [pc, #180]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003900:	e04d      	b.n	800399e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003908:	d141      	bne.n	800398e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800390a:	4b28      	ldr	r3, [pc, #160]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003916:	d131      	bne.n	800397c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003918:	4b24      	ldr	r3, [pc, #144]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800391e:	4a23      	ldr	r2, [pc, #140]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003928:	4b20      	ldr	r3, [pc, #128]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003930:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003936:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2232      	movs	r2, #50	; 0x32
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	0c9b      	lsrs	r3, r3, #18
 800394a:	3301      	adds	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800394e:	e002      	b.n	8003956 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3b01      	subs	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003962:	d102      	bne.n	800396a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f2      	bne.n	8003950 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800396a:	4b10      	ldr	r3, [pc, #64]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003976:	d112      	bne.n	800399e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e011      	b.n	80039a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003982:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003988:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800398c:	e007      	b.n	800399e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800398e:	4b07      	ldr	r3, [pc, #28]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003996:	4a05      	ldr	r2, [pc, #20]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003998:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800399c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40007000 	.word	0x40007000
 80039b0:	20000000 	.word	0x20000000
 80039b4:	431bde83 	.word	0x431bde83

080039b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c6:	6093      	str	r3, [r2, #8]
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40007000 	.word	0x40007000

080039d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e306      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d075      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f6:	4b97      	ldr	r3, [pc, #604]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a00:	4b94      	ldr	r3, [pc, #592]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d102      	bne.n	8003a16 <HAL_RCC_OscConfig+0x3e>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d002      	beq.n	8003a1c <HAL_RCC_OscConfig+0x44>
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d10b      	bne.n	8003a34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	4b8d      	ldr	r3, [pc, #564]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d05b      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x108>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d157      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e2e1      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	d106      	bne.n	8003a4c <HAL_RCC_OscConfig+0x74>
 8003a3e:	4b85      	ldr	r3, [pc, #532]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a84      	ldr	r2, [pc, #528]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e01d      	b.n	8003a88 <HAL_RCC_OscConfig+0xb0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x98>
 8003a56:	4b7f      	ldr	r3, [pc, #508]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a7e      	ldr	r2, [pc, #504]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b7c      	ldr	r3, [pc, #496]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a7b      	ldr	r2, [pc, #492]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xb0>
 8003a70:	4b78      	ldr	r3, [pc, #480]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a77      	ldr	r2, [pc, #476]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b75      	ldr	r3, [pc, #468]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a74      	ldr	r2, [pc, #464]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe fada 	bl	8002048 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fe fad6 	bl	8002048 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e2a6      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aaa:	4b6a      	ldr	r3, [pc, #424]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0xc0>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fac6 	bl	8002048 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fe fac2 	bl	8002048 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e292      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ad2:	4b60      	ldr	r3, [pc, #384]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xe8>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d075      	beq.n	8003bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aee:	4b59      	ldr	r3, [pc, #356]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003af8:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	d102      	bne.n	8003b0e <HAL_RCC_OscConfig+0x136>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCC_OscConfig+0x13c>
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d11f      	bne.n	8003b54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b14:	4b4f      	ldr	r3, [pc, #316]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_OscConfig+0x154>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e265      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2c:	4b49      	ldr	r3, [pc, #292]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	4946      	ldr	r1, [pc, #280]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b40:	4b45      	ldr	r3, [pc, #276]	; (8003c58 <HAL_RCC_OscConfig+0x280>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fa33 	bl	8001fb0 <HAL_InitTick>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d043      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e251      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d023      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b5c:	4b3d      	ldr	r3, [pc, #244]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a3c      	ldr	r2, [pc, #240]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe fa6e 	bl	8002048 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b70:	f7fe fa6a 	bl	8002048 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e23a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b82:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	061b      	lsls	r3, r3, #24
 8003b9c:	492d      	ldr	r1, [pc, #180]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
 8003ba2:	e01a      	b.n	8003bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba4:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2a      	ldr	r2, [pc, #168]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fa4a 	bl	8002048 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb8:	f7fe fa46 	bl	8002048 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e216      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bca:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x1e0>
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d041      	beq.n	8003c6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d01c      	beq.n	8003c28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bee:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf4:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fe fa23 	bl	8002048 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c06:	f7fe fa1f 	bl	8002048 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1ef      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c18:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0ef      	beq.n	8003c06 <HAL_RCC_OscConfig+0x22e>
 8003c26:	e020      	b.n	8003c6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c38:	f7fe fa06 	bl	8002048 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c3e:	e00d      	b.n	8003c5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c40:	f7fe fa02 	bl	8002048 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d906      	bls.n	8003c5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e1d2      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c5c:	4b8c      	ldr	r3, [pc, #560]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1ea      	bne.n	8003c40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80a6 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c7c:	4b84      	ldr	r3, [pc, #528]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_OscConfig+0x2b4>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x2b6>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c92:	4b7f      	ldr	r3, [pc, #508]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	4a7e      	ldr	r2, [pc, #504]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c9e:	4b7c      	ldr	r3, [pc, #496]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003caa:	2301      	movs	r3, #1
 8003cac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cae:	4b79      	ldr	r3, [pc, #484]	; (8003e94 <HAL_RCC_OscConfig+0x4bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d118      	bne.n	8003cec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cba:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <HAL_RCC_OscConfig+0x4bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a75      	ldr	r2, [pc, #468]	; (8003e94 <HAL_RCC_OscConfig+0x4bc>)
 8003cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc6:	f7fe f9bf 	bl	8002048 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cce:	f7fe f9bb 	bl	8002048 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e18b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce0:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <HAL_RCC_OscConfig+0x4bc>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d108      	bne.n	8003d06 <HAL_RCC_OscConfig+0x32e>
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	4a65      	ldr	r2, [pc, #404]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d04:	e024      	b.n	8003d50 <HAL_RCC_OscConfig+0x378>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d110      	bne.n	8003d30 <HAL_RCC_OscConfig+0x358>
 8003d0e:	4b60      	ldr	r3, [pc, #384]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d14:	4a5e      	ldr	r2, [pc, #376]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d16:	f043 0304 	orr.w	r3, r3, #4
 8003d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d1e:	4b5c      	ldr	r3, [pc, #368]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d24:	4a5a      	ldr	r2, [pc, #360]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d2e:	e00f      	b.n	8003d50 <HAL_RCC_OscConfig+0x378>
 8003d30:	4b57      	ldr	r3, [pc, #348]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	4a56      	ldr	r2, [pc, #344]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d40:	4b53      	ldr	r3, [pc, #332]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	4a52      	ldr	r2, [pc, #328]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d48:	f023 0304 	bic.w	r3, r3, #4
 8003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d016      	beq.n	8003d86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fe f976 	bl	8002048 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7fe f972 	bl	8002048 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e140      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d76:	4b46      	ldr	r3, [pc, #280]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ed      	beq.n	8003d60 <HAL_RCC_OscConfig+0x388>
 8003d84:	e015      	b.n	8003db2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fe f95f 	bl	8002048 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8e:	f7fe f95b 	bl	8002048 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e129      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da4:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1ed      	bne.n	8003d8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003db2:	7ffb      	ldrb	r3, [r7, #31]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db8:	4b35      	ldr	r3, [pc, #212]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	4a34      	ldr	r2, [pc, #208]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d03c      	beq.n	8003e4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01c      	beq.n	8003e12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dd8:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dde:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7fe f92e 	bl	8002048 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003df0:	f7fe f92a 	bl	8002048 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0fa      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ef      	beq.n	8003df0 <HAL_RCC_OscConfig+0x418>
 8003e10:	e01b      	b.n	8003e4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e12:	4b1f      	ldr	r3, [pc, #124]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e18:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7fe f911 	bl	8002048 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e2a:	f7fe f90d 	bl	8002048 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e0dd      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1ef      	bne.n	8003e2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80d1 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	f000 808b 	beq.w	8003f78 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d15e      	bne.n	8003f28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fe f8e7 	bl	8002048 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7c:	e00c      	b.n	8003e98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fe f8e3 	bl	8002048 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d905      	bls.n	8003e98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e0b3      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e98:	4b59      	ldr	r3, [pc, #356]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ec      	bne.n	8003e7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea4:	4b56      	ldr	r3, [pc, #344]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	4b56      	ldr	r3, [pc, #344]	; (8004004 <HAL_RCC_OscConfig+0x62c>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6a11      	ldr	r1, [r2, #32]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eb4:	3a01      	subs	r2, #1
 8003eb6:	0112      	lsls	r2, r2, #4
 8003eb8:	4311      	orrs	r1, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ebe:	0212      	lsls	r2, r2, #8
 8003ec0:	4311      	orrs	r1, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ec6:	0852      	lsrs	r2, r2, #1
 8003ec8:	3a01      	subs	r2, #1
 8003eca:	0552      	lsls	r2, r2, #21
 8003ecc:	4311      	orrs	r1, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ed2:	0852      	lsrs	r2, r2, #1
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	0652      	lsls	r2, r2, #25
 8003ed8:	4311      	orrs	r1, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ede:	06d2      	lsls	r2, r2, #27
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	4947      	ldr	r1, [pc, #284]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee8:	4b45      	ldr	r3, [pc, #276]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a44      	ldr	r2, [pc, #272]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ef2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef4:	4b42      	ldr	r3, [pc, #264]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4a41      	ldr	r2, [pc, #260]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe f8a2 	bl	8002048 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe f89e 	bl	8002048 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e06e      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1a:	4b39      	ldr	r3, [pc, #228]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x530>
 8003f26:	e066      	b.n	8003ff6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f28:	4b35      	ldr	r3, [pc, #212]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a34      	ldr	r2, [pc, #208]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f32:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f34:	4b32      	ldr	r3, [pc, #200]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a31      	ldr	r2, [pc, #196]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f40:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a2e      	ldr	r2, [pc, #184]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003f46:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe f87a 	bl	8002048 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fe f876 	bl	8002048 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e046      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6a:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x580>
 8003f76:	e03e      	b.n	8003ff6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e039      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f84:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <HAL_RCC_OscConfig+0x628>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f003 0203 	and.w	r2, r3, #3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d12c      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d123      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d11b      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d113      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d109      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe8:	085b      	lsrs	r3, r3, #1
 8003fea:	3b01      	subs	r3, #1
 8003fec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40021000 	.word	0x40021000
 8004004:	019f800c 	.word	0x019f800c

08004008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e11e      	b.n	800425e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004020:	4b91      	ldr	r3, [pc, #580]	; (8004268 <HAL_RCC_ClockConfig+0x260>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d910      	bls.n	8004050 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b8e      	ldr	r3, [pc, #568]	; (8004268 <HAL_RCC_ClockConfig+0x260>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 020f 	bic.w	r2, r3, #15
 8004036:	498c      	ldr	r1, [pc, #560]	; (8004268 <HAL_RCC_ClockConfig+0x260>)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	4313      	orrs	r3, r2
 800403c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	4b8a      	ldr	r3, [pc, #552]	; (8004268 <HAL_RCC_ClockConfig+0x260>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e106      	b.n	800425e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d073      	beq.n	8004144 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d129      	bne.n	80040b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004064:	4b81      	ldr	r3, [pc, #516]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0f4      	b.n	800425e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004074:	f000 f99e 	bl	80043b4 <RCC_GetSysClockFreqFromPLLSource>
 8004078:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4a7c      	ldr	r2, [pc, #496]	; (8004270 <HAL_RCC_ClockConfig+0x268>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d93f      	bls.n	8004102 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004082:	4b7a      	ldr	r3, [pc, #488]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004096:	2b00      	cmp	r3, #0
 8004098:	d033      	beq.n	8004102 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d12f      	bne.n	8004102 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040a2:	4b72      	ldr	r3, [pc, #456]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040aa:	4a70      	ldr	r2, [pc, #448]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 80040ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	e024      	b.n	8004102 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c0:	4b6a      	ldr	r3, [pc, #424]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0c6      	b.n	800425e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040d0:	4b66      	ldr	r3, [pc, #408]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0be      	b.n	800425e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80040e0:	f000 f8ce 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 80040e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4a61      	ldr	r2, [pc, #388]	; (8004270 <HAL_RCC_ClockConfig+0x268>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d909      	bls.n	8004102 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040ee:	4b5f      	ldr	r3, [pc, #380]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f6:	4a5d      	ldr	r2, [pc, #372]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 80040f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040fe:	2380      	movs	r3, #128	; 0x80
 8004100:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004102:	4b5a      	ldr	r3, [pc, #360]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f023 0203 	bic.w	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	4957      	ldr	r1, [pc, #348]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 8004110:	4313      	orrs	r3, r2
 8004112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004114:	f7fd ff98 	bl	8002048 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411a:	e00a      	b.n	8004132 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800411c:	f7fd ff94 	bl	8002048 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	; 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e095      	b.n	800425e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004132:	4b4e      	ldr	r3, [pc, #312]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 020c 	and.w	r2, r3, #12
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	429a      	cmp	r2, r3
 8004142:	d1eb      	bne.n	800411c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d023      	beq.n	8004198 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800415c:	4b43      	ldr	r3, [pc, #268]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a42      	ldr	r2, [pc, #264]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 8004162:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004166:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004174:	4b3d      	ldr	r3, [pc, #244]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800417c:	4a3b      	ldr	r2, [pc, #236]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 800417e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004182:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004184:	4b39      	ldr	r3, [pc, #228]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4936      	ldr	r1, [pc, #216]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
 8004196:	e008      	b.n	80041aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b80      	cmp	r3, #128	; 0x80
 800419c:	d105      	bne.n	80041aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800419e:	4b33      	ldr	r3, [pc, #204]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4a32      	ldr	r2, [pc, #200]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 80041a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041aa:	4b2f      	ldr	r3, [pc, #188]	; (8004268 <HAL_RCC_ClockConfig+0x260>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d21d      	bcs.n	80041f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b8:	4b2b      	ldr	r3, [pc, #172]	; (8004268 <HAL_RCC_ClockConfig+0x260>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 020f 	bic.w	r2, r3, #15
 80041c0:	4929      	ldr	r1, [pc, #164]	; (8004268 <HAL_RCC_ClockConfig+0x260>)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041c8:	f7fd ff3e 	bl	8002048 <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d0:	f7fd ff3a 	bl	8002048 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e03b      	b.n	800425e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <HAL_RCC_ClockConfig+0x260>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d1ed      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004200:	4b1a      	ldr	r3, [pc, #104]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4917      	ldr	r1, [pc, #92]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800421e:	4b13      	ldr	r3, [pc, #76]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	490f      	ldr	r1, [pc, #60]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004232:	f000 f825 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 8004236:	4602      	mov	r2, r0
 8004238:	4b0c      	ldr	r3, [pc, #48]	; (800426c <HAL_RCC_ClockConfig+0x264>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	490c      	ldr	r1, [pc, #48]	; (8004274 <HAL_RCC_ClockConfig+0x26c>)
 8004244:	5ccb      	ldrb	r3, [r1, r3]
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	fa22 f303 	lsr.w	r3, r2, r3
 800424e:	4a0a      	ldr	r2, [pc, #40]	; (8004278 <HAL_RCC_ClockConfig+0x270>)
 8004250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004252:	4b0a      	ldr	r3, [pc, #40]	; (800427c <HAL_RCC_ClockConfig+0x274>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7fd feaa 	bl	8001fb0 <HAL_InitTick>
 800425c:	4603      	mov	r3, r0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40022000 	.word	0x40022000
 800426c:	40021000 	.word	0x40021000
 8004270:	04c4b400 	.word	0x04c4b400
 8004274:	0800b374 	.word	0x0800b374
 8004278:	20000000 	.word	0x20000000
 800427c:	20000004 	.word	0x20000004

08004280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004286:	4b2c      	ldr	r3, [pc, #176]	; (8004338 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b04      	cmp	r3, #4
 8004290:	d102      	bne.n	8004298 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004292:	4b2a      	ldr	r3, [pc, #168]	; (800433c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	e047      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004298:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_RCC_GetSysClockFreq+0xb8>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d102      	bne.n	80042aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042a4:	4b26      	ldr	r3, [pc, #152]	; (8004340 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	e03e      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80042aa:	4b23      	ldr	r3, [pc, #140]	; (8004338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b0c      	cmp	r3, #12
 80042b4:	d136      	bne.n	8004324 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042b6:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042c0:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	3301      	adds	r3, #1
 80042cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d10c      	bne.n	80042ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042d4:	4a1a      	ldr	r2, [pc, #104]	; (8004340 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	4a16      	ldr	r2, [pc, #88]	; (8004338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042de:	68d2      	ldr	r2, [r2, #12]
 80042e0:	0a12      	lsrs	r2, r2, #8
 80042e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	617b      	str	r3, [r7, #20]
      break;
 80042ec:	e00c      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042ee:	4a13      	ldr	r2, [pc, #76]	; (800433c <HAL_RCC_GetSysClockFreq+0xbc>)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	4a10      	ldr	r2, [pc, #64]	; (8004338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042f8:	68d2      	ldr	r2, [r2, #12]
 80042fa:	0a12      	lsrs	r2, r2, #8
 80042fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004300:	fb02 f303 	mul.w	r3, r2, r3
 8004304:	617b      	str	r3, [r7, #20]
      break;
 8004306:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004308:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <HAL_RCC_GetSysClockFreq+0xb8>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	0e5b      	lsrs	r3, r3, #25
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	3301      	adds	r3, #1
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	e001      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004328:	693b      	ldr	r3, [r7, #16]
}
 800432a:	4618      	mov	r0, r3
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	00f42400 	.word	0x00f42400
 8004340:	016e3600 	.word	0x016e3600

08004344 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <HAL_RCC_GetHCLKFreq+0x14>)
 800434a:	681b      	ldr	r3, [r3, #0]
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20000000 	.word	0x20000000

0800435c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004360:	f7ff fff0 	bl	8004344 <HAL_RCC_GetHCLKFreq>
 8004364:	4602      	mov	r2, r0
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	4904      	ldr	r1, [pc, #16]	; (8004384 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004372:	5ccb      	ldrb	r3, [r1, r3]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800437c:	4618      	mov	r0, r3
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	0800b384 	.word	0x0800b384

08004388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800438c:	f7ff ffda 	bl	8004344 <HAL_RCC_GetHCLKFreq>
 8004390:	4602      	mov	r2, r0
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	0adb      	lsrs	r3, r3, #11
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	4904      	ldr	r1, [pc, #16]	; (80043b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800439e:	5ccb      	ldrb	r3, [r1, r3]
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000
 80043b0:	0800b384 	.word	0x0800b384

080043b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043c4:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	3301      	adds	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d10c      	bne.n	80043f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043d8:	4a17      	ldr	r2, [pc, #92]	; (8004438 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	4a14      	ldr	r2, [pc, #80]	; (8004434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043e2:	68d2      	ldr	r2, [r2, #12]
 80043e4:	0a12      	lsrs	r2, r2, #8
 80043e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	617b      	str	r3, [r7, #20]
    break;
 80043f0:	e00c      	b.n	800440c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043f2:	4a12      	ldr	r2, [pc, #72]	; (800443c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	4a0e      	ldr	r2, [pc, #56]	; (8004434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043fc:	68d2      	ldr	r2, [r2, #12]
 80043fe:	0a12      	lsrs	r2, r2, #8
 8004400:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]
    break;
 800440a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	0e5b      	lsrs	r3, r3, #25
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	3301      	adds	r3, #1
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004426:	687b      	ldr	r3, [r7, #4]
}
 8004428:	4618      	mov	r0, r3
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40021000 	.word	0x40021000
 8004438:	016e3600 	.word	0x016e3600
 800443c:	00f42400 	.word	0x00f42400

08004440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004448:	2300      	movs	r3, #0
 800444a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800444c:	2300      	movs	r3, #0
 800444e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8098 	beq.w	800458e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004462:	4b43      	ldr	r3, [pc, #268]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10d      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446e:	4b40      	ldr	r3, [pc, #256]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	4a3f      	ldr	r2, [pc, #252]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004478:	6593      	str	r3, [r2, #88]	; 0x58
 800447a:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004486:	2301      	movs	r3, #1
 8004488:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448a:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a39      	ldr	r2, [pc, #228]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004494:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004496:	f7fd fdd7 	bl	8002048 <HAL_GetTick>
 800449a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800449c:	e009      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fd fdd3 	bl	8002048 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d902      	bls.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	74fb      	strb	r3, [r7, #19]
        break;
 80044b0:	e005      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044b2:	4b30      	ldr	r3, [pc, #192]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0ef      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d159      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044c4:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01e      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d019      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044e0:	4b23      	ldr	r3, [pc, #140]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044ec:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	4a1f      	ldr	r2, [pc, #124]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044fc:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800450c:	4a18      	ldr	r2, [pc, #96]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fd fd93 	bl	8002048 <HAL_GetTick>
 8004522:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004524:	e00b      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fd fd8f 	bl	8002048 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	; 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d902      	bls.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	74fb      	strb	r3, [r7, #19]
            break;
 800453c:	e006      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453e:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ec      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	4903      	ldr	r1, [pc, #12]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004568:	e008      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800456a:	7cfb      	ldrb	r3, [r7, #19]
 800456c:	74bb      	strb	r3, [r7, #18]
 800456e:	e005      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004570:	40021000 	.word	0x40021000
 8004574:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800457c:	7c7b      	ldrb	r3, [r7, #17]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d105      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004582:	4ba6      	ldr	r3, [pc, #664]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004586:	4aa5      	ldr	r2, [pc, #660]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800458c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800459a:	4ba0      	ldr	r3, [pc, #640]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	f023 0203 	bic.w	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	499c      	ldr	r1, [pc, #624]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045bc:	4b97      	ldr	r3, [pc, #604]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c2:	f023 020c 	bic.w	r2, r3, #12
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	4994      	ldr	r1, [pc, #592]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045de:	4b8f      	ldr	r3, [pc, #572]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	498b      	ldr	r1, [pc, #556]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004600:	4b86      	ldr	r3, [pc, #536]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	4983      	ldr	r1, [pc, #524]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004622:	4b7e      	ldr	r3, [pc, #504]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004628:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	497a      	ldr	r1, [pc, #488]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004644:	4b75      	ldr	r3, [pc, #468]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	4972      	ldr	r1, [pc, #456]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004666:	4b6d      	ldr	r3, [pc, #436]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	4969      	ldr	r1, [pc, #420]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004688:	4b64      	ldr	r3, [pc, #400]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	4961      	ldr	r1, [pc, #388]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046aa:	4b5c      	ldr	r3, [pc, #368]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	4958      	ldr	r1, [pc, #352]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d015      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046cc:	4b53      	ldr	r3, [pc, #332]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	4950      	ldr	r1, [pc, #320]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ea:	d105      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ec:	4b4b      	ldr	r3, [pc, #300]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4a4a      	ldr	r2, [pc, #296]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004700:	2b00      	cmp	r3, #0
 8004702:	d015      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004704:	4b45      	ldr	r3, [pc, #276]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	4942      	ldr	r1, [pc, #264]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004722:	d105      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004724:	4b3d      	ldr	r3, [pc, #244]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4a3c      	ldr	r2, [pc, #240]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800472a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d015      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800473c:	4b37      	ldr	r3, [pc, #220]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004742:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	4934      	ldr	r1, [pc, #208]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800475a:	d105      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800475c:	4b2f      	ldr	r3, [pc, #188]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	4a2e      	ldr	r2, [pc, #184]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004766:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d015      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004774:	4b29      	ldr	r3, [pc, #164]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004782:	4926      	ldr	r1, [pc, #152]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004792:	d105      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004794:	4b21      	ldr	r3, [pc, #132]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4a20      	ldr	r2, [pc, #128]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800479a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800479e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d015      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047ac:	4b1b      	ldr	r3, [pc, #108]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	4918      	ldr	r1, [pc, #96]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ca:	d105      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047cc:	4b13      	ldr	r3, [pc, #76]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a12      	ldr	r2, [pc, #72]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d015      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047e4:	4b0d      	ldr	r3, [pc, #52]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f2:	490a      	ldr	r1, [pc, #40]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004802:	d105      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4a04      	ldr	r2, [pc, #16]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004810:	7cbb      	ldrb	r3, [r7, #18]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000

08004820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e042      	b.n	80048b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7fd fb19 	bl	8001e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2224      	movs	r2, #36	; 0x24
 800484e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f8c2 	bl	80049ec <UART_SetConfig>
 8004868:	4603      	mov	r3, r0
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e022      	b.n	80048b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fb82 	bl	8004f84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800488e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800489e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fc09 	bl	80050c8 <UART_CheckIdleState>
 80048b6:	4603      	mov	r3, r0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	4613      	mov	r3, r2
 80048ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	f040 8083 	bne.w	80049e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_UART_Transmit+0x28>
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e07b      	b.n	80049e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Transmit+0x3a>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e074      	b.n	80049e4 <HAL_UART_Transmit+0x124>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2221      	movs	r2, #33	; 0x21
 800490e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004912:	f7fd fb99 	bl	8002048 <HAL_GetTick>
 8004916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	88fa      	ldrh	r2, [r7, #6]
 8004924:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	d108      	bne.n	8004944 <HAL_UART_Transmit+0x84>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e003      	b.n	800494c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004954:	e02c      	b.n	80049b0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2200      	movs	r2, #0
 800495e:	2180      	movs	r1, #128	; 0x80
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fbfc 	bl	800515e <UART_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e039      	b.n	80049e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004984:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	3302      	adds	r3, #2
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	e007      	b.n	800499e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	3301      	adds	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1cc      	bne.n	8004956 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2200      	movs	r2, #0
 80049c4:	2140      	movs	r1, #64	; 0x40
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fbc9 	bl	800515e <UART_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e006      	b.n	80049e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e000      	b.n	80049e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
  }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f0:	b08c      	sub	sp, #48	; 0x30
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	431a      	orrs	r2, r3
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4bab      	ldr	r3, [pc, #684]	; (8004cc8 <UART_SetConfig+0x2dc>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a24:	430b      	orrs	r3, r1
 8004a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4aa0      	ldr	r2, [pc, #640]	; (8004ccc <UART_SetConfig+0x2e0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d004      	beq.n	8004a58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a54:	4313      	orrs	r3, r2
 8004a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004a62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	f023 010f 	bic.w	r1, r3, #15
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a91      	ldr	r2, [pc, #580]	; (8004cd0 <UART_SetConfig+0x2e4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d125      	bne.n	8004adc <UART_SetConfig+0xf0>
 8004a90:	4b90      	ldr	r3, [pc, #576]	; (8004cd4 <UART_SetConfig+0x2e8>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d81a      	bhi.n	8004ad4 <UART_SetConfig+0xe8>
 8004a9e:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <UART_SetConfig+0xb8>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004ac5 	.word	0x08004ac5
 8004aac:	08004abd 	.word	0x08004abd
 8004ab0:	08004acd 	.word	0x08004acd
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aba:	e0d6      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004abc:	2302      	movs	r3, #2
 8004abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ac2:	e0d2      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aca:	e0ce      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004acc:	2308      	movs	r3, #8
 8004ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ad2:	e0ca      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004ad4:	2310      	movs	r3, #16
 8004ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ada:	e0c6      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a7d      	ldr	r2, [pc, #500]	; (8004cd8 <UART_SetConfig+0x2ec>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d138      	bne.n	8004b58 <UART_SetConfig+0x16c>
 8004ae6:	4b7b      	ldr	r3, [pc, #492]	; (8004cd4 <UART_SetConfig+0x2e8>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f003 030c 	and.w	r3, r3, #12
 8004af0:	2b0c      	cmp	r3, #12
 8004af2:	d82d      	bhi.n	8004b50 <UART_SetConfig+0x164>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0x110>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b31 	.word	0x08004b31
 8004b00:	08004b51 	.word	0x08004b51
 8004b04:	08004b51 	.word	0x08004b51
 8004b08:	08004b51 	.word	0x08004b51
 8004b0c:	08004b41 	.word	0x08004b41
 8004b10:	08004b51 	.word	0x08004b51
 8004b14:	08004b51 	.word	0x08004b51
 8004b18:	08004b51 	.word	0x08004b51
 8004b1c:	08004b39 	.word	0x08004b39
 8004b20:	08004b51 	.word	0x08004b51
 8004b24:	08004b51 	.word	0x08004b51
 8004b28:	08004b51 	.word	0x08004b51
 8004b2c:	08004b49 	.word	0x08004b49
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e098      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e094      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e090      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e08c      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b56:	e088      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a5f      	ldr	r2, [pc, #380]	; (8004cdc <UART_SetConfig+0x2f0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d125      	bne.n	8004bae <UART_SetConfig+0x1c2>
 8004b62:	4b5c      	ldr	r3, [pc, #368]	; (8004cd4 <UART_SetConfig+0x2e8>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b6c:	2b30      	cmp	r3, #48	; 0x30
 8004b6e:	d016      	beq.n	8004b9e <UART_SetConfig+0x1b2>
 8004b70:	2b30      	cmp	r3, #48	; 0x30
 8004b72:	d818      	bhi.n	8004ba6 <UART_SetConfig+0x1ba>
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d00a      	beq.n	8004b8e <UART_SetConfig+0x1a2>
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d814      	bhi.n	8004ba6 <UART_SetConfig+0x1ba>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <UART_SetConfig+0x19a>
 8004b80:	2b10      	cmp	r3, #16
 8004b82:	d008      	beq.n	8004b96 <UART_SetConfig+0x1aa>
 8004b84:	e00f      	b.n	8004ba6 <UART_SetConfig+0x1ba>
 8004b86:	2300      	movs	r3, #0
 8004b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b8c:	e06d      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b94:	e069      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004b96:	2304      	movs	r3, #4
 8004b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9c:	e065      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba4:	e061      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004ba6:	2310      	movs	r3, #16
 8004ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bac:	e05d      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a4b      	ldr	r2, [pc, #300]	; (8004ce0 <UART_SetConfig+0x2f4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d125      	bne.n	8004c04 <UART_SetConfig+0x218>
 8004bb8:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <UART_SetConfig+0x2e8>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc4:	d016      	beq.n	8004bf4 <UART_SetConfig+0x208>
 8004bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc8:	d818      	bhi.n	8004bfc <UART_SetConfig+0x210>
 8004bca:	2b80      	cmp	r3, #128	; 0x80
 8004bcc:	d00a      	beq.n	8004be4 <UART_SetConfig+0x1f8>
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	d814      	bhi.n	8004bfc <UART_SetConfig+0x210>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <UART_SetConfig+0x1f0>
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d008      	beq.n	8004bec <UART_SetConfig+0x200>
 8004bda:	e00f      	b.n	8004bfc <UART_SetConfig+0x210>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be2:	e042      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004be4:	2302      	movs	r3, #2
 8004be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bea:	e03e      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004bec:	2304      	movs	r3, #4
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf2:	e03a      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfa:	e036      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c02:	e032      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a30      	ldr	r2, [pc, #192]	; (8004ccc <UART_SetConfig+0x2e0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d12a      	bne.n	8004c64 <UART_SetConfig+0x278>
 8004c0e:	4b31      	ldr	r3, [pc, #196]	; (8004cd4 <UART_SetConfig+0x2e8>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c1c:	d01a      	beq.n	8004c54 <UART_SetConfig+0x268>
 8004c1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c22:	d81b      	bhi.n	8004c5c <UART_SetConfig+0x270>
 8004c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c28:	d00c      	beq.n	8004c44 <UART_SetConfig+0x258>
 8004c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2e:	d815      	bhi.n	8004c5c <UART_SetConfig+0x270>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <UART_SetConfig+0x250>
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c38:	d008      	beq.n	8004c4c <UART_SetConfig+0x260>
 8004c3a:	e00f      	b.n	8004c5c <UART_SetConfig+0x270>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c42:	e012      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004c44:	2302      	movs	r3, #2
 8004c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4a:	e00e      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c52:	e00a      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004c54:	2308      	movs	r3, #8
 8004c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5a:	e006      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c62:	e002      	b.n	8004c6a <UART_SetConfig+0x27e>
 8004c64:	2310      	movs	r3, #16
 8004c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a17      	ldr	r2, [pc, #92]	; (8004ccc <UART_SetConfig+0x2e0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	f040 80a8 	bne.w	8004dc6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d834      	bhi.n	8004ce8 <UART_SetConfig+0x2fc>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x298>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004ce9 	.word	0x08004ce9
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004ce9 	.word	0x08004ce9
 8004c94:	08004cb7 	.word	0x08004cb7
 8004c98:	08004ce9 	.word	0x08004ce9
 8004c9c:	08004ce9 	.word	0x08004ce9
 8004ca0:	08004ce9 	.word	0x08004ce9
 8004ca4:	08004cbf 	.word	0x08004cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7ff fb58 	bl	800435c <HAL_RCC_GetPCLK1Freq>
 8004cac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cae:	e021      	b.n	8004cf4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <UART_SetConfig+0x2f8>)
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cb4:	e01e      	b.n	8004cf4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb6:	f7ff fae3 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 8004cba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cbc:	e01a      	b.n	8004cf4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cc4:	e016      	b.n	8004cf4 <UART_SetConfig+0x308>
 8004cc6:	bf00      	nop
 8004cc8:	cfff69f3 	.word	0xcfff69f3
 8004ccc:	40008000 	.word	0x40008000
 8004cd0:	40013800 	.word	0x40013800
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40004400 	.word	0x40004400
 8004cdc:	40004800 	.word	0x40004800
 8004ce0:	40004c00 	.word	0x40004c00
 8004ce4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004cf2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 812a 	beq.w	8004f50 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	4a9e      	ldr	r2, [pc, #632]	; (8004f7c <UART_SetConfig+0x590>)
 8004d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d06:	461a      	mov	r2, r3
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4413      	add	r3, r2
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d305      	bcc.n	8004d2c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d903      	bls.n	8004d34 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d32:	e10d      	b.n	8004f50 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	2200      	movs	r2, #0
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	60fa      	str	r2, [r7, #12]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	4a8e      	ldr	r2, [pc, #568]	; (8004f7c <UART_SetConfig+0x590>)
 8004d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2200      	movs	r2, #0
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d56:	f7fb ffbf 	bl	8000cd8 <__aeabi_uldivmod>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	020b      	lsls	r3, r1, #8
 8004d6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d70:	0202      	lsls	r2, r0, #8
 8004d72:	6979      	ldr	r1, [r7, #20]
 8004d74:	6849      	ldr	r1, [r1, #4]
 8004d76:	0849      	lsrs	r1, r1, #1
 8004d78:	2000      	movs	r0, #0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	eb12 0804 	adds.w	r8, r2, r4
 8004d82:	eb43 0905 	adc.w	r9, r3, r5
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	469a      	mov	sl, r3
 8004d8e:	4693      	mov	fp, r2
 8004d90:	4652      	mov	r2, sl
 8004d92:	465b      	mov	r3, fp
 8004d94:	4640      	mov	r0, r8
 8004d96:	4649      	mov	r1, r9
 8004d98:	f7fb ff9e 	bl	8000cd8 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004daa:	d308      	bcc.n	8004dbe <UART_SetConfig+0x3d2>
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db2:	d204      	bcs.n	8004dbe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a3a      	ldr	r2, [r7, #32]
 8004dba:	60da      	str	r2, [r3, #12]
 8004dbc:	e0c8      	b.n	8004f50 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dc4:	e0c4      	b.n	8004f50 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dce:	d167      	bne.n	8004ea0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004dd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d828      	bhi.n	8004e2a <UART_SetConfig+0x43e>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <UART_SetConfig+0x3f4>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004e0d 	.word	0x08004e0d
 8004de8:	08004e15 	.word	0x08004e15
 8004dec:	08004e2b 	.word	0x08004e2b
 8004df0:	08004e1b 	.word	0x08004e1b
 8004df4:	08004e2b 	.word	0x08004e2b
 8004df8:	08004e2b 	.word	0x08004e2b
 8004dfc:	08004e2b 	.word	0x08004e2b
 8004e00:	08004e23 	.word	0x08004e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e04:	f7ff faaa 	bl	800435c <HAL_RCC_GetPCLK1Freq>
 8004e08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e0a:	e014      	b.n	8004e36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e0c:	f7ff fabc 	bl	8004388 <HAL_RCC_GetPCLK2Freq>
 8004e10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e12:	e010      	b.n	8004e36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e14:	4b5a      	ldr	r3, [pc, #360]	; (8004f80 <UART_SetConfig+0x594>)
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e18:	e00d      	b.n	8004e36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1a:	f7ff fa31 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 8004e1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e20:	e009      	b.n	8004e36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e28:	e005      	b.n	8004e36 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8089 	beq.w	8004f50 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	4a4e      	ldr	r2, [pc, #312]	; (8004f7c <UART_SetConfig+0x590>)
 8004e44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e50:	005a      	lsls	r2, r3, #1
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	441a      	add	r2, r3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	2b0f      	cmp	r3, #15
 8004e68:	d916      	bls.n	8004e98 <UART_SetConfig+0x4ac>
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e70:	d212      	bcs.n	8004e98 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f023 030f 	bic.w	r3, r3, #15
 8004e7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	8bfb      	ldrh	r3, [r7, #30]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	8bfa      	ldrh	r2, [r7, #30]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	e05b      	b.n	8004f50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e9e:	e057      	b.n	8004f50 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ea0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d828      	bhi.n	8004efa <UART_SetConfig+0x50e>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <UART_SetConfig+0x4c4>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004edd 	.word	0x08004edd
 8004eb8:	08004ee5 	.word	0x08004ee5
 8004ebc:	08004efb 	.word	0x08004efb
 8004ec0:	08004eeb 	.word	0x08004eeb
 8004ec4:	08004efb 	.word	0x08004efb
 8004ec8:	08004efb 	.word	0x08004efb
 8004ecc:	08004efb 	.word	0x08004efb
 8004ed0:	08004ef3 	.word	0x08004ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7ff fa42 	bl	800435c <HAL_RCC_GetPCLK1Freq>
 8004ed8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eda:	e014      	b.n	8004f06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7ff fa54 	bl	8004388 <HAL_RCC_GetPCLK2Freq>
 8004ee0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ee2:	e010      	b.n	8004f06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee4:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <UART_SetConfig+0x594>)
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ee8:	e00d      	b.n	8004f06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eea:	f7ff f9c9 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ef0:	e009      	b.n	8004f06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ef8:	e005      	b.n	8004f06 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f04:	bf00      	nop
    }

    if (pclk != 0U)
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d021      	beq.n	8004f50 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	4a1a      	ldr	r2, [pc, #104]	; (8004f7c <UART_SetConfig+0x590>)
 8004f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f16:	461a      	mov	r2, r3
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	441a      	add	r2, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	2b0f      	cmp	r3, #15
 8004f34:	d909      	bls.n	8004f4a <UART_SetConfig+0x55e>
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3c:	d205      	bcs.n	8004f4a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60da      	str	r2, [r3, #12]
 8004f48:	e002      	b.n	8004f50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2200      	movs	r2, #0
 8004f64:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004f6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3730      	adds	r7, #48	; 0x30
 8004f74:	46bd      	mov	sp, r7
 8004f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7a:	bf00      	nop
 8004f7c:	0800b38c 	.word	0x0800b38c
 8004f80:	00f42400 	.word	0x00f42400

08004f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01a      	beq.n	800509a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005082:	d10a      	bne.n	800509a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  }
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050d8:	f7fc ffb6 	bl	8002048 <HAL_GetTick>
 80050dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d10e      	bne.n	800510a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f82f 	bl	800515e <UART_WaitOnFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e025      	b.n	8005156 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b04      	cmp	r3, #4
 8005116:	d10e      	bne.n	8005136 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f819 	bl	800515e <UART_WaitOnFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e00f      	b.n	8005156 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b09c      	sub	sp, #112	; 0x70
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	603b      	str	r3, [r7, #0]
 800516a:	4613      	mov	r3, r2
 800516c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800516e:	e0a9      	b.n	80052c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	f000 80a5 	beq.w	80052c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517a:	f7fc ff65 	bl	8002048 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005186:	429a      	cmp	r2, r3
 8005188:	d302      	bcc.n	8005190 <UART_WaitOnFlagUntilTimeout+0x32>
 800518a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800518c:	2b00      	cmp	r3, #0
 800518e:	d140      	bne.n	8005212 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800519e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051a4:	667b      	str	r3, [r7, #100]	; 0x64
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e6      	bne.n	8005190 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3308      	adds	r3, #8
 80051c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d4:	f023 0301 	bic.w	r3, r3, #1
 80051d8:	663b      	str	r3, [r7, #96]	; 0x60
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3308      	adds	r3, #8
 80051e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80051e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e5      	bne.n	80051c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e069      	b.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d051      	beq.n	80052c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522e:	d149      	bne.n	80052c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005238:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800524e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
 800525a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800525e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e6      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	613b      	str	r3, [r7, #16]
   return(result);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	66bb      	str	r3, [r7, #104]	; 0x68
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3308      	adds	r3, #8
 800528a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800528c:	623a      	str	r2, [r7, #32]
 800528e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	69f9      	ldr	r1, [r7, #28]
 8005292:	6a3a      	ldr	r2, [r7, #32]
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	61bb      	str	r3, [r7, #24]
   return(result);
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e5      	bne.n	800526c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e010      	b.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69da      	ldr	r2, [r3, #28]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4013      	ands	r3, r2
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	bf0c      	ite	eq
 80052d4:	2301      	moveq	r3, #1
 80052d6:	2300      	movne	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	429a      	cmp	r2, r3
 80052e0:	f43f af46 	beq.w	8005170 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3770      	adds	r7, #112	; 0x70
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_UARTEx_DisableFifoMode+0x16>
 8005300:	2302      	movs	r3, #2
 8005302:	e027      	b.n	8005354 <HAL_UARTEx_DisableFifoMode+0x66>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2224      	movs	r2, #36	; 0x24
 8005310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0201 	bic.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005332:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005374:	2302      	movs	r3, #2
 8005376:	e02d      	b.n	80053d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	; 0x24
 8005384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0201 	bic.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f84f 	bl	8005458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e02d      	b.n	8005450 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f811 	bl	8005458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005464:	2b00      	cmp	r3, #0
 8005466:	d108      	bne.n	800547a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005478:	e031      	b.n	80054de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800547a:	2308      	movs	r3, #8
 800547c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800547e:	2308      	movs	r3, #8
 8005480:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	0e5b      	lsrs	r3, r3, #25
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	0f5b      	lsrs	r3, r3, #29
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054a2:	7bbb      	ldrb	r3, [r7, #14]
 80054a4:	7b3a      	ldrb	r2, [r7, #12]
 80054a6:	4911      	ldr	r1, [pc, #68]	; (80054ec <UARTEx_SetNbDataToProcess+0x94>)
 80054a8:	5c8a      	ldrb	r2, [r1, r2]
 80054aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054ae:	7b3a      	ldrb	r2, [r7, #12]
 80054b0:	490f      	ldr	r1, [pc, #60]	; (80054f0 <UARTEx_SetNbDataToProcess+0x98>)
 80054b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	7b7a      	ldrb	r2, [r7, #13]
 80054c4:	4909      	ldr	r1, [pc, #36]	; (80054ec <UARTEx_SetNbDataToProcess+0x94>)
 80054c6:	5c8a      	ldrb	r2, [r1, r2]
 80054c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054cc:	7b7a      	ldrb	r2, [r7, #13]
 80054ce:	4908      	ldr	r1, [pc, #32]	; (80054f0 <UARTEx_SetNbDataToProcess+0x98>)
 80054d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054de:	bf00      	nop
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	0800b3a4 	.word	0x0800b3a4
 80054f0:	0800b3ac 	.word	0x0800b3ac

080054f4 <__errno>:
 80054f4:	4b01      	ldr	r3, [pc, #4]	; (80054fc <__errno+0x8>)
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	2000000c 	.word	0x2000000c

08005500 <__libc_init_array>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4d0d      	ldr	r5, [pc, #52]	; (8005538 <__libc_init_array+0x38>)
 8005504:	4c0d      	ldr	r4, [pc, #52]	; (800553c <__libc_init_array+0x3c>)
 8005506:	1b64      	subs	r4, r4, r5
 8005508:	10a4      	asrs	r4, r4, #2
 800550a:	2600      	movs	r6, #0
 800550c:	42a6      	cmp	r6, r4
 800550e:	d109      	bne.n	8005524 <__libc_init_array+0x24>
 8005510:	4d0b      	ldr	r5, [pc, #44]	; (8005540 <__libc_init_array+0x40>)
 8005512:	4c0c      	ldr	r4, [pc, #48]	; (8005544 <__libc_init_array+0x44>)
 8005514:	f005 fcc2 	bl	800ae9c <_init>
 8005518:	1b64      	subs	r4, r4, r5
 800551a:	10a4      	asrs	r4, r4, #2
 800551c:	2600      	movs	r6, #0
 800551e:	42a6      	cmp	r6, r4
 8005520:	d105      	bne.n	800552e <__libc_init_array+0x2e>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	f855 3b04 	ldr.w	r3, [r5], #4
 8005528:	4798      	blx	r3
 800552a:	3601      	adds	r6, #1
 800552c:	e7ee      	b.n	800550c <__libc_init_array+0xc>
 800552e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005532:	4798      	blx	r3
 8005534:	3601      	adds	r6, #1
 8005536:	e7f2      	b.n	800551e <__libc_init_array+0x1e>
 8005538:	0800b8a0 	.word	0x0800b8a0
 800553c:	0800b8a0 	.word	0x0800b8a0
 8005540:	0800b8a0 	.word	0x0800b8a0
 8005544:	0800b8a4 	.word	0x0800b8a4

08005548 <memset>:
 8005548:	4402      	add	r2, r0
 800554a:	4603      	mov	r3, r0
 800554c:	4293      	cmp	r3, r2
 800554e:	d100      	bne.n	8005552 <memset+0xa>
 8005550:	4770      	bx	lr
 8005552:	f803 1b01 	strb.w	r1, [r3], #1
 8005556:	e7f9      	b.n	800554c <memset+0x4>

08005558 <__cvt>:
 8005558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800555c:	ec55 4b10 	vmov	r4, r5, d0
 8005560:	2d00      	cmp	r5, #0
 8005562:	460e      	mov	r6, r1
 8005564:	4619      	mov	r1, r3
 8005566:	462b      	mov	r3, r5
 8005568:	bfbb      	ittet	lt
 800556a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800556e:	461d      	movlt	r5, r3
 8005570:	2300      	movge	r3, #0
 8005572:	232d      	movlt	r3, #45	; 0x2d
 8005574:	700b      	strb	r3, [r1, #0]
 8005576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005578:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800557c:	4691      	mov	r9, r2
 800557e:	f023 0820 	bic.w	r8, r3, #32
 8005582:	bfbc      	itt	lt
 8005584:	4622      	movlt	r2, r4
 8005586:	4614      	movlt	r4, r2
 8005588:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800558c:	d005      	beq.n	800559a <__cvt+0x42>
 800558e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005592:	d100      	bne.n	8005596 <__cvt+0x3e>
 8005594:	3601      	adds	r6, #1
 8005596:	2102      	movs	r1, #2
 8005598:	e000      	b.n	800559c <__cvt+0x44>
 800559a:	2103      	movs	r1, #3
 800559c:	ab03      	add	r3, sp, #12
 800559e:	9301      	str	r3, [sp, #4]
 80055a0:	ab02      	add	r3, sp, #8
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	ec45 4b10 	vmov	d0, r4, r5
 80055a8:	4653      	mov	r3, sl
 80055aa:	4632      	mov	r2, r6
 80055ac:	f001 ff10 	bl	80073d0 <_dtoa_r>
 80055b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055b4:	4607      	mov	r7, r0
 80055b6:	d102      	bne.n	80055be <__cvt+0x66>
 80055b8:	f019 0f01 	tst.w	r9, #1
 80055bc:	d022      	beq.n	8005604 <__cvt+0xac>
 80055be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055c2:	eb07 0906 	add.w	r9, r7, r6
 80055c6:	d110      	bne.n	80055ea <__cvt+0x92>
 80055c8:	783b      	ldrb	r3, [r7, #0]
 80055ca:	2b30      	cmp	r3, #48	; 0x30
 80055cc:	d10a      	bne.n	80055e4 <__cvt+0x8c>
 80055ce:	2200      	movs	r2, #0
 80055d0:	2300      	movs	r3, #0
 80055d2:	4620      	mov	r0, r4
 80055d4:	4629      	mov	r1, r5
 80055d6:	f7fb fa9f 	bl	8000b18 <__aeabi_dcmpeq>
 80055da:	b918      	cbnz	r0, 80055e4 <__cvt+0x8c>
 80055dc:	f1c6 0601 	rsb	r6, r6, #1
 80055e0:	f8ca 6000 	str.w	r6, [sl]
 80055e4:	f8da 3000 	ldr.w	r3, [sl]
 80055e8:	4499      	add	r9, r3
 80055ea:	2200      	movs	r2, #0
 80055ec:	2300      	movs	r3, #0
 80055ee:	4620      	mov	r0, r4
 80055f0:	4629      	mov	r1, r5
 80055f2:	f7fb fa91 	bl	8000b18 <__aeabi_dcmpeq>
 80055f6:	b108      	cbz	r0, 80055fc <__cvt+0xa4>
 80055f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80055fc:	2230      	movs	r2, #48	; 0x30
 80055fe:	9b03      	ldr	r3, [sp, #12]
 8005600:	454b      	cmp	r3, r9
 8005602:	d307      	bcc.n	8005614 <__cvt+0xbc>
 8005604:	9b03      	ldr	r3, [sp, #12]
 8005606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005608:	1bdb      	subs	r3, r3, r7
 800560a:	4638      	mov	r0, r7
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	b004      	add	sp, #16
 8005610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005614:	1c59      	adds	r1, r3, #1
 8005616:	9103      	str	r1, [sp, #12]
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	e7f0      	b.n	80055fe <__cvt+0xa6>

0800561c <__exponent>:
 800561c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800561e:	4603      	mov	r3, r0
 8005620:	2900      	cmp	r1, #0
 8005622:	bfb8      	it	lt
 8005624:	4249      	neglt	r1, r1
 8005626:	f803 2b02 	strb.w	r2, [r3], #2
 800562a:	bfb4      	ite	lt
 800562c:	222d      	movlt	r2, #45	; 0x2d
 800562e:	222b      	movge	r2, #43	; 0x2b
 8005630:	2909      	cmp	r1, #9
 8005632:	7042      	strb	r2, [r0, #1]
 8005634:	dd2a      	ble.n	800568c <__exponent+0x70>
 8005636:	f10d 0407 	add.w	r4, sp, #7
 800563a:	46a4      	mov	ip, r4
 800563c:	270a      	movs	r7, #10
 800563e:	46a6      	mov	lr, r4
 8005640:	460a      	mov	r2, r1
 8005642:	fb91 f6f7 	sdiv	r6, r1, r7
 8005646:	fb07 1516 	mls	r5, r7, r6, r1
 800564a:	3530      	adds	r5, #48	; 0x30
 800564c:	2a63      	cmp	r2, #99	; 0x63
 800564e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005652:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005656:	4631      	mov	r1, r6
 8005658:	dcf1      	bgt.n	800563e <__exponent+0x22>
 800565a:	3130      	adds	r1, #48	; 0x30
 800565c:	f1ae 0502 	sub.w	r5, lr, #2
 8005660:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005664:	1c44      	adds	r4, r0, #1
 8005666:	4629      	mov	r1, r5
 8005668:	4561      	cmp	r1, ip
 800566a:	d30a      	bcc.n	8005682 <__exponent+0x66>
 800566c:	f10d 0209 	add.w	r2, sp, #9
 8005670:	eba2 020e 	sub.w	r2, r2, lr
 8005674:	4565      	cmp	r5, ip
 8005676:	bf88      	it	hi
 8005678:	2200      	movhi	r2, #0
 800567a:	4413      	add	r3, r2
 800567c:	1a18      	subs	r0, r3, r0
 800567e:	b003      	add	sp, #12
 8005680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005686:	f804 2f01 	strb.w	r2, [r4, #1]!
 800568a:	e7ed      	b.n	8005668 <__exponent+0x4c>
 800568c:	2330      	movs	r3, #48	; 0x30
 800568e:	3130      	adds	r1, #48	; 0x30
 8005690:	7083      	strb	r3, [r0, #2]
 8005692:	70c1      	strb	r1, [r0, #3]
 8005694:	1d03      	adds	r3, r0, #4
 8005696:	e7f1      	b.n	800567c <__exponent+0x60>

08005698 <_printf_float>:
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	ed2d 8b02 	vpush	{d8}
 80056a0:	b08d      	sub	sp, #52	; 0x34
 80056a2:	460c      	mov	r4, r1
 80056a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80056a8:	4616      	mov	r6, r2
 80056aa:	461f      	mov	r7, r3
 80056ac:	4605      	mov	r5, r0
 80056ae:	f003 f9a3 	bl	80089f8 <_localeconv_r>
 80056b2:	f8d0 a000 	ldr.w	sl, [r0]
 80056b6:	4650      	mov	r0, sl
 80056b8:	f7fa fdb2 	bl	8000220 <strlen>
 80056bc:	2300      	movs	r3, #0
 80056be:	930a      	str	r3, [sp, #40]	; 0x28
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	9305      	str	r3, [sp, #20]
 80056c4:	f8d8 3000 	ldr.w	r3, [r8]
 80056c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80056cc:	3307      	adds	r3, #7
 80056ce:	f023 0307 	bic.w	r3, r3, #7
 80056d2:	f103 0208 	add.w	r2, r3, #8
 80056d6:	f8c8 2000 	str.w	r2, [r8]
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80056e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056ea:	9307      	str	r3, [sp, #28]
 80056ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80056f0:	ee08 0a10 	vmov	s16, r0
 80056f4:	4b9f      	ldr	r3, [pc, #636]	; (8005974 <_printf_float+0x2dc>)
 80056f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056fa:	f04f 32ff 	mov.w	r2, #4294967295
 80056fe:	f7fb fa3d 	bl	8000b7c <__aeabi_dcmpun>
 8005702:	bb88      	cbnz	r0, 8005768 <_printf_float+0xd0>
 8005704:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005708:	4b9a      	ldr	r3, [pc, #616]	; (8005974 <_printf_float+0x2dc>)
 800570a:	f04f 32ff 	mov.w	r2, #4294967295
 800570e:	f7fb fa17 	bl	8000b40 <__aeabi_dcmple>
 8005712:	bb48      	cbnz	r0, 8005768 <_printf_float+0xd0>
 8005714:	2200      	movs	r2, #0
 8005716:	2300      	movs	r3, #0
 8005718:	4640      	mov	r0, r8
 800571a:	4649      	mov	r1, r9
 800571c:	f7fb fa06 	bl	8000b2c <__aeabi_dcmplt>
 8005720:	b110      	cbz	r0, 8005728 <_printf_float+0x90>
 8005722:	232d      	movs	r3, #45	; 0x2d
 8005724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005728:	4b93      	ldr	r3, [pc, #588]	; (8005978 <_printf_float+0x2e0>)
 800572a:	4894      	ldr	r0, [pc, #592]	; (800597c <_printf_float+0x2e4>)
 800572c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005730:	bf94      	ite	ls
 8005732:	4698      	movls	r8, r3
 8005734:	4680      	movhi	r8, r0
 8005736:	2303      	movs	r3, #3
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	9b05      	ldr	r3, [sp, #20]
 800573c:	f023 0204 	bic.w	r2, r3, #4
 8005740:	6022      	str	r2, [r4, #0]
 8005742:	f04f 0900 	mov.w	r9, #0
 8005746:	9700      	str	r7, [sp, #0]
 8005748:	4633      	mov	r3, r6
 800574a:	aa0b      	add	r2, sp, #44	; 0x2c
 800574c:	4621      	mov	r1, r4
 800574e:	4628      	mov	r0, r5
 8005750:	f000 f9d8 	bl	8005b04 <_printf_common>
 8005754:	3001      	adds	r0, #1
 8005756:	f040 8090 	bne.w	800587a <_printf_float+0x1e2>
 800575a:	f04f 30ff 	mov.w	r0, #4294967295
 800575e:	b00d      	add	sp, #52	; 0x34
 8005760:	ecbd 8b02 	vpop	{d8}
 8005764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005768:	4642      	mov	r2, r8
 800576a:	464b      	mov	r3, r9
 800576c:	4640      	mov	r0, r8
 800576e:	4649      	mov	r1, r9
 8005770:	f7fb fa04 	bl	8000b7c <__aeabi_dcmpun>
 8005774:	b140      	cbz	r0, 8005788 <_printf_float+0xf0>
 8005776:	464b      	mov	r3, r9
 8005778:	2b00      	cmp	r3, #0
 800577a:	bfbc      	itt	lt
 800577c:	232d      	movlt	r3, #45	; 0x2d
 800577e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005782:	487f      	ldr	r0, [pc, #508]	; (8005980 <_printf_float+0x2e8>)
 8005784:	4b7f      	ldr	r3, [pc, #508]	; (8005984 <_printf_float+0x2ec>)
 8005786:	e7d1      	b.n	800572c <_printf_float+0x94>
 8005788:	6863      	ldr	r3, [r4, #4]
 800578a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800578e:	9206      	str	r2, [sp, #24]
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	d13f      	bne.n	8005814 <_printf_float+0x17c>
 8005794:	2306      	movs	r3, #6
 8005796:	6063      	str	r3, [r4, #4]
 8005798:	9b05      	ldr	r3, [sp, #20]
 800579a:	6861      	ldr	r1, [r4, #4]
 800579c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057a0:	2300      	movs	r3, #0
 80057a2:	9303      	str	r3, [sp, #12]
 80057a4:	ab0a      	add	r3, sp, #40	; 0x28
 80057a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80057aa:	ab09      	add	r3, sp, #36	; 0x24
 80057ac:	ec49 8b10 	vmov	d0, r8, r9
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	6022      	str	r2, [r4, #0]
 80057b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80057b8:	4628      	mov	r0, r5
 80057ba:	f7ff fecd 	bl	8005558 <__cvt>
 80057be:	9b06      	ldr	r3, [sp, #24]
 80057c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057c2:	2b47      	cmp	r3, #71	; 0x47
 80057c4:	4680      	mov	r8, r0
 80057c6:	d108      	bne.n	80057da <_printf_float+0x142>
 80057c8:	1cc8      	adds	r0, r1, #3
 80057ca:	db02      	blt.n	80057d2 <_printf_float+0x13a>
 80057cc:	6863      	ldr	r3, [r4, #4]
 80057ce:	4299      	cmp	r1, r3
 80057d0:	dd41      	ble.n	8005856 <_printf_float+0x1be>
 80057d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80057d6:	fa5f fb8b 	uxtb.w	fp, fp
 80057da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057de:	d820      	bhi.n	8005822 <_printf_float+0x18a>
 80057e0:	3901      	subs	r1, #1
 80057e2:	465a      	mov	r2, fp
 80057e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057e8:	9109      	str	r1, [sp, #36]	; 0x24
 80057ea:	f7ff ff17 	bl	800561c <__exponent>
 80057ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057f0:	1813      	adds	r3, r2, r0
 80057f2:	2a01      	cmp	r2, #1
 80057f4:	4681      	mov	r9, r0
 80057f6:	6123      	str	r3, [r4, #16]
 80057f8:	dc02      	bgt.n	8005800 <_printf_float+0x168>
 80057fa:	6822      	ldr	r2, [r4, #0]
 80057fc:	07d2      	lsls	r2, r2, #31
 80057fe:	d501      	bpl.n	8005804 <_printf_float+0x16c>
 8005800:	3301      	adds	r3, #1
 8005802:	6123      	str	r3, [r4, #16]
 8005804:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005808:	2b00      	cmp	r3, #0
 800580a:	d09c      	beq.n	8005746 <_printf_float+0xae>
 800580c:	232d      	movs	r3, #45	; 0x2d
 800580e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005812:	e798      	b.n	8005746 <_printf_float+0xae>
 8005814:	9a06      	ldr	r2, [sp, #24]
 8005816:	2a47      	cmp	r2, #71	; 0x47
 8005818:	d1be      	bne.n	8005798 <_printf_float+0x100>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1bc      	bne.n	8005798 <_printf_float+0x100>
 800581e:	2301      	movs	r3, #1
 8005820:	e7b9      	b.n	8005796 <_printf_float+0xfe>
 8005822:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005826:	d118      	bne.n	800585a <_printf_float+0x1c2>
 8005828:	2900      	cmp	r1, #0
 800582a:	6863      	ldr	r3, [r4, #4]
 800582c:	dd0b      	ble.n	8005846 <_printf_float+0x1ae>
 800582e:	6121      	str	r1, [r4, #16]
 8005830:	b913      	cbnz	r3, 8005838 <_printf_float+0x1a0>
 8005832:	6822      	ldr	r2, [r4, #0]
 8005834:	07d0      	lsls	r0, r2, #31
 8005836:	d502      	bpl.n	800583e <_printf_float+0x1a6>
 8005838:	3301      	adds	r3, #1
 800583a:	440b      	add	r3, r1
 800583c:	6123      	str	r3, [r4, #16]
 800583e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005840:	f04f 0900 	mov.w	r9, #0
 8005844:	e7de      	b.n	8005804 <_printf_float+0x16c>
 8005846:	b913      	cbnz	r3, 800584e <_printf_float+0x1b6>
 8005848:	6822      	ldr	r2, [r4, #0]
 800584a:	07d2      	lsls	r2, r2, #31
 800584c:	d501      	bpl.n	8005852 <_printf_float+0x1ba>
 800584e:	3302      	adds	r3, #2
 8005850:	e7f4      	b.n	800583c <_printf_float+0x1a4>
 8005852:	2301      	movs	r3, #1
 8005854:	e7f2      	b.n	800583c <_printf_float+0x1a4>
 8005856:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800585a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800585c:	4299      	cmp	r1, r3
 800585e:	db05      	blt.n	800586c <_printf_float+0x1d4>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	6121      	str	r1, [r4, #16]
 8005864:	07d8      	lsls	r0, r3, #31
 8005866:	d5ea      	bpl.n	800583e <_printf_float+0x1a6>
 8005868:	1c4b      	adds	r3, r1, #1
 800586a:	e7e7      	b.n	800583c <_printf_float+0x1a4>
 800586c:	2900      	cmp	r1, #0
 800586e:	bfd4      	ite	le
 8005870:	f1c1 0202 	rsble	r2, r1, #2
 8005874:	2201      	movgt	r2, #1
 8005876:	4413      	add	r3, r2
 8005878:	e7e0      	b.n	800583c <_printf_float+0x1a4>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	055a      	lsls	r2, r3, #21
 800587e:	d407      	bmi.n	8005890 <_printf_float+0x1f8>
 8005880:	6923      	ldr	r3, [r4, #16]
 8005882:	4642      	mov	r2, r8
 8005884:	4631      	mov	r1, r6
 8005886:	4628      	mov	r0, r5
 8005888:	47b8      	blx	r7
 800588a:	3001      	adds	r0, #1
 800588c:	d12c      	bne.n	80058e8 <_printf_float+0x250>
 800588e:	e764      	b.n	800575a <_printf_float+0xc2>
 8005890:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005894:	f240 80e0 	bls.w	8005a58 <_printf_float+0x3c0>
 8005898:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800589c:	2200      	movs	r2, #0
 800589e:	2300      	movs	r3, #0
 80058a0:	f7fb f93a 	bl	8000b18 <__aeabi_dcmpeq>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d034      	beq.n	8005912 <_printf_float+0x27a>
 80058a8:	4a37      	ldr	r2, [pc, #220]	; (8005988 <_printf_float+0x2f0>)
 80058aa:	2301      	movs	r3, #1
 80058ac:	4631      	mov	r1, r6
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	f43f af51 	beq.w	800575a <_printf_float+0xc2>
 80058b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058bc:	429a      	cmp	r2, r3
 80058be:	db02      	blt.n	80058c6 <_printf_float+0x22e>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	07d8      	lsls	r0, r3, #31
 80058c4:	d510      	bpl.n	80058e8 <_printf_float+0x250>
 80058c6:	ee18 3a10 	vmov	r3, s16
 80058ca:	4652      	mov	r2, sl
 80058cc:	4631      	mov	r1, r6
 80058ce:	4628      	mov	r0, r5
 80058d0:	47b8      	blx	r7
 80058d2:	3001      	adds	r0, #1
 80058d4:	f43f af41 	beq.w	800575a <_printf_float+0xc2>
 80058d8:	f04f 0800 	mov.w	r8, #0
 80058dc:	f104 091a 	add.w	r9, r4, #26
 80058e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e2:	3b01      	subs	r3, #1
 80058e4:	4543      	cmp	r3, r8
 80058e6:	dc09      	bgt.n	80058fc <_printf_float+0x264>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	079b      	lsls	r3, r3, #30
 80058ec:	f100 8105 	bmi.w	8005afa <_printf_float+0x462>
 80058f0:	68e0      	ldr	r0, [r4, #12]
 80058f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058f4:	4298      	cmp	r0, r3
 80058f6:	bfb8      	it	lt
 80058f8:	4618      	movlt	r0, r3
 80058fa:	e730      	b.n	800575e <_printf_float+0xc6>
 80058fc:	2301      	movs	r3, #1
 80058fe:	464a      	mov	r2, r9
 8005900:	4631      	mov	r1, r6
 8005902:	4628      	mov	r0, r5
 8005904:	47b8      	blx	r7
 8005906:	3001      	adds	r0, #1
 8005908:	f43f af27 	beq.w	800575a <_printf_float+0xc2>
 800590c:	f108 0801 	add.w	r8, r8, #1
 8005910:	e7e6      	b.n	80058e0 <_printf_float+0x248>
 8005912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	dc39      	bgt.n	800598c <_printf_float+0x2f4>
 8005918:	4a1b      	ldr	r2, [pc, #108]	; (8005988 <_printf_float+0x2f0>)
 800591a:	2301      	movs	r3, #1
 800591c:	4631      	mov	r1, r6
 800591e:	4628      	mov	r0, r5
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	f43f af19 	beq.w	800575a <_printf_float+0xc2>
 8005928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800592c:	4313      	orrs	r3, r2
 800592e:	d102      	bne.n	8005936 <_printf_float+0x29e>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	07d9      	lsls	r1, r3, #31
 8005934:	d5d8      	bpl.n	80058e8 <_printf_float+0x250>
 8005936:	ee18 3a10 	vmov	r3, s16
 800593a:	4652      	mov	r2, sl
 800593c:	4631      	mov	r1, r6
 800593e:	4628      	mov	r0, r5
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f af09 	beq.w	800575a <_printf_float+0xc2>
 8005948:	f04f 0900 	mov.w	r9, #0
 800594c:	f104 0a1a 	add.w	sl, r4, #26
 8005950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005952:	425b      	negs	r3, r3
 8005954:	454b      	cmp	r3, r9
 8005956:	dc01      	bgt.n	800595c <_printf_float+0x2c4>
 8005958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800595a:	e792      	b.n	8005882 <_printf_float+0x1ea>
 800595c:	2301      	movs	r3, #1
 800595e:	4652      	mov	r2, sl
 8005960:	4631      	mov	r1, r6
 8005962:	4628      	mov	r0, r5
 8005964:	47b8      	blx	r7
 8005966:	3001      	adds	r0, #1
 8005968:	f43f aef7 	beq.w	800575a <_printf_float+0xc2>
 800596c:	f109 0901 	add.w	r9, r9, #1
 8005970:	e7ee      	b.n	8005950 <_printf_float+0x2b8>
 8005972:	bf00      	nop
 8005974:	7fefffff 	.word	0x7fefffff
 8005978:	0800b3b8 	.word	0x0800b3b8
 800597c:	0800b3bc 	.word	0x0800b3bc
 8005980:	0800b3c4 	.word	0x0800b3c4
 8005984:	0800b3c0 	.word	0x0800b3c0
 8005988:	0800b3c8 	.word	0x0800b3c8
 800598c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800598e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005990:	429a      	cmp	r2, r3
 8005992:	bfa8      	it	ge
 8005994:	461a      	movge	r2, r3
 8005996:	2a00      	cmp	r2, #0
 8005998:	4691      	mov	r9, r2
 800599a:	dc37      	bgt.n	8005a0c <_printf_float+0x374>
 800599c:	f04f 0b00 	mov.w	fp, #0
 80059a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059a4:	f104 021a 	add.w	r2, r4, #26
 80059a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059aa:	9305      	str	r3, [sp, #20]
 80059ac:	eba3 0309 	sub.w	r3, r3, r9
 80059b0:	455b      	cmp	r3, fp
 80059b2:	dc33      	bgt.n	8005a1c <_printf_float+0x384>
 80059b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059b8:	429a      	cmp	r2, r3
 80059ba:	db3b      	blt.n	8005a34 <_printf_float+0x39c>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	07da      	lsls	r2, r3, #31
 80059c0:	d438      	bmi.n	8005a34 <_printf_float+0x39c>
 80059c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c4:	9a05      	ldr	r2, [sp, #20]
 80059c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059c8:	1a9a      	subs	r2, r3, r2
 80059ca:	eba3 0901 	sub.w	r9, r3, r1
 80059ce:	4591      	cmp	r9, r2
 80059d0:	bfa8      	it	ge
 80059d2:	4691      	movge	r9, r2
 80059d4:	f1b9 0f00 	cmp.w	r9, #0
 80059d8:	dc35      	bgt.n	8005a46 <_printf_float+0x3ae>
 80059da:	f04f 0800 	mov.w	r8, #0
 80059de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059e2:	f104 0a1a 	add.w	sl, r4, #26
 80059e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	eba3 0309 	sub.w	r3, r3, r9
 80059f0:	4543      	cmp	r3, r8
 80059f2:	f77f af79 	ble.w	80058e8 <_printf_float+0x250>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4652      	mov	r2, sl
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b8      	blx	r7
 8005a00:	3001      	adds	r0, #1
 8005a02:	f43f aeaa 	beq.w	800575a <_printf_float+0xc2>
 8005a06:	f108 0801 	add.w	r8, r8, #1
 8005a0a:	e7ec      	b.n	80059e6 <_printf_float+0x34e>
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4642      	mov	r2, r8
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	d1c0      	bne.n	800599c <_printf_float+0x304>
 8005a1a:	e69e      	b.n	800575a <_printf_float+0xc2>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	4631      	mov	r1, r6
 8005a20:	4628      	mov	r0, r5
 8005a22:	9205      	str	r2, [sp, #20]
 8005a24:	47b8      	blx	r7
 8005a26:	3001      	adds	r0, #1
 8005a28:	f43f ae97 	beq.w	800575a <_printf_float+0xc2>
 8005a2c:	9a05      	ldr	r2, [sp, #20]
 8005a2e:	f10b 0b01 	add.w	fp, fp, #1
 8005a32:	e7b9      	b.n	80059a8 <_printf_float+0x310>
 8005a34:	ee18 3a10 	vmov	r3, s16
 8005a38:	4652      	mov	r2, sl
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	47b8      	blx	r7
 8005a40:	3001      	adds	r0, #1
 8005a42:	d1be      	bne.n	80059c2 <_printf_float+0x32a>
 8005a44:	e689      	b.n	800575a <_printf_float+0xc2>
 8005a46:	9a05      	ldr	r2, [sp, #20]
 8005a48:	464b      	mov	r3, r9
 8005a4a:	4442      	add	r2, r8
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	d1c1      	bne.n	80059da <_printf_float+0x342>
 8005a56:	e680      	b.n	800575a <_printf_float+0xc2>
 8005a58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a5a:	2a01      	cmp	r2, #1
 8005a5c:	dc01      	bgt.n	8005a62 <_printf_float+0x3ca>
 8005a5e:	07db      	lsls	r3, r3, #31
 8005a60:	d538      	bpl.n	8005ad4 <_printf_float+0x43c>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4642      	mov	r2, r8
 8005a66:	4631      	mov	r1, r6
 8005a68:	4628      	mov	r0, r5
 8005a6a:	47b8      	blx	r7
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	f43f ae74 	beq.w	800575a <_printf_float+0xc2>
 8005a72:	ee18 3a10 	vmov	r3, s16
 8005a76:	4652      	mov	r2, sl
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	47b8      	blx	r7
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f43f ae6b 	beq.w	800575a <_printf_float+0xc2>
 8005a84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f7fb f844 	bl	8000b18 <__aeabi_dcmpeq>
 8005a90:	b9d8      	cbnz	r0, 8005aca <_printf_float+0x432>
 8005a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a94:	f108 0201 	add.w	r2, r8, #1
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d10e      	bne.n	8005ac2 <_printf_float+0x42a>
 8005aa4:	e659      	b.n	800575a <_printf_float+0xc2>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4652      	mov	r2, sl
 8005aaa:	4631      	mov	r1, r6
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b8      	blx	r7
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f43f ae52 	beq.w	800575a <_printf_float+0xc2>
 8005ab6:	f108 0801 	add.w	r8, r8, #1
 8005aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005abc:	3b01      	subs	r3, #1
 8005abe:	4543      	cmp	r3, r8
 8005ac0:	dcf1      	bgt.n	8005aa6 <_printf_float+0x40e>
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ac8:	e6dc      	b.n	8005884 <_printf_float+0x1ec>
 8005aca:	f04f 0800 	mov.w	r8, #0
 8005ace:	f104 0a1a 	add.w	sl, r4, #26
 8005ad2:	e7f2      	b.n	8005aba <_printf_float+0x422>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	4642      	mov	r2, r8
 8005ad8:	e7df      	b.n	8005a9a <_printf_float+0x402>
 8005ada:	2301      	movs	r3, #1
 8005adc:	464a      	mov	r2, r9
 8005ade:	4631      	mov	r1, r6
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	47b8      	blx	r7
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	f43f ae38 	beq.w	800575a <_printf_float+0xc2>
 8005aea:	f108 0801 	add.w	r8, r8, #1
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005af2:	1a5b      	subs	r3, r3, r1
 8005af4:	4543      	cmp	r3, r8
 8005af6:	dcf0      	bgt.n	8005ada <_printf_float+0x442>
 8005af8:	e6fa      	b.n	80058f0 <_printf_float+0x258>
 8005afa:	f04f 0800 	mov.w	r8, #0
 8005afe:	f104 0919 	add.w	r9, r4, #25
 8005b02:	e7f4      	b.n	8005aee <_printf_float+0x456>

08005b04 <_printf_common>:
 8005b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b08:	4616      	mov	r6, r2
 8005b0a:	4699      	mov	r9, r3
 8005b0c:	688a      	ldr	r2, [r1, #8]
 8005b0e:	690b      	ldr	r3, [r1, #16]
 8005b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b14:	4293      	cmp	r3, r2
 8005b16:	bfb8      	it	lt
 8005b18:	4613      	movlt	r3, r2
 8005b1a:	6033      	str	r3, [r6, #0]
 8005b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b20:	4607      	mov	r7, r0
 8005b22:	460c      	mov	r4, r1
 8005b24:	b10a      	cbz	r2, 8005b2a <_printf_common+0x26>
 8005b26:	3301      	adds	r3, #1
 8005b28:	6033      	str	r3, [r6, #0]
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	0699      	lsls	r1, r3, #26
 8005b2e:	bf42      	ittt	mi
 8005b30:	6833      	ldrmi	r3, [r6, #0]
 8005b32:	3302      	addmi	r3, #2
 8005b34:	6033      	strmi	r3, [r6, #0]
 8005b36:	6825      	ldr	r5, [r4, #0]
 8005b38:	f015 0506 	ands.w	r5, r5, #6
 8005b3c:	d106      	bne.n	8005b4c <_printf_common+0x48>
 8005b3e:	f104 0a19 	add.w	sl, r4, #25
 8005b42:	68e3      	ldr	r3, [r4, #12]
 8005b44:	6832      	ldr	r2, [r6, #0]
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	42ab      	cmp	r3, r5
 8005b4a:	dc26      	bgt.n	8005b9a <_printf_common+0x96>
 8005b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b50:	1e13      	subs	r3, r2, #0
 8005b52:	6822      	ldr	r2, [r4, #0]
 8005b54:	bf18      	it	ne
 8005b56:	2301      	movne	r3, #1
 8005b58:	0692      	lsls	r2, r2, #26
 8005b5a:	d42b      	bmi.n	8005bb4 <_printf_common+0xb0>
 8005b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b60:	4649      	mov	r1, r9
 8005b62:	4638      	mov	r0, r7
 8005b64:	47c0      	blx	r8
 8005b66:	3001      	adds	r0, #1
 8005b68:	d01e      	beq.n	8005ba8 <_printf_common+0xa4>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	68e5      	ldr	r5, [r4, #12]
 8005b6e:	6832      	ldr	r2, [r6, #0]
 8005b70:	f003 0306 	and.w	r3, r3, #6
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	bf08      	it	eq
 8005b78:	1aad      	subeq	r5, r5, r2
 8005b7a:	68a3      	ldr	r3, [r4, #8]
 8005b7c:	6922      	ldr	r2, [r4, #16]
 8005b7e:	bf0c      	ite	eq
 8005b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b84:	2500      	movne	r5, #0
 8005b86:	4293      	cmp	r3, r2
 8005b88:	bfc4      	itt	gt
 8005b8a:	1a9b      	subgt	r3, r3, r2
 8005b8c:	18ed      	addgt	r5, r5, r3
 8005b8e:	2600      	movs	r6, #0
 8005b90:	341a      	adds	r4, #26
 8005b92:	42b5      	cmp	r5, r6
 8005b94:	d11a      	bne.n	8005bcc <_printf_common+0xc8>
 8005b96:	2000      	movs	r0, #0
 8005b98:	e008      	b.n	8005bac <_printf_common+0xa8>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	4652      	mov	r2, sl
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	47c0      	blx	r8
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d103      	bne.n	8005bb0 <_printf_common+0xac>
 8005ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb0:	3501      	adds	r5, #1
 8005bb2:	e7c6      	b.n	8005b42 <_printf_common+0x3e>
 8005bb4:	18e1      	adds	r1, r4, r3
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	2030      	movs	r0, #48	; 0x30
 8005bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bbe:	4422      	add	r2, r4
 8005bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bc8:	3302      	adds	r3, #2
 8005bca:	e7c7      	b.n	8005b5c <_printf_common+0x58>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	4622      	mov	r2, r4
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	47c0      	blx	r8
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d0e6      	beq.n	8005ba8 <_printf_common+0xa4>
 8005bda:	3601      	adds	r6, #1
 8005bdc:	e7d9      	b.n	8005b92 <_printf_common+0x8e>
	...

08005be0 <_printf_i>:
 8005be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005be4:	7e0f      	ldrb	r7, [r1, #24]
 8005be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005be8:	2f78      	cmp	r7, #120	; 0x78
 8005bea:	4691      	mov	r9, r2
 8005bec:	4680      	mov	r8, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	469a      	mov	sl, r3
 8005bf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bf6:	d807      	bhi.n	8005c08 <_printf_i+0x28>
 8005bf8:	2f62      	cmp	r7, #98	; 0x62
 8005bfa:	d80a      	bhi.n	8005c12 <_printf_i+0x32>
 8005bfc:	2f00      	cmp	r7, #0
 8005bfe:	f000 80d8 	beq.w	8005db2 <_printf_i+0x1d2>
 8005c02:	2f58      	cmp	r7, #88	; 0x58
 8005c04:	f000 80a3 	beq.w	8005d4e <_printf_i+0x16e>
 8005c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c10:	e03a      	b.n	8005c88 <_printf_i+0xa8>
 8005c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c16:	2b15      	cmp	r3, #21
 8005c18:	d8f6      	bhi.n	8005c08 <_printf_i+0x28>
 8005c1a:	a101      	add	r1, pc, #4	; (adr r1, 8005c20 <_printf_i+0x40>)
 8005c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c20:	08005c79 	.word	0x08005c79
 8005c24:	08005c8d 	.word	0x08005c8d
 8005c28:	08005c09 	.word	0x08005c09
 8005c2c:	08005c09 	.word	0x08005c09
 8005c30:	08005c09 	.word	0x08005c09
 8005c34:	08005c09 	.word	0x08005c09
 8005c38:	08005c8d 	.word	0x08005c8d
 8005c3c:	08005c09 	.word	0x08005c09
 8005c40:	08005c09 	.word	0x08005c09
 8005c44:	08005c09 	.word	0x08005c09
 8005c48:	08005c09 	.word	0x08005c09
 8005c4c:	08005d99 	.word	0x08005d99
 8005c50:	08005cbd 	.word	0x08005cbd
 8005c54:	08005d7b 	.word	0x08005d7b
 8005c58:	08005c09 	.word	0x08005c09
 8005c5c:	08005c09 	.word	0x08005c09
 8005c60:	08005dbb 	.word	0x08005dbb
 8005c64:	08005c09 	.word	0x08005c09
 8005c68:	08005cbd 	.word	0x08005cbd
 8005c6c:	08005c09 	.word	0x08005c09
 8005c70:	08005c09 	.word	0x08005c09
 8005c74:	08005d83 	.word	0x08005d83
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	1d1a      	adds	r2, r3, #4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	602a      	str	r2, [r5, #0]
 8005c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0a3      	b.n	8005dd4 <_printf_i+0x1f4>
 8005c8c:	6820      	ldr	r0, [r4, #0]
 8005c8e:	6829      	ldr	r1, [r5, #0]
 8005c90:	0606      	lsls	r6, r0, #24
 8005c92:	f101 0304 	add.w	r3, r1, #4
 8005c96:	d50a      	bpl.n	8005cae <_printf_i+0xce>
 8005c98:	680e      	ldr	r6, [r1, #0]
 8005c9a:	602b      	str	r3, [r5, #0]
 8005c9c:	2e00      	cmp	r6, #0
 8005c9e:	da03      	bge.n	8005ca8 <_printf_i+0xc8>
 8005ca0:	232d      	movs	r3, #45	; 0x2d
 8005ca2:	4276      	negs	r6, r6
 8005ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca8:	485e      	ldr	r0, [pc, #376]	; (8005e24 <_printf_i+0x244>)
 8005caa:	230a      	movs	r3, #10
 8005cac:	e019      	b.n	8005ce2 <_printf_i+0x102>
 8005cae:	680e      	ldr	r6, [r1, #0]
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cb6:	bf18      	it	ne
 8005cb8:	b236      	sxthne	r6, r6
 8005cba:	e7ef      	b.n	8005c9c <_printf_i+0xbc>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	6820      	ldr	r0, [r4, #0]
 8005cc0:	1d19      	adds	r1, r3, #4
 8005cc2:	6029      	str	r1, [r5, #0]
 8005cc4:	0601      	lsls	r1, r0, #24
 8005cc6:	d501      	bpl.n	8005ccc <_printf_i+0xec>
 8005cc8:	681e      	ldr	r6, [r3, #0]
 8005cca:	e002      	b.n	8005cd2 <_printf_i+0xf2>
 8005ccc:	0646      	lsls	r6, r0, #25
 8005cce:	d5fb      	bpl.n	8005cc8 <_printf_i+0xe8>
 8005cd0:	881e      	ldrh	r6, [r3, #0]
 8005cd2:	4854      	ldr	r0, [pc, #336]	; (8005e24 <_printf_i+0x244>)
 8005cd4:	2f6f      	cmp	r7, #111	; 0x6f
 8005cd6:	bf0c      	ite	eq
 8005cd8:	2308      	moveq	r3, #8
 8005cda:	230a      	movne	r3, #10
 8005cdc:	2100      	movs	r1, #0
 8005cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ce2:	6865      	ldr	r5, [r4, #4]
 8005ce4:	60a5      	str	r5, [r4, #8]
 8005ce6:	2d00      	cmp	r5, #0
 8005ce8:	bfa2      	ittt	ge
 8005cea:	6821      	ldrge	r1, [r4, #0]
 8005cec:	f021 0104 	bicge.w	r1, r1, #4
 8005cf0:	6021      	strge	r1, [r4, #0]
 8005cf2:	b90e      	cbnz	r6, 8005cf8 <_printf_i+0x118>
 8005cf4:	2d00      	cmp	r5, #0
 8005cf6:	d04d      	beq.n	8005d94 <_printf_i+0x1b4>
 8005cf8:	4615      	mov	r5, r2
 8005cfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cfe:	fb03 6711 	mls	r7, r3, r1, r6
 8005d02:	5dc7      	ldrb	r7, [r0, r7]
 8005d04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d08:	4637      	mov	r7, r6
 8005d0a:	42bb      	cmp	r3, r7
 8005d0c:	460e      	mov	r6, r1
 8005d0e:	d9f4      	bls.n	8005cfa <_printf_i+0x11a>
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d10b      	bne.n	8005d2c <_printf_i+0x14c>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	07de      	lsls	r6, r3, #31
 8005d18:	d508      	bpl.n	8005d2c <_printf_i+0x14c>
 8005d1a:	6923      	ldr	r3, [r4, #16]
 8005d1c:	6861      	ldr	r1, [r4, #4]
 8005d1e:	4299      	cmp	r1, r3
 8005d20:	bfde      	ittt	le
 8005d22:	2330      	movle	r3, #48	; 0x30
 8005d24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d2c:	1b52      	subs	r2, r2, r5
 8005d2e:	6122      	str	r2, [r4, #16]
 8005d30:	f8cd a000 	str.w	sl, [sp]
 8005d34:	464b      	mov	r3, r9
 8005d36:	aa03      	add	r2, sp, #12
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	f7ff fee2 	bl	8005b04 <_printf_common>
 8005d40:	3001      	adds	r0, #1
 8005d42:	d14c      	bne.n	8005dde <_printf_i+0x1fe>
 8005d44:	f04f 30ff 	mov.w	r0, #4294967295
 8005d48:	b004      	add	sp, #16
 8005d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d4e:	4835      	ldr	r0, [pc, #212]	; (8005e24 <_printf_i+0x244>)
 8005d50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d54:	6829      	ldr	r1, [r5, #0]
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d5c:	6029      	str	r1, [r5, #0]
 8005d5e:	061d      	lsls	r5, r3, #24
 8005d60:	d514      	bpl.n	8005d8c <_printf_i+0x1ac>
 8005d62:	07df      	lsls	r7, r3, #31
 8005d64:	bf44      	itt	mi
 8005d66:	f043 0320 	orrmi.w	r3, r3, #32
 8005d6a:	6023      	strmi	r3, [r4, #0]
 8005d6c:	b91e      	cbnz	r6, 8005d76 <_printf_i+0x196>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	f023 0320 	bic.w	r3, r3, #32
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	2310      	movs	r3, #16
 8005d78:	e7b0      	b.n	8005cdc <_printf_i+0xfc>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	f043 0320 	orr.w	r3, r3, #32
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	2378      	movs	r3, #120	; 0x78
 8005d84:	4828      	ldr	r0, [pc, #160]	; (8005e28 <_printf_i+0x248>)
 8005d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d8a:	e7e3      	b.n	8005d54 <_printf_i+0x174>
 8005d8c:	0659      	lsls	r1, r3, #25
 8005d8e:	bf48      	it	mi
 8005d90:	b2b6      	uxthmi	r6, r6
 8005d92:	e7e6      	b.n	8005d62 <_printf_i+0x182>
 8005d94:	4615      	mov	r5, r2
 8005d96:	e7bb      	b.n	8005d10 <_printf_i+0x130>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	6826      	ldr	r6, [r4, #0]
 8005d9c:	6961      	ldr	r1, [r4, #20]
 8005d9e:	1d18      	adds	r0, r3, #4
 8005da0:	6028      	str	r0, [r5, #0]
 8005da2:	0635      	lsls	r5, r6, #24
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	d501      	bpl.n	8005dac <_printf_i+0x1cc>
 8005da8:	6019      	str	r1, [r3, #0]
 8005daa:	e002      	b.n	8005db2 <_printf_i+0x1d2>
 8005dac:	0670      	lsls	r0, r6, #25
 8005dae:	d5fb      	bpl.n	8005da8 <_printf_i+0x1c8>
 8005db0:	8019      	strh	r1, [r3, #0]
 8005db2:	2300      	movs	r3, #0
 8005db4:	6123      	str	r3, [r4, #16]
 8005db6:	4615      	mov	r5, r2
 8005db8:	e7ba      	b.n	8005d30 <_printf_i+0x150>
 8005dba:	682b      	ldr	r3, [r5, #0]
 8005dbc:	1d1a      	adds	r2, r3, #4
 8005dbe:	602a      	str	r2, [r5, #0]
 8005dc0:	681d      	ldr	r5, [r3, #0]
 8005dc2:	6862      	ldr	r2, [r4, #4]
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f7fa fa32 	bl	8000230 <memchr>
 8005dcc:	b108      	cbz	r0, 8005dd2 <_printf_i+0x1f2>
 8005dce:	1b40      	subs	r0, r0, r5
 8005dd0:	6060      	str	r0, [r4, #4]
 8005dd2:	6863      	ldr	r3, [r4, #4]
 8005dd4:	6123      	str	r3, [r4, #16]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ddc:	e7a8      	b.n	8005d30 <_printf_i+0x150>
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	462a      	mov	r2, r5
 8005de2:	4649      	mov	r1, r9
 8005de4:	4640      	mov	r0, r8
 8005de6:	47d0      	blx	sl
 8005de8:	3001      	adds	r0, #1
 8005dea:	d0ab      	beq.n	8005d44 <_printf_i+0x164>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	079b      	lsls	r3, r3, #30
 8005df0:	d413      	bmi.n	8005e1a <_printf_i+0x23a>
 8005df2:	68e0      	ldr	r0, [r4, #12]
 8005df4:	9b03      	ldr	r3, [sp, #12]
 8005df6:	4298      	cmp	r0, r3
 8005df8:	bfb8      	it	lt
 8005dfa:	4618      	movlt	r0, r3
 8005dfc:	e7a4      	b.n	8005d48 <_printf_i+0x168>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4632      	mov	r2, r6
 8005e02:	4649      	mov	r1, r9
 8005e04:	4640      	mov	r0, r8
 8005e06:	47d0      	blx	sl
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d09b      	beq.n	8005d44 <_printf_i+0x164>
 8005e0c:	3501      	adds	r5, #1
 8005e0e:	68e3      	ldr	r3, [r4, #12]
 8005e10:	9903      	ldr	r1, [sp, #12]
 8005e12:	1a5b      	subs	r3, r3, r1
 8005e14:	42ab      	cmp	r3, r5
 8005e16:	dcf2      	bgt.n	8005dfe <_printf_i+0x21e>
 8005e18:	e7eb      	b.n	8005df2 <_printf_i+0x212>
 8005e1a:	2500      	movs	r5, #0
 8005e1c:	f104 0619 	add.w	r6, r4, #25
 8005e20:	e7f5      	b.n	8005e0e <_printf_i+0x22e>
 8005e22:	bf00      	nop
 8005e24:	0800b3ca 	.word	0x0800b3ca
 8005e28:	0800b3db 	.word	0x0800b3db

08005e2c <_scanf_float>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	b087      	sub	sp, #28
 8005e32:	4617      	mov	r7, r2
 8005e34:	9303      	str	r3, [sp, #12]
 8005e36:	688b      	ldr	r3, [r1, #8]
 8005e38:	1e5a      	subs	r2, r3, #1
 8005e3a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005e3e:	bf83      	ittte	hi
 8005e40:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005e44:	195b      	addhi	r3, r3, r5
 8005e46:	9302      	strhi	r3, [sp, #8]
 8005e48:	2300      	movls	r3, #0
 8005e4a:	bf86      	itte	hi
 8005e4c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005e50:	608b      	strhi	r3, [r1, #8]
 8005e52:	9302      	strls	r3, [sp, #8]
 8005e54:	680b      	ldr	r3, [r1, #0]
 8005e56:	468b      	mov	fp, r1
 8005e58:	2500      	movs	r5, #0
 8005e5a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005e5e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005e62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005e66:	4680      	mov	r8, r0
 8005e68:	460c      	mov	r4, r1
 8005e6a:	465e      	mov	r6, fp
 8005e6c:	46aa      	mov	sl, r5
 8005e6e:	46a9      	mov	r9, r5
 8005e70:	9501      	str	r5, [sp, #4]
 8005e72:	68a2      	ldr	r2, [r4, #8]
 8005e74:	b152      	cbz	r2, 8005e8c <_scanf_float+0x60>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b4e      	cmp	r3, #78	; 0x4e
 8005e7c:	d864      	bhi.n	8005f48 <_scanf_float+0x11c>
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	d83c      	bhi.n	8005efc <_scanf_float+0xd0>
 8005e82:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005e86:	b2c8      	uxtb	r0, r1
 8005e88:	280e      	cmp	r0, #14
 8005e8a:	d93a      	bls.n	8005f02 <_scanf_float+0xd6>
 8005e8c:	f1b9 0f00 	cmp.w	r9, #0
 8005e90:	d003      	beq.n	8005e9a <_scanf_float+0x6e>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e98:	6023      	str	r3, [r4, #0]
 8005e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e9e:	f1ba 0f01 	cmp.w	sl, #1
 8005ea2:	f200 8113 	bhi.w	80060cc <_scanf_float+0x2a0>
 8005ea6:	455e      	cmp	r6, fp
 8005ea8:	f200 8105 	bhi.w	80060b6 <_scanf_float+0x28a>
 8005eac:	2501      	movs	r5, #1
 8005eae:	4628      	mov	r0, r5
 8005eb0:	b007      	add	sp, #28
 8005eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005eba:	2a0d      	cmp	r2, #13
 8005ebc:	d8e6      	bhi.n	8005e8c <_scanf_float+0x60>
 8005ebe:	a101      	add	r1, pc, #4	; (adr r1, 8005ec4 <_scanf_float+0x98>)
 8005ec0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ec4:	08006003 	.word	0x08006003
 8005ec8:	08005e8d 	.word	0x08005e8d
 8005ecc:	08005e8d 	.word	0x08005e8d
 8005ed0:	08005e8d 	.word	0x08005e8d
 8005ed4:	08006063 	.word	0x08006063
 8005ed8:	0800603b 	.word	0x0800603b
 8005edc:	08005e8d 	.word	0x08005e8d
 8005ee0:	08005e8d 	.word	0x08005e8d
 8005ee4:	08006011 	.word	0x08006011
 8005ee8:	08005e8d 	.word	0x08005e8d
 8005eec:	08005e8d 	.word	0x08005e8d
 8005ef0:	08005e8d 	.word	0x08005e8d
 8005ef4:	08005e8d 	.word	0x08005e8d
 8005ef8:	08005fc9 	.word	0x08005fc9
 8005efc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005f00:	e7db      	b.n	8005eba <_scanf_float+0x8e>
 8005f02:	290e      	cmp	r1, #14
 8005f04:	d8c2      	bhi.n	8005e8c <_scanf_float+0x60>
 8005f06:	a001      	add	r0, pc, #4	; (adr r0, 8005f0c <_scanf_float+0xe0>)
 8005f08:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005f0c:	08005fbb 	.word	0x08005fbb
 8005f10:	08005e8d 	.word	0x08005e8d
 8005f14:	08005fbb 	.word	0x08005fbb
 8005f18:	0800604f 	.word	0x0800604f
 8005f1c:	08005e8d 	.word	0x08005e8d
 8005f20:	08005f69 	.word	0x08005f69
 8005f24:	08005fa5 	.word	0x08005fa5
 8005f28:	08005fa5 	.word	0x08005fa5
 8005f2c:	08005fa5 	.word	0x08005fa5
 8005f30:	08005fa5 	.word	0x08005fa5
 8005f34:	08005fa5 	.word	0x08005fa5
 8005f38:	08005fa5 	.word	0x08005fa5
 8005f3c:	08005fa5 	.word	0x08005fa5
 8005f40:	08005fa5 	.word	0x08005fa5
 8005f44:	08005fa5 	.word	0x08005fa5
 8005f48:	2b6e      	cmp	r3, #110	; 0x6e
 8005f4a:	d809      	bhi.n	8005f60 <_scanf_float+0x134>
 8005f4c:	2b60      	cmp	r3, #96	; 0x60
 8005f4e:	d8b2      	bhi.n	8005eb6 <_scanf_float+0x8a>
 8005f50:	2b54      	cmp	r3, #84	; 0x54
 8005f52:	d077      	beq.n	8006044 <_scanf_float+0x218>
 8005f54:	2b59      	cmp	r3, #89	; 0x59
 8005f56:	d199      	bne.n	8005e8c <_scanf_float+0x60>
 8005f58:	2d07      	cmp	r5, #7
 8005f5a:	d197      	bne.n	8005e8c <_scanf_float+0x60>
 8005f5c:	2508      	movs	r5, #8
 8005f5e:	e029      	b.n	8005fb4 <_scanf_float+0x188>
 8005f60:	2b74      	cmp	r3, #116	; 0x74
 8005f62:	d06f      	beq.n	8006044 <_scanf_float+0x218>
 8005f64:	2b79      	cmp	r3, #121	; 0x79
 8005f66:	e7f6      	b.n	8005f56 <_scanf_float+0x12a>
 8005f68:	6821      	ldr	r1, [r4, #0]
 8005f6a:	05c8      	lsls	r0, r1, #23
 8005f6c:	d51a      	bpl.n	8005fa4 <_scanf_float+0x178>
 8005f6e:	9b02      	ldr	r3, [sp, #8]
 8005f70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005f74:	6021      	str	r1, [r4, #0]
 8005f76:	f109 0901 	add.w	r9, r9, #1
 8005f7a:	b11b      	cbz	r3, 8005f84 <_scanf_float+0x158>
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	3201      	adds	r2, #1
 8005f80:	9302      	str	r3, [sp, #8]
 8005f82:	60a2      	str	r2, [r4, #8]
 8005f84:	68a3      	ldr	r3, [r4, #8]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	60a3      	str	r3, [r4, #8]
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	6123      	str	r3, [r4, #16]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	607b      	str	r3, [r7, #4]
 8005f98:	f340 8084 	ble.w	80060a4 <_scanf_float+0x278>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	e766      	b.n	8005e72 <_scanf_float+0x46>
 8005fa4:	eb1a 0f05 	cmn.w	sl, r5
 8005fa8:	f47f af70 	bne.w	8005e8c <_scanf_float+0x60>
 8005fac:	6822      	ldr	r2, [r4, #0]
 8005fae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005fb2:	6022      	str	r2, [r4, #0]
 8005fb4:	f806 3b01 	strb.w	r3, [r6], #1
 8005fb8:	e7e4      	b.n	8005f84 <_scanf_float+0x158>
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	0610      	lsls	r0, r2, #24
 8005fbe:	f57f af65 	bpl.w	8005e8c <_scanf_float+0x60>
 8005fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fc6:	e7f4      	b.n	8005fb2 <_scanf_float+0x186>
 8005fc8:	f1ba 0f00 	cmp.w	sl, #0
 8005fcc:	d10e      	bne.n	8005fec <_scanf_float+0x1c0>
 8005fce:	f1b9 0f00 	cmp.w	r9, #0
 8005fd2:	d10e      	bne.n	8005ff2 <_scanf_float+0x1c6>
 8005fd4:	6822      	ldr	r2, [r4, #0]
 8005fd6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005fda:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005fde:	d108      	bne.n	8005ff2 <_scanf_float+0x1c6>
 8005fe0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005fe4:	6022      	str	r2, [r4, #0]
 8005fe6:	f04f 0a01 	mov.w	sl, #1
 8005fea:	e7e3      	b.n	8005fb4 <_scanf_float+0x188>
 8005fec:	f1ba 0f02 	cmp.w	sl, #2
 8005ff0:	d055      	beq.n	800609e <_scanf_float+0x272>
 8005ff2:	2d01      	cmp	r5, #1
 8005ff4:	d002      	beq.n	8005ffc <_scanf_float+0x1d0>
 8005ff6:	2d04      	cmp	r5, #4
 8005ff8:	f47f af48 	bne.w	8005e8c <_scanf_float+0x60>
 8005ffc:	3501      	adds	r5, #1
 8005ffe:	b2ed      	uxtb	r5, r5
 8006000:	e7d8      	b.n	8005fb4 <_scanf_float+0x188>
 8006002:	f1ba 0f01 	cmp.w	sl, #1
 8006006:	f47f af41 	bne.w	8005e8c <_scanf_float+0x60>
 800600a:	f04f 0a02 	mov.w	sl, #2
 800600e:	e7d1      	b.n	8005fb4 <_scanf_float+0x188>
 8006010:	b97d      	cbnz	r5, 8006032 <_scanf_float+0x206>
 8006012:	f1b9 0f00 	cmp.w	r9, #0
 8006016:	f47f af3c 	bne.w	8005e92 <_scanf_float+0x66>
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006020:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006024:	f47f af39 	bne.w	8005e9a <_scanf_float+0x6e>
 8006028:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800602c:	6022      	str	r2, [r4, #0]
 800602e:	2501      	movs	r5, #1
 8006030:	e7c0      	b.n	8005fb4 <_scanf_float+0x188>
 8006032:	2d03      	cmp	r5, #3
 8006034:	d0e2      	beq.n	8005ffc <_scanf_float+0x1d0>
 8006036:	2d05      	cmp	r5, #5
 8006038:	e7de      	b.n	8005ff8 <_scanf_float+0x1cc>
 800603a:	2d02      	cmp	r5, #2
 800603c:	f47f af26 	bne.w	8005e8c <_scanf_float+0x60>
 8006040:	2503      	movs	r5, #3
 8006042:	e7b7      	b.n	8005fb4 <_scanf_float+0x188>
 8006044:	2d06      	cmp	r5, #6
 8006046:	f47f af21 	bne.w	8005e8c <_scanf_float+0x60>
 800604a:	2507      	movs	r5, #7
 800604c:	e7b2      	b.n	8005fb4 <_scanf_float+0x188>
 800604e:	6822      	ldr	r2, [r4, #0]
 8006050:	0591      	lsls	r1, r2, #22
 8006052:	f57f af1b 	bpl.w	8005e8c <_scanf_float+0x60>
 8006056:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800605a:	6022      	str	r2, [r4, #0]
 800605c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006060:	e7a8      	b.n	8005fb4 <_scanf_float+0x188>
 8006062:	6822      	ldr	r2, [r4, #0]
 8006064:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006068:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800606c:	d006      	beq.n	800607c <_scanf_float+0x250>
 800606e:	0550      	lsls	r0, r2, #21
 8006070:	f57f af0c 	bpl.w	8005e8c <_scanf_float+0x60>
 8006074:	f1b9 0f00 	cmp.w	r9, #0
 8006078:	f43f af0f 	beq.w	8005e9a <_scanf_float+0x6e>
 800607c:	0591      	lsls	r1, r2, #22
 800607e:	bf58      	it	pl
 8006080:	9901      	ldrpl	r1, [sp, #4]
 8006082:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006086:	bf58      	it	pl
 8006088:	eba9 0101 	subpl.w	r1, r9, r1
 800608c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006090:	bf58      	it	pl
 8006092:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006096:	6022      	str	r2, [r4, #0]
 8006098:	f04f 0900 	mov.w	r9, #0
 800609c:	e78a      	b.n	8005fb4 <_scanf_float+0x188>
 800609e:	f04f 0a03 	mov.w	sl, #3
 80060a2:	e787      	b.n	8005fb4 <_scanf_float+0x188>
 80060a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80060a8:	4639      	mov	r1, r7
 80060aa:	4640      	mov	r0, r8
 80060ac:	4798      	blx	r3
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f43f aedf 	beq.w	8005e72 <_scanf_float+0x46>
 80060b4:	e6ea      	b.n	8005e8c <_scanf_float+0x60>
 80060b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060be:	463a      	mov	r2, r7
 80060c0:	4640      	mov	r0, r8
 80060c2:	4798      	blx	r3
 80060c4:	6923      	ldr	r3, [r4, #16]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	e6ec      	b.n	8005ea6 <_scanf_float+0x7a>
 80060cc:	1e6b      	subs	r3, r5, #1
 80060ce:	2b06      	cmp	r3, #6
 80060d0:	d825      	bhi.n	800611e <_scanf_float+0x2f2>
 80060d2:	2d02      	cmp	r5, #2
 80060d4:	d836      	bhi.n	8006144 <_scanf_float+0x318>
 80060d6:	455e      	cmp	r6, fp
 80060d8:	f67f aee8 	bls.w	8005eac <_scanf_float+0x80>
 80060dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060e4:	463a      	mov	r2, r7
 80060e6:	4640      	mov	r0, r8
 80060e8:	4798      	blx	r3
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	6123      	str	r3, [r4, #16]
 80060f0:	e7f1      	b.n	80060d6 <_scanf_float+0x2aa>
 80060f2:	9802      	ldr	r0, [sp, #8]
 80060f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80060fc:	9002      	str	r0, [sp, #8]
 80060fe:	463a      	mov	r2, r7
 8006100:	4640      	mov	r0, r8
 8006102:	4798      	blx	r3
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	3b01      	subs	r3, #1
 8006108:	6123      	str	r3, [r4, #16]
 800610a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800610e:	fa5f fa8a 	uxtb.w	sl, sl
 8006112:	f1ba 0f02 	cmp.w	sl, #2
 8006116:	d1ec      	bne.n	80060f2 <_scanf_float+0x2c6>
 8006118:	3d03      	subs	r5, #3
 800611a:	b2ed      	uxtb	r5, r5
 800611c:	1b76      	subs	r6, r6, r5
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	05da      	lsls	r2, r3, #23
 8006122:	d52f      	bpl.n	8006184 <_scanf_float+0x358>
 8006124:	055b      	lsls	r3, r3, #21
 8006126:	d510      	bpl.n	800614a <_scanf_float+0x31e>
 8006128:	455e      	cmp	r6, fp
 800612a:	f67f aebf 	bls.w	8005eac <_scanf_float+0x80>
 800612e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006132:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006136:	463a      	mov	r2, r7
 8006138:	4640      	mov	r0, r8
 800613a:	4798      	blx	r3
 800613c:	6923      	ldr	r3, [r4, #16]
 800613e:	3b01      	subs	r3, #1
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	e7f1      	b.n	8006128 <_scanf_float+0x2fc>
 8006144:	46aa      	mov	sl, r5
 8006146:	9602      	str	r6, [sp, #8]
 8006148:	e7df      	b.n	800610a <_scanf_float+0x2de>
 800614a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800614e:	6923      	ldr	r3, [r4, #16]
 8006150:	2965      	cmp	r1, #101	; 0x65
 8006152:	f103 33ff 	add.w	r3, r3, #4294967295
 8006156:	f106 35ff 	add.w	r5, r6, #4294967295
 800615a:	6123      	str	r3, [r4, #16]
 800615c:	d00c      	beq.n	8006178 <_scanf_float+0x34c>
 800615e:	2945      	cmp	r1, #69	; 0x45
 8006160:	d00a      	beq.n	8006178 <_scanf_float+0x34c>
 8006162:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006166:	463a      	mov	r2, r7
 8006168:	4640      	mov	r0, r8
 800616a:	4798      	blx	r3
 800616c:	6923      	ldr	r3, [r4, #16]
 800616e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006172:	3b01      	subs	r3, #1
 8006174:	1eb5      	subs	r5, r6, #2
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800617c:	463a      	mov	r2, r7
 800617e:	4640      	mov	r0, r8
 8006180:	4798      	blx	r3
 8006182:	462e      	mov	r6, r5
 8006184:	6825      	ldr	r5, [r4, #0]
 8006186:	f015 0510 	ands.w	r5, r5, #16
 800618a:	d159      	bne.n	8006240 <_scanf_float+0x414>
 800618c:	7035      	strb	r5, [r6, #0]
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006198:	d11b      	bne.n	80061d2 <_scanf_float+0x3a6>
 800619a:	9b01      	ldr	r3, [sp, #4]
 800619c:	454b      	cmp	r3, r9
 800619e:	eba3 0209 	sub.w	r2, r3, r9
 80061a2:	d123      	bne.n	80061ec <_scanf_float+0x3c0>
 80061a4:	2200      	movs	r2, #0
 80061a6:	4659      	mov	r1, fp
 80061a8:	4640      	mov	r0, r8
 80061aa:	f000 ff3b 	bl	8007024 <_strtod_r>
 80061ae:	6822      	ldr	r2, [r4, #0]
 80061b0:	9b03      	ldr	r3, [sp, #12]
 80061b2:	f012 0f02 	tst.w	r2, #2
 80061b6:	ec57 6b10 	vmov	r6, r7, d0
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	d021      	beq.n	8006202 <_scanf_float+0x3d6>
 80061be:	9903      	ldr	r1, [sp, #12]
 80061c0:	1d1a      	adds	r2, r3, #4
 80061c2:	600a      	str	r2, [r1, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	e9c3 6700 	strd	r6, r7, [r3]
 80061ca:	68e3      	ldr	r3, [r4, #12]
 80061cc:	3301      	adds	r3, #1
 80061ce:	60e3      	str	r3, [r4, #12]
 80061d0:	e66d      	b.n	8005eae <_scanf_float+0x82>
 80061d2:	9b04      	ldr	r3, [sp, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0e5      	beq.n	80061a4 <_scanf_float+0x378>
 80061d8:	9905      	ldr	r1, [sp, #20]
 80061da:	230a      	movs	r3, #10
 80061dc:	462a      	mov	r2, r5
 80061de:	3101      	adds	r1, #1
 80061e0:	4640      	mov	r0, r8
 80061e2:	f000 ffa7 	bl	8007134 <_strtol_r>
 80061e6:	9b04      	ldr	r3, [sp, #16]
 80061e8:	9e05      	ldr	r6, [sp, #20]
 80061ea:	1ac2      	subs	r2, r0, r3
 80061ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80061f0:	429e      	cmp	r6, r3
 80061f2:	bf28      	it	cs
 80061f4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80061f8:	4912      	ldr	r1, [pc, #72]	; (8006244 <_scanf_float+0x418>)
 80061fa:	4630      	mov	r0, r6
 80061fc:	f000 f8d0 	bl	80063a0 <siprintf>
 8006200:	e7d0      	b.n	80061a4 <_scanf_float+0x378>
 8006202:	9903      	ldr	r1, [sp, #12]
 8006204:	f012 0f04 	tst.w	r2, #4
 8006208:	f103 0204 	add.w	r2, r3, #4
 800620c:	600a      	str	r2, [r1, #0]
 800620e:	d1d9      	bne.n	80061c4 <_scanf_float+0x398>
 8006210:	f8d3 8000 	ldr.w	r8, [r3]
 8006214:	ee10 2a10 	vmov	r2, s0
 8006218:	ee10 0a10 	vmov	r0, s0
 800621c:	463b      	mov	r3, r7
 800621e:	4639      	mov	r1, r7
 8006220:	f7fa fcac 	bl	8000b7c <__aeabi_dcmpun>
 8006224:	b128      	cbz	r0, 8006232 <_scanf_float+0x406>
 8006226:	4808      	ldr	r0, [pc, #32]	; (8006248 <_scanf_float+0x41c>)
 8006228:	f000 f8b4 	bl	8006394 <nanf>
 800622c:	ed88 0a00 	vstr	s0, [r8]
 8006230:	e7cb      	b.n	80061ca <_scanf_float+0x39e>
 8006232:	4630      	mov	r0, r6
 8006234:	4639      	mov	r1, r7
 8006236:	f7fa fcff 	bl	8000c38 <__aeabi_d2f>
 800623a:	f8c8 0000 	str.w	r0, [r8]
 800623e:	e7c4      	b.n	80061ca <_scanf_float+0x39e>
 8006240:	2500      	movs	r5, #0
 8006242:	e634      	b.n	8005eae <_scanf_float+0x82>
 8006244:	0800b3ec 	.word	0x0800b3ec
 8006248:	0800b860 	.word	0x0800b860

0800624c <iprintf>:
 800624c:	b40f      	push	{r0, r1, r2, r3}
 800624e:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <iprintf+0x2c>)
 8006250:	b513      	push	{r0, r1, r4, lr}
 8006252:	681c      	ldr	r4, [r3, #0]
 8006254:	b124      	cbz	r4, 8006260 <iprintf+0x14>
 8006256:	69a3      	ldr	r3, [r4, #24]
 8006258:	b913      	cbnz	r3, 8006260 <iprintf+0x14>
 800625a:	4620      	mov	r0, r4
 800625c:	f001 ffc0 	bl	80081e0 <__sinit>
 8006260:	ab05      	add	r3, sp, #20
 8006262:	9a04      	ldr	r2, [sp, #16]
 8006264:	68a1      	ldr	r1, [r4, #8]
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	4620      	mov	r0, r4
 800626a:	f003 fb97 	bl	800999c <_vfiprintf_r>
 800626e:	b002      	add	sp, #8
 8006270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006274:	b004      	add	sp, #16
 8006276:	4770      	bx	lr
 8006278:	2000000c 	.word	0x2000000c

0800627c <putchar>:
 800627c:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <putchar+0x28>)
 800627e:	b513      	push	{r0, r1, r4, lr}
 8006280:	681c      	ldr	r4, [r3, #0]
 8006282:	4601      	mov	r1, r0
 8006284:	b134      	cbz	r4, 8006294 <putchar+0x18>
 8006286:	69a3      	ldr	r3, [r4, #24]
 8006288:	b923      	cbnz	r3, 8006294 <putchar+0x18>
 800628a:	9001      	str	r0, [sp, #4]
 800628c:	4620      	mov	r0, r4
 800628e:	f001 ffa7 	bl	80081e0 <__sinit>
 8006292:	9901      	ldr	r1, [sp, #4]
 8006294:	68a2      	ldr	r2, [r4, #8]
 8006296:	4620      	mov	r0, r4
 8006298:	b002      	add	sp, #8
 800629a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800629e:	f003 bcad 	b.w	8009bfc <_putc_r>
 80062a2:	bf00      	nop
 80062a4:	2000000c 	.word	0x2000000c

080062a8 <_puts_r>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	460e      	mov	r6, r1
 80062ac:	4605      	mov	r5, r0
 80062ae:	b118      	cbz	r0, 80062b8 <_puts_r+0x10>
 80062b0:	6983      	ldr	r3, [r0, #24]
 80062b2:	b90b      	cbnz	r3, 80062b8 <_puts_r+0x10>
 80062b4:	f001 ff94 	bl	80081e0 <__sinit>
 80062b8:	69ab      	ldr	r3, [r5, #24]
 80062ba:	68ac      	ldr	r4, [r5, #8]
 80062bc:	b913      	cbnz	r3, 80062c4 <_puts_r+0x1c>
 80062be:	4628      	mov	r0, r5
 80062c0:	f001 ff8e 	bl	80081e0 <__sinit>
 80062c4:	4b2c      	ldr	r3, [pc, #176]	; (8006378 <_puts_r+0xd0>)
 80062c6:	429c      	cmp	r4, r3
 80062c8:	d120      	bne.n	800630c <_puts_r+0x64>
 80062ca:	686c      	ldr	r4, [r5, #4]
 80062cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062ce:	07db      	lsls	r3, r3, #31
 80062d0:	d405      	bmi.n	80062de <_puts_r+0x36>
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	0598      	lsls	r0, r3, #22
 80062d6:	d402      	bmi.n	80062de <_puts_r+0x36>
 80062d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062da:	f002 fb92 	bl	8008a02 <__retarget_lock_acquire_recursive>
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	0719      	lsls	r1, r3, #28
 80062e2:	d51d      	bpl.n	8006320 <_puts_r+0x78>
 80062e4:	6923      	ldr	r3, [r4, #16]
 80062e6:	b1db      	cbz	r3, 8006320 <_puts_r+0x78>
 80062e8:	3e01      	subs	r6, #1
 80062ea:	68a3      	ldr	r3, [r4, #8]
 80062ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062f0:	3b01      	subs	r3, #1
 80062f2:	60a3      	str	r3, [r4, #8]
 80062f4:	bb39      	cbnz	r1, 8006346 <_puts_r+0x9e>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	da38      	bge.n	800636c <_puts_r+0xc4>
 80062fa:	4622      	mov	r2, r4
 80062fc:	210a      	movs	r1, #10
 80062fe:	4628      	mov	r0, r5
 8006300:	f000 ff1a 	bl	8007138 <__swbuf_r>
 8006304:	3001      	adds	r0, #1
 8006306:	d011      	beq.n	800632c <_puts_r+0x84>
 8006308:	250a      	movs	r5, #10
 800630a:	e011      	b.n	8006330 <_puts_r+0x88>
 800630c:	4b1b      	ldr	r3, [pc, #108]	; (800637c <_puts_r+0xd4>)
 800630e:	429c      	cmp	r4, r3
 8006310:	d101      	bne.n	8006316 <_puts_r+0x6e>
 8006312:	68ac      	ldr	r4, [r5, #8]
 8006314:	e7da      	b.n	80062cc <_puts_r+0x24>
 8006316:	4b1a      	ldr	r3, [pc, #104]	; (8006380 <_puts_r+0xd8>)
 8006318:	429c      	cmp	r4, r3
 800631a:	bf08      	it	eq
 800631c:	68ec      	ldreq	r4, [r5, #12]
 800631e:	e7d5      	b.n	80062cc <_puts_r+0x24>
 8006320:	4621      	mov	r1, r4
 8006322:	4628      	mov	r0, r5
 8006324:	f000 ff5a 	bl	80071dc <__swsetup_r>
 8006328:	2800      	cmp	r0, #0
 800632a:	d0dd      	beq.n	80062e8 <_puts_r+0x40>
 800632c:	f04f 35ff 	mov.w	r5, #4294967295
 8006330:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006332:	07da      	lsls	r2, r3, #31
 8006334:	d405      	bmi.n	8006342 <_puts_r+0x9a>
 8006336:	89a3      	ldrh	r3, [r4, #12]
 8006338:	059b      	lsls	r3, r3, #22
 800633a:	d402      	bmi.n	8006342 <_puts_r+0x9a>
 800633c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800633e:	f002 fb61 	bl	8008a04 <__retarget_lock_release_recursive>
 8006342:	4628      	mov	r0, r5
 8006344:	bd70      	pop	{r4, r5, r6, pc}
 8006346:	2b00      	cmp	r3, #0
 8006348:	da04      	bge.n	8006354 <_puts_r+0xac>
 800634a:	69a2      	ldr	r2, [r4, #24]
 800634c:	429a      	cmp	r2, r3
 800634e:	dc06      	bgt.n	800635e <_puts_r+0xb6>
 8006350:	290a      	cmp	r1, #10
 8006352:	d004      	beq.n	800635e <_puts_r+0xb6>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	6022      	str	r2, [r4, #0]
 800635a:	7019      	strb	r1, [r3, #0]
 800635c:	e7c5      	b.n	80062ea <_puts_r+0x42>
 800635e:	4622      	mov	r2, r4
 8006360:	4628      	mov	r0, r5
 8006362:	f000 fee9 	bl	8007138 <__swbuf_r>
 8006366:	3001      	adds	r0, #1
 8006368:	d1bf      	bne.n	80062ea <_puts_r+0x42>
 800636a:	e7df      	b.n	800632c <_puts_r+0x84>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	250a      	movs	r5, #10
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	6022      	str	r2, [r4, #0]
 8006374:	701d      	strb	r5, [r3, #0]
 8006376:	e7db      	b.n	8006330 <_puts_r+0x88>
 8006378:	0800b5fc 	.word	0x0800b5fc
 800637c:	0800b61c 	.word	0x0800b61c
 8006380:	0800b5dc 	.word	0x0800b5dc

08006384 <puts>:
 8006384:	4b02      	ldr	r3, [pc, #8]	; (8006390 <puts+0xc>)
 8006386:	4601      	mov	r1, r0
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	f7ff bf8d 	b.w	80062a8 <_puts_r>
 800638e:	bf00      	nop
 8006390:	2000000c 	.word	0x2000000c

08006394 <nanf>:
 8006394:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800639c <nanf+0x8>
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	7fc00000 	.word	0x7fc00000

080063a0 <siprintf>:
 80063a0:	b40e      	push	{r1, r2, r3}
 80063a2:	b500      	push	{lr}
 80063a4:	b09c      	sub	sp, #112	; 0x70
 80063a6:	ab1d      	add	r3, sp, #116	; 0x74
 80063a8:	9002      	str	r0, [sp, #8]
 80063aa:	9006      	str	r0, [sp, #24]
 80063ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063b0:	4809      	ldr	r0, [pc, #36]	; (80063d8 <siprintf+0x38>)
 80063b2:	9107      	str	r1, [sp, #28]
 80063b4:	9104      	str	r1, [sp, #16]
 80063b6:	4909      	ldr	r1, [pc, #36]	; (80063dc <siprintf+0x3c>)
 80063b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063bc:	9105      	str	r1, [sp, #20]
 80063be:	6800      	ldr	r0, [r0, #0]
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	a902      	add	r1, sp, #8
 80063c4:	f003 f9c0 	bl	8009748 <_svfiprintf_r>
 80063c8:	9b02      	ldr	r3, [sp, #8]
 80063ca:	2200      	movs	r2, #0
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	b01c      	add	sp, #112	; 0x70
 80063d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063d4:	b003      	add	sp, #12
 80063d6:	4770      	bx	lr
 80063d8:	2000000c 	.word	0x2000000c
 80063dc:	ffff0208 	.word	0xffff0208

080063e0 <sulp>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	4604      	mov	r4, r0
 80063e4:	460d      	mov	r5, r1
 80063e6:	ec45 4b10 	vmov	d0, r4, r5
 80063ea:	4616      	mov	r6, r2
 80063ec:	f002 ff0a 	bl	8009204 <__ulp>
 80063f0:	ec51 0b10 	vmov	r0, r1, d0
 80063f4:	b17e      	cbz	r6, 8006416 <sulp+0x36>
 80063f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80063fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dd09      	ble.n	8006416 <sulp+0x36>
 8006402:	051b      	lsls	r3, r3, #20
 8006404:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006408:	2400      	movs	r4, #0
 800640a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800640e:	4622      	mov	r2, r4
 8006410:	462b      	mov	r3, r5
 8006412:	f7fa f919 	bl	8000648 <__aeabi_dmul>
 8006416:	bd70      	pop	{r4, r5, r6, pc}

08006418 <_strtod_l>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	ed2d 8b02 	vpush	{d8}
 8006420:	b09d      	sub	sp, #116	; 0x74
 8006422:	461f      	mov	r7, r3
 8006424:	2300      	movs	r3, #0
 8006426:	9318      	str	r3, [sp, #96]	; 0x60
 8006428:	4ba2      	ldr	r3, [pc, #648]	; (80066b4 <_strtod_l+0x29c>)
 800642a:	9213      	str	r2, [sp, #76]	; 0x4c
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	9305      	str	r3, [sp, #20]
 8006430:	4604      	mov	r4, r0
 8006432:	4618      	mov	r0, r3
 8006434:	4688      	mov	r8, r1
 8006436:	f7f9 fef3 	bl	8000220 <strlen>
 800643a:	f04f 0a00 	mov.w	sl, #0
 800643e:	4605      	mov	r5, r0
 8006440:	f04f 0b00 	mov.w	fp, #0
 8006444:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800644a:	781a      	ldrb	r2, [r3, #0]
 800644c:	2a2b      	cmp	r2, #43	; 0x2b
 800644e:	d04e      	beq.n	80064ee <_strtod_l+0xd6>
 8006450:	d83b      	bhi.n	80064ca <_strtod_l+0xb2>
 8006452:	2a0d      	cmp	r2, #13
 8006454:	d834      	bhi.n	80064c0 <_strtod_l+0xa8>
 8006456:	2a08      	cmp	r2, #8
 8006458:	d834      	bhi.n	80064c4 <_strtod_l+0xac>
 800645a:	2a00      	cmp	r2, #0
 800645c:	d03e      	beq.n	80064dc <_strtod_l+0xc4>
 800645e:	2300      	movs	r3, #0
 8006460:	930a      	str	r3, [sp, #40]	; 0x28
 8006462:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006464:	7833      	ldrb	r3, [r6, #0]
 8006466:	2b30      	cmp	r3, #48	; 0x30
 8006468:	f040 80b0 	bne.w	80065cc <_strtod_l+0x1b4>
 800646c:	7873      	ldrb	r3, [r6, #1]
 800646e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006472:	2b58      	cmp	r3, #88	; 0x58
 8006474:	d168      	bne.n	8006548 <_strtod_l+0x130>
 8006476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006478:	9301      	str	r3, [sp, #4]
 800647a:	ab18      	add	r3, sp, #96	; 0x60
 800647c:	9702      	str	r7, [sp, #8]
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4a8d      	ldr	r2, [pc, #564]	; (80066b8 <_strtod_l+0x2a0>)
 8006482:	ab19      	add	r3, sp, #100	; 0x64
 8006484:	a917      	add	r1, sp, #92	; 0x5c
 8006486:	4620      	mov	r0, r4
 8006488:	f001 ffae 	bl	80083e8 <__gethex>
 800648c:	f010 0707 	ands.w	r7, r0, #7
 8006490:	4605      	mov	r5, r0
 8006492:	d005      	beq.n	80064a0 <_strtod_l+0x88>
 8006494:	2f06      	cmp	r7, #6
 8006496:	d12c      	bne.n	80064f2 <_strtod_l+0xda>
 8006498:	3601      	adds	r6, #1
 800649a:	2300      	movs	r3, #0
 800649c:	9617      	str	r6, [sp, #92]	; 0x5c
 800649e:	930a      	str	r3, [sp, #40]	; 0x28
 80064a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f040 8590 	bne.w	8006fc8 <_strtod_l+0xbb0>
 80064a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064aa:	b1eb      	cbz	r3, 80064e8 <_strtod_l+0xd0>
 80064ac:	4652      	mov	r2, sl
 80064ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80064b2:	ec43 2b10 	vmov	d0, r2, r3
 80064b6:	b01d      	add	sp, #116	; 0x74
 80064b8:	ecbd 8b02 	vpop	{d8}
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c0:	2a20      	cmp	r2, #32
 80064c2:	d1cc      	bne.n	800645e <_strtod_l+0x46>
 80064c4:	3301      	adds	r3, #1
 80064c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80064c8:	e7be      	b.n	8006448 <_strtod_l+0x30>
 80064ca:	2a2d      	cmp	r2, #45	; 0x2d
 80064cc:	d1c7      	bne.n	800645e <_strtod_l+0x46>
 80064ce:	2201      	movs	r2, #1
 80064d0:	920a      	str	r2, [sp, #40]	; 0x28
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1c2      	bne.n	8006462 <_strtod_l+0x4a>
 80064dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 856e 	bne.w	8006fc4 <_strtod_l+0xbac>
 80064e8:	4652      	mov	r2, sl
 80064ea:	465b      	mov	r3, fp
 80064ec:	e7e1      	b.n	80064b2 <_strtod_l+0x9a>
 80064ee:	2200      	movs	r2, #0
 80064f0:	e7ee      	b.n	80064d0 <_strtod_l+0xb8>
 80064f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80064f4:	b13a      	cbz	r2, 8006506 <_strtod_l+0xee>
 80064f6:	2135      	movs	r1, #53	; 0x35
 80064f8:	a81a      	add	r0, sp, #104	; 0x68
 80064fa:	f002 ff8e 	bl	800941a <__copybits>
 80064fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006500:	4620      	mov	r0, r4
 8006502:	f002 fb4d 	bl	8008ba0 <_Bfree>
 8006506:	3f01      	subs	r7, #1
 8006508:	2f04      	cmp	r7, #4
 800650a:	d806      	bhi.n	800651a <_strtod_l+0x102>
 800650c:	e8df f007 	tbb	[pc, r7]
 8006510:	1714030a 	.word	0x1714030a
 8006514:	0a          	.byte	0x0a
 8006515:	00          	.byte	0x00
 8006516:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800651a:	0728      	lsls	r0, r5, #28
 800651c:	d5c0      	bpl.n	80064a0 <_strtod_l+0x88>
 800651e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006522:	e7bd      	b.n	80064a0 <_strtod_l+0x88>
 8006524:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006528:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800652a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800652e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006532:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006536:	e7f0      	b.n	800651a <_strtod_l+0x102>
 8006538:	f8df b180 	ldr.w	fp, [pc, #384]	; 80066bc <_strtod_l+0x2a4>
 800653c:	e7ed      	b.n	800651a <_strtod_l+0x102>
 800653e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006542:	f04f 3aff 	mov.w	sl, #4294967295
 8006546:	e7e8      	b.n	800651a <_strtod_l+0x102>
 8006548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	9217      	str	r2, [sp, #92]	; 0x5c
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b30      	cmp	r3, #48	; 0x30
 8006552:	d0f9      	beq.n	8006548 <_strtod_l+0x130>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0a3      	beq.n	80064a0 <_strtod_l+0x88>
 8006558:	2301      	movs	r3, #1
 800655a:	f04f 0900 	mov.w	r9, #0
 800655e:	9304      	str	r3, [sp, #16]
 8006560:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006562:	9308      	str	r3, [sp, #32]
 8006564:	f8cd 901c 	str.w	r9, [sp, #28]
 8006568:	464f      	mov	r7, r9
 800656a:	220a      	movs	r2, #10
 800656c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800656e:	7806      	ldrb	r6, [r0, #0]
 8006570:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006574:	b2d9      	uxtb	r1, r3
 8006576:	2909      	cmp	r1, #9
 8006578:	d92a      	bls.n	80065d0 <_strtod_l+0x1b8>
 800657a:	9905      	ldr	r1, [sp, #20]
 800657c:	462a      	mov	r2, r5
 800657e:	f003 fbe2 	bl	8009d46 <strncmp>
 8006582:	b398      	cbz	r0, 80065ec <_strtod_l+0x1d4>
 8006584:	2000      	movs	r0, #0
 8006586:	4632      	mov	r2, r6
 8006588:	463d      	mov	r5, r7
 800658a:	9005      	str	r0, [sp, #20]
 800658c:	4603      	mov	r3, r0
 800658e:	2a65      	cmp	r2, #101	; 0x65
 8006590:	d001      	beq.n	8006596 <_strtod_l+0x17e>
 8006592:	2a45      	cmp	r2, #69	; 0x45
 8006594:	d118      	bne.n	80065c8 <_strtod_l+0x1b0>
 8006596:	b91d      	cbnz	r5, 80065a0 <_strtod_l+0x188>
 8006598:	9a04      	ldr	r2, [sp, #16]
 800659a:	4302      	orrs	r2, r0
 800659c:	d09e      	beq.n	80064dc <_strtod_l+0xc4>
 800659e:	2500      	movs	r5, #0
 80065a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80065a4:	f108 0201 	add.w	r2, r8, #1
 80065a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80065aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80065ae:	2a2b      	cmp	r2, #43	; 0x2b
 80065b0:	d075      	beq.n	800669e <_strtod_l+0x286>
 80065b2:	2a2d      	cmp	r2, #45	; 0x2d
 80065b4:	d07b      	beq.n	80066ae <_strtod_l+0x296>
 80065b6:	f04f 0c00 	mov.w	ip, #0
 80065ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80065be:	2909      	cmp	r1, #9
 80065c0:	f240 8082 	bls.w	80066c8 <_strtod_l+0x2b0>
 80065c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80065c8:	2600      	movs	r6, #0
 80065ca:	e09d      	b.n	8006708 <_strtod_l+0x2f0>
 80065cc:	2300      	movs	r3, #0
 80065ce:	e7c4      	b.n	800655a <_strtod_l+0x142>
 80065d0:	2f08      	cmp	r7, #8
 80065d2:	bfd8      	it	le
 80065d4:	9907      	ldrle	r1, [sp, #28]
 80065d6:	f100 0001 	add.w	r0, r0, #1
 80065da:	bfda      	itte	le
 80065dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80065e0:	9307      	strle	r3, [sp, #28]
 80065e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80065e6:	3701      	adds	r7, #1
 80065e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80065ea:	e7bf      	b.n	800656c <_strtod_l+0x154>
 80065ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065ee:	195a      	adds	r2, r3, r5
 80065f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80065f2:	5d5a      	ldrb	r2, [r3, r5]
 80065f4:	2f00      	cmp	r7, #0
 80065f6:	d037      	beq.n	8006668 <_strtod_l+0x250>
 80065f8:	9005      	str	r0, [sp, #20]
 80065fa:	463d      	mov	r5, r7
 80065fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006600:	2b09      	cmp	r3, #9
 8006602:	d912      	bls.n	800662a <_strtod_l+0x212>
 8006604:	2301      	movs	r3, #1
 8006606:	e7c2      	b.n	800658e <_strtod_l+0x176>
 8006608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	9217      	str	r2, [sp, #92]	; 0x5c
 800660e:	785a      	ldrb	r2, [r3, #1]
 8006610:	3001      	adds	r0, #1
 8006612:	2a30      	cmp	r2, #48	; 0x30
 8006614:	d0f8      	beq.n	8006608 <_strtod_l+0x1f0>
 8006616:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800661a:	2b08      	cmp	r3, #8
 800661c:	f200 84d9 	bhi.w	8006fd2 <_strtod_l+0xbba>
 8006620:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006622:	9005      	str	r0, [sp, #20]
 8006624:	2000      	movs	r0, #0
 8006626:	9308      	str	r3, [sp, #32]
 8006628:	4605      	mov	r5, r0
 800662a:	3a30      	subs	r2, #48	; 0x30
 800662c:	f100 0301 	add.w	r3, r0, #1
 8006630:	d014      	beq.n	800665c <_strtod_l+0x244>
 8006632:	9905      	ldr	r1, [sp, #20]
 8006634:	4419      	add	r1, r3
 8006636:	9105      	str	r1, [sp, #20]
 8006638:	462b      	mov	r3, r5
 800663a:	eb00 0e05 	add.w	lr, r0, r5
 800663e:	210a      	movs	r1, #10
 8006640:	4573      	cmp	r3, lr
 8006642:	d113      	bne.n	800666c <_strtod_l+0x254>
 8006644:	182b      	adds	r3, r5, r0
 8006646:	2b08      	cmp	r3, #8
 8006648:	f105 0501 	add.w	r5, r5, #1
 800664c:	4405      	add	r5, r0
 800664e:	dc1c      	bgt.n	800668a <_strtod_l+0x272>
 8006650:	9907      	ldr	r1, [sp, #28]
 8006652:	230a      	movs	r3, #10
 8006654:	fb03 2301 	mla	r3, r3, r1, r2
 8006658:	9307      	str	r3, [sp, #28]
 800665a:	2300      	movs	r3, #0
 800665c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800665e:	1c51      	adds	r1, r2, #1
 8006660:	9117      	str	r1, [sp, #92]	; 0x5c
 8006662:	7852      	ldrb	r2, [r2, #1]
 8006664:	4618      	mov	r0, r3
 8006666:	e7c9      	b.n	80065fc <_strtod_l+0x1e4>
 8006668:	4638      	mov	r0, r7
 800666a:	e7d2      	b.n	8006612 <_strtod_l+0x1fa>
 800666c:	2b08      	cmp	r3, #8
 800666e:	dc04      	bgt.n	800667a <_strtod_l+0x262>
 8006670:	9e07      	ldr	r6, [sp, #28]
 8006672:	434e      	muls	r6, r1
 8006674:	9607      	str	r6, [sp, #28]
 8006676:	3301      	adds	r3, #1
 8006678:	e7e2      	b.n	8006640 <_strtod_l+0x228>
 800667a:	f103 0c01 	add.w	ip, r3, #1
 800667e:	f1bc 0f10 	cmp.w	ip, #16
 8006682:	bfd8      	it	le
 8006684:	fb01 f909 	mulle.w	r9, r1, r9
 8006688:	e7f5      	b.n	8006676 <_strtod_l+0x25e>
 800668a:	2d10      	cmp	r5, #16
 800668c:	bfdc      	itt	le
 800668e:	230a      	movle	r3, #10
 8006690:	fb03 2909 	mlale	r9, r3, r9, r2
 8006694:	e7e1      	b.n	800665a <_strtod_l+0x242>
 8006696:	2300      	movs	r3, #0
 8006698:	9305      	str	r3, [sp, #20]
 800669a:	2301      	movs	r3, #1
 800669c:	e77c      	b.n	8006598 <_strtod_l+0x180>
 800669e:	f04f 0c00 	mov.w	ip, #0
 80066a2:	f108 0202 	add.w	r2, r8, #2
 80066a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80066a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80066ac:	e785      	b.n	80065ba <_strtod_l+0x1a2>
 80066ae:	f04f 0c01 	mov.w	ip, #1
 80066b2:	e7f6      	b.n	80066a2 <_strtod_l+0x28a>
 80066b4:	0800b6a4 	.word	0x0800b6a4
 80066b8:	0800b3f4 	.word	0x0800b3f4
 80066bc:	7ff00000 	.word	0x7ff00000
 80066c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80066c2:	1c51      	adds	r1, r2, #1
 80066c4:	9117      	str	r1, [sp, #92]	; 0x5c
 80066c6:	7852      	ldrb	r2, [r2, #1]
 80066c8:	2a30      	cmp	r2, #48	; 0x30
 80066ca:	d0f9      	beq.n	80066c0 <_strtod_l+0x2a8>
 80066cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80066d0:	2908      	cmp	r1, #8
 80066d2:	f63f af79 	bhi.w	80065c8 <_strtod_l+0x1b0>
 80066d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80066da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80066dc:	9206      	str	r2, [sp, #24]
 80066de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80066e0:	1c51      	adds	r1, r2, #1
 80066e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80066e4:	7852      	ldrb	r2, [r2, #1]
 80066e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80066ea:	2e09      	cmp	r6, #9
 80066ec:	d937      	bls.n	800675e <_strtod_l+0x346>
 80066ee:	9e06      	ldr	r6, [sp, #24]
 80066f0:	1b89      	subs	r1, r1, r6
 80066f2:	2908      	cmp	r1, #8
 80066f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80066f8:	dc02      	bgt.n	8006700 <_strtod_l+0x2e8>
 80066fa:	4576      	cmp	r6, lr
 80066fc:	bfa8      	it	ge
 80066fe:	4676      	movge	r6, lr
 8006700:	f1bc 0f00 	cmp.w	ip, #0
 8006704:	d000      	beq.n	8006708 <_strtod_l+0x2f0>
 8006706:	4276      	negs	r6, r6
 8006708:	2d00      	cmp	r5, #0
 800670a:	d14d      	bne.n	80067a8 <_strtod_l+0x390>
 800670c:	9904      	ldr	r1, [sp, #16]
 800670e:	4301      	orrs	r1, r0
 8006710:	f47f aec6 	bne.w	80064a0 <_strtod_l+0x88>
 8006714:	2b00      	cmp	r3, #0
 8006716:	f47f aee1 	bne.w	80064dc <_strtod_l+0xc4>
 800671a:	2a69      	cmp	r2, #105	; 0x69
 800671c:	d027      	beq.n	800676e <_strtod_l+0x356>
 800671e:	dc24      	bgt.n	800676a <_strtod_l+0x352>
 8006720:	2a49      	cmp	r2, #73	; 0x49
 8006722:	d024      	beq.n	800676e <_strtod_l+0x356>
 8006724:	2a4e      	cmp	r2, #78	; 0x4e
 8006726:	f47f aed9 	bne.w	80064dc <_strtod_l+0xc4>
 800672a:	499f      	ldr	r1, [pc, #636]	; (80069a8 <_strtod_l+0x590>)
 800672c:	a817      	add	r0, sp, #92	; 0x5c
 800672e:	f002 f8b3 	bl	8008898 <__match>
 8006732:	2800      	cmp	r0, #0
 8006734:	f43f aed2 	beq.w	80064dc <_strtod_l+0xc4>
 8006738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b28      	cmp	r3, #40	; 0x28
 800673e:	d12d      	bne.n	800679c <_strtod_l+0x384>
 8006740:	499a      	ldr	r1, [pc, #616]	; (80069ac <_strtod_l+0x594>)
 8006742:	aa1a      	add	r2, sp, #104	; 0x68
 8006744:	a817      	add	r0, sp, #92	; 0x5c
 8006746:	f002 f8bb 	bl	80088c0 <__hexnan>
 800674a:	2805      	cmp	r0, #5
 800674c:	d126      	bne.n	800679c <_strtod_l+0x384>
 800674e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006750:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006754:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006758:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800675c:	e6a0      	b.n	80064a0 <_strtod_l+0x88>
 800675e:	210a      	movs	r1, #10
 8006760:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006764:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006768:	e7b9      	b.n	80066de <_strtod_l+0x2c6>
 800676a:	2a6e      	cmp	r2, #110	; 0x6e
 800676c:	e7db      	b.n	8006726 <_strtod_l+0x30e>
 800676e:	4990      	ldr	r1, [pc, #576]	; (80069b0 <_strtod_l+0x598>)
 8006770:	a817      	add	r0, sp, #92	; 0x5c
 8006772:	f002 f891 	bl	8008898 <__match>
 8006776:	2800      	cmp	r0, #0
 8006778:	f43f aeb0 	beq.w	80064dc <_strtod_l+0xc4>
 800677c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800677e:	498d      	ldr	r1, [pc, #564]	; (80069b4 <_strtod_l+0x59c>)
 8006780:	3b01      	subs	r3, #1
 8006782:	a817      	add	r0, sp, #92	; 0x5c
 8006784:	9317      	str	r3, [sp, #92]	; 0x5c
 8006786:	f002 f887 	bl	8008898 <__match>
 800678a:	b910      	cbnz	r0, 8006792 <_strtod_l+0x37a>
 800678c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800678e:	3301      	adds	r3, #1
 8006790:	9317      	str	r3, [sp, #92]	; 0x5c
 8006792:	f8df b230 	ldr.w	fp, [pc, #560]	; 80069c4 <_strtod_l+0x5ac>
 8006796:	f04f 0a00 	mov.w	sl, #0
 800679a:	e681      	b.n	80064a0 <_strtod_l+0x88>
 800679c:	4886      	ldr	r0, [pc, #536]	; (80069b8 <_strtod_l+0x5a0>)
 800679e:	f003 fa77 	bl	8009c90 <nan>
 80067a2:	ec5b ab10 	vmov	sl, fp, d0
 80067a6:	e67b      	b.n	80064a0 <_strtod_l+0x88>
 80067a8:	9b05      	ldr	r3, [sp, #20]
 80067aa:	9807      	ldr	r0, [sp, #28]
 80067ac:	1af3      	subs	r3, r6, r3
 80067ae:	2f00      	cmp	r7, #0
 80067b0:	bf08      	it	eq
 80067b2:	462f      	moveq	r7, r5
 80067b4:	2d10      	cmp	r5, #16
 80067b6:	9306      	str	r3, [sp, #24]
 80067b8:	46a8      	mov	r8, r5
 80067ba:	bfa8      	it	ge
 80067bc:	f04f 0810 	movge.w	r8, #16
 80067c0:	f7f9 fec8 	bl	8000554 <__aeabi_ui2d>
 80067c4:	2d09      	cmp	r5, #9
 80067c6:	4682      	mov	sl, r0
 80067c8:	468b      	mov	fp, r1
 80067ca:	dd13      	ble.n	80067f4 <_strtod_l+0x3dc>
 80067cc:	4b7b      	ldr	r3, [pc, #492]	; (80069bc <_strtod_l+0x5a4>)
 80067ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80067d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80067d6:	f7f9 ff37 	bl	8000648 <__aeabi_dmul>
 80067da:	4682      	mov	sl, r0
 80067dc:	4648      	mov	r0, r9
 80067de:	468b      	mov	fp, r1
 80067e0:	f7f9 feb8 	bl	8000554 <__aeabi_ui2d>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4650      	mov	r0, sl
 80067ea:	4659      	mov	r1, fp
 80067ec:	f7f9 fd76 	bl	80002dc <__adddf3>
 80067f0:	4682      	mov	sl, r0
 80067f2:	468b      	mov	fp, r1
 80067f4:	2d0f      	cmp	r5, #15
 80067f6:	dc38      	bgt.n	800686a <_strtod_l+0x452>
 80067f8:	9b06      	ldr	r3, [sp, #24]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f43f ae50 	beq.w	80064a0 <_strtod_l+0x88>
 8006800:	dd24      	ble.n	800684c <_strtod_l+0x434>
 8006802:	2b16      	cmp	r3, #22
 8006804:	dc0b      	bgt.n	800681e <_strtod_l+0x406>
 8006806:	496d      	ldr	r1, [pc, #436]	; (80069bc <_strtod_l+0x5a4>)
 8006808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800680c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006810:	4652      	mov	r2, sl
 8006812:	465b      	mov	r3, fp
 8006814:	f7f9 ff18 	bl	8000648 <__aeabi_dmul>
 8006818:	4682      	mov	sl, r0
 800681a:	468b      	mov	fp, r1
 800681c:	e640      	b.n	80064a0 <_strtod_l+0x88>
 800681e:	9a06      	ldr	r2, [sp, #24]
 8006820:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006824:	4293      	cmp	r3, r2
 8006826:	db20      	blt.n	800686a <_strtod_l+0x452>
 8006828:	4c64      	ldr	r4, [pc, #400]	; (80069bc <_strtod_l+0x5a4>)
 800682a:	f1c5 050f 	rsb	r5, r5, #15
 800682e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006832:	4652      	mov	r2, sl
 8006834:	465b      	mov	r3, fp
 8006836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800683a:	f7f9 ff05 	bl	8000648 <__aeabi_dmul>
 800683e:	9b06      	ldr	r3, [sp, #24]
 8006840:	1b5d      	subs	r5, r3, r5
 8006842:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006846:	e9d4 2300 	ldrd	r2, r3, [r4]
 800684a:	e7e3      	b.n	8006814 <_strtod_l+0x3fc>
 800684c:	9b06      	ldr	r3, [sp, #24]
 800684e:	3316      	adds	r3, #22
 8006850:	db0b      	blt.n	800686a <_strtod_l+0x452>
 8006852:	9b05      	ldr	r3, [sp, #20]
 8006854:	1b9e      	subs	r6, r3, r6
 8006856:	4b59      	ldr	r3, [pc, #356]	; (80069bc <_strtod_l+0x5a4>)
 8006858:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800685c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006860:	4650      	mov	r0, sl
 8006862:	4659      	mov	r1, fp
 8006864:	f7fa f81a 	bl	800089c <__aeabi_ddiv>
 8006868:	e7d6      	b.n	8006818 <_strtod_l+0x400>
 800686a:	9b06      	ldr	r3, [sp, #24]
 800686c:	eba5 0808 	sub.w	r8, r5, r8
 8006870:	4498      	add	r8, r3
 8006872:	f1b8 0f00 	cmp.w	r8, #0
 8006876:	dd74      	ble.n	8006962 <_strtod_l+0x54a>
 8006878:	f018 030f 	ands.w	r3, r8, #15
 800687c:	d00a      	beq.n	8006894 <_strtod_l+0x47c>
 800687e:	494f      	ldr	r1, [pc, #316]	; (80069bc <_strtod_l+0x5a4>)
 8006880:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006884:	4652      	mov	r2, sl
 8006886:	465b      	mov	r3, fp
 8006888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800688c:	f7f9 fedc 	bl	8000648 <__aeabi_dmul>
 8006890:	4682      	mov	sl, r0
 8006892:	468b      	mov	fp, r1
 8006894:	f038 080f 	bics.w	r8, r8, #15
 8006898:	d04f      	beq.n	800693a <_strtod_l+0x522>
 800689a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800689e:	dd22      	ble.n	80068e6 <_strtod_l+0x4ce>
 80068a0:	2500      	movs	r5, #0
 80068a2:	462e      	mov	r6, r5
 80068a4:	9507      	str	r5, [sp, #28]
 80068a6:	9505      	str	r5, [sp, #20]
 80068a8:	2322      	movs	r3, #34	; 0x22
 80068aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80069c4 <_strtod_l+0x5ac>
 80068ae:	6023      	str	r3, [r4, #0]
 80068b0:	f04f 0a00 	mov.w	sl, #0
 80068b4:	9b07      	ldr	r3, [sp, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f43f adf2 	beq.w	80064a0 <_strtod_l+0x88>
 80068bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80068be:	4620      	mov	r0, r4
 80068c0:	f002 f96e 	bl	8008ba0 <_Bfree>
 80068c4:	9905      	ldr	r1, [sp, #20]
 80068c6:	4620      	mov	r0, r4
 80068c8:	f002 f96a 	bl	8008ba0 <_Bfree>
 80068cc:	4631      	mov	r1, r6
 80068ce:	4620      	mov	r0, r4
 80068d0:	f002 f966 	bl	8008ba0 <_Bfree>
 80068d4:	9907      	ldr	r1, [sp, #28]
 80068d6:	4620      	mov	r0, r4
 80068d8:	f002 f962 	bl	8008ba0 <_Bfree>
 80068dc:	4629      	mov	r1, r5
 80068de:	4620      	mov	r0, r4
 80068e0:	f002 f95e 	bl	8008ba0 <_Bfree>
 80068e4:	e5dc      	b.n	80064a0 <_strtod_l+0x88>
 80068e6:	4b36      	ldr	r3, [pc, #216]	; (80069c0 <_strtod_l+0x5a8>)
 80068e8:	9304      	str	r3, [sp, #16]
 80068ea:	2300      	movs	r3, #0
 80068ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80068f0:	4650      	mov	r0, sl
 80068f2:	4659      	mov	r1, fp
 80068f4:	4699      	mov	r9, r3
 80068f6:	f1b8 0f01 	cmp.w	r8, #1
 80068fa:	dc21      	bgt.n	8006940 <_strtod_l+0x528>
 80068fc:	b10b      	cbz	r3, 8006902 <_strtod_l+0x4ea>
 80068fe:	4682      	mov	sl, r0
 8006900:	468b      	mov	fp, r1
 8006902:	4b2f      	ldr	r3, [pc, #188]	; (80069c0 <_strtod_l+0x5a8>)
 8006904:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006908:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800690c:	4652      	mov	r2, sl
 800690e:	465b      	mov	r3, fp
 8006910:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006914:	f7f9 fe98 	bl	8000648 <__aeabi_dmul>
 8006918:	4b2a      	ldr	r3, [pc, #168]	; (80069c4 <_strtod_l+0x5ac>)
 800691a:	460a      	mov	r2, r1
 800691c:	400b      	ands	r3, r1
 800691e:	492a      	ldr	r1, [pc, #168]	; (80069c8 <_strtod_l+0x5b0>)
 8006920:	428b      	cmp	r3, r1
 8006922:	4682      	mov	sl, r0
 8006924:	d8bc      	bhi.n	80068a0 <_strtod_l+0x488>
 8006926:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800692a:	428b      	cmp	r3, r1
 800692c:	bf86      	itte	hi
 800692e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80069cc <_strtod_l+0x5b4>
 8006932:	f04f 3aff 	movhi.w	sl, #4294967295
 8006936:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800693a:	2300      	movs	r3, #0
 800693c:	9304      	str	r3, [sp, #16]
 800693e:	e084      	b.n	8006a4a <_strtod_l+0x632>
 8006940:	f018 0f01 	tst.w	r8, #1
 8006944:	d005      	beq.n	8006952 <_strtod_l+0x53a>
 8006946:	9b04      	ldr	r3, [sp, #16]
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f7f9 fe7c 	bl	8000648 <__aeabi_dmul>
 8006950:	2301      	movs	r3, #1
 8006952:	9a04      	ldr	r2, [sp, #16]
 8006954:	3208      	adds	r2, #8
 8006956:	f109 0901 	add.w	r9, r9, #1
 800695a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800695e:	9204      	str	r2, [sp, #16]
 8006960:	e7c9      	b.n	80068f6 <_strtod_l+0x4de>
 8006962:	d0ea      	beq.n	800693a <_strtod_l+0x522>
 8006964:	f1c8 0800 	rsb	r8, r8, #0
 8006968:	f018 020f 	ands.w	r2, r8, #15
 800696c:	d00a      	beq.n	8006984 <_strtod_l+0x56c>
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <_strtod_l+0x5a4>)
 8006970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006974:	4650      	mov	r0, sl
 8006976:	4659      	mov	r1, fp
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	f7f9 ff8e 	bl	800089c <__aeabi_ddiv>
 8006980:	4682      	mov	sl, r0
 8006982:	468b      	mov	fp, r1
 8006984:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006988:	d0d7      	beq.n	800693a <_strtod_l+0x522>
 800698a:	f1b8 0f1f 	cmp.w	r8, #31
 800698e:	dd1f      	ble.n	80069d0 <_strtod_l+0x5b8>
 8006990:	2500      	movs	r5, #0
 8006992:	462e      	mov	r6, r5
 8006994:	9507      	str	r5, [sp, #28]
 8006996:	9505      	str	r5, [sp, #20]
 8006998:	2322      	movs	r3, #34	; 0x22
 800699a:	f04f 0a00 	mov.w	sl, #0
 800699e:	f04f 0b00 	mov.w	fp, #0
 80069a2:	6023      	str	r3, [r4, #0]
 80069a4:	e786      	b.n	80068b4 <_strtod_l+0x49c>
 80069a6:	bf00      	nop
 80069a8:	0800b3c5 	.word	0x0800b3c5
 80069ac:	0800b408 	.word	0x0800b408
 80069b0:	0800b3bd 	.word	0x0800b3bd
 80069b4:	0800b54c 	.word	0x0800b54c
 80069b8:	0800b860 	.word	0x0800b860
 80069bc:	0800b740 	.word	0x0800b740
 80069c0:	0800b718 	.word	0x0800b718
 80069c4:	7ff00000 	.word	0x7ff00000
 80069c8:	7ca00000 	.word	0x7ca00000
 80069cc:	7fefffff 	.word	0x7fefffff
 80069d0:	f018 0310 	ands.w	r3, r8, #16
 80069d4:	bf18      	it	ne
 80069d6:	236a      	movne	r3, #106	; 0x6a
 80069d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006d88 <_strtod_l+0x970>
 80069dc:	9304      	str	r3, [sp, #16]
 80069de:	4650      	mov	r0, sl
 80069e0:	4659      	mov	r1, fp
 80069e2:	2300      	movs	r3, #0
 80069e4:	f018 0f01 	tst.w	r8, #1
 80069e8:	d004      	beq.n	80069f4 <_strtod_l+0x5dc>
 80069ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069ee:	f7f9 fe2b 	bl	8000648 <__aeabi_dmul>
 80069f2:	2301      	movs	r3, #1
 80069f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80069f8:	f109 0908 	add.w	r9, r9, #8
 80069fc:	d1f2      	bne.n	80069e4 <_strtod_l+0x5cc>
 80069fe:	b10b      	cbz	r3, 8006a04 <_strtod_l+0x5ec>
 8006a00:	4682      	mov	sl, r0
 8006a02:	468b      	mov	fp, r1
 8006a04:	9b04      	ldr	r3, [sp, #16]
 8006a06:	b1c3      	cbz	r3, 8006a3a <_strtod_l+0x622>
 8006a08:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006a0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	4659      	mov	r1, fp
 8006a14:	dd11      	ble.n	8006a3a <_strtod_l+0x622>
 8006a16:	2b1f      	cmp	r3, #31
 8006a18:	f340 8124 	ble.w	8006c64 <_strtod_l+0x84c>
 8006a1c:	2b34      	cmp	r3, #52	; 0x34
 8006a1e:	bfde      	ittt	le
 8006a20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006a24:	f04f 33ff 	movle.w	r3, #4294967295
 8006a28:	fa03 f202 	lslle.w	r2, r3, r2
 8006a2c:	f04f 0a00 	mov.w	sl, #0
 8006a30:	bfcc      	ite	gt
 8006a32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006a36:	ea02 0b01 	andle.w	fp, r2, r1
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4650      	mov	r0, sl
 8006a40:	4659      	mov	r1, fp
 8006a42:	f7fa f869 	bl	8000b18 <__aeabi_dcmpeq>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d1a2      	bne.n	8006990 <_strtod_l+0x578>
 8006a4a:	9b07      	ldr	r3, [sp, #28]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	9908      	ldr	r1, [sp, #32]
 8006a50:	462b      	mov	r3, r5
 8006a52:	463a      	mov	r2, r7
 8006a54:	4620      	mov	r0, r4
 8006a56:	f002 f90b 	bl	8008c70 <__s2b>
 8006a5a:	9007      	str	r0, [sp, #28]
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	f43f af1f 	beq.w	80068a0 <_strtod_l+0x488>
 8006a62:	9b05      	ldr	r3, [sp, #20]
 8006a64:	1b9e      	subs	r6, r3, r6
 8006a66:	9b06      	ldr	r3, [sp, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bfb4      	ite	lt
 8006a6c:	4633      	movlt	r3, r6
 8006a6e:	2300      	movge	r3, #0
 8006a70:	930c      	str	r3, [sp, #48]	; 0x30
 8006a72:	9b06      	ldr	r3, [sp, #24]
 8006a74:	2500      	movs	r5, #0
 8006a76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006a7a:	9312      	str	r3, [sp, #72]	; 0x48
 8006a7c:	462e      	mov	r6, r5
 8006a7e:	9b07      	ldr	r3, [sp, #28]
 8006a80:	4620      	mov	r0, r4
 8006a82:	6859      	ldr	r1, [r3, #4]
 8006a84:	f002 f84c 	bl	8008b20 <_Balloc>
 8006a88:	9005      	str	r0, [sp, #20]
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	f43f af0c 	beq.w	80068a8 <_strtod_l+0x490>
 8006a90:	9b07      	ldr	r3, [sp, #28]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	3202      	adds	r2, #2
 8006a96:	f103 010c 	add.w	r1, r3, #12
 8006a9a:	0092      	lsls	r2, r2, #2
 8006a9c:	300c      	adds	r0, #12
 8006a9e:	f002 f831 	bl	8008b04 <memcpy>
 8006aa2:	ec4b ab10 	vmov	d0, sl, fp
 8006aa6:	aa1a      	add	r2, sp, #104	; 0x68
 8006aa8:	a919      	add	r1, sp, #100	; 0x64
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f002 fc26 	bl	80092fc <__d2b>
 8006ab0:	ec4b ab18 	vmov	d8, sl, fp
 8006ab4:	9018      	str	r0, [sp, #96]	; 0x60
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	f43f aef6 	beq.w	80068a8 <_strtod_l+0x490>
 8006abc:	2101      	movs	r1, #1
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f002 f970 	bl	8008da4 <__i2b>
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43f aeee 	beq.w	80068a8 <_strtod_l+0x490>
 8006acc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ace:	9904      	ldr	r1, [sp, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bfab      	itete	ge
 8006ad4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006ad6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006ad8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006ada:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006ade:	bfac      	ite	ge
 8006ae0:	eb03 0902 	addge.w	r9, r3, r2
 8006ae4:	1ad7      	sublt	r7, r2, r3
 8006ae6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006ae8:	eba3 0801 	sub.w	r8, r3, r1
 8006aec:	4490      	add	r8, r2
 8006aee:	4ba1      	ldr	r3, [pc, #644]	; (8006d74 <_strtod_l+0x95c>)
 8006af0:	f108 38ff 	add.w	r8, r8, #4294967295
 8006af4:	4598      	cmp	r8, r3
 8006af6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006afa:	f280 80c7 	bge.w	8006c8c <_strtod_l+0x874>
 8006afe:	eba3 0308 	sub.w	r3, r3, r8
 8006b02:	2b1f      	cmp	r3, #31
 8006b04:	eba2 0203 	sub.w	r2, r2, r3
 8006b08:	f04f 0101 	mov.w	r1, #1
 8006b0c:	f300 80b1 	bgt.w	8006c72 <_strtod_l+0x85a>
 8006b10:	fa01 f303 	lsl.w	r3, r1, r3
 8006b14:	930d      	str	r3, [sp, #52]	; 0x34
 8006b16:	2300      	movs	r3, #0
 8006b18:	9308      	str	r3, [sp, #32]
 8006b1a:	eb09 0802 	add.w	r8, r9, r2
 8006b1e:	9b04      	ldr	r3, [sp, #16]
 8006b20:	45c1      	cmp	r9, r8
 8006b22:	4417      	add	r7, r2
 8006b24:	441f      	add	r7, r3
 8006b26:	464b      	mov	r3, r9
 8006b28:	bfa8      	it	ge
 8006b2a:	4643      	movge	r3, r8
 8006b2c:	42bb      	cmp	r3, r7
 8006b2e:	bfa8      	it	ge
 8006b30:	463b      	movge	r3, r7
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	bfc2      	ittt	gt
 8006b36:	eba8 0803 	subgt.w	r8, r8, r3
 8006b3a:	1aff      	subgt	r7, r7, r3
 8006b3c:	eba9 0903 	subgt.w	r9, r9, r3
 8006b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	dd17      	ble.n	8006b76 <_strtod_l+0x75e>
 8006b46:	4631      	mov	r1, r6
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f002 f9ea 	bl	8008f24 <__pow5mult>
 8006b50:	4606      	mov	r6, r0
 8006b52:	2800      	cmp	r0, #0
 8006b54:	f43f aea8 	beq.w	80068a8 <_strtod_l+0x490>
 8006b58:	4601      	mov	r1, r0
 8006b5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f002 f937 	bl	8008dd0 <__multiply>
 8006b62:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b64:	2800      	cmp	r0, #0
 8006b66:	f43f ae9f 	beq.w	80068a8 <_strtod_l+0x490>
 8006b6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f002 f817 	bl	8008ba0 <_Bfree>
 8006b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b74:	9318      	str	r3, [sp, #96]	; 0x60
 8006b76:	f1b8 0f00 	cmp.w	r8, #0
 8006b7a:	f300 808c 	bgt.w	8006c96 <_strtod_l+0x87e>
 8006b7e:	9b06      	ldr	r3, [sp, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dd08      	ble.n	8006b96 <_strtod_l+0x77e>
 8006b84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b86:	9905      	ldr	r1, [sp, #20]
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f002 f9cb 	bl	8008f24 <__pow5mult>
 8006b8e:	9005      	str	r0, [sp, #20]
 8006b90:	2800      	cmp	r0, #0
 8006b92:	f43f ae89 	beq.w	80068a8 <_strtod_l+0x490>
 8006b96:	2f00      	cmp	r7, #0
 8006b98:	dd08      	ble.n	8006bac <_strtod_l+0x794>
 8006b9a:	9905      	ldr	r1, [sp, #20]
 8006b9c:	463a      	mov	r2, r7
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f002 fa1a 	bl	8008fd8 <__lshift>
 8006ba4:	9005      	str	r0, [sp, #20]
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	f43f ae7e 	beq.w	80068a8 <_strtod_l+0x490>
 8006bac:	f1b9 0f00 	cmp.w	r9, #0
 8006bb0:	dd08      	ble.n	8006bc4 <_strtod_l+0x7ac>
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	464a      	mov	r2, r9
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f002 fa0e 	bl	8008fd8 <__lshift>
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	f43f ae72 	beq.w	80068a8 <_strtod_l+0x490>
 8006bc4:	9a05      	ldr	r2, [sp, #20]
 8006bc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f002 fa91 	bl	80090f0 <__mdiff>
 8006bce:	4605      	mov	r5, r0
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	f43f ae69 	beq.w	80068a8 <_strtod_l+0x490>
 8006bd6:	68c3      	ldr	r3, [r0, #12]
 8006bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60c3      	str	r3, [r0, #12]
 8006bde:	4631      	mov	r1, r6
 8006be0:	f002 fa6a 	bl	80090b8 <__mcmp>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	da60      	bge.n	8006caa <_strtod_l+0x892>
 8006be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bea:	ea53 030a 	orrs.w	r3, r3, sl
 8006bee:	f040 8082 	bne.w	8006cf6 <_strtod_l+0x8de>
 8006bf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d17d      	bne.n	8006cf6 <_strtod_l+0x8de>
 8006bfa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006bfe:	0d1b      	lsrs	r3, r3, #20
 8006c00:	051b      	lsls	r3, r3, #20
 8006c02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006c06:	d976      	bls.n	8006cf6 <_strtod_l+0x8de>
 8006c08:	696b      	ldr	r3, [r5, #20]
 8006c0a:	b913      	cbnz	r3, 8006c12 <_strtod_l+0x7fa>
 8006c0c:	692b      	ldr	r3, [r5, #16]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	dd71      	ble.n	8006cf6 <_strtod_l+0x8de>
 8006c12:	4629      	mov	r1, r5
 8006c14:	2201      	movs	r2, #1
 8006c16:	4620      	mov	r0, r4
 8006c18:	f002 f9de 	bl	8008fd8 <__lshift>
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4605      	mov	r5, r0
 8006c20:	f002 fa4a 	bl	80090b8 <__mcmp>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	dd66      	ble.n	8006cf6 <_strtod_l+0x8de>
 8006c28:	9904      	ldr	r1, [sp, #16]
 8006c2a:	4a53      	ldr	r2, [pc, #332]	; (8006d78 <_strtod_l+0x960>)
 8006c2c:	465b      	mov	r3, fp
 8006c2e:	2900      	cmp	r1, #0
 8006c30:	f000 8081 	beq.w	8006d36 <_strtod_l+0x91e>
 8006c34:	ea02 010b 	and.w	r1, r2, fp
 8006c38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006c3c:	dc7b      	bgt.n	8006d36 <_strtod_l+0x91e>
 8006c3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006c42:	f77f aea9 	ble.w	8006998 <_strtod_l+0x580>
 8006c46:	4b4d      	ldr	r3, [pc, #308]	; (8006d7c <_strtod_l+0x964>)
 8006c48:	4650      	mov	r0, sl
 8006c4a:	4659      	mov	r1, fp
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f7f9 fcfb 	bl	8000648 <__aeabi_dmul>
 8006c52:	460b      	mov	r3, r1
 8006c54:	4303      	orrs	r3, r0
 8006c56:	bf08      	it	eq
 8006c58:	2322      	moveq	r3, #34	; 0x22
 8006c5a:	4682      	mov	sl, r0
 8006c5c:	468b      	mov	fp, r1
 8006c5e:	bf08      	it	eq
 8006c60:	6023      	streq	r3, [r4, #0]
 8006c62:	e62b      	b.n	80068bc <_strtod_l+0x4a4>
 8006c64:	f04f 32ff 	mov.w	r2, #4294967295
 8006c68:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6c:	ea03 0a0a 	and.w	sl, r3, sl
 8006c70:	e6e3      	b.n	8006a3a <_strtod_l+0x622>
 8006c72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006c76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006c7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006c7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006c82:	fa01 f308 	lsl.w	r3, r1, r8
 8006c86:	9308      	str	r3, [sp, #32]
 8006c88:	910d      	str	r1, [sp, #52]	; 0x34
 8006c8a:	e746      	b.n	8006b1a <_strtod_l+0x702>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9308      	str	r3, [sp, #32]
 8006c90:	2301      	movs	r3, #1
 8006c92:	930d      	str	r3, [sp, #52]	; 0x34
 8006c94:	e741      	b.n	8006b1a <_strtod_l+0x702>
 8006c96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c98:	4642      	mov	r2, r8
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f002 f99c 	bl	8008fd8 <__lshift>
 8006ca0:	9018      	str	r0, [sp, #96]	; 0x60
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	f47f af6b 	bne.w	8006b7e <_strtod_l+0x766>
 8006ca8:	e5fe      	b.n	80068a8 <_strtod_l+0x490>
 8006caa:	465f      	mov	r7, fp
 8006cac:	d16e      	bne.n	8006d8c <_strtod_l+0x974>
 8006cae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cb4:	b342      	cbz	r2, 8006d08 <_strtod_l+0x8f0>
 8006cb6:	4a32      	ldr	r2, [pc, #200]	; (8006d80 <_strtod_l+0x968>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d128      	bne.n	8006d0e <_strtod_l+0x8f6>
 8006cbc:	9b04      	ldr	r3, [sp, #16]
 8006cbe:	4651      	mov	r1, sl
 8006cc0:	b1eb      	cbz	r3, 8006cfe <_strtod_l+0x8e6>
 8006cc2:	4b2d      	ldr	r3, [pc, #180]	; (8006d78 <_strtod_l+0x960>)
 8006cc4:	403b      	ands	r3, r7
 8006cc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006cca:	f04f 32ff 	mov.w	r2, #4294967295
 8006cce:	d819      	bhi.n	8006d04 <_strtod_l+0x8ec>
 8006cd0:	0d1b      	lsrs	r3, r3, #20
 8006cd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	4299      	cmp	r1, r3
 8006cdc:	d117      	bne.n	8006d0e <_strtod_l+0x8f6>
 8006cde:	4b29      	ldr	r3, [pc, #164]	; (8006d84 <_strtod_l+0x96c>)
 8006ce0:	429f      	cmp	r7, r3
 8006ce2:	d102      	bne.n	8006cea <_strtod_l+0x8d2>
 8006ce4:	3101      	adds	r1, #1
 8006ce6:	f43f addf 	beq.w	80068a8 <_strtod_l+0x490>
 8006cea:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <_strtod_l+0x960>)
 8006cec:	403b      	ands	r3, r7
 8006cee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006cf2:	f04f 0a00 	mov.w	sl, #0
 8006cf6:	9b04      	ldr	r3, [sp, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1a4      	bne.n	8006c46 <_strtod_l+0x82e>
 8006cfc:	e5de      	b.n	80068bc <_strtod_l+0x4a4>
 8006cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006d02:	e7ea      	b.n	8006cda <_strtod_l+0x8c2>
 8006d04:	4613      	mov	r3, r2
 8006d06:	e7e8      	b.n	8006cda <_strtod_l+0x8c2>
 8006d08:	ea53 030a 	orrs.w	r3, r3, sl
 8006d0c:	d08c      	beq.n	8006c28 <_strtod_l+0x810>
 8006d0e:	9b08      	ldr	r3, [sp, #32]
 8006d10:	b1db      	cbz	r3, 8006d4a <_strtod_l+0x932>
 8006d12:	423b      	tst	r3, r7
 8006d14:	d0ef      	beq.n	8006cf6 <_strtod_l+0x8de>
 8006d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d18:	9a04      	ldr	r2, [sp, #16]
 8006d1a:	4650      	mov	r0, sl
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	b1c3      	cbz	r3, 8006d52 <_strtod_l+0x93a>
 8006d20:	f7ff fb5e 	bl	80063e0 <sulp>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	ec51 0b18 	vmov	r0, r1, d8
 8006d2c:	f7f9 fad6 	bl	80002dc <__adddf3>
 8006d30:	4682      	mov	sl, r0
 8006d32:	468b      	mov	fp, r1
 8006d34:	e7df      	b.n	8006cf6 <_strtod_l+0x8de>
 8006d36:	4013      	ands	r3, r2
 8006d38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006d3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006d40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006d44:	f04f 3aff 	mov.w	sl, #4294967295
 8006d48:	e7d5      	b.n	8006cf6 <_strtod_l+0x8de>
 8006d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d4c:	ea13 0f0a 	tst.w	r3, sl
 8006d50:	e7e0      	b.n	8006d14 <_strtod_l+0x8fc>
 8006d52:	f7ff fb45 	bl	80063e0 <sulp>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	ec51 0b18 	vmov	r0, r1, d8
 8006d5e:	f7f9 fabb 	bl	80002d8 <__aeabi_dsub>
 8006d62:	2200      	movs	r2, #0
 8006d64:	2300      	movs	r3, #0
 8006d66:	4682      	mov	sl, r0
 8006d68:	468b      	mov	fp, r1
 8006d6a:	f7f9 fed5 	bl	8000b18 <__aeabi_dcmpeq>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d0c1      	beq.n	8006cf6 <_strtod_l+0x8de>
 8006d72:	e611      	b.n	8006998 <_strtod_l+0x580>
 8006d74:	fffffc02 	.word	0xfffffc02
 8006d78:	7ff00000 	.word	0x7ff00000
 8006d7c:	39500000 	.word	0x39500000
 8006d80:	000fffff 	.word	0x000fffff
 8006d84:	7fefffff 	.word	0x7fefffff
 8006d88:	0800b420 	.word	0x0800b420
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f002 fb10 	bl	80093b4 <__ratio>
 8006d94:	ec59 8b10 	vmov	r8, r9, d0
 8006d98:	ee10 0a10 	vmov	r0, s0
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006da2:	4649      	mov	r1, r9
 8006da4:	f7f9 fecc 	bl	8000b40 <__aeabi_dcmple>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d07a      	beq.n	8006ea2 <_strtod_l+0xa8a>
 8006dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d04a      	beq.n	8006e48 <_strtod_l+0xa30>
 8006db2:	4b95      	ldr	r3, [pc, #596]	; (8007008 <_strtod_l+0xbf0>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006dba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007008 <_strtod_l+0xbf0>
 8006dbe:	f04f 0800 	mov.w	r8, #0
 8006dc2:	4b92      	ldr	r3, [pc, #584]	; (800700c <_strtod_l+0xbf4>)
 8006dc4:	403b      	ands	r3, r7
 8006dc6:	930d      	str	r3, [sp, #52]	; 0x34
 8006dc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dca:	4b91      	ldr	r3, [pc, #580]	; (8007010 <_strtod_l+0xbf8>)
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	f040 80b0 	bne.w	8006f32 <_strtod_l+0xb1a>
 8006dd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006dd6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006dda:	ec4b ab10 	vmov	d0, sl, fp
 8006dde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006de2:	f002 fa0f 	bl	8009204 <__ulp>
 8006de6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006dea:	ec53 2b10 	vmov	r2, r3, d0
 8006dee:	f7f9 fc2b 	bl	8000648 <__aeabi_dmul>
 8006df2:	4652      	mov	r2, sl
 8006df4:	465b      	mov	r3, fp
 8006df6:	f7f9 fa71 	bl	80002dc <__adddf3>
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4983      	ldr	r1, [pc, #524]	; (800700c <_strtod_l+0xbf4>)
 8006dfe:	4a85      	ldr	r2, [pc, #532]	; (8007014 <_strtod_l+0xbfc>)
 8006e00:	4019      	ands	r1, r3
 8006e02:	4291      	cmp	r1, r2
 8006e04:	4682      	mov	sl, r0
 8006e06:	d960      	bls.n	8006eca <_strtod_l+0xab2>
 8006e08:	ee18 3a90 	vmov	r3, s17
 8006e0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d104      	bne.n	8006e1e <_strtod_l+0xa06>
 8006e14:	ee18 3a10 	vmov	r3, s16
 8006e18:	3301      	adds	r3, #1
 8006e1a:	f43f ad45 	beq.w	80068a8 <_strtod_l+0x490>
 8006e1e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007020 <_strtod_l+0xc08>
 8006e22:	f04f 3aff 	mov.w	sl, #4294967295
 8006e26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f001 feb9 	bl	8008ba0 <_Bfree>
 8006e2e:	9905      	ldr	r1, [sp, #20]
 8006e30:	4620      	mov	r0, r4
 8006e32:	f001 feb5 	bl	8008ba0 <_Bfree>
 8006e36:	4631      	mov	r1, r6
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f001 feb1 	bl	8008ba0 <_Bfree>
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4620      	mov	r0, r4
 8006e42:	f001 fead 	bl	8008ba0 <_Bfree>
 8006e46:	e61a      	b.n	8006a7e <_strtod_l+0x666>
 8006e48:	f1ba 0f00 	cmp.w	sl, #0
 8006e4c:	d11b      	bne.n	8006e86 <_strtod_l+0xa6e>
 8006e4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e52:	b9f3      	cbnz	r3, 8006e92 <_strtod_l+0xa7a>
 8006e54:	4b6c      	ldr	r3, [pc, #432]	; (8007008 <_strtod_l+0xbf0>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	4640      	mov	r0, r8
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	f7f9 fe66 	bl	8000b2c <__aeabi_dcmplt>
 8006e60:	b9d0      	cbnz	r0, 8006e98 <_strtod_l+0xa80>
 8006e62:	4640      	mov	r0, r8
 8006e64:	4649      	mov	r1, r9
 8006e66:	4b6c      	ldr	r3, [pc, #432]	; (8007018 <_strtod_l+0xc00>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f7f9 fbed 	bl	8000648 <__aeabi_dmul>
 8006e6e:	4680      	mov	r8, r0
 8006e70:	4689      	mov	r9, r1
 8006e72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006e7a:	9315      	str	r3, [sp, #84]	; 0x54
 8006e7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006e80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e84:	e79d      	b.n	8006dc2 <_strtod_l+0x9aa>
 8006e86:	f1ba 0f01 	cmp.w	sl, #1
 8006e8a:	d102      	bne.n	8006e92 <_strtod_l+0xa7a>
 8006e8c:	2f00      	cmp	r7, #0
 8006e8e:	f43f ad83 	beq.w	8006998 <_strtod_l+0x580>
 8006e92:	4b62      	ldr	r3, [pc, #392]	; (800701c <_strtod_l+0xc04>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	e78e      	b.n	8006db6 <_strtod_l+0x99e>
 8006e98:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007018 <_strtod_l+0xc00>
 8006e9c:	f04f 0800 	mov.w	r8, #0
 8006ea0:	e7e7      	b.n	8006e72 <_strtod_l+0xa5a>
 8006ea2:	4b5d      	ldr	r3, [pc, #372]	; (8007018 <_strtod_l+0xc00>)
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f7f9 fbcd 	bl	8000648 <__aeabi_dmul>
 8006eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb0:	4680      	mov	r8, r0
 8006eb2:	4689      	mov	r9, r1
 8006eb4:	b933      	cbnz	r3, 8006ec4 <_strtod_l+0xaac>
 8006eb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006eba:	900e      	str	r0, [sp, #56]	; 0x38
 8006ebc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ebe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006ec2:	e7dd      	b.n	8006e80 <_strtod_l+0xa68>
 8006ec4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006ec8:	e7f9      	b.n	8006ebe <_strtod_l+0xaa6>
 8006eca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006ece:	9b04      	ldr	r3, [sp, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1a8      	bne.n	8006e26 <_strtod_l+0xa0e>
 8006ed4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006eda:	0d1b      	lsrs	r3, r3, #20
 8006edc:	051b      	lsls	r3, r3, #20
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d1a1      	bne.n	8006e26 <_strtod_l+0xa0e>
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	f7f9 ff0f 	bl	8000d08 <__aeabi_d2lz>
 8006eea:	f7f9 fb7f 	bl	80005ec <__aeabi_l2d>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	4649      	mov	r1, r9
 8006ef6:	f7f9 f9ef 	bl	80002d8 <__aeabi_dsub>
 8006efa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006efc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f00:	ea43 030a 	orr.w	r3, r3, sl
 8006f04:	4313      	orrs	r3, r2
 8006f06:	4680      	mov	r8, r0
 8006f08:	4689      	mov	r9, r1
 8006f0a:	d055      	beq.n	8006fb8 <_strtod_l+0xba0>
 8006f0c:	a336      	add	r3, pc, #216	; (adr r3, 8006fe8 <_strtod_l+0xbd0>)
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f7f9 fe0b 	bl	8000b2c <__aeabi_dcmplt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	f47f acd0 	bne.w	80068bc <_strtod_l+0x4a4>
 8006f1c:	a334      	add	r3, pc, #208	; (adr r3, 8006ff0 <_strtod_l+0xbd8>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	4640      	mov	r0, r8
 8006f24:	4649      	mov	r1, r9
 8006f26:	f7f9 fe1f 	bl	8000b68 <__aeabi_dcmpgt>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	f43f af7b 	beq.w	8006e26 <_strtod_l+0xa0e>
 8006f30:	e4c4      	b.n	80068bc <_strtod_l+0x4a4>
 8006f32:	9b04      	ldr	r3, [sp, #16]
 8006f34:	b333      	cbz	r3, 8006f84 <_strtod_l+0xb6c>
 8006f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f3c:	d822      	bhi.n	8006f84 <_strtod_l+0xb6c>
 8006f3e:	a32e      	add	r3, pc, #184	; (adr r3, 8006ff8 <_strtod_l+0xbe0>)
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	4640      	mov	r0, r8
 8006f46:	4649      	mov	r1, r9
 8006f48:	f7f9 fdfa 	bl	8000b40 <__aeabi_dcmple>
 8006f4c:	b1a0      	cbz	r0, 8006f78 <_strtod_l+0xb60>
 8006f4e:	4649      	mov	r1, r9
 8006f50:	4640      	mov	r0, r8
 8006f52:	f7f9 fe51 	bl	8000bf8 <__aeabi_d2uiz>
 8006f56:	2801      	cmp	r0, #1
 8006f58:	bf38      	it	cc
 8006f5a:	2001      	movcc	r0, #1
 8006f5c:	f7f9 fafa 	bl	8000554 <__aeabi_ui2d>
 8006f60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f62:	4680      	mov	r8, r0
 8006f64:	4689      	mov	r9, r1
 8006f66:	bb23      	cbnz	r3, 8006fb2 <_strtod_l+0xb9a>
 8006f68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f6c:	9010      	str	r0, [sp, #64]	; 0x40
 8006f6e:	9311      	str	r3, [sp, #68]	; 0x44
 8006f70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f7c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	9309      	str	r3, [sp, #36]	; 0x24
 8006f84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f88:	eeb0 0a48 	vmov.f32	s0, s16
 8006f8c:	eef0 0a68 	vmov.f32	s1, s17
 8006f90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006f94:	f002 f936 	bl	8009204 <__ulp>
 8006f98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f9c:	ec53 2b10 	vmov	r2, r3, d0
 8006fa0:	f7f9 fb52 	bl	8000648 <__aeabi_dmul>
 8006fa4:	ec53 2b18 	vmov	r2, r3, d8
 8006fa8:	f7f9 f998 	bl	80002dc <__adddf3>
 8006fac:	4682      	mov	sl, r0
 8006fae:	468b      	mov	fp, r1
 8006fb0:	e78d      	b.n	8006ece <_strtod_l+0xab6>
 8006fb2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006fb6:	e7db      	b.n	8006f70 <_strtod_l+0xb58>
 8006fb8:	a311      	add	r3, pc, #68	; (adr r3, 8007000 <_strtod_l+0xbe8>)
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	f7f9 fdb5 	bl	8000b2c <__aeabi_dcmplt>
 8006fc2:	e7b2      	b.n	8006f2a <_strtod_l+0xb12>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8006fc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006fca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	f7ff ba6b 	b.w	80064a8 <_strtod_l+0x90>
 8006fd2:	2a65      	cmp	r2, #101	; 0x65
 8006fd4:	f43f ab5f 	beq.w	8006696 <_strtod_l+0x27e>
 8006fd8:	2a45      	cmp	r2, #69	; 0x45
 8006fda:	f43f ab5c 	beq.w	8006696 <_strtod_l+0x27e>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f7ff bb94 	b.w	800670c <_strtod_l+0x2f4>
 8006fe4:	f3af 8000 	nop.w
 8006fe8:	94a03595 	.word	0x94a03595
 8006fec:	3fdfffff 	.word	0x3fdfffff
 8006ff0:	35afe535 	.word	0x35afe535
 8006ff4:	3fe00000 	.word	0x3fe00000
 8006ff8:	ffc00000 	.word	0xffc00000
 8006ffc:	41dfffff 	.word	0x41dfffff
 8007000:	94a03595 	.word	0x94a03595
 8007004:	3fcfffff 	.word	0x3fcfffff
 8007008:	3ff00000 	.word	0x3ff00000
 800700c:	7ff00000 	.word	0x7ff00000
 8007010:	7fe00000 	.word	0x7fe00000
 8007014:	7c9fffff 	.word	0x7c9fffff
 8007018:	3fe00000 	.word	0x3fe00000
 800701c:	bff00000 	.word	0xbff00000
 8007020:	7fefffff 	.word	0x7fefffff

08007024 <_strtod_r>:
 8007024:	4b01      	ldr	r3, [pc, #4]	; (800702c <_strtod_r+0x8>)
 8007026:	f7ff b9f7 	b.w	8006418 <_strtod_l>
 800702a:	bf00      	nop
 800702c:	20000074 	.word	0x20000074

08007030 <_strtol_l.constprop.0>:
 8007030:	2b01      	cmp	r3, #1
 8007032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007036:	d001      	beq.n	800703c <_strtol_l.constprop.0+0xc>
 8007038:	2b24      	cmp	r3, #36	; 0x24
 800703a:	d906      	bls.n	800704a <_strtol_l.constprop.0+0x1a>
 800703c:	f7fe fa5a 	bl	80054f4 <__errno>
 8007040:	2316      	movs	r3, #22
 8007042:	6003      	str	r3, [r0, #0]
 8007044:	2000      	movs	r0, #0
 8007046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007130 <_strtol_l.constprop.0+0x100>
 800704e:	460d      	mov	r5, r1
 8007050:	462e      	mov	r6, r5
 8007052:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007056:	f814 700c 	ldrb.w	r7, [r4, ip]
 800705a:	f017 0708 	ands.w	r7, r7, #8
 800705e:	d1f7      	bne.n	8007050 <_strtol_l.constprop.0+0x20>
 8007060:	2c2d      	cmp	r4, #45	; 0x2d
 8007062:	d132      	bne.n	80070ca <_strtol_l.constprop.0+0x9a>
 8007064:	782c      	ldrb	r4, [r5, #0]
 8007066:	2701      	movs	r7, #1
 8007068:	1cb5      	adds	r5, r6, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d05b      	beq.n	8007126 <_strtol_l.constprop.0+0xf6>
 800706e:	2b10      	cmp	r3, #16
 8007070:	d109      	bne.n	8007086 <_strtol_l.constprop.0+0x56>
 8007072:	2c30      	cmp	r4, #48	; 0x30
 8007074:	d107      	bne.n	8007086 <_strtol_l.constprop.0+0x56>
 8007076:	782c      	ldrb	r4, [r5, #0]
 8007078:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800707c:	2c58      	cmp	r4, #88	; 0x58
 800707e:	d14d      	bne.n	800711c <_strtol_l.constprop.0+0xec>
 8007080:	786c      	ldrb	r4, [r5, #1]
 8007082:	2310      	movs	r3, #16
 8007084:	3502      	adds	r5, #2
 8007086:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800708a:	f108 38ff 	add.w	r8, r8, #4294967295
 800708e:	f04f 0c00 	mov.w	ip, #0
 8007092:	fbb8 f9f3 	udiv	r9, r8, r3
 8007096:	4666      	mov	r6, ip
 8007098:	fb03 8a19 	mls	sl, r3, r9, r8
 800709c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80070a0:	f1be 0f09 	cmp.w	lr, #9
 80070a4:	d816      	bhi.n	80070d4 <_strtol_l.constprop.0+0xa4>
 80070a6:	4674      	mov	r4, lr
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	dd24      	ble.n	80070f6 <_strtol_l.constprop.0+0xc6>
 80070ac:	f1bc 0f00 	cmp.w	ip, #0
 80070b0:	db1e      	blt.n	80070f0 <_strtol_l.constprop.0+0xc0>
 80070b2:	45b1      	cmp	r9, r6
 80070b4:	d31c      	bcc.n	80070f0 <_strtol_l.constprop.0+0xc0>
 80070b6:	d101      	bne.n	80070bc <_strtol_l.constprop.0+0x8c>
 80070b8:	45a2      	cmp	sl, r4
 80070ba:	db19      	blt.n	80070f0 <_strtol_l.constprop.0+0xc0>
 80070bc:	fb06 4603 	mla	r6, r6, r3, r4
 80070c0:	f04f 0c01 	mov.w	ip, #1
 80070c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070c8:	e7e8      	b.n	800709c <_strtol_l.constprop.0+0x6c>
 80070ca:	2c2b      	cmp	r4, #43	; 0x2b
 80070cc:	bf04      	itt	eq
 80070ce:	782c      	ldrbeq	r4, [r5, #0]
 80070d0:	1cb5      	addeq	r5, r6, #2
 80070d2:	e7ca      	b.n	800706a <_strtol_l.constprop.0+0x3a>
 80070d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80070d8:	f1be 0f19 	cmp.w	lr, #25
 80070dc:	d801      	bhi.n	80070e2 <_strtol_l.constprop.0+0xb2>
 80070de:	3c37      	subs	r4, #55	; 0x37
 80070e0:	e7e2      	b.n	80070a8 <_strtol_l.constprop.0+0x78>
 80070e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80070e6:	f1be 0f19 	cmp.w	lr, #25
 80070ea:	d804      	bhi.n	80070f6 <_strtol_l.constprop.0+0xc6>
 80070ec:	3c57      	subs	r4, #87	; 0x57
 80070ee:	e7db      	b.n	80070a8 <_strtol_l.constprop.0+0x78>
 80070f0:	f04f 3cff 	mov.w	ip, #4294967295
 80070f4:	e7e6      	b.n	80070c4 <_strtol_l.constprop.0+0x94>
 80070f6:	f1bc 0f00 	cmp.w	ip, #0
 80070fa:	da05      	bge.n	8007108 <_strtol_l.constprop.0+0xd8>
 80070fc:	2322      	movs	r3, #34	; 0x22
 80070fe:	6003      	str	r3, [r0, #0]
 8007100:	4646      	mov	r6, r8
 8007102:	b942      	cbnz	r2, 8007116 <_strtol_l.constprop.0+0xe6>
 8007104:	4630      	mov	r0, r6
 8007106:	e79e      	b.n	8007046 <_strtol_l.constprop.0+0x16>
 8007108:	b107      	cbz	r7, 800710c <_strtol_l.constprop.0+0xdc>
 800710a:	4276      	negs	r6, r6
 800710c:	2a00      	cmp	r2, #0
 800710e:	d0f9      	beq.n	8007104 <_strtol_l.constprop.0+0xd4>
 8007110:	f1bc 0f00 	cmp.w	ip, #0
 8007114:	d000      	beq.n	8007118 <_strtol_l.constprop.0+0xe8>
 8007116:	1e69      	subs	r1, r5, #1
 8007118:	6011      	str	r1, [r2, #0]
 800711a:	e7f3      	b.n	8007104 <_strtol_l.constprop.0+0xd4>
 800711c:	2430      	movs	r4, #48	; 0x30
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1b1      	bne.n	8007086 <_strtol_l.constprop.0+0x56>
 8007122:	2308      	movs	r3, #8
 8007124:	e7af      	b.n	8007086 <_strtol_l.constprop.0+0x56>
 8007126:	2c30      	cmp	r4, #48	; 0x30
 8007128:	d0a5      	beq.n	8007076 <_strtol_l.constprop.0+0x46>
 800712a:	230a      	movs	r3, #10
 800712c:	e7ab      	b.n	8007086 <_strtol_l.constprop.0+0x56>
 800712e:	bf00      	nop
 8007130:	0800b449 	.word	0x0800b449

08007134 <_strtol_r>:
 8007134:	f7ff bf7c 	b.w	8007030 <_strtol_l.constprop.0>

08007138 <__swbuf_r>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	460e      	mov	r6, r1
 800713c:	4614      	mov	r4, r2
 800713e:	4605      	mov	r5, r0
 8007140:	b118      	cbz	r0, 800714a <__swbuf_r+0x12>
 8007142:	6983      	ldr	r3, [r0, #24]
 8007144:	b90b      	cbnz	r3, 800714a <__swbuf_r+0x12>
 8007146:	f001 f84b 	bl	80081e0 <__sinit>
 800714a:	4b21      	ldr	r3, [pc, #132]	; (80071d0 <__swbuf_r+0x98>)
 800714c:	429c      	cmp	r4, r3
 800714e:	d12b      	bne.n	80071a8 <__swbuf_r+0x70>
 8007150:	686c      	ldr	r4, [r5, #4]
 8007152:	69a3      	ldr	r3, [r4, #24]
 8007154:	60a3      	str	r3, [r4, #8]
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	071a      	lsls	r2, r3, #28
 800715a:	d52f      	bpl.n	80071bc <__swbuf_r+0x84>
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	b36b      	cbz	r3, 80071bc <__swbuf_r+0x84>
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	6820      	ldr	r0, [r4, #0]
 8007164:	1ac0      	subs	r0, r0, r3
 8007166:	6963      	ldr	r3, [r4, #20]
 8007168:	b2f6      	uxtb	r6, r6
 800716a:	4283      	cmp	r3, r0
 800716c:	4637      	mov	r7, r6
 800716e:	dc04      	bgt.n	800717a <__swbuf_r+0x42>
 8007170:	4621      	mov	r1, r4
 8007172:	4628      	mov	r0, r5
 8007174:	f000 ffa0 	bl	80080b8 <_fflush_r>
 8007178:	bb30      	cbnz	r0, 80071c8 <__swbuf_r+0x90>
 800717a:	68a3      	ldr	r3, [r4, #8]
 800717c:	3b01      	subs	r3, #1
 800717e:	60a3      	str	r3, [r4, #8]
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	6022      	str	r2, [r4, #0]
 8007186:	701e      	strb	r6, [r3, #0]
 8007188:	6963      	ldr	r3, [r4, #20]
 800718a:	3001      	adds	r0, #1
 800718c:	4283      	cmp	r3, r0
 800718e:	d004      	beq.n	800719a <__swbuf_r+0x62>
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	07db      	lsls	r3, r3, #31
 8007194:	d506      	bpl.n	80071a4 <__swbuf_r+0x6c>
 8007196:	2e0a      	cmp	r6, #10
 8007198:	d104      	bne.n	80071a4 <__swbuf_r+0x6c>
 800719a:	4621      	mov	r1, r4
 800719c:	4628      	mov	r0, r5
 800719e:	f000 ff8b 	bl	80080b8 <_fflush_r>
 80071a2:	b988      	cbnz	r0, 80071c8 <__swbuf_r+0x90>
 80071a4:	4638      	mov	r0, r7
 80071a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <__swbuf_r+0x9c>)
 80071aa:	429c      	cmp	r4, r3
 80071ac:	d101      	bne.n	80071b2 <__swbuf_r+0x7a>
 80071ae:	68ac      	ldr	r4, [r5, #8]
 80071b0:	e7cf      	b.n	8007152 <__swbuf_r+0x1a>
 80071b2:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <__swbuf_r+0xa0>)
 80071b4:	429c      	cmp	r4, r3
 80071b6:	bf08      	it	eq
 80071b8:	68ec      	ldreq	r4, [r5, #12]
 80071ba:	e7ca      	b.n	8007152 <__swbuf_r+0x1a>
 80071bc:	4621      	mov	r1, r4
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 f80c 	bl	80071dc <__swsetup_r>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d0cb      	beq.n	8007160 <__swbuf_r+0x28>
 80071c8:	f04f 37ff 	mov.w	r7, #4294967295
 80071cc:	e7ea      	b.n	80071a4 <__swbuf_r+0x6c>
 80071ce:	bf00      	nop
 80071d0:	0800b5fc 	.word	0x0800b5fc
 80071d4:	0800b61c 	.word	0x0800b61c
 80071d8:	0800b5dc 	.word	0x0800b5dc

080071dc <__swsetup_r>:
 80071dc:	4b32      	ldr	r3, [pc, #200]	; (80072a8 <__swsetup_r+0xcc>)
 80071de:	b570      	push	{r4, r5, r6, lr}
 80071e0:	681d      	ldr	r5, [r3, #0]
 80071e2:	4606      	mov	r6, r0
 80071e4:	460c      	mov	r4, r1
 80071e6:	b125      	cbz	r5, 80071f2 <__swsetup_r+0x16>
 80071e8:	69ab      	ldr	r3, [r5, #24]
 80071ea:	b913      	cbnz	r3, 80071f2 <__swsetup_r+0x16>
 80071ec:	4628      	mov	r0, r5
 80071ee:	f000 fff7 	bl	80081e0 <__sinit>
 80071f2:	4b2e      	ldr	r3, [pc, #184]	; (80072ac <__swsetup_r+0xd0>)
 80071f4:	429c      	cmp	r4, r3
 80071f6:	d10f      	bne.n	8007218 <__swsetup_r+0x3c>
 80071f8:	686c      	ldr	r4, [r5, #4]
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007200:	0719      	lsls	r1, r3, #28
 8007202:	d42c      	bmi.n	800725e <__swsetup_r+0x82>
 8007204:	06dd      	lsls	r5, r3, #27
 8007206:	d411      	bmi.n	800722c <__swsetup_r+0x50>
 8007208:	2309      	movs	r3, #9
 800720a:	6033      	str	r3, [r6, #0]
 800720c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	f04f 30ff 	mov.w	r0, #4294967295
 8007216:	e03e      	b.n	8007296 <__swsetup_r+0xba>
 8007218:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <__swsetup_r+0xd4>)
 800721a:	429c      	cmp	r4, r3
 800721c:	d101      	bne.n	8007222 <__swsetup_r+0x46>
 800721e:	68ac      	ldr	r4, [r5, #8]
 8007220:	e7eb      	b.n	80071fa <__swsetup_r+0x1e>
 8007222:	4b24      	ldr	r3, [pc, #144]	; (80072b4 <__swsetup_r+0xd8>)
 8007224:	429c      	cmp	r4, r3
 8007226:	bf08      	it	eq
 8007228:	68ec      	ldreq	r4, [r5, #12]
 800722a:	e7e6      	b.n	80071fa <__swsetup_r+0x1e>
 800722c:	0758      	lsls	r0, r3, #29
 800722e:	d512      	bpl.n	8007256 <__swsetup_r+0x7a>
 8007230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007232:	b141      	cbz	r1, 8007246 <__swsetup_r+0x6a>
 8007234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007238:	4299      	cmp	r1, r3
 800723a:	d002      	beq.n	8007242 <__swsetup_r+0x66>
 800723c:	4630      	mov	r0, r6
 800723e:	f002 f947 	bl	80094d0 <_free_r>
 8007242:	2300      	movs	r3, #0
 8007244:	6363      	str	r3, [r4, #52]	; 0x34
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800724c:	81a3      	strh	r3, [r4, #12]
 800724e:	2300      	movs	r3, #0
 8007250:	6063      	str	r3, [r4, #4]
 8007252:	6923      	ldr	r3, [r4, #16]
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	f043 0308 	orr.w	r3, r3, #8
 800725c:	81a3      	strh	r3, [r4, #12]
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	b94b      	cbnz	r3, 8007276 <__swsetup_r+0x9a>
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800726c:	d003      	beq.n	8007276 <__swsetup_r+0x9a>
 800726e:	4621      	mov	r1, r4
 8007270:	4630      	mov	r0, r6
 8007272:	f001 fbed 	bl	8008a50 <__smakebuf_r>
 8007276:	89a0      	ldrh	r0, [r4, #12]
 8007278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800727c:	f010 0301 	ands.w	r3, r0, #1
 8007280:	d00a      	beq.n	8007298 <__swsetup_r+0xbc>
 8007282:	2300      	movs	r3, #0
 8007284:	60a3      	str	r3, [r4, #8]
 8007286:	6963      	ldr	r3, [r4, #20]
 8007288:	425b      	negs	r3, r3
 800728a:	61a3      	str	r3, [r4, #24]
 800728c:	6923      	ldr	r3, [r4, #16]
 800728e:	b943      	cbnz	r3, 80072a2 <__swsetup_r+0xc6>
 8007290:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007294:	d1ba      	bne.n	800720c <__swsetup_r+0x30>
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	0781      	lsls	r1, r0, #30
 800729a:	bf58      	it	pl
 800729c:	6963      	ldrpl	r3, [r4, #20]
 800729e:	60a3      	str	r3, [r4, #8]
 80072a0:	e7f4      	b.n	800728c <__swsetup_r+0xb0>
 80072a2:	2000      	movs	r0, #0
 80072a4:	e7f7      	b.n	8007296 <__swsetup_r+0xba>
 80072a6:	bf00      	nop
 80072a8:	2000000c 	.word	0x2000000c
 80072ac:	0800b5fc 	.word	0x0800b5fc
 80072b0:	0800b61c 	.word	0x0800b61c
 80072b4:	0800b5dc 	.word	0x0800b5dc

080072b8 <quorem>:
 80072b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	6903      	ldr	r3, [r0, #16]
 80072be:	690c      	ldr	r4, [r1, #16]
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	4607      	mov	r7, r0
 80072c4:	f2c0 8081 	blt.w	80073ca <quorem+0x112>
 80072c8:	3c01      	subs	r4, #1
 80072ca:	f101 0814 	add.w	r8, r1, #20
 80072ce:	f100 0514 	add.w	r5, r0, #20
 80072d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072d6:	9301      	str	r3, [sp, #4]
 80072d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072e0:	3301      	adds	r3, #1
 80072e2:	429a      	cmp	r2, r3
 80072e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80072f0:	d331      	bcc.n	8007356 <quorem+0x9e>
 80072f2:	f04f 0e00 	mov.w	lr, #0
 80072f6:	4640      	mov	r0, r8
 80072f8:	46ac      	mov	ip, r5
 80072fa:	46f2      	mov	sl, lr
 80072fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007300:	b293      	uxth	r3, r2
 8007302:	fb06 e303 	mla	r3, r6, r3, lr
 8007306:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800730a:	b29b      	uxth	r3, r3
 800730c:	ebaa 0303 	sub.w	r3, sl, r3
 8007310:	f8dc a000 	ldr.w	sl, [ip]
 8007314:	0c12      	lsrs	r2, r2, #16
 8007316:	fa13 f38a 	uxtah	r3, r3, sl
 800731a:	fb06 e202 	mla	r2, r6, r2, lr
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	9b00      	ldr	r3, [sp, #0]
 8007322:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007326:	b292      	uxth	r2, r2
 8007328:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800732c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007330:	f8bd 3000 	ldrh.w	r3, [sp]
 8007334:	4581      	cmp	r9, r0
 8007336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800733a:	f84c 3b04 	str.w	r3, [ip], #4
 800733e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007342:	d2db      	bcs.n	80072fc <quorem+0x44>
 8007344:	f855 300b 	ldr.w	r3, [r5, fp]
 8007348:	b92b      	cbnz	r3, 8007356 <quorem+0x9e>
 800734a:	9b01      	ldr	r3, [sp, #4]
 800734c:	3b04      	subs	r3, #4
 800734e:	429d      	cmp	r5, r3
 8007350:	461a      	mov	r2, r3
 8007352:	d32e      	bcc.n	80073b2 <quorem+0xfa>
 8007354:	613c      	str	r4, [r7, #16]
 8007356:	4638      	mov	r0, r7
 8007358:	f001 feae 	bl	80090b8 <__mcmp>
 800735c:	2800      	cmp	r0, #0
 800735e:	db24      	blt.n	80073aa <quorem+0xf2>
 8007360:	3601      	adds	r6, #1
 8007362:	4628      	mov	r0, r5
 8007364:	f04f 0c00 	mov.w	ip, #0
 8007368:	f858 2b04 	ldr.w	r2, [r8], #4
 800736c:	f8d0 e000 	ldr.w	lr, [r0]
 8007370:	b293      	uxth	r3, r2
 8007372:	ebac 0303 	sub.w	r3, ip, r3
 8007376:	0c12      	lsrs	r2, r2, #16
 8007378:	fa13 f38e 	uxtah	r3, r3, lr
 800737c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007380:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007384:	b29b      	uxth	r3, r3
 8007386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800738a:	45c1      	cmp	r9, r8
 800738c:	f840 3b04 	str.w	r3, [r0], #4
 8007390:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007394:	d2e8      	bcs.n	8007368 <quorem+0xb0>
 8007396:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800739a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800739e:	b922      	cbnz	r2, 80073aa <quorem+0xf2>
 80073a0:	3b04      	subs	r3, #4
 80073a2:	429d      	cmp	r5, r3
 80073a4:	461a      	mov	r2, r3
 80073a6:	d30a      	bcc.n	80073be <quorem+0x106>
 80073a8:	613c      	str	r4, [r7, #16]
 80073aa:	4630      	mov	r0, r6
 80073ac:	b003      	add	sp, #12
 80073ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b2:	6812      	ldr	r2, [r2, #0]
 80073b4:	3b04      	subs	r3, #4
 80073b6:	2a00      	cmp	r2, #0
 80073b8:	d1cc      	bne.n	8007354 <quorem+0x9c>
 80073ba:	3c01      	subs	r4, #1
 80073bc:	e7c7      	b.n	800734e <quorem+0x96>
 80073be:	6812      	ldr	r2, [r2, #0]
 80073c0:	3b04      	subs	r3, #4
 80073c2:	2a00      	cmp	r2, #0
 80073c4:	d1f0      	bne.n	80073a8 <quorem+0xf0>
 80073c6:	3c01      	subs	r4, #1
 80073c8:	e7eb      	b.n	80073a2 <quorem+0xea>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e7ee      	b.n	80073ac <quorem+0xf4>
	...

080073d0 <_dtoa_r>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	ed2d 8b04 	vpush	{d8-d9}
 80073d8:	ec57 6b10 	vmov	r6, r7, d0
 80073dc:	b093      	sub	sp, #76	; 0x4c
 80073de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80073e4:	9106      	str	r1, [sp, #24]
 80073e6:	ee10 aa10 	vmov	sl, s0
 80073ea:	4604      	mov	r4, r0
 80073ec:	9209      	str	r2, [sp, #36]	; 0x24
 80073ee:	930c      	str	r3, [sp, #48]	; 0x30
 80073f0:	46bb      	mov	fp, r7
 80073f2:	b975      	cbnz	r5, 8007412 <_dtoa_r+0x42>
 80073f4:	2010      	movs	r0, #16
 80073f6:	f001 fb6b 	bl	8008ad0 <malloc>
 80073fa:	4602      	mov	r2, r0
 80073fc:	6260      	str	r0, [r4, #36]	; 0x24
 80073fe:	b920      	cbnz	r0, 800740a <_dtoa_r+0x3a>
 8007400:	4ba7      	ldr	r3, [pc, #668]	; (80076a0 <_dtoa_r+0x2d0>)
 8007402:	21ea      	movs	r1, #234	; 0xea
 8007404:	48a7      	ldr	r0, [pc, #668]	; (80076a4 <_dtoa_r+0x2d4>)
 8007406:	f002 fcd1 	bl	8009dac <__assert_func>
 800740a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800740e:	6005      	str	r5, [r0, #0]
 8007410:	60c5      	str	r5, [r0, #12]
 8007412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007414:	6819      	ldr	r1, [r3, #0]
 8007416:	b151      	cbz	r1, 800742e <_dtoa_r+0x5e>
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	604a      	str	r2, [r1, #4]
 800741c:	2301      	movs	r3, #1
 800741e:	4093      	lsls	r3, r2
 8007420:	608b      	str	r3, [r1, #8]
 8007422:	4620      	mov	r0, r4
 8007424:	f001 fbbc 	bl	8008ba0 <_Bfree>
 8007428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	1e3b      	subs	r3, r7, #0
 8007430:	bfaa      	itet	ge
 8007432:	2300      	movge	r3, #0
 8007434:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007438:	f8c8 3000 	strge.w	r3, [r8]
 800743c:	4b9a      	ldr	r3, [pc, #616]	; (80076a8 <_dtoa_r+0x2d8>)
 800743e:	bfbc      	itt	lt
 8007440:	2201      	movlt	r2, #1
 8007442:	f8c8 2000 	strlt.w	r2, [r8]
 8007446:	ea33 030b 	bics.w	r3, r3, fp
 800744a:	d11b      	bne.n	8007484 <_dtoa_r+0xb4>
 800744c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800744e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007458:	4333      	orrs	r3, r6
 800745a:	f000 8592 	beq.w	8007f82 <_dtoa_r+0xbb2>
 800745e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007460:	b963      	cbnz	r3, 800747c <_dtoa_r+0xac>
 8007462:	4b92      	ldr	r3, [pc, #584]	; (80076ac <_dtoa_r+0x2dc>)
 8007464:	e022      	b.n	80074ac <_dtoa_r+0xdc>
 8007466:	4b92      	ldr	r3, [pc, #584]	; (80076b0 <_dtoa_r+0x2e0>)
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	3308      	adds	r3, #8
 800746c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	9801      	ldr	r0, [sp, #4]
 8007472:	b013      	add	sp, #76	; 0x4c
 8007474:	ecbd 8b04 	vpop	{d8-d9}
 8007478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800747c:	4b8b      	ldr	r3, [pc, #556]	; (80076ac <_dtoa_r+0x2dc>)
 800747e:	9301      	str	r3, [sp, #4]
 8007480:	3303      	adds	r3, #3
 8007482:	e7f3      	b.n	800746c <_dtoa_r+0x9c>
 8007484:	2200      	movs	r2, #0
 8007486:	2300      	movs	r3, #0
 8007488:	4650      	mov	r0, sl
 800748a:	4659      	mov	r1, fp
 800748c:	f7f9 fb44 	bl	8000b18 <__aeabi_dcmpeq>
 8007490:	ec4b ab19 	vmov	d9, sl, fp
 8007494:	4680      	mov	r8, r0
 8007496:	b158      	cbz	r0, 80074b0 <_dtoa_r+0xe0>
 8007498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800749a:	2301      	movs	r3, #1
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 856b 	beq.w	8007f7c <_dtoa_r+0xbac>
 80074a6:	4883      	ldr	r0, [pc, #524]	; (80076b4 <_dtoa_r+0x2e4>)
 80074a8:	6018      	str	r0, [r3, #0]
 80074aa:	1e43      	subs	r3, r0, #1
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	e7df      	b.n	8007470 <_dtoa_r+0xa0>
 80074b0:	ec4b ab10 	vmov	d0, sl, fp
 80074b4:	aa10      	add	r2, sp, #64	; 0x40
 80074b6:	a911      	add	r1, sp, #68	; 0x44
 80074b8:	4620      	mov	r0, r4
 80074ba:	f001 ff1f 	bl	80092fc <__d2b>
 80074be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80074c2:	ee08 0a10 	vmov	s16, r0
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	f000 8084 	beq.w	80075d4 <_dtoa_r+0x204>
 80074cc:	ee19 3a90 	vmov	r3, s19
 80074d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80074d8:	4656      	mov	r6, sl
 80074da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80074de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80074e6:	4b74      	ldr	r3, [pc, #464]	; (80076b8 <_dtoa_r+0x2e8>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	4630      	mov	r0, r6
 80074ec:	4639      	mov	r1, r7
 80074ee:	f7f8 fef3 	bl	80002d8 <__aeabi_dsub>
 80074f2:	a365      	add	r3, pc, #404	; (adr r3, 8007688 <_dtoa_r+0x2b8>)
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	f7f9 f8a6 	bl	8000648 <__aeabi_dmul>
 80074fc:	a364      	add	r3, pc, #400	; (adr r3, 8007690 <_dtoa_r+0x2c0>)
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	f7f8 feeb 	bl	80002dc <__adddf3>
 8007506:	4606      	mov	r6, r0
 8007508:	4628      	mov	r0, r5
 800750a:	460f      	mov	r7, r1
 800750c:	f7f9 f832 	bl	8000574 <__aeabi_i2d>
 8007510:	a361      	add	r3, pc, #388	; (adr r3, 8007698 <_dtoa_r+0x2c8>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f9 f897 	bl	8000648 <__aeabi_dmul>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4630      	mov	r0, r6
 8007520:	4639      	mov	r1, r7
 8007522:	f7f8 fedb 	bl	80002dc <__adddf3>
 8007526:	4606      	mov	r6, r0
 8007528:	460f      	mov	r7, r1
 800752a:	f7f9 fb3d 	bl	8000ba8 <__aeabi_d2iz>
 800752e:	2200      	movs	r2, #0
 8007530:	9000      	str	r0, [sp, #0]
 8007532:	2300      	movs	r3, #0
 8007534:	4630      	mov	r0, r6
 8007536:	4639      	mov	r1, r7
 8007538:	f7f9 faf8 	bl	8000b2c <__aeabi_dcmplt>
 800753c:	b150      	cbz	r0, 8007554 <_dtoa_r+0x184>
 800753e:	9800      	ldr	r0, [sp, #0]
 8007540:	f7f9 f818 	bl	8000574 <__aeabi_i2d>
 8007544:	4632      	mov	r2, r6
 8007546:	463b      	mov	r3, r7
 8007548:	f7f9 fae6 	bl	8000b18 <__aeabi_dcmpeq>
 800754c:	b910      	cbnz	r0, 8007554 <_dtoa_r+0x184>
 800754e:	9b00      	ldr	r3, [sp, #0]
 8007550:	3b01      	subs	r3, #1
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	9b00      	ldr	r3, [sp, #0]
 8007556:	2b16      	cmp	r3, #22
 8007558:	d85a      	bhi.n	8007610 <_dtoa_r+0x240>
 800755a:	9a00      	ldr	r2, [sp, #0]
 800755c:	4b57      	ldr	r3, [pc, #348]	; (80076bc <_dtoa_r+0x2ec>)
 800755e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	ec51 0b19 	vmov	r0, r1, d9
 800756a:	f7f9 fadf 	bl	8000b2c <__aeabi_dcmplt>
 800756e:	2800      	cmp	r0, #0
 8007570:	d050      	beq.n	8007614 <_dtoa_r+0x244>
 8007572:	9b00      	ldr	r3, [sp, #0]
 8007574:	3b01      	subs	r3, #1
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	2300      	movs	r3, #0
 800757a:	930b      	str	r3, [sp, #44]	; 0x2c
 800757c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800757e:	1b5d      	subs	r5, r3, r5
 8007580:	1e6b      	subs	r3, r5, #1
 8007582:	9305      	str	r3, [sp, #20]
 8007584:	bf45      	ittet	mi
 8007586:	f1c5 0301 	rsbmi	r3, r5, #1
 800758a:	9304      	strmi	r3, [sp, #16]
 800758c:	2300      	movpl	r3, #0
 800758e:	2300      	movmi	r3, #0
 8007590:	bf4c      	ite	mi
 8007592:	9305      	strmi	r3, [sp, #20]
 8007594:	9304      	strpl	r3, [sp, #16]
 8007596:	9b00      	ldr	r3, [sp, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	db3d      	blt.n	8007618 <_dtoa_r+0x248>
 800759c:	9b05      	ldr	r3, [sp, #20]
 800759e:	9a00      	ldr	r2, [sp, #0]
 80075a0:	920a      	str	r2, [sp, #40]	; 0x28
 80075a2:	4413      	add	r3, r2
 80075a4:	9305      	str	r3, [sp, #20]
 80075a6:	2300      	movs	r3, #0
 80075a8:	9307      	str	r3, [sp, #28]
 80075aa:	9b06      	ldr	r3, [sp, #24]
 80075ac:	2b09      	cmp	r3, #9
 80075ae:	f200 8089 	bhi.w	80076c4 <_dtoa_r+0x2f4>
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	bfc4      	itt	gt
 80075b6:	3b04      	subgt	r3, #4
 80075b8:	9306      	strgt	r3, [sp, #24]
 80075ba:	9b06      	ldr	r3, [sp, #24]
 80075bc:	f1a3 0302 	sub.w	r3, r3, #2
 80075c0:	bfcc      	ite	gt
 80075c2:	2500      	movgt	r5, #0
 80075c4:	2501      	movle	r5, #1
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	f200 8087 	bhi.w	80076da <_dtoa_r+0x30a>
 80075cc:	e8df f003 	tbb	[pc, r3]
 80075d0:	59383a2d 	.word	0x59383a2d
 80075d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80075d8:	441d      	add	r5, r3
 80075da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80075de:	2b20      	cmp	r3, #32
 80075e0:	bfc1      	itttt	gt
 80075e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80075e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80075ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80075ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80075f2:	bfda      	itte	le
 80075f4:	f1c3 0320 	rsble	r3, r3, #32
 80075f8:	fa06 f003 	lslle.w	r0, r6, r3
 80075fc:	4318      	orrgt	r0, r3
 80075fe:	f7f8 ffa9 	bl	8000554 <__aeabi_ui2d>
 8007602:	2301      	movs	r3, #1
 8007604:	4606      	mov	r6, r0
 8007606:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800760a:	3d01      	subs	r5, #1
 800760c:	930e      	str	r3, [sp, #56]	; 0x38
 800760e:	e76a      	b.n	80074e6 <_dtoa_r+0x116>
 8007610:	2301      	movs	r3, #1
 8007612:	e7b2      	b.n	800757a <_dtoa_r+0x1aa>
 8007614:	900b      	str	r0, [sp, #44]	; 0x2c
 8007616:	e7b1      	b.n	800757c <_dtoa_r+0x1ac>
 8007618:	9b04      	ldr	r3, [sp, #16]
 800761a:	9a00      	ldr	r2, [sp, #0]
 800761c:	1a9b      	subs	r3, r3, r2
 800761e:	9304      	str	r3, [sp, #16]
 8007620:	4253      	negs	r3, r2
 8007622:	9307      	str	r3, [sp, #28]
 8007624:	2300      	movs	r3, #0
 8007626:	930a      	str	r3, [sp, #40]	; 0x28
 8007628:	e7bf      	b.n	80075aa <_dtoa_r+0x1da>
 800762a:	2300      	movs	r3, #0
 800762c:	9308      	str	r3, [sp, #32]
 800762e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	dc55      	bgt.n	80076e0 <_dtoa_r+0x310>
 8007634:	2301      	movs	r3, #1
 8007636:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800763a:	461a      	mov	r2, r3
 800763c:	9209      	str	r2, [sp, #36]	; 0x24
 800763e:	e00c      	b.n	800765a <_dtoa_r+0x28a>
 8007640:	2301      	movs	r3, #1
 8007642:	e7f3      	b.n	800762c <_dtoa_r+0x25c>
 8007644:	2300      	movs	r3, #0
 8007646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007648:	9308      	str	r3, [sp, #32]
 800764a:	9b00      	ldr	r3, [sp, #0]
 800764c:	4413      	add	r3, r2
 800764e:	9302      	str	r3, [sp, #8]
 8007650:	3301      	adds	r3, #1
 8007652:	2b01      	cmp	r3, #1
 8007654:	9303      	str	r3, [sp, #12]
 8007656:	bfb8      	it	lt
 8007658:	2301      	movlt	r3, #1
 800765a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800765c:	2200      	movs	r2, #0
 800765e:	6042      	str	r2, [r0, #4]
 8007660:	2204      	movs	r2, #4
 8007662:	f102 0614 	add.w	r6, r2, #20
 8007666:	429e      	cmp	r6, r3
 8007668:	6841      	ldr	r1, [r0, #4]
 800766a:	d93d      	bls.n	80076e8 <_dtoa_r+0x318>
 800766c:	4620      	mov	r0, r4
 800766e:	f001 fa57 	bl	8008b20 <_Balloc>
 8007672:	9001      	str	r0, [sp, #4]
 8007674:	2800      	cmp	r0, #0
 8007676:	d13b      	bne.n	80076f0 <_dtoa_r+0x320>
 8007678:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <_dtoa_r+0x2f0>)
 800767a:	4602      	mov	r2, r0
 800767c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007680:	e6c0      	b.n	8007404 <_dtoa_r+0x34>
 8007682:	2301      	movs	r3, #1
 8007684:	e7df      	b.n	8007646 <_dtoa_r+0x276>
 8007686:	bf00      	nop
 8007688:	636f4361 	.word	0x636f4361
 800768c:	3fd287a7 	.word	0x3fd287a7
 8007690:	8b60c8b3 	.word	0x8b60c8b3
 8007694:	3fc68a28 	.word	0x3fc68a28
 8007698:	509f79fb 	.word	0x509f79fb
 800769c:	3fd34413 	.word	0x3fd34413
 80076a0:	0800b556 	.word	0x0800b556
 80076a4:	0800b56d 	.word	0x0800b56d
 80076a8:	7ff00000 	.word	0x7ff00000
 80076ac:	0800b552 	.word	0x0800b552
 80076b0:	0800b549 	.word	0x0800b549
 80076b4:	0800b3c9 	.word	0x0800b3c9
 80076b8:	3ff80000 	.word	0x3ff80000
 80076bc:	0800b740 	.word	0x0800b740
 80076c0:	0800b5c8 	.word	0x0800b5c8
 80076c4:	2501      	movs	r5, #1
 80076c6:	2300      	movs	r3, #0
 80076c8:	9306      	str	r3, [sp, #24]
 80076ca:	9508      	str	r5, [sp, #32]
 80076cc:	f04f 33ff 	mov.w	r3, #4294967295
 80076d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076d4:	2200      	movs	r2, #0
 80076d6:	2312      	movs	r3, #18
 80076d8:	e7b0      	b.n	800763c <_dtoa_r+0x26c>
 80076da:	2301      	movs	r3, #1
 80076dc:	9308      	str	r3, [sp, #32]
 80076de:	e7f5      	b.n	80076cc <_dtoa_r+0x2fc>
 80076e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076e6:	e7b8      	b.n	800765a <_dtoa_r+0x28a>
 80076e8:	3101      	adds	r1, #1
 80076ea:	6041      	str	r1, [r0, #4]
 80076ec:	0052      	lsls	r2, r2, #1
 80076ee:	e7b8      	b.n	8007662 <_dtoa_r+0x292>
 80076f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076f2:	9a01      	ldr	r2, [sp, #4]
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	2b0e      	cmp	r3, #14
 80076fa:	f200 809d 	bhi.w	8007838 <_dtoa_r+0x468>
 80076fe:	2d00      	cmp	r5, #0
 8007700:	f000 809a 	beq.w	8007838 <_dtoa_r+0x468>
 8007704:	9b00      	ldr	r3, [sp, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	dd32      	ble.n	8007770 <_dtoa_r+0x3a0>
 800770a:	4ab7      	ldr	r2, [pc, #732]	; (80079e8 <_dtoa_r+0x618>)
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007714:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007718:	9b00      	ldr	r3, [sp, #0]
 800771a:	05d8      	lsls	r0, r3, #23
 800771c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007720:	d516      	bpl.n	8007750 <_dtoa_r+0x380>
 8007722:	4bb2      	ldr	r3, [pc, #712]	; (80079ec <_dtoa_r+0x61c>)
 8007724:	ec51 0b19 	vmov	r0, r1, d9
 8007728:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800772c:	f7f9 f8b6 	bl	800089c <__aeabi_ddiv>
 8007730:	f007 070f 	and.w	r7, r7, #15
 8007734:	4682      	mov	sl, r0
 8007736:	468b      	mov	fp, r1
 8007738:	2503      	movs	r5, #3
 800773a:	4eac      	ldr	r6, [pc, #688]	; (80079ec <_dtoa_r+0x61c>)
 800773c:	b957      	cbnz	r7, 8007754 <_dtoa_r+0x384>
 800773e:	4642      	mov	r2, r8
 8007740:	464b      	mov	r3, r9
 8007742:	4650      	mov	r0, sl
 8007744:	4659      	mov	r1, fp
 8007746:	f7f9 f8a9 	bl	800089c <__aeabi_ddiv>
 800774a:	4682      	mov	sl, r0
 800774c:	468b      	mov	fp, r1
 800774e:	e028      	b.n	80077a2 <_dtoa_r+0x3d2>
 8007750:	2502      	movs	r5, #2
 8007752:	e7f2      	b.n	800773a <_dtoa_r+0x36a>
 8007754:	07f9      	lsls	r1, r7, #31
 8007756:	d508      	bpl.n	800776a <_dtoa_r+0x39a>
 8007758:	4640      	mov	r0, r8
 800775a:	4649      	mov	r1, r9
 800775c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007760:	f7f8 ff72 	bl	8000648 <__aeabi_dmul>
 8007764:	3501      	adds	r5, #1
 8007766:	4680      	mov	r8, r0
 8007768:	4689      	mov	r9, r1
 800776a:	107f      	asrs	r7, r7, #1
 800776c:	3608      	adds	r6, #8
 800776e:	e7e5      	b.n	800773c <_dtoa_r+0x36c>
 8007770:	f000 809b 	beq.w	80078aa <_dtoa_r+0x4da>
 8007774:	9b00      	ldr	r3, [sp, #0]
 8007776:	4f9d      	ldr	r7, [pc, #628]	; (80079ec <_dtoa_r+0x61c>)
 8007778:	425e      	negs	r6, r3
 800777a:	4b9b      	ldr	r3, [pc, #620]	; (80079e8 <_dtoa_r+0x618>)
 800777c:	f006 020f 	and.w	r2, r6, #15
 8007780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	ec51 0b19 	vmov	r0, r1, d9
 800778c:	f7f8 ff5c 	bl	8000648 <__aeabi_dmul>
 8007790:	1136      	asrs	r6, r6, #4
 8007792:	4682      	mov	sl, r0
 8007794:	468b      	mov	fp, r1
 8007796:	2300      	movs	r3, #0
 8007798:	2502      	movs	r5, #2
 800779a:	2e00      	cmp	r6, #0
 800779c:	d17a      	bne.n	8007894 <_dtoa_r+0x4c4>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1d3      	bne.n	800774a <_dtoa_r+0x37a>
 80077a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 8082 	beq.w	80078ae <_dtoa_r+0x4de>
 80077aa:	4b91      	ldr	r3, [pc, #580]	; (80079f0 <_dtoa_r+0x620>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	4650      	mov	r0, sl
 80077b0:	4659      	mov	r1, fp
 80077b2:	f7f9 f9bb 	bl	8000b2c <__aeabi_dcmplt>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d079      	beq.n	80078ae <_dtoa_r+0x4de>
 80077ba:	9b03      	ldr	r3, [sp, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d076      	beq.n	80078ae <_dtoa_r+0x4de>
 80077c0:	9b02      	ldr	r3, [sp, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	dd36      	ble.n	8007834 <_dtoa_r+0x464>
 80077c6:	9b00      	ldr	r3, [sp, #0]
 80077c8:	4650      	mov	r0, sl
 80077ca:	4659      	mov	r1, fp
 80077cc:	1e5f      	subs	r7, r3, #1
 80077ce:	2200      	movs	r2, #0
 80077d0:	4b88      	ldr	r3, [pc, #544]	; (80079f4 <_dtoa_r+0x624>)
 80077d2:	f7f8 ff39 	bl	8000648 <__aeabi_dmul>
 80077d6:	9e02      	ldr	r6, [sp, #8]
 80077d8:	4682      	mov	sl, r0
 80077da:	468b      	mov	fp, r1
 80077dc:	3501      	adds	r5, #1
 80077de:	4628      	mov	r0, r5
 80077e0:	f7f8 fec8 	bl	8000574 <__aeabi_i2d>
 80077e4:	4652      	mov	r2, sl
 80077e6:	465b      	mov	r3, fp
 80077e8:	f7f8 ff2e 	bl	8000648 <__aeabi_dmul>
 80077ec:	4b82      	ldr	r3, [pc, #520]	; (80079f8 <_dtoa_r+0x628>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	f7f8 fd74 	bl	80002dc <__adddf3>
 80077f4:	46d0      	mov	r8, sl
 80077f6:	46d9      	mov	r9, fp
 80077f8:	4682      	mov	sl, r0
 80077fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80077fe:	2e00      	cmp	r6, #0
 8007800:	d158      	bne.n	80078b4 <_dtoa_r+0x4e4>
 8007802:	4b7e      	ldr	r3, [pc, #504]	; (80079fc <_dtoa_r+0x62c>)
 8007804:	2200      	movs	r2, #0
 8007806:	4640      	mov	r0, r8
 8007808:	4649      	mov	r1, r9
 800780a:	f7f8 fd65 	bl	80002d8 <__aeabi_dsub>
 800780e:	4652      	mov	r2, sl
 8007810:	465b      	mov	r3, fp
 8007812:	4680      	mov	r8, r0
 8007814:	4689      	mov	r9, r1
 8007816:	f7f9 f9a7 	bl	8000b68 <__aeabi_dcmpgt>
 800781a:	2800      	cmp	r0, #0
 800781c:	f040 8295 	bne.w	8007d4a <_dtoa_r+0x97a>
 8007820:	4652      	mov	r2, sl
 8007822:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007826:	4640      	mov	r0, r8
 8007828:	4649      	mov	r1, r9
 800782a:	f7f9 f97f 	bl	8000b2c <__aeabi_dcmplt>
 800782e:	2800      	cmp	r0, #0
 8007830:	f040 8289 	bne.w	8007d46 <_dtoa_r+0x976>
 8007834:	ec5b ab19 	vmov	sl, fp, d9
 8007838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800783a:	2b00      	cmp	r3, #0
 800783c:	f2c0 8148 	blt.w	8007ad0 <_dtoa_r+0x700>
 8007840:	9a00      	ldr	r2, [sp, #0]
 8007842:	2a0e      	cmp	r2, #14
 8007844:	f300 8144 	bgt.w	8007ad0 <_dtoa_r+0x700>
 8007848:	4b67      	ldr	r3, [pc, #412]	; (80079e8 <_dtoa_r+0x618>)
 800784a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800784e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007854:	2b00      	cmp	r3, #0
 8007856:	f280 80d5 	bge.w	8007a04 <_dtoa_r+0x634>
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f300 80d1 	bgt.w	8007a04 <_dtoa_r+0x634>
 8007862:	f040 826f 	bne.w	8007d44 <_dtoa_r+0x974>
 8007866:	4b65      	ldr	r3, [pc, #404]	; (80079fc <_dtoa_r+0x62c>)
 8007868:	2200      	movs	r2, #0
 800786a:	4640      	mov	r0, r8
 800786c:	4649      	mov	r1, r9
 800786e:	f7f8 feeb 	bl	8000648 <__aeabi_dmul>
 8007872:	4652      	mov	r2, sl
 8007874:	465b      	mov	r3, fp
 8007876:	f7f9 f96d 	bl	8000b54 <__aeabi_dcmpge>
 800787a:	9e03      	ldr	r6, [sp, #12]
 800787c:	4637      	mov	r7, r6
 800787e:	2800      	cmp	r0, #0
 8007880:	f040 8245 	bne.w	8007d0e <_dtoa_r+0x93e>
 8007884:	9d01      	ldr	r5, [sp, #4]
 8007886:	2331      	movs	r3, #49	; 0x31
 8007888:	f805 3b01 	strb.w	r3, [r5], #1
 800788c:	9b00      	ldr	r3, [sp, #0]
 800788e:	3301      	adds	r3, #1
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	e240      	b.n	8007d16 <_dtoa_r+0x946>
 8007894:	07f2      	lsls	r2, r6, #31
 8007896:	d505      	bpl.n	80078a4 <_dtoa_r+0x4d4>
 8007898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800789c:	f7f8 fed4 	bl	8000648 <__aeabi_dmul>
 80078a0:	3501      	adds	r5, #1
 80078a2:	2301      	movs	r3, #1
 80078a4:	1076      	asrs	r6, r6, #1
 80078a6:	3708      	adds	r7, #8
 80078a8:	e777      	b.n	800779a <_dtoa_r+0x3ca>
 80078aa:	2502      	movs	r5, #2
 80078ac:	e779      	b.n	80077a2 <_dtoa_r+0x3d2>
 80078ae:	9f00      	ldr	r7, [sp, #0]
 80078b0:	9e03      	ldr	r6, [sp, #12]
 80078b2:	e794      	b.n	80077de <_dtoa_r+0x40e>
 80078b4:	9901      	ldr	r1, [sp, #4]
 80078b6:	4b4c      	ldr	r3, [pc, #304]	; (80079e8 <_dtoa_r+0x618>)
 80078b8:	4431      	add	r1, r6
 80078ba:	910d      	str	r1, [sp, #52]	; 0x34
 80078bc:	9908      	ldr	r1, [sp, #32]
 80078be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80078c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078c6:	2900      	cmp	r1, #0
 80078c8:	d043      	beq.n	8007952 <_dtoa_r+0x582>
 80078ca:	494d      	ldr	r1, [pc, #308]	; (8007a00 <_dtoa_r+0x630>)
 80078cc:	2000      	movs	r0, #0
 80078ce:	f7f8 ffe5 	bl	800089c <__aeabi_ddiv>
 80078d2:	4652      	mov	r2, sl
 80078d4:	465b      	mov	r3, fp
 80078d6:	f7f8 fcff 	bl	80002d8 <__aeabi_dsub>
 80078da:	9d01      	ldr	r5, [sp, #4]
 80078dc:	4682      	mov	sl, r0
 80078de:	468b      	mov	fp, r1
 80078e0:	4649      	mov	r1, r9
 80078e2:	4640      	mov	r0, r8
 80078e4:	f7f9 f960 	bl	8000ba8 <__aeabi_d2iz>
 80078e8:	4606      	mov	r6, r0
 80078ea:	f7f8 fe43 	bl	8000574 <__aeabi_i2d>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4640      	mov	r0, r8
 80078f4:	4649      	mov	r1, r9
 80078f6:	f7f8 fcef 	bl	80002d8 <__aeabi_dsub>
 80078fa:	3630      	adds	r6, #48	; 0x30
 80078fc:	f805 6b01 	strb.w	r6, [r5], #1
 8007900:	4652      	mov	r2, sl
 8007902:	465b      	mov	r3, fp
 8007904:	4680      	mov	r8, r0
 8007906:	4689      	mov	r9, r1
 8007908:	f7f9 f910 	bl	8000b2c <__aeabi_dcmplt>
 800790c:	2800      	cmp	r0, #0
 800790e:	d163      	bne.n	80079d8 <_dtoa_r+0x608>
 8007910:	4642      	mov	r2, r8
 8007912:	464b      	mov	r3, r9
 8007914:	4936      	ldr	r1, [pc, #216]	; (80079f0 <_dtoa_r+0x620>)
 8007916:	2000      	movs	r0, #0
 8007918:	f7f8 fcde 	bl	80002d8 <__aeabi_dsub>
 800791c:	4652      	mov	r2, sl
 800791e:	465b      	mov	r3, fp
 8007920:	f7f9 f904 	bl	8000b2c <__aeabi_dcmplt>
 8007924:	2800      	cmp	r0, #0
 8007926:	f040 80b5 	bne.w	8007a94 <_dtoa_r+0x6c4>
 800792a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800792c:	429d      	cmp	r5, r3
 800792e:	d081      	beq.n	8007834 <_dtoa_r+0x464>
 8007930:	4b30      	ldr	r3, [pc, #192]	; (80079f4 <_dtoa_r+0x624>)
 8007932:	2200      	movs	r2, #0
 8007934:	4650      	mov	r0, sl
 8007936:	4659      	mov	r1, fp
 8007938:	f7f8 fe86 	bl	8000648 <__aeabi_dmul>
 800793c:	4b2d      	ldr	r3, [pc, #180]	; (80079f4 <_dtoa_r+0x624>)
 800793e:	4682      	mov	sl, r0
 8007940:	468b      	mov	fp, r1
 8007942:	4640      	mov	r0, r8
 8007944:	4649      	mov	r1, r9
 8007946:	2200      	movs	r2, #0
 8007948:	f7f8 fe7e 	bl	8000648 <__aeabi_dmul>
 800794c:	4680      	mov	r8, r0
 800794e:	4689      	mov	r9, r1
 8007950:	e7c6      	b.n	80078e0 <_dtoa_r+0x510>
 8007952:	4650      	mov	r0, sl
 8007954:	4659      	mov	r1, fp
 8007956:	f7f8 fe77 	bl	8000648 <__aeabi_dmul>
 800795a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800795c:	9d01      	ldr	r5, [sp, #4]
 800795e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007960:	4682      	mov	sl, r0
 8007962:	468b      	mov	fp, r1
 8007964:	4649      	mov	r1, r9
 8007966:	4640      	mov	r0, r8
 8007968:	f7f9 f91e 	bl	8000ba8 <__aeabi_d2iz>
 800796c:	4606      	mov	r6, r0
 800796e:	f7f8 fe01 	bl	8000574 <__aeabi_i2d>
 8007972:	3630      	adds	r6, #48	; 0x30
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4640      	mov	r0, r8
 800797a:	4649      	mov	r1, r9
 800797c:	f7f8 fcac 	bl	80002d8 <__aeabi_dsub>
 8007980:	f805 6b01 	strb.w	r6, [r5], #1
 8007984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007986:	429d      	cmp	r5, r3
 8007988:	4680      	mov	r8, r0
 800798a:	4689      	mov	r9, r1
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	d124      	bne.n	80079dc <_dtoa_r+0x60c>
 8007992:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <_dtoa_r+0x630>)
 8007994:	4650      	mov	r0, sl
 8007996:	4659      	mov	r1, fp
 8007998:	f7f8 fca0 	bl	80002dc <__adddf3>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4640      	mov	r0, r8
 80079a2:	4649      	mov	r1, r9
 80079a4:	f7f9 f8e0 	bl	8000b68 <__aeabi_dcmpgt>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d173      	bne.n	8007a94 <_dtoa_r+0x6c4>
 80079ac:	4652      	mov	r2, sl
 80079ae:	465b      	mov	r3, fp
 80079b0:	4913      	ldr	r1, [pc, #76]	; (8007a00 <_dtoa_r+0x630>)
 80079b2:	2000      	movs	r0, #0
 80079b4:	f7f8 fc90 	bl	80002d8 <__aeabi_dsub>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4640      	mov	r0, r8
 80079be:	4649      	mov	r1, r9
 80079c0:	f7f9 f8b4 	bl	8000b2c <__aeabi_dcmplt>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	f43f af35 	beq.w	8007834 <_dtoa_r+0x464>
 80079ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80079cc:	1e6b      	subs	r3, r5, #1
 80079ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80079d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079d4:	2b30      	cmp	r3, #48	; 0x30
 80079d6:	d0f8      	beq.n	80079ca <_dtoa_r+0x5fa>
 80079d8:	9700      	str	r7, [sp, #0]
 80079da:	e049      	b.n	8007a70 <_dtoa_r+0x6a0>
 80079dc:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <_dtoa_r+0x624>)
 80079de:	f7f8 fe33 	bl	8000648 <__aeabi_dmul>
 80079e2:	4680      	mov	r8, r0
 80079e4:	4689      	mov	r9, r1
 80079e6:	e7bd      	b.n	8007964 <_dtoa_r+0x594>
 80079e8:	0800b740 	.word	0x0800b740
 80079ec:	0800b718 	.word	0x0800b718
 80079f0:	3ff00000 	.word	0x3ff00000
 80079f4:	40240000 	.word	0x40240000
 80079f8:	401c0000 	.word	0x401c0000
 80079fc:	40140000 	.word	0x40140000
 8007a00:	3fe00000 	.word	0x3fe00000
 8007a04:	9d01      	ldr	r5, [sp, #4]
 8007a06:	4656      	mov	r6, sl
 8007a08:	465f      	mov	r7, fp
 8007a0a:	4642      	mov	r2, r8
 8007a0c:	464b      	mov	r3, r9
 8007a0e:	4630      	mov	r0, r6
 8007a10:	4639      	mov	r1, r7
 8007a12:	f7f8 ff43 	bl	800089c <__aeabi_ddiv>
 8007a16:	f7f9 f8c7 	bl	8000ba8 <__aeabi_d2iz>
 8007a1a:	4682      	mov	sl, r0
 8007a1c:	f7f8 fdaa 	bl	8000574 <__aeabi_i2d>
 8007a20:	4642      	mov	r2, r8
 8007a22:	464b      	mov	r3, r9
 8007a24:	f7f8 fe10 	bl	8000648 <__aeabi_dmul>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	4639      	mov	r1, r7
 8007a30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a34:	f7f8 fc50 	bl	80002d8 <__aeabi_dsub>
 8007a38:	f805 6b01 	strb.w	r6, [r5], #1
 8007a3c:	9e01      	ldr	r6, [sp, #4]
 8007a3e:	9f03      	ldr	r7, [sp, #12]
 8007a40:	1bae      	subs	r6, r5, r6
 8007a42:	42b7      	cmp	r7, r6
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	d135      	bne.n	8007ab6 <_dtoa_r+0x6e6>
 8007a4a:	f7f8 fc47 	bl	80002dc <__adddf3>
 8007a4e:	4642      	mov	r2, r8
 8007a50:	464b      	mov	r3, r9
 8007a52:	4606      	mov	r6, r0
 8007a54:	460f      	mov	r7, r1
 8007a56:	f7f9 f887 	bl	8000b68 <__aeabi_dcmpgt>
 8007a5a:	b9d0      	cbnz	r0, 8007a92 <_dtoa_r+0x6c2>
 8007a5c:	4642      	mov	r2, r8
 8007a5e:	464b      	mov	r3, r9
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f9 f858 	bl	8000b18 <__aeabi_dcmpeq>
 8007a68:	b110      	cbz	r0, 8007a70 <_dtoa_r+0x6a0>
 8007a6a:	f01a 0f01 	tst.w	sl, #1
 8007a6e:	d110      	bne.n	8007a92 <_dtoa_r+0x6c2>
 8007a70:	4620      	mov	r0, r4
 8007a72:	ee18 1a10 	vmov	r1, s16
 8007a76:	f001 f893 	bl	8008ba0 <_Bfree>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9800      	ldr	r0, [sp, #0]
 8007a7e:	702b      	strb	r3, [r5, #0]
 8007a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a82:	3001      	adds	r0, #1
 8007a84:	6018      	str	r0, [r3, #0]
 8007a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f43f acf1 	beq.w	8007470 <_dtoa_r+0xa0>
 8007a8e:	601d      	str	r5, [r3, #0]
 8007a90:	e4ee      	b.n	8007470 <_dtoa_r+0xa0>
 8007a92:	9f00      	ldr	r7, [sp, #0]
 8007a94:	462b      	mov	r3, r5
 8007a96:	461d      	mov	r5, r3
 8007a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a9c:	2a39      	cmp	r2, #57	; 0x39
 8007a9e:	d106      	bne.n	8007aae <_dtoa_r+0x6de>
 8007aa0:	9a01      	ldr	r2, [sp, #4]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d1f7      	bne.n	8007a96 <_dtoa_r+0x6c6>
 8007aa6:	9901      	ldr	r1, [sp, #4]
 8007aa8:	2230      	movs	r2, #48	; 0x30
 8007aaa:	3701      	adds	r7, #1
 8007aac:	700a      	strb	r2, [r1, #0]
 8007aae:	781a      	ldrb	r2, [r3, #0]
 8007ab0:	3201      	adds	r2, #1
 8007ab2:	701a      	strb	r2, [r3, #0]
 8007ab4:	e790      	b.n	80079d8 <_dtoa_r+0x608>
 8007ab6:	4ba6      	ldr	r3, [pc, #664]	; (8007d50 <_dtoa_r+0x980>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f7f8 fdc5 	bl	8000648 <__aeabi_dmul>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460f      	mov	r7, r1
 8007ac6:	f7f9 f827 	bl	8000b18 <__aeabi_dcmpeq>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d09d      	beq.n	8007a0a <_dtoa_r+0x63a>
 8007ace:	e7cf      	b.n	8007a70 <_dtoa_r+0x6a0>
 8007ad0:	9a08      	ldr	r2, [sp, #32]
 8007ad2:	2a00      	cmp	r2, #0
 8007ad4:	f000 80d7 	beq.w	8007c86 <_dtoa_r+0x8b6>
 8007ad8:	9a06      	ldr	r2, [sp, #24]
 8007ada:	2a01      	cmp	r2, #1
 8007adc:	f300 80ba 	bgt.w	8007c54 <_dtoa_r+0x884>
 8007ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	f000 80b2 	beq.w	8007c4c <_dtoa_r+0x87c>
 8007ae8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007aec:	9e07      	ldr	r6, [sp, #28]
 8007aee:	9d04      	ldr	r5, [sp, #16]
 8007af0:	9a04      	ldr	r2, [sp, #16]
 8007af2:	441a      	add	r2, r3
 8007af4:	9204      	str	r2, [sp, #16]
 8007af6:	9a05      	ldr	r2, [sp, #20]
 8007af8:	2101      	movs	r1, #1
 8007afa:	441a      	add	r2, r3
 8007afc:	4620      	mov	r0, r4
 8007afe:	9205      	str	r2, [sp, #20]
 8007b00:	f001 f950 	bl	8008da4 <__i2b>
 8007b04:	4607      	mov	r7, r0
 8007b06:	2d00      	cmp	r5, #0
 8007b08:	dd0c      	ble.n	8007b24 <_dtoa_r+0x754>
 8007b0a:	9b05      	ldr	r3, [sp, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dd09      	ble.n	8007b24 <_dtoa_r+0x754>
 8007b10:	42ab      	cmp	r3, r5
 8007b12:	9a04      	ldr	r2, [sp, #16]
 8007b14:	bfa8      	it	ge
 8007b16:	462b      	movge	r3, r5
 8007b18:	1ad2      	subs	r2, r2, r3
 8007b1a:	9204      	str	r2, [sp, #16]
 8007b1c:	9a05      	ldr	r2, [sp, #20]
 8007b1e:	1aed      	subs	r5, r5, r3
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	9305      	str	r3, [sp, #20]
 8007b24:	9b07      	ldr	r3, [sp, #28]
 8007b26:	b31b      	cbz	r3, 8007b70 <_dtoa_r+0x7a0>
 8007b28:	9b08      	ldr	r3, [sp, #32]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 80af 	beq.w	8007c8e <_dtoa_r+0x8be>
 8007b30:	2e00      	cmp	r6, #0
 8007b32:	dd13      	ble.n	8007b5c <_dtoa_r+0x78c>
 8007b34:	4639      	mov	r1, r7
 8007b36:	4632      	mov	r2, r6
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f001 f9f3 	bl	8008f24 <__pow5mult>
 8007b3e:	ee18 2a10 	vmov	r2, s16
 8007b42:	4601      	mov	r1, r0
 8007b44:	4607      	mov	r7, r0
 8007b46:	4620      	mov	r0, r4
 8007b48:	f001 f942 	bl	8008dd0 <__multiply>
 8007b4c:	ee18 1a10 	vmov	r1, s16
 8007b50:	4680      	mov	r8, r0
 8007b52:	4620      	mov	r0, r4
 8007b54:	f001 f824 	bl	8008ba0 <_Bfree>
 8007b58:	ee08 8a10 	vmov	s16, r8
 8007b5c:	9b07      	ldr	r3, [sp, #28]
 8007b5e:	1b9a      	subs	r2, r3, r6
 8007b60:	d006      	beq.n	8007b70 <_dtoa_r+0x7a0>
 8007b62:	ee18 1a10 	vmov	r1, s16
 8007b66:	4620      	mov	r0, r4
 8007b68:	f001 f9dc 	bl	8008f24 <__pow5mult>
 8007b6c:	ee08 0a10 	vmov	s16, r0
 8007b70:	2101      	movs	r1, #1
 8007b72:	4620      	mov	r0, r4
 8007b74:	f001 f916 	bl	8008da4 <__i2b>
 8007b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	f340 8088 	ble.w	8007c92 <_dtoa_r+0x8c2>
 8007b82:	461a      	mov	r2, r3
 8007b84:	4601      	mov	r1, r0
 8007b86:	4620      	mov	r0, r4
 8007b88:	f001 f9cc 	bl	8008f24 <__pow5mult>
 8007b8c:	9b06      	ldr	r3, [sp, #24]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	4606      	mov	r6, r0
 8007b92:	f340 8081 	ble.w	8007c98 <_dtoa_r+0x8c8>
 8007b96:	f04f 0800 	mov.w	r8, #0
 8007b9a:	6933      	ldr	r3, [r6, #16]
 8007b9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ba0:	6918      	ldr	r0, [r3, #16]
 8007ba2:	f001 f8af 	bl	8008d04 <__hi0bits>
 8007ba6:	f1c0 0020 	rsb	r0, r0, #32
 8007baa:	9b05      	ldr	r3, [sp, #20]
 8007bac:	4418      	add	r0, r3
 8007bae:	f010 001f 	ands.w	r0, r0, #31
 8007bb2:	f000 8092 	beq.w	8007cda <_dtoa_r+0x90a>
 8007bb6:	f1c0 0320 	rsb	r3, r0, #32
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	f340 808a 	ble.w	8007cd4 <_dtoa_r+0x904>
 8007bc0:	f1c0 001c 	rsb	r0, r0, #28
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	4403      	add	r3, r0
 8007bc8:	9304      	str	r3, [sp, #16]
 8007bca:	9b05      	ldr	r3, [sp, #20]
 8007bcc:	4403      	add	r3, r0
 8007bce:	4405      	add	r5, r0
 8007bd0:	9305      	str	r3, [sp, #20]
 8007bd2:	9b04      	ldr	r3, [sp, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dd07      	ble.n	8007be8 <_dtoa_r+0x818>
 8007bd8:	ee18 1a10 	vmov	r1, s16
 8007bdc:	461a      	mov	r2, r3
 8007bde:	4620      	mov	r0, r4
 8007be0:	f001 f9fa 	bl	8008fd8 <__lshift>
 8007be4:	ee08 0a10 	vmov	s16, r0
 8007be8:	9b05      	ldr	r3, [sp, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	dd05      	ble.n	8007bfa <_dtoa_r+0x82a>
 8007bee:	4631      	mov	r1, r6
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f001 f9f0 	bl	8008fd8 <__lshift>
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d06e      	beq.n	8007cde <_dtoa_r+0x90e>
 8007c00:	ee18 0a10 	vmov	r0, s16
 8007c04:	4631      	mov	r1, r6
 8007c06:	f001 fa57 	bl	80090b8 <__mcmp>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	da67      	bge.n	8007cde <_dtoa_r+0x90e>
 8007c0e:	9b00      	ldr	r3, [sp, #0]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	ee18 1a10 	vmov	r1, s16
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	220a      	movs	r2, #10
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 ffe1 	bl	8008be4 <__multadd>
 8007c22:	9b08      	ldr	r3, [sp, #32]
 8007c24:	ee08 0a10 	vmov	s16, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 81b1 	beq.w	8007f90 <_dtoa_r+0xbc0>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4639      	mov	r1, r7
 8007c32:	220a      	movs	r2, #10
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 ffd5 	bl	8008be4 <__multadd>
 8007c3a:	9b02      	ldr	r3, [sp, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	4607      	mov	r7, r0
 8007c40:	f300 808e 	bgt.w	8007d60 <_dtoa_r+0x990>
 8007c44:	9b06      	ldr	r3, [sp, #24]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	dc51      	bgt.n	8007cee <_dtoa_r+0x91e>
 8007c4a:	e089      	b.n	8007d60 <_dtoa_r+0x990>
 8007c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c52:	e74b      	b.n	8007aec <_dtoa_r+0x71c>
 8007c54:	9b03      	ldr	r3, [sp, #12]
 8007c56:	1e5e      	subs	r6, r3, #1
 8007c58:	9b07      	ldr	r3, [sp, #28]
 8007c5a:	42b3      	cmp	r3, r6
 8007c5c:	bfbf      	itttt	lt
 8007c5e:	9b07      	ldrlt	r3, [sp, #28]
 8007c60:	9607      	strlt	r6, [sp, #28]
 8007c62:	1af2      	sublt	r2, r6, r3
 8007c64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c66:	bfb6      	itet	lt
 8007c68:	189b      	addlt	r3, r3, r2
 8007c6a:	1b9e      	subge	r6, r3, r6
 8007c6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007c6e:	9b03      	ldr	r3, [sp, #12]
 8007c70:	bfb8      	it	lt
 8007c72:	2600      	movlt	r6, #0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bfb7      	itett	lt
 8007c78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007c7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007c80:	1a9d      	sublt	r5, r3, r2
 8007c82:	2300      	movlt	r3, #0
 8007c84:	e734      	b.n	8007af0 <_dtoa_r+0x720>
 8007c86:	9e07      	ldr	r6, [sp, #28]
 8007c88:	9d04      	ldr	r5, [sp, #16]
 8007c8a:	9f08      	ldr	r7, [sp, #32]
 8007c8c:	e73b      	b.n	8007b06 <_dtoa_r+0x736>
 8007c8e:	9a07      	ldr	r2, [sp, #28]
 8007c90:	e767      	b.n	8007b62 <_dtoa_r+0x792>
 8007c92:	9b06      	ldr	r3, [sp, #24]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	dc18      	bgt.n	8007cca <_dtoa_r+0x8fa>
 8007c98:	f1ba 0f00 	cmp.w	sl, #0
 8007c9c:	d115      	bne.n	8007cca <_dtoa_r+0x8fa>
 8007c9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ca2:	b993      	cbnz	r3, 8007cca <_dtoa_r+0x8fa>
 8007ca4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ca8:	0d1b      	lsrs	r3, r3, #20
 8007caa:	051b      	lsls	r3, r3, #20
 8007cac:	b183      	cbz	r3, 8007cd0 <_dtoa_r+0x900>
 8007cae:	9b04      	ldr	r3, [sp, #16]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	9304      	str	r3, [sp, #16]
 8007cb4:	9b05      	ldr	r3, [sp, #20]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	9305      	str	r3, [sp, #20]
 8007cba:	f04f 0801 	mov.w	r8, #1
 8007cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f47f af6a 	bne.w	8007b9a <_dtoa_r+0x7ca>
 8007cc6:	2001      	movs	r0, #1
 8007cc8:	e76f      	b.n	8007baa <_dtoa_r+0x7da>
 8007cca:	f04f 0800 	mov.w	r8, #0
 8007cce:	e7f6      	b.n	8007cbe <_dtoa_r+0x8ee>
 8007cd0:	4698      	mov	r8, r3
 8007cd2:	e7f4      	b.n	8007cbe <_dtoa_r+0x8ee>
 8007cd4:	f43f af7d 	beq.w	8007bd2 <_dtoa_r+0x802>
 8007cd8:	4618      	mov	r0, r3
 8007cda:	301c      	adds	r0, #28
 8007cdc:	e772      	b.n	8007bc4 <_dtoa_r+0x7f4>
 8007cde:	9b03      	ldr	r3, [sp, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	dc37      	bgt.n	8007d54 <_dtoa_r+0x984>
 8007ce4:	9b06      	ldr	r3, [sp, #24]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	dd34      	ble.n	8007d54 <_dtoa_r+0x984>
 8007cea:	9b03      	ldr	r3, [sp, #12]
 8007cec:	9302      	str	r3, [sp, #8]
 8007cee:	9b02      	ldr	r3, [sp, #8]
 8007cf0:	b96b      	cbnz	r3, 8007d0e <_dtoa_r+0x93e>
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	2205      	movs	r2, #5
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f000 ff74 	bl	8008be4 <__multadd>
 8007cfc:	4601      	mov	r1, r0
 8007cfe:	4606      	mov	r6, r0
 8007d00:	ee18 0a10 	vmov	r0, s16
 8007d04:	f001 f9d8 	bl	80090b8 <__mcmp>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	f73f adbb 	bgt.w	8007884 <_dtoa_r+0x4b4>
 8007d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d10:	9d01      	ldr	r5, [sp, #4]
 8007d12:	43db      	mvns	r3, r3
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	f04f 0800 	mov.w	r8, #0
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 ff3f 	bl	8008ba0 <_Bfree>
 8007d22:	2f00      	cmp	r7, #0
 8007d24:	f43f aea4 	beq.w	8007a70 <_dtoa_r+0x6a0>
 8007d28:	f1b8 0f00 	cmp.w	r8, #0
 8007d2c:	d005      	beq.n	8007d3a <_dtoa_r+0x96a>
 8007d2e:	45b8      	cmp	r8, r7
 8007d30:	d003      	beq.n	8007d3a <_dtoa_r+0x96a>
 8007d32:	4641      	mov	r1, r8
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 ff33 	bl	8008ba0 <_Bfree>
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f000 ff2f 	bl	8008ba0 <_Bfree>
 8007d42:	e695      	b.n	8007a70 <_dtoa_r+0x6a0>
 8007d44:	2600      	movs	r6, #0
 8007d46:	4637      	mov	r7, r6
 8007d48:	e7e1      	b.n	8007d0e <_dtoa_r+0x93e>
 8007d4a:	9700      	str	r7, [sp, #0]
 8007d4c:	4637      	mov	r7, r6
 8007d4e:	e599      	b.n	8007884 <_dtoa_r+0x4b4>
 8007d50:	40240000 	.word	0x40240000
 8007d54:	9b08      	ldr	r3, [sp, #32]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 80ca 	beq.w	8007ef0 <_dtoa_r+0xb20>
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	9302      	str	r3, [sp, #8]
 8007d60:	2d00      	cmp	r5, #0
 8007d62:	dd05      	ble.n	8007d70 <_dtoa_r+0x9a0>
 8007d64:	4639      	mov	r1, r7
 8007d66:	462a      	mov	r2, r5
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f001 f935 	bl	8008fd8 <__lshift>
 8007d6e:	4607      	mov	r7, r0
 8007d70:	f1b8 0f00 	cmp.w	r8, #0
 8007d74:	d05b      	beq.n	8007e2e <_dtoa_r+0xa5e>
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 fed1 	bl	8008b20 <_Balloc>
 8007d7e:	4605      	mov	r5, r0
 8007d80:	b928      	cbnz	r0, 8007d8e <_dtoa_r+0x9be>
 8007d82:	4b87      	ldr	r3, [pc, #540]	; (8007fa0 <_dtoa_r+0xbd0>)
 8007d84:	4602      	mov	r2, r0
 8007d86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d8a:	f7ff bb3b 	b.w	8007404 <_dtoa_r+0x34>
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	3202      	adds	r2, #2
 8007d92:	0092      	lsls	r2, r2, #2
 8007d94:	f107 010c 	add.w	r1, r7, #12
 8007d98:	300c      	adds	r0, #12
 8007d9a:	f000 feb3 	bl	8008b04 <memcpy>
 8007d9e:	2201      	movs	r2, #1
 8007da0:	4629      	mov	r1, r5
 8007da2:	4620      	mov	r0, r4
 8007da4:	f001 f918 	bl	8008fd8 <__lshift>
 8007da8:	9b01      	ldr	r3, [sp, #4]
 8007daa:	f103 0901 	add.w	r9, r3, #1
 8007dae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007db2:	4413      	add	r3, r2
 8007db4:	9305      	str	r3, [sp, #20]
 8007db6:	f00a 0301 	and.w	r3, sl, #1
 8007dba:	46b8      	mov	r8, r7
 8007dbc:	9304      	str	r3, [sp, #16]
 8007dbe:	4607      	mov	r7, r0
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	ee18 0a10 	vmov	r0, s16
 8007dc6:	f7ff fa77 	bl	80072b8 <quorem>
 8007dca:	4641      	mov	r1, r8
 8007dcc:	9002      	str	r0, [sp, #8]
 8007dce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007dd2:	ee18 0a10 	vmov	r0, s16
 8007dd6:	f001 f96f 	bl	80090b8 <__mcmp>
 8007dda:	463a      	mov	r2, r7
 8007ddc:	9003      	str	r0, [sp, #12]
 8007dde:	4631      	mov	r1, r6
 8007de0:	4620      	mov	r0, r4
 8007de2:	f001 f985 	bl	80090f0 <__mdiff>
 8007de6:	68c2      	ldr	r2, [r0, #12]
 8007de8:	f109 3bff 	add.w	fp, r9, #4294967295
 8007dec:	4605      	mov	r5, r0
 8007dee:	bb02      	cbnz	r2, 8007e32 <_dtoa_r+0xa62>
 8007df0:	4601      	mov	r1, r0
 8007df2:	ee18 0a10 	vmov	r0, s16
 8007df6:	f001 f95f 	bl	80090b8 <__mcmp>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4620      	mov	r0, r4
 8007e00:	9207      	str	r2, [sp, #28]
 8007e02:	f000 fecd 	bl	8008ba0 <_Bfree>
 8007e06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007e0a:	ea43 0102 	orr.w	r1, r3, r2
 8007e0e:	9b04      	ldr	r3, [sp, #16]
 8007e10:	430b      	orrs	r3, r1
 8007e12:	464d      	mov	r5, r9
 8007e14:	d10f      	bne.n	8007e36 <_dtoa_r+0xa66>
 8007e16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e1a:	d02a      	beq.n	8007e72 <_dtoa_r+0xaa2>
 8007e1c:	9b03      	ldr	r3, [sp, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	dd02      	ble.n	8007e28 <_dtoa_r+0xa58>
 8007e22:	9b02      	ldr	r3, [sp, #8]
 8007e24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e28:	f88b a000 	strb.w	sl, [fp]
 8007e2c:	e775      	b.n	8007d1a <_dtoa_r+0x94a>
 8007e2e:	4638      	mov	r0, r7
 8007e30:	e7ba      	b.n	8007da8 <_dtoa_r+0x9d8>
 8007e32:	2201      	movs	r2, #1
 8007e34:	e7e2      	b.n	8007dfc <_dtoa_r+0xa2c>
 8007e36:	9b03      	ldr	r3, [sp, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	db04      	blt.n	8007e46 <_dtoa_r+0xa76>
 8007e3c:	9906      	ldr	r1, [sp, #24]
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	9904      	ldr	r1, [sp, #16]
 8007e42:	430b      	orrs	r3, r1
 8007e44:	d122      	bne.n	8007e8c <_dtoa_r+0xabc>
 8007e46:	2a00      	cmp	r2, #0
 8007e48:	ddee      	ble.n	8007e28 <_dtoa_r+0xa58>
 8007e4a:	ee18 1a10 	vmov	r1, s16
 8007e4e:	2201      	movs	r2, #1
 8007e50:	4620      	mov	r0, r4
 8007e52:	f001 f8c1 	bl	8008fd8 <__lshift>
 8007e56:	4631      	mov	r1, r6
 8007e58:	ee08 0a10 	vmov	s16, r0
 8007e5c:	f001 f92c 	bl	80090b8 <__mcmp>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	dc03      	bgt.n	8007e6c <_dtoa_r+0xa9c>
 8007e64:	d1e0      	bne.n	8007e28 <_dtoa_r+0xa58>
 8007e66:	f01a 0f01 	tst.w	sl, #1
 8007e6a:	d0dd      	beq.n	8007e28 <_dtoa_r+0xa58>
 8007e6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e70:	d1d7      	bne.n	8007e22 <_dtoa_r+0xa52>
 8007e72:	2339      	movs	r3, #57	; 0x39
 8007e74:	f88b 3000 	strb.w	r3, [fp]
 8007e78:	462b      	mov	r3, r5
 8007e7a:	461d      	mov	r5, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e82:	2a39      	cmp	r2, #57	; 0x39
 8007e84:	d071      	beq.n	8007f6a <_dtoa_r+0xb9a>
 8007e86:	3201      	adds	r2, #1
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	e746      	b.n	8007d1a <_dtoa_r+0x94a>
 8007e8c:	2a00      	cmp	r2, #0
 8007e8e:	dd07      	ble.n	8007ea0 <_dtoa_r+0xad0>
 8007e90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e94:	d0ed      	beq.n	8007e72 <_dtoa_r+0xaa2>
 8007e96:	f10a 0301 	add.w	r3, sl, #1
 8007e9a:	f88b 3000 	strb.w	r3, [fp]
 8007e9e:	e73c      	b.n	8007d1a <_dtoa_r+0x94a>
 8007ea0:	9b05      	ldr	r3, [sp, #20]
 8007ea2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007ea6:	4599      	cmp	r9, r3
 8007ea8:	d047      	beq.n	8007f3a <_dtoa_r+0xb6a>
 8007eaa:	ee18 1a10 	vmov	r1, s16
 8007eae:	2300      	movs	r3, #0
 8007eb0:	220a      	movs	r2, #10
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 fe96 	bl	8008be4 <__multadd>
 8007eb8:	45b8      	cmp	r8, r7
 8007eba:	ee08 0a10 	vmov	s16, r0
 8007ebe:	f04f 0300 	mov.w	r3, #0
 8007ec2:	f04f 020a 	mov.w	r2, #10
 8007ec6:	4641      	mov	r1, r8
 8007ec8:	4620      	mov	r0, r4
 8007eca:	d106      	bne.n	8007eda <_dtoa_r+0xb0a>
 8007ecc:	f000 fe8a 	bl	8008be4 <__multadd>
 8007ed0:	4680      	mov	r8, r0
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	f109 0901 	add.w	r9, r9, #1
 8007ed8:	e772      	b.n	8007dc0 <_dtoa_r+0x9f0>
 8007eda:	f000 fe83 	bl	8008be4 <__multadd>
 8007ede:	4639      	mov	r1, r7
 8007ee0:	4680      	mov	r8, r0
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	220a      	movs	r2, #10
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 fe7c 	bl	8008be4 <__multadd>
 8007eec:	4607      	mov	r7, r0
 8007eee:	e7f1      	b.n	8007ed4 <_dtoa_r+0xb04>
 8007ef0:	9b03      	ldr	r3, [sp, #12]
 8007ef2:	9302      	str	r3, [sp, #8]
 8007ef4:	9d01      	ldr	r5, [sp, #4]
 8007ef6:	ee18 0a10 	vmov	r0, s16
 8007efa:	4631      	mov	r1, r6
 8007efc:	f7ff f9dc 	bl	80072b8 <quorem>
 8007f00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f04:	9b01      	ldr	r3, [sp, #4]
 8007f06:	f805 ab01 	strb.w	sl, [r5], #1
 8007f0a:	1aea      	subs	r2, r5, r3
 8007f0c:	9b02      	ldr	r3, [sp, #8]
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	dd09      	ble.n	8007f26 <_dtoa_r+0xb56>
 8007f12:	ee18 1a10 	vmov	r1, s16
 8007f16:	2300      	movs	r3, #0
 8007f18:	220a      	movs	r2, #10
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 fe62 	bl	8008be4 <__multadd>
 8007f20:	ee08 0a10 	vmov	s16, r0
 8007f24:	e7e7      	b.n	8007ef6 <_dtoa_r+0xb26>
 8007f26:	9b02      	ldr	r3, [sp, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	bfc8      	it	gt
 8007f2c:	461d      	movgt	r5, r3
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	bfd8      	it	le
 8007f32:	2501      	movle	r5, #1
 8007f34:	441d      	add	r5, r3
 8007f36:	f04f 0800 	mov.w	r8, #0
 8007f3a:	ee18 1a10 	vmov	r1, s16
 8007f3e:	2201      	movs	r2, #1
 8007f40:	4620      	mov	r0, r4
 8007f42:	f001 f849 	bl	8008fd8 <__lshift>
 8007f46:	4631      	mov	r1, r6
 8007f48:	ee08 0a10 	vmov	s16, r0
 8007f4c:	f001 f8b4 	bl	80090b8 <__mcmp>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	dc91      	bgt.n	8007e78 <_dtoa_r+0xaa8>
 8007f54:	d102      	bne.n	8007f5c <_dtoa_r+0xb8c>
 8007f56:	f01a 0f01 	tst.w	sl, #1
 8007f5a:	d18d      	bne.n	8007e78 <_dtoa_r+0xaa8>
 8007f5c:	462b      	mov	r3, r5
 8007f5e:	461d      	mov	r5, r3
 8007f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f64:	2a30      	cmp	r2, #48	; 0x30
 8007f66:	d0fa      	beq.n	8007f5e <_dtoa_r+0xb8e>
 8007f68:	e6d7      	b.n	8007d1a <_dtoa_r+0x94a>
 8007f6a:	9a01      	ldr	r2, [sp, #4]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d184      	bne.n	8007e7a <_dtoa_r+0xaaa>
 8007f70:	9b00      	ldr	r3, [sp, #0]
 8007f72:	3301      	adds	r3, #1
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	2331      	movs	r3, #49	; 0x31
 8007f78:	7013      	strb	r3, [r2, #0]
 8007f7a:	e6ce      	b.n	8007d1a <_dtoa_r+0x94a>
 8007f7c:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <_dtoa_r+0xbd4>)
 8007f7e:	f7ff ba95 	b.w	80074ac <_dtoa_r+0xdc>
 8007f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f47f aa6e 	bne.w	8007466 <_dtoa_r+0x96>
 8007f8a:	4b07      	ldr	r3, [pc, #28]	; (8007fa8 <_dtoa_r+0xbd8>)
 8007f8c:	f7ff ba8e 	b.w	80074ac <_dtoa_r+0xdc>
 8007f90:	9b02      	ldr	r3, [sp, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dcae      	bgt.n	8007ef4 <_dtoa_r+0xb24>
 8007f96:	9b06      	ldr	r3, [sp, #24]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	f73f aea8 	bgt.w	8007cee <_dtoa_r+0x91e>
 8007f9e:	e7a9      	b.n	8007ef4 <_dtoa_r+0xb24>
 8007fa0:	0800b5c8 	.word	0x0800b5c8
 8007fa4:	0800b3c8 	.word	0x0800b3c8
 8007fa8:	0800b549 	.word	0x0800b549

08007fac <__sflush_r>:
 8007fac:	898a      	ldrh	r2, [r1, #12]
 8007fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	0710      	lsls	r0, r2, #28
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	d458      	bmi.n	800806c <__sflush_r+0xc0>
 8007fba:	684b      	ldr	r3, [r1, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc05      	bgt.n	8007fcc <__sflush_r+0x20>
 8007fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	dc02      	bgt.n	8007fcc <__sflush_r+0x20>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fce:	2e00      	cmp	r6, #0
 8007fd0:	d0f9      	beq.n	8007fc6 <__sflush_r+0x1a>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fd8:	682f      	ldr	r7, [r5, #0]
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	d032      	beq.n	8008044 <__sflush_r+0x98>
 8007fde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	075a      	lsls	r2, r3, #29
 8007fe4:	d505      	bpl.n	8007ff2 <__sflush_r+0x46>
 8007fe6:	6863      	ldr	r3, [r4, #4]
 8007fe8:	1ac0      	subs	r0, r0, r3
 8007fea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fec:	b10b      	cbz	r3, 8007ff2 <__sflush_r+0x46>
 8007fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ff0:	1ac0      	subs	r0, r0, r3
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ff8:	6a21      	ldr	r1, [r4, #32]
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b0      	blx	r6
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	d106      	bne.n	8008012 <__sflush_r+0x66>
 8008004:	6829      	ldr	r1, [r5, #0]
 8008006:	291d      	cmp	r1, #29
 8008008:	d82c      	bhi.n	8008064 <__sflush_r+0xb8>
 800800a:	4a2a      	ldr	r2, [pc, #168]	; (80080b4 <__sflush_r+0x108>)
 800800c:	40ca      	lsrs	r2, r1
 800800e:	07d6      	lsls	r6, r2, #31
 8008010:	d528      	bpl.n	8008064 <__sflush_r+0xb8>
 8008012:	2200      	movs	r2, #0
 8008014:	6062      	str	r2, [r4, #4]
 8008016:	04d9      	lsls	r1, r3, #19
 8008018:	6922      	ldr	r2, [r4, #16]
 800801a:	6022      	str	r2, [r4, #0]
 800801c:	d504      	bpl.n	8008028 <__sflush_r+0x7c>
 800801e:	1c42      	adds	r2, r0, #1
 8008020:	d101      	bne.n	8008026 <__sflush_r+0x7a>
 8008022:	682b      	ldr	r3, [r5, #0]
 8008024:	b903      	cbnz	r3, 8008028 <__sflush_r+0x7c>
 8008026:	6560      	str	r0, [r4, #84]	; 0x54
 8008028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800802a:	602f      	str	r7, [r5, #0]
 800802c:	2900      	cmp	r1, #0
 800802e:	d0ca      	beq.n	8007fc6 <__sflush_r+0x1a>
 8008030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008034:	4299      	cmp	r1, r3
 8008036:	d002      	beq.n	800803e <__sflush_r+0x92>
 8008038:	4628      	mov	r0, r5
 800803a:	f001 fa49 	bl	80094d0 <_free_r>
 800803e:	2000      	movs	r0, #0
 8008040:	6360      	str	r0, [r4, #52]	; 0x34
 8008042:	e7c1      	b.n	8007fc8 <__sflush_r+0x1c>
 8008044:	6a21      	ldr	r1, [r4, #32]
 8008046:	2301      	movs	r3, #1
 8008048:	4628      	mov	r0, r5
 800804a:	47b0      	blx	r6
 800804c:	1c41      	adds	r1, r0, #1
 800804e:	d1c7      	bne.n	8007fe0 <__sflush_r+0x34>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0c4      	beq.n	8007fe0 <__sflush_r+0x34>
 8008056:	2b1d      	cmp	r3, #29
 8008058:	d001      	beq.n	800805e <__sflush_r+0xb2>
 800805a:	2b16      	cmp	r3, #22
 800805c:	d101      	bne.n	8008062 <__sflush_r+0xb6>
 800805e:	602f      	str	r7, [r5, #0]
 8008060:	e7b1      	b.n	8007fc6 <__sflush_r+0x1a>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008068:	81a3      	strh	r3, [r4, #12]
 800806a:	e7ad      	b.n	8007fc8 <__sflush_r+0x1c>
 800806c:	690f      	ldr	r7, [r1, #16]
 800806e:	2f00      	cmp	r7, #0
 8008070:	d0a9      	beq.n	8007fc6 <__sflush_r+0x1a>
 8008072:	0793      	lsls	r3, r2, #30
 8008074:	680e      	ldr	r6, [r1, #0]
 8008076:	bf08      	it	eq
 8008078:	694b      	ldreq	r3, [r1, #20]
 800807a:	600f      	str	r7, [r1, #0]
 800807c:	bf18      	it	ne
 800807e:	2300      	movne	r3, #0
 8008080:	eba6 0807 	sub.w	r8, r6, r7
 8008084:	608b      	str	r3, [r1, #8]
 8008086:	f1b8 0f00 	cmp.w	r8, #0
 800808a:	dd9c      	ble.n	8007fc6 <__sflush_r+0x1a>
 800808c:	6a21      	ldr	r1, [r4, #32]
 800808e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008090:	4643      	mov	r3, r8
 8008092:	463a      	mov	r2, r7
 8008094:	4628      	mov	r0, r5
 8008096:	47b0      	blx	r6
 8008098:	2800      	cmp	r0, #0
 800809a:	dc06      	bgt.n	80080aa <__sflush_r+0xfe>
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a2:	81a3      	strh	r3, [r4, #12]
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	e78e      	b.n	8007fc8 <__sflush_r+0x1c>
 80080aa:	4407      	add	r7, r0
 80080ac:	eba8 0800 	sub.w	r8, r8, r0
 80080b0:	e7e9      	b.n	8008086 <__sflush_r+0xda>
 80080b2:	bf00      	nop
 80080b4:	20400001 	.word	0x20400001

080080b8 <_fflush_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	690b      	ldr	r3, [r1, #16]
 80080bc:	4605      	mov	r5, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	b913      	cbnz	r3, 80080c8 <_fflush_r+0x10>
 80080c2:	2500      	movs	r5, #0
 80080c4:	4628      	mov	r0, r5
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	b118      	cbz	r0, 80080d2 <_fflush_r+0x1a>
 80080ca:	6983      	ldr	r3, [r0, #24]
 80080cc:	b90b      	cbnz	r3, 80080d2 <_fflush_r+0x1a>
 80080ce:	f000 f887 	bl	80081e0 <__sinit>
 80080d2:	4b14      	ldr	r3, [pc, #80]	; (8008124 <_fflush_r+0x6c>)
 80080d4:	429c      	cmp	r4, r3
 80080d6:	d11b      	bne.n	8008110 <_fflush_r+0x58>
 80080d8:	686c      	ldr	r4, [r5, #4]
 80080da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0ef      	beq.n	80080c2 <_fflush_r+0xa>
 80080e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080e4:	07d0      	lsls	r0, r2, #31
 80080e6:	d404      	bmi.n	80080f2 <_fflush_r+0x3a>
 80080e8:	0599      	lsls	r1, r3, #22
 80080ea:	d402      	bmi.n	80080f2 <_fflush_r+0x3a>
 80080ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ee:	f000 fc88 	bl	8008a02 <__retarget_lock_acquire_recursive>
 80080f2:	4628      	mov	r0, r5
 80080f4:	4621      	mov	r1, r4
 80080f6:	f7ff ff59 	bl	8007fac <__sflush_r>
 80080fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080fc:	07da      	lsls	r2, r3, #31
 80080fe:	4605      	mov	r5, r0
 8008100:	d4e0      	bmi.n	80080c4 <_fflush_r+0xc>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	059b      	lsls	r3, r3, #22
 8008106:	d4dd      	bmi.n	80080c4 <_fflush_r+0xc>
 8008108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810a:	f000 fc7b 	bl	8008a04 <__retarget_lock_release_recursive>
 800810e:	e7d9      	b.n	80080c4 <_fflush_r+0xc>
 8008110:	4b05      	ldr	r3, [pc, #20]	; (8008128 <_fflush_r+0x70>)
 8008112:	429c      	cmp	r4, r3
 8008114:	d101      	bne.n	800811a <_fflush_r+0x62>
 8008116:	68ac      	ldr	r4, [r5, #8]
 8008118:	e7df      	b.n	80080da <_fflush_r+0x22>
 800811a:	4b04      	ldr	r3, [pc, #16]	; (800812c <_fflush_r+0x74>)
 800811c:	429c      	cmp	r4, r3
 800811e:	bf08      	it	eq
 8008120:	68ec      	ldreq	r4, [r5, #12]
 8008122:	e7da      	b.n	80080da <_fflush_r+0x22>
 8008124:	0800b5fc 	.word	0x0800b5fc
 8008128:	0800b61c 	.word	0x0800b61c
 800812c:	0800b5dc 	.word	0x0800b5dc

08008130 <std>:
 8008130:	2300      	movs	r3, #0
 8008132:	b510      	push	{r4, lr}
 8008134:	4604      	mov	r4, r0
 8008136:	e9c0 3300 	strd	r3, r3, [r0]
 800813a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800813e:	6083      	str	r3, [r0, #8]
 8008140:	8181      	strh	r1, [r0, #12]
 8008142:	6643      	str	r3, [r0, #100]	; 0x64
 8008144:	81c2      	strh	r2, [r0, #14]
 8008146:	6183      	str	r3, [r0, #24]
 8008148:	4619      	mov	r1, r3
 800814a:	2208      	movs	r2, #8
 800814c:	305c      	adds	r0, #92	; 0x5c
 800814e:	f7fd f9fb 	bl	8005548 <memset>
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <std+0x38>)
 8008154:	6263      	str	r3, [r4, #36]	; 0x24
 8008156:	4b05      	ldr	r3, [pc, #20]	; (800816c <std+0x3c>)
 8008158:	62a3      	str	r3, [r4, #40]	; 0x28
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <std+0x40>)
 800815c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800815e:	4b05      	ldr	r3, [pc, #20]	; (8008174 <std+0x44>)
 8008160:	6224      	str	r4, [r4, #32]
 8008162:	6323      	str	r3, [r4, #48]	; 0x30
 8008164:	bd10      	pop	{r4, pc}
 8008166:	bf00      	nop
 8008168:	08009cc1 	.word	0x08009cc1
 800816c:	08009ce3 	.word	0x08009ce3
 8008170:	08009d1b 	.word	0x08009d1b
 8008174:	08009d3f 	.word	0x08009d3f

08008178 <_cleanup_r>:
 8008178:	4901      	ldr	r1, [pc, #4]	; (8008180 <_cleanup_r+0x8>)
 800817a:	f000 b8af 	b.w	80082dc <_fwalk_reent>
 800817e:	bf00      	nop
 8008180:	080080b9 	.word	0x080080b9

08008184 <__sfmoreglue>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	2268      	movs	r2, #104	; 0x68
 8008188:	1e4d      	subs	r5, r1, #1
 800818a:	4355      	muls	r5, r2
 800818c:	460e      	mov	r6, r1
 800818e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008192:	f001 fa09 	bl	80095a8 <_malloc_r>
 8008196:	4604      	mov	r4, r0
 8008198:	b140      	cbz	r0, 80081ac <__sfmoreglue+0x28>
 800819a:	2100      	movs	r1, #0
 800819c:	e9c0 1600 	strd	r1, r6, [r0]
 80081a0:	300c      	adds	r0, #12
 80081a2:	60a0      	str	r0, [r4, #8]
 80081a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081a8:	f7fd f9ce 	bl	8005548 <memset>
 80081ac:	4620      	mov	r0, r4
 80081ae:	bd70      	pop	{r4, r5, r6, pc}

080081b0 <__sfp_lock_acquire>:
 80081b0:	4801      	ldr	r0, [pc, #4]	; (80081b8 <__sfp_lock_acquire+0x8>)
 80081b2:	f000 bc26 	b.w	8008a02 <__retarget_lock_acquire_recursive>
 80081b6:	bf00      	nop
 80081b8:	20000301 	.word	0x20000301

080081bc <__sfp_lock_release>:
 80081bc:	4801      	ldr	r0, [pc, #4]	; (80081c4 <__sfp_lock_release+0x8>)
 80081be:	f000 bc21 	b.w	8008a04 <__retarget_lock_release_recursive>
 80081c2:	bf00      	nop
 80081c4:	20000301 	.word	0x20000301

080081c8 <__sinit_lock_acquire>:
 80081c8:	4801      	ldr	r0, [pc, #4]	; (80081d0 <__sinit_lock_acquire+0x8>)
 80081ca:	f000 bc1a 	b.w	8008a02 <__retarget_lock_acquire_recursive>
 80081ce:	bf00      	nop
 80081d0:	20000302 	.word	0x20000302

080081d4 <__sinit_lock_release>:
 80081d4:	4801      	ldr	r0, [pc, #4]	; (80081dc <__sinit_lock_release+0x8>)
 80081d6:	f000 bc15 	b.w	8008a04 <__retarget_lock_release_recursive>
 80081da:	bf00      	nop
 80081dc:	20000302 	.word	0x20000302

080081e0 <__sinit>:
 80081e0:	b510      	push	{r4, lr}
 80081e2:	4604      	mov	r4, r0
 80081e4:	f7ff fff0 	bl	80081c8 <__sinit_lock_acquire>
 80081e8:	69a3      	ldr	r3, [r4, #24]
 80081ea:	b11b      	cbz	r3, 80081f4 <__sinit+0x14>
 80081ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f0:	f7ff bff0 	b.w	80081d4 <__sinit_lock_release>
 80081f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081f8:	6523      	str	r3, [r4, #80]	; 0x50
 80081fa:	4b13      	ldr	r3, [pc, #76]	; (8008248 <__sinit+0x68>)
 80081fc:	4a13      	ldr	r2, [pc, #76]	; (800824c <__sinit+0x6c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	62a2      	str	r2, [r4, #40]	; 0x28
 8008202:	42a3      	cmp	r3, r4
 8008204:	bf04      	itt	eq
 8008206:	2301      	moveq	r3, #1
 8008208:	61a3      	streq	r3, [r4, #24]
 800820a:	4620      	mov	r0, r4
 800820c:	f000 f820 	bl	8008250 <__sfp>
 8008210:	6060      	str	r0, [r4, #4]
 8008212:	4620      	mov	r0, r4
 8008214:	f000 f81c 	bl	8008250 <__sfp>
 8008218:	60a0      	str	r0, [r4, #8]
 800821a:	4620      	mov	r0, r4
 800821c:	f000 f818 	bl	8008250 <__sfp>
 8008220:	2200      	movs	r2, #0
 8008222:	60e0      	str	r0, [r4, #12]
 8008224:	2104      	movs	r1, #4
 8008226:	6860      	ldr	r0, [r4, #4]
 8008228:	f7ff ff82 	bl	8008130 <std>
 800822c:	68a0      	ldr	r0, [r4, #8]
 800822e:	2201      	movs	r2, #1
 8008230:	2109      	movs	r1, #9
 8008232:	f7ff ff7d 	bl	8008130 <std>
 8008236:	68e0      	ldr	r0, [r4, #12]
 8008238:	2202      	movs	r2, #2
 800823a:	2112      	movs	r1, #18
 800823c:	f7ff ff78 	bl	8008130 <std>
 8008240:	2301      	movs	r3, #1
 8008242:	61a3      	str	r3, [r4, #24]
 8008244:	e7d2      	b.n	80081ec <__sinit+0xc>
 8008246:	bf00      	nop
 8008248:	0800b3b4 	.word	0x0800b3b4
 800824c:	08008179 	.word	0x08008179

08008250 <__sfp>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	4607      	mov	r7, r0
 8008254:	f7ff ffac 	bl	80081b0 <__sfp_lock_acquire>
 8008258:	4b1e      	ldr	r3, [pc, #120]	; (80082d4 <__sfp+0x84>)
 800825a:	681e      	ldr	r6, [r3, #0]
 800825c:	69b3      	ldr	r3, [r6, #24]
 800825e:	b913      	cbnz	r3, 8008266 <__sfp+0x16>
 8008260:	4630      	mov	r0, r6
 8008262:	f7ff ffbd 	bl	80081e0 <__sinit>
 8008266:	3648      	adds	r6, #72	; 0x48
 8008268:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800826c:	3b01      	subs	r3, #1
 800826e:	d503      	bpl.n	8008278 <__sfp+0x28>
 8008270:	6833      	ldr	r3, [r6, #0]
 8008272:	b30b      	cbz	r3, 80082b8 <__sfp+0x68>
 8008274:	6836      	ldr	r6, [r6, #0]
 8008276:	e7f7      	b.n	8008268 <__sfp+0x18>
 8008278:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800827c:	b9d5      	cbnz	r5, 80082b4 <__sfp+0x64>
 800827e:	4b16      	ldr	r3, [pc, #88]	; (80082d8 <__sfp+0x88>)
 8008280:	60e3      	str	r3, [r4, #12]
 8008282:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008286:	6665      	str	r5, [r4, #100]	; 0x64
 8008288:	f000 fbba 	bl	8008a00 <__retarget_lock_init_recursive>
 800828c:	f7ff ff96 	bl	80081bc <__sfp_lock_release>
 8008290:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008294:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008298:	6025      	str	r5, [r4, #0]
 800829a:	61a5      	str	r5, [r4, #24]
 800829c:	2208      	movs	r2, #8
 800829e:	4629      	mov	r1, r5
 80082a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082a4:	f7fd f950 	bl	8005548 <memset>
 80082a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082b0:	4620      	mov	r0, r4
 80082b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b4:	3468      	adds	r4, #104	; 0x68
 80082b6:	e7d9      	b.n	800826c <__sfp+0x1c>
 80082b8:	2104      	movs	r1, #4
 80082ba:	4638      	mov	r0, r7
 80082bc:	f7ff ff62 	bl	8008184 <__sfmoreglue>
 80082c0:	4604      	mov	r4, r0
 80082c2:	6030      	str	r0, [r6, #0]
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d1d5      	bne.n	8008274 <__sfp+0x24>
 80082c8:	f7ff ff78 	bl	80081bc <__sfp_lock_release>
 80082cc:	230c      	movs	r3, #12
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	e7ee      	b.n	80082b0 <__sfp+0x60>
 80082d2:	bf00      	nop
 80082d4:	0800b3b4 	.word	0x0800b3b4
 80082d8:	ffff0001 	.word	0xffff0001

080082dc <_fwalk_reent>:
 80082dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e0:	4606      	mov	r6, r0
 80082e2:	4688      	mov	r8, r1
 80082e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082e8:	2700      	movs	r7, #0
 80082ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082ee:	f1b9 0901 	subs.w	r9, r9, #1
 80082f2:	d505      	bpl.n	8008300 <_fwalk_reent+0x24>
 80082f4:	6824      	ldr	r4, [r4, #0]
 80082f6:	2c00      	cmp	r4, #0
 80082f8:	d1f7      	bne.n	80082ea <_fwalk_reent+0xe>
 80082fa:	4638      	mov	r0, r7
 80082fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008300:	89ab      	ldrh	r3, [r5, #12]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d907      	bls.n	8008316 <_fwalk_reent+0x3a>
 8008306:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800830a:	3301      	adds	r3, #1
 800830c:	d003      	beq.n	8008316 <_fwalk_reent+0x3a>
 800830e:	4629      	mov	r1, r5
 8008310:	4630      	mov	r0, r6
 8008312:	47c0      	blx	r8
 8008314:	4307      	orrs	r7, r0
 8008316:	3568      	adds	r5, #104	; 0x68
 8008318:	e7e9      	b.n	80082ee <_fwalk_reent+0x12>

0800831a <rshift>:
 800831a:	6903      	ldr	r3, [r0, #16]
 800831c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008324:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008328:	f100 0414 	add.w	r4, r0, #20
 800832c:	dd45      	ble.n	80083ba <rshift+0xa0>
 800832e:	f011 011f 	ands.w	r1, r1, #31
 8008332:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008336:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800833a:	d10c      	bne.n	8008356 <rshift+0x3c>
 800833c:	f100 0710 	add.w	r7, r0, #16
 8008340:	4629      	mov	r1, r5
 8008342:	42b1      	cmp	r1, r6
 8008344:	d334      	bcc.n	80083b0 <rshift+0x96>
 8008346:	1a9b      	subs	r3, r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	1eea      	subs	r2, r5, #3
 800834c:	4296      	cmp	r6, r2
 800834e:	bf38      	it	cc
 8008350:	2300      	movcc	r3, #0
 8008352:	4423      	add	r3, r4
 8008354:	e015      	b.n	8008382 <rshift+0x68>
 8008356:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800835a:	f1c1 0820 	rsb	r8, r1, #32
 800835e:	40cf      	lsrs	r7, r1
 8008360:	f105 0e04 	add.w	lr, r5, #4
 8008364:	46a1      	mov	r9, r4
 8008366:	4576      	cmp	r6, lr
 8008368:	46f4      	mov	ip, lr
 800836a:	d815      	bhi.n	8008398 <rshift+0x7e>
 800836c:	1a9a      	subs	r2, r3, r2
 800836e:	0092      	lsls	r2, r2, #2
 8008370:	3a04      	subs	r2, #4
 8008372:	3501      	adds	r5, #1
 8008374:	42ae      	cmp	r6, r5
 8008376:	bf38      	it	cc
 8008378:	2200      	movcc	r2, #0
 800837a:	18a3      	adds	r3, r4, r2
 800837c:	50a7      	str	r7, [r4, r2]
 800837e:	b107      	cbz	r7, 8008382 <rshift+0x68>
 8008380:	3304      	adds	r3, #4
 8008382:	1b1a      	subs	r2, r3, r4
 8008384:	42a3      	cmp	r3, r4
 8008386:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800838a:	bf08      	it	eq
 800838c:	2300      	moveq	r3, #0
 800838e:	6102      	str	r2, [r0, #16]
 8008390:	bf08      	it	eq
 8008392:	6143      	streq	r3, [r0, #20]
 8008394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008398:	f8dc c000 	ldr.w	ip, [ip]
 800839c:	fa0c fc08 	lsl.w	ip, ip, r8
 80083a0:	ea4c 0707 	orr.w	r7, ip, r7
 80083a4:	f849 7b04 	str.w	r7, [r9], #4
 80083a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083ac:	40cf      	lsrs	r7, r1
 80083ae:	e7da      	b.n	8008366 <rshift+0x4c>
 80083b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80083b4:	f847 cf04 	str.w	ip, [r7, #4]!
 80083b8:	e7c3      	b.n	8008342 <rshift+0x28>
 80083ba:	4623      	mov	r3, r4
 80083bc:	e7e1      	b.n	8008382 <rshift+0x68>

080083be <__hexdig_fun>:
 80083be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80083c2:	2b09      	cmp	r3, #9
 80083c4:	d802      	bhi.n	80083cc <__hexdig_fun+0xe>
 80083c6:	3820      	subs	r0, #32
 80083c8:	b2c0      	uxtb	r0, r0
 80083ca:	4770      	bx	lr
 80083cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80083d0:	2b05      	cmp	r3, #5
 80083d2:	d801      	bhi.n	80083d8 <__hexdig_fun+0x1a>
 80083d4:	3847      	subs	r0, #71	; 0x47
 80083d6:	e7f7      	b.n	80083c8 <__hexdig_fun+0xa>
 80083d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80083dc:	2b05      	cmp	r3, #5
 80083de:	d801      	bhi.n	80083e4 <__hexdig_fun+0x26>
 80083e0:	3827      	subs	r0, #39	; 0x27
 80083e2:	e7f1      	b.n	80083c8 <__hexdig_fun+0xa>
 80083e4:	2000      	movs	r0, #0
 80083e6:	4770      	bx	lr

080083e8 <__gethex>:
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	ed2d 8b02 	vpush	{d8}
 80083f0:	b089      	sub	sp, #36	; 0x24
 80083f2:	ee08 0a10 	vmov	s16, r0
 80083f6:	9304      	str	r3, [sp, #16]
 80083f8:	4bb4      	ldr	r3, [pc, #720]	; (80086cc <__gethex+0x2e4>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	4618      	mov	r0, r3
 8008400:	468b      	mov	fp, r1
 8008402:	4690      	mov	r8, r2
 8008404:	f7f7 ff0c 	bl	8000220 <strlen>
 8008408:	9b01      	ldr	r3, [sp, #4]
 800840a:	f8db 2000 	ldr.w	r2, [fp]
 800840e:	4403      	add	r3, r0
 8008410:	4682      	mov	sl, r0
 8008412:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008416:	9305      	str	r3, [sp, #20]
 8008418:	1c93      	adds	r3, r2, #2
 800841a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800841e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008422:	32fe      	adds	r2, #254	; 0xfe
 8008424:	18d1      	adds	r1, r2, r3
 8008426:	461f      	mov	r7, r3
 8008428:	f813 0b01 	ldrb.w	r0, [r3], #1
 800842c:	9100      	str	r1, [sp, #0]
 800842e:	2830      	cmp	r0, #48	; 0x30
 8008430:	d0f8      	beq.n	8008424 <__gethex+0x3c>
 8008432:	f7ff ffc4 	bl	80083be <__hexdig_fun>
 8008436:	4604      	mov	r4, r0
 8008438:	2800      	cmp	r0, #0
 800843a:	d13a      	bne.n	80084b2 <__gethex+0xca>
 800843c:	9901      	ldr	r1, [sp, #4]
 800843e:	4652      	mov	r2, sl
 8008440:	4638      	mov	r0, r7
 8008442:	f001 fc80 	bl	8009d46 <strncmp>
 8008446:	4605      	mov	r5, r0
 8008448:	2800      	cmp	r0, #0
 800844a:	d168      	bne.n	800851e <__gethex+0x136>
 800844c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008450:	eb07 060a 	add.w	r6, r7, sl
 8008454:	f7ff ffb3 	bl	80083be <__hexdig_fun>
 8008458:	2800      	cmp	r0, #0
 800845a:	d062      	beq.n	8008522 <__gethex+0x13a>
 800845c:	4633      	mov	r3, r6
 800845e:	7818      	ldrb	r0, [r3, #0]
 8008460:	2830      	cmp	r0, #48	; 0x30
 8008462:	461f      	mov	r7, r3
 8008464:	f103 0301 	add.w	r3, r3, #1
 8008468:	d0f9      	beq.n	800845e <__gethex+0x76>
 800846a:	f7ff ffa8 	bl	80083be <__hexdig_fun>
 800846e:	2301      	movs	r3, #1
 8008470:	fab0 f480 	clz	r4, r0
 8008474:	0964      	lsrs	r4, r4, #5
 8008476:	4635      	mov	r5, r6
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	463a      	mov	r2, r7
 800847c:	4616      	mov	r6, r2
 800847e:	3201      	adds	r2, #1
 8008480:	7830      	ldrb	r0, [r6, #0]
 8008482:	f7ff ff9c 	bl	80083be <__hexdig_fun>
 8008486:	2800      	cmp	r0, #0
 8008488:	d1f8      	bne.n	800847c <__gethex+0x94>
 800848a:	9901      	ldr	r1, [sp, #4]
 800848c:	4652      	mov	r2, sl
 800848e:	4630      	mov	r0, r6
 8008490:	f001 fc59 	bl	8009d46 <strncmp>
 8008494:	b980      	cbnz	r0, 80084b8 <__gethex+0xd0>
 8008496:	b94d      	cbnz	r5, 80084ac <__gethex+0xc4>
 8008498:	eb06 050a 	add.w	r5, r6, sl
 800849c:	462a      	mov	r2, r5
 800849e:	4616      	mov	r6, r2
 80084a0:	3201      	adds	r2, #1
 80084a2:	7830      	ldrb	r0, [r6, #0]
 80084a4:	f7ff ff8b 	bl	80083be <__hexdig_fun>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d1f8      	bne.n	800849e <__gethex+0xb6>
 80084ac:	1bad      	subs	r5, r5, r6
 80084ae:	00ad      	lsls	r5, r5, #2
 80084b0:	e004      	b.n	80084bc <__gethex+0xd4>
 80084b2:	2400      	movs	r4, #0
 80084b4:	4625      	mov	r5, r4
 80084b6:	e7e0      	b.n	800847a <__gethex+0x92>
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	d1f7      	bne.n	80084ac <__gethex+0xc4>
 80084bc:	7833      	ldrb	r3, [r6, #0]
 80084be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80084c2:	2b50      	cmp	r3, #80	; 0x50
 80084c4:	d13b      	bne.n	800853e <__gethex+0x156>
 80084c6:	7873      	ldrb	r3, [r6, #1]
 80084c8:	2b2b      	cmp	r3, #43	; 0x2b
 80084ca:	d02c      	beq.n	8008526 <__gethex+0x13e>
 80084cc:	2b2d      	cmp	r3, #45	; 0x2d
 80084ce:	d02e      	beq.n	800852e <__gethex+0x146>
 80084d0:	1c71      	adds	r1, r6, #1
 80084d2:	f04f 0900 	mov.w	r9, #0
 80084d6:	7808      	ldrb	r0, [r1, #0]
 80084d8:	f7ff ff71 	bl	80083be <__hexdig_fun>
 80084dc:	1e43      	subs	r3, r0, #1
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b18      	cmp	r3, #24
 80084e2:	d82c      	bhi.n	800853e <__gethex+0x156>
 80084e4:	f1a0 0210 	sub.w	r2, r0, #16
 80084e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80084ec:	f7ff ff67 	bl	80083be <__hexdig_fun>
 80084f0:	1e43      	subs	r3, r0, #1
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b18      	cmp	r3, #24
 80084f6:	d91d      	bls.n	8008534 <__gethex+0x14c>
 80084f8:	f1b9 0f00 	cmp.w	r9, #0
 80084fc:	d000      	beq.n	8008500 <__gethex+0x118>
 80084fe:	4252      	negs	r2, r2
 8008500:	4415      	add	r5, r2
 8008502:	f8cb 1000 	str.w	r1, [fp]
 8008506:	b1e4      	cbz	r4, 8008542 <__gethex+0x15a>
 8008508:	9b00      	ldr	r3, [sp, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	bf14      	ite	ne
 800850e:	2700      	movne	r7, #0
 8008510:	2706      	moveq	r7, #6
 8008512:	4638      	mov	r0, r7
 8008514:	b009      	add	sp, #36	; 0x24
 8008516:	ecbd 8b02 	vpop	{d8}
 800851a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851e:	463e      	mov	r6, r7
 8008520:	4625      	mov	r5, r4
 8008522:	2401      	movs	r4, #1
 8008524:	e7ca      	b.n	80084bc <__gethex+0xd4>
 8008526:	f04f 0900 	mov.w	r9, #0
 800852a:	1cb1      	adds	r1, r6, #2
 800852c:	e7d3      	b.n	80084d6 <__gethex+0xee>
 800852e:	f04f 0901 	mov.w	r9, #1
 8008532:	e7fa      	b.n	800852a <__gethex+0x142>
 8008534:	230a      	movs	r3, #10
 8008536:	fb03 0202 	mla	r2, r3, r2, r0
 800853a:	3a10      	subs	r2, #16
 800853c:	e7d4      	b.n	80084e8 <__gethex+0x100>
 800853e:	4631      	mov	r1, r6
 8008540:	e7df      	b.n	8008502 <__gethex+0x11a>
 8008542:	1bf3      	subs	r3, r6, r7
 8008544:	3b01      	subs	r3, #1
 8008546:	4621      	mov	r1, r4
 8008548:	2b07      	cmp	r3, #7
 800854a:	dc0b      	bgt.n	8008564 <__gethex+0x17c>
 800854c:	ee18 0a10 	vmov	r0, s16
 8008550:	f000 fae6 	bl	8008b20 <_Balloc>
 8008554:	4604      	mov	r4, r0
 8008556:	b940      	cbnz	r0, 800856a <__gethex+0x182>
 8008558:	4b5d      	ldr	r3, [pc, #372]	; (80086d0 <__gethex+0x2e8>)
 800855a:	4602      	mov	r2, r0
 800855c:	21de      	movs	r1, #222	; 0xde
 800855e:	485d      	ldr	r0, [pc, #372]	; (80086d4 <__gethex+0x2ec>)
 8008560:	f001 fc24 	bl	8009dac <__assert_func>
 8008564:	3101      	adds	r1, #1
 8008566:	105b      	asrs	r3, r3, #1
 8008568:	e7ee      	b.n	8008548 <__gethex+0x160>
 800856a:	f100 0914 	add.w	r9, r0, #20
 800856e:	f04f 0b00 	mov.w	fp, #0
 8008572:	f1ca 0301 	rsb	r3, sl, #1
 8008576:	f8cd 9008 	str.w	r9, [sp, #8]
 800857a:	f8cd b000 	str.w	fp, [sp]
 800857e:	9306      	str	r3, [sp, #24]
 8008580:	42b7      	cmp	r7, r6
 8008582:	d340      	bcc.n	8008606 <__gethex+0x21e>
 8008584:	9802      	ldr	r0, [sp, #8]
 8008586:	9b00      	ldr	r3, [sp, #0]
 8008588:	f840 3b04 	str.w	r3, [r0], #4
 800858c:	eba0 0009 	sub.w	r0, r0, r9
 8008590:	1080      	asrs	r0, r0, #2
 8008592:	0146      	lsls	r6, r0, #5
 8008594:	6120      	str	r0, [r4, #16]
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fbb4 	bl	8008d04 <__hi0bits>
 800859c:	1a30      	subs	r0, r6, r0
 800859e:	f8d8 6000 	ldr.w	r6, [r8]
 80085a2:	42b0      	cmp	r0, r6
 80085a4:	dd63      	ble.n	800866e <__gethex+0x286>
 80085a6:	1b87      	subs	r7, r0, r6
 80085a8:	4639      	mov	r1, r7
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 ff58 	bl	8009460 <__any_on>
 80085b0:	4682      	mov	sl, r0
 80085b2:	b1a8      	cbz	r0, 80085e0 <__gethex+0x1f8>
 80085b4:	1e7b      	subs	r3, r7, #1
 80085b6:	1159      	asrs	r1, r3, #5
 80085b8:	f003 021f 	and.w	r2, r3, #31
 80085bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80085c0:	f04f 0a01 	mov.w	sl, #1
 80085c4:	fa0a f202 	lsl.w	r2, sl, r2
 80085c8:	420a      	tst	r2, r1
 80085ca:	d009      	beq.n	80085e0 <__gethex+0x1f8>
 80085cc:	4553      	cmp	r3, sl
 80085ce:	dd05      	ble.n	80085dc <__gethex+0x1f4>
 80085d0:	1eb9      	subs	r1, r7, #2
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 ff44 	bl	8009460 <__any_on>
 80085d8:	2800      	cmp	r0, #0
 80085da:	d145      	bne.n	8008668 <__gethex+0x280>
 80085dc:	f04f 0a02 	mov.w	sl, #2
 80085e0:	4639      	mov	r1, r7
 80085e2:	4620      	mov	r0, r4
 80085e4:	f7ff fe99 	bl	800831a <rshift>
 80085e8:	443d      	add	r5, r7
 80085ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085ee:	42ab      	cmp	r3, r5
 80085f0:	da4c      	bge.n	800868c <__gethex+0x2a4>
 80085f2:	ee18 0a10 	vmov	r0, s16
 80085f6:	4621      	mov	r1, r4
 80085f8:	f000 fad2 	bl	8008ba0 <_Bfree>
 80085fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085fe:	2300      	movs	r3, #0
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	27a3      	movs	r7, #163	; 0xa3
 8008604:	e785      	b.n	8008512 <__gethex+0x12a>
 8008606:	1e73      	subs	r3, r6, #1
 8008608:	9a05      	ldr	r2, [sp, #20]
 800860a:	9303      	str	r3, [sp, #12]
 800860c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008610:	4293      	cmp	r3, r2
 8008612:	d019      	beq.n	8008648 <__gethex+0x260>
 8008614:	f1bb 0f20 	cmp.w	fp, #32
 8008618:	d107      	bne.n	800862a <__gethex+0x242>
 800861a:	9b02      	ldr	r3, [sp, #8]
 800861c:	9a00      	ldr	r2, [sp, #0]
 800861e:	f843 2b04 	str.w	r2, [r3], #4
 8008622:	9302      	str	r3, [sp, #8]
 8008624:	2300      	movs	r3, #0
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	469b      	mov	fp, r3
 800862a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800862e:	f7ff fec6 	bl	80083be <__hexdig_fun>
 8008632:	9b00      	ldr	r3, [sp, #0]
 8008634:	f000 000f 	and.w	r0, r0, #15
 8008638:	fa00 f00b 	lsl.w	r0, r0, fp
 800863c:	4303      	orrs	r3, r0
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	f10b 0b04 	add.w	fp, fp, #4
 8008644:	9b03      	ldr	r3, [sp, #12]
 8008646:	e00d      	b.n	8008664 <__gethex+0x27c>
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	9a06      	ldr	r2, [sp, #24]
 800864c:	4413      	add	r3, r2
 800864e:	42bb      	cmp	r3, r7
 8008650:	d3e0      	bcc.n	8008614 <__gethex+0x22c>
 8008652:	4618      	mov	r0, r3
 8008654:	9901      	ldr	r1, [sp, #4]
 8008656:	9307      	str	r3, [sp, #28]
 8008658:	4652      	mov	r2, sl
 800865a:	f001 fb74 	bl	8009d46 <strncmp>
 800865e:	9b07      	ldr	r3, [sp, #28]
 8008660:	2800      	cmp	r0, #0
 8008662:	d1d7      	bne.n	8008614 <__gethex+0x22c>
 8008664:	461e      	mov	r6, r3
 8008666:	e78b      	b.n	8008580 <__gethex+0x198>
 8008668:	f04f 0a03 	mov.w	sl, #3
 800866c:	e7b8      	b.n	80085e0 <__gethex+0x1f8>
 800866e:	da0a      	bge.n	8008686 <__gethex+0x29e>
 8008670:	1a37      	subs	r7, r6, r0
 8008672:	4621      	mov	r1, r4
 8008674:	ee18 0a10 	vmov	r0, s16
 8008678:	463a      	mov	r2, r7
 800867a:	f000 fcad 	bl	8008fd8 <__lshift>
 800867e:	1bed      	subs	r5, r5, r7
 8008680:	4604      	mov	r4, r0
 8008682:	f100 0914 	add.w	r9, r0, #20
 8008686:	f04f 0a00 	mov.w	sl, #0
 800868a:	e7ae      	b.n	80085ea <__gethex+0x202>
 800868c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008690:	42a8      	cmp	r0, r5
 8008692:	dd72      	ble.n	800877a <__gethex+0x392>
 8008694:	1b45      	subs	r5, r0, r5
 8008696:	42ae      	cmp	r6, r5
 8008698:	dc36      	bgt.n	8008708 <__gethex+0x320>
 800869a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d02a      	beq.n	80086f8 <__gethex+0x310>
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d02c      	beq.n	8008700 <__gethex+0x318>
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d11c      	bne.n	80086e4 <__gethex+0x2fc>
 80086aa:	42ae      	cmp	r6, r5
 80086ac:	d11a      	bne.n	80086e4 <__gethex+0x2fc>
 80086ae:	2e01      	cmp	r6, #1
 80086b0:	d112      	bne.n	80086d8 <__gethex+0x2f0>
 80086b2:	9a04      	ldr	r2, [sp, #16]
 80086b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	2301      	movs	r3, #1
 80086bc:	6123      	str	r3, [r4, #16]
 80086be:	f8c9 3000 	str.w	r3, [r9]
 80086c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086c4:	2762      	movs	r7, #98	; 0x62
 80086c6:	601c      	str	r4, [r3, #0]
 80086c8:	e723      	b.n	8008512 <__gethex+0x12a>
 80086ca:	bf00      	nop
 80086cc:	0800b6a4 	.word	0x0800b6a4
 80086d0:	0800b5c8 	.word	0x0800b5c8
 80086d4:	0800b63c 	.word	0x0800b63c
 80086d8:	1e71      	subs	r1, r6, #1
 80086da:	4620      	mov	r0, r4
 80086dc:	f000 fec0 	bl	8009460 <__any_on>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d1e6      	bne.n	80086b2 <__gethex+0x2ca>
 80086e4:	ee18 0a10 	vmov	r0, s16
 80086e8:	4621      	mov	r1, r4
 80086ea:	f000 fa59 	bl	8008ba0 <_Bfree>
 80086ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086f0:	2300      	movs	r3, #0
 80086f2:	6013      	str	r3, [r2, #0]
 80086f4:	2750      	movs	r7, #80	; 0x50
 80086f6:	e70c      	b.n	8008512 <__gethex+0x12a>
 80086f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1f2      	bne.n	80086e4 <__gethex+0x2fc>
 80086fe:	e7d8      	b.n	80086b2 <__gethex+0x2ca>
 8008700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1d5      	bne.n	80086b2 <__gethex+0x2ca>
 8008706:	e7ed      	b.n	80086e4 <__gethex+0x2fc>
 8008708:	1e6f      	subs	r7, r5, #1
 800870a:	f1ba 0f00 	cmp.w	sl, #0
 800870e:	d131      	bne.n	8008774 <__gethex+0x38c>
 8008710:	b127      	cbz	r7, 800871c <__gethex+0x334>
 8008712:	4639      	mov	r1, r7
 8008714:	4620      	mov	r0, r4
 8008716:	f000 fea3 	bl	8009460 <__any_on>
 800871a:	4682      	mov	sl, r0
 800871c:	117b      	asrs	r3, r7, #5
 800871e:	2101      	movs	r1, #1
 8008720:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008724:	f007 071f 	and.w	r7, r7, #31
 8008728:	fa01 f707 	lsl.w	r7, r1, r7
 800872c:	421f      	tst	r7, r3
 800872e:	4629      	mov	r1, r5
 8008730:	4620      	mov	r0, r4
 8008732:	bf18      	it	ne
 8008734:	f04a 0a02 	orrne.w	sl, sl, #2
 8008738:	1b76      	subs	r6, r6, r5
 800873a:	f7ff fdee 	bl	800831a <rshift>
 800873e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008742:	2702      	movs	r7, #2
 8008744:	f1ba 0f00 	cmp.w	sl, #0
 8008748:	d048      	beq.n	80087dc <__gethex+0x3f4>
 800874a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800874e:	2b02      	cmp	r3, #2
 8008750:	d015      	beq.n	800877e <__gethex+0x396>
 8008752:	2b03      	cmp	r3, #3
 8008754:	d017      	beq.n	8008786 <__gethex+0x39e>
 8008756:	2b01      	cmp	r3, #1
 8008758:	d109      	bne.n	800876e <__gethex+0x386>
 800875a:	f01a 0f02 	tst.w	sl, #2
 800875e:	d006      	beq.n	800876e <__gethex+0x386>
 8008760:	f8d9 0000 	ldr.w	r0, [r9]
 8008764:	ea4a 0a00 	orr.w	sl, sl, r0
 8008768:	f01a 0f01 	tst.w	sl, #1
 800876c:	d10e      	bne.n	800878c <__gethex+0x3a4>
 800876e:	f047 0710 	orr.w	r7, r7, #16
 8008772:	e033      	b.n	80087dc <__gethex+0x3f4>
 8008774:	f04f 0a01 	mov.w	sl, #1
 8008778:	e7d0      	b.n	800871c <__gethex+0x334>
 800877a:	2701      	movs	r7, #1
 800877c:	e7e2      	b.n	8008744 <__gethex+0x35c>
 800877e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008780:	f1c3 0301 	rsb	r3, r3, #1
 8008784:	9315      	str	r3, [sp, #84]	; 0x54
 8008786:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008788:	2b00      	cmp	r3, #0
 800878a:	d0f0      	beq.n	800876e <__gethex+0x386>
 800878c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008790:	f104 0314 	add.w	r3, r4, #20
 8008794:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008798:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800879c:	f04f 0c00 	mov.w	ip, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80087aa:	d01c      	beq.n	80087e6 <__gethex+0x3fe>
 80087ac:	3201      	adds	r2, #1
 80087ae:	6002      	str	r2, [r0, #0]
 80087b0:	2f02      	cmp	r7, #2
 80087b2:	f104 0314 	add.w	r3, r4, #20
 80087b6:	d13f      	bne.n	8008838 <__gethex+0x450>
 80087b8:	f8d8 2000 	ldr.w	r2, [r8]
 80087bc:	3a01      	subs	r2, #1
 80087be:	42b2      	cmp	r2, r6
 80087c0:	d10a      	bne.n	80087d8 <__gethex+0x3f0>
 80087c2:	1171      	asrs	r1, r6, #5
 80087c4:	2201      	movs	r2, #1
 80087c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087ca:	f006 061f 	and.w	r6, r6, #31
 80087ce:	fa02 f606 	lsl.w	r6, r2, r6
 80087d2:	421e      	tst	r6, r3
 80087d4:	bf18      	it	ne
 80087d6:	4617      	movne	r7, r2
 80087d8:	f047 0720 	orr.w	r7, r7, #32
 80087dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087de:	601c      	str	r4, [r3, #0]
 80087e0:	9b04      	ldr	r3, [sp, #16]
 80087e2:	601d      	str	r5, [r3, #0]
 80087e4:	e695      	b.n	8008512 <__gethex+0x12a>
 80087e6:	4299      	cmp	r1, r3
 80087e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80087ec:	d8d8      	bhi.n	80087a0 <__gethex+0x3b8>
 80087ee:	68a3      	ldr	r3, [r4, #8]
 80087f0:	459b      	cmp	fp, r3
 80087f2:	db19      	blt.n	8008828 <__gethex+0x440>
 80087f4:	6861      	ldr	r1, [r4, #4]
 80087f6:	ee18 0a10 	vmov	r0, s16
 80087fa:	3101      	adds	r1, #1
 80087fc:	f000 f990 	bl	8008b20 <_Balloc>
 8008800:	4681      	mov	r9, r0
 8008802:	b918      	cbnz	r0, 800880c <__gethex+0x424>
 8008804:	4b1a      	ldr	r3, [pc, #104]	; (8008870 <__gethex+0x488>)
 8008806:	4602      	mov	r2, r0
 8008808:	2184      	movs	r1, #132	; 0x84
 800880a:	e6a8      	b.n	800855e <__gethex+0x176>
 800880c:	6922      	ldr	r2, [r4, #16]
 800880e:	3202      	adds	r2, #2
 8008810:	f104 010c 	add.w	r1, r4, #12
 8008814:	0092      	lsls	r2, r2, #2
 8008816:	300c      	adds	r0, #12
 8008818:	f000 f974 	bl	8008b04 <memcpy>
 800881c:	4621      	mov	r1, r4
 800881e:	ee18 0a10 	vmov	r0, s16
 8008822:	f000 f9bd 	bl	8008ba0 <_Bfree>
 8008826:	464c      	mov	r4, r9
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008830:	6122      	str	r2, [r4, #16]
 8008832:	2201      	movs	r2, #1
 8008834:	615a      	str	r2, [r3, #20]
 8008836:	e7bb      	b.n	80087b0 <__gethex+0x3c8>
 8008838:	6922      	ldr	r2, [r4, #16]
 800883a:	455a      	cmp	r2, fp
 800883c:	dd0b      	ble.n	8008856 <__gethex+0x46e>
 800883e:	2101      	movs	r1, #1
 8008840:	4620      	mov	r0, r4
 8008842:	f7ff fd6a 	bl	800831a <rshift>
 8008846:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800884a:	3501      	adds	r5, #1
 800884c:	42ab      	cmp	r3, r5
 800884e:	f6ff aed0 	blt.w	80085f2 <__gethex+0x20a>
 8008852:	2701      	movs	r7, #1
 8008854:	e7c0      	b.n	80087d8 <__gethex+0x3f0>
 8008856:	f016 061f 	ands.w	r6, r6, #31
 800885a:	d0fa      	beq.n	8008852 <__gethex+0x46a>
 800885c:	4453      	add	r3, sl
 800885e:	f1c6 0620 	rsb	r6, r6, #32
 8008862:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008866:	f000 fa4d 	bl	8008d04 <__hi0bits>
 800886a:	42b0      	cmp	r0, r6
 800886c:	dbe7      	blt.n	800883e <__gethex+0x456>
 800886e:	e7f0      	b.n	8008852 <__gethex+0x46a>
 8008870:	0800b5c8 	.word	0x0800b5c8

08008874 <L_shift>:
 8008874:	f1c2 0208 	rsb	r2, r2, #8
 8008878:	0092      	lsls	r2, r2, #2
 800887a:	b570      	push	{r4, r5, r6, lr}
 800887c:	f1c2 0620 	rsb	r6, r2, #32
 8008880:	6843      	ldr	r3, [r0, #4]
 8008882:	6804      	ldr	r4, [r0, #0]
 8008884:	fa03 f506 	lsl.w	r5, r3, r6
 8008888:	432c      	orrs	r4, r5
 800888a:	40d3      	lsrs	r3, r2
 800888c:	6004      	str	r4, [r0, #0]
 800888e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008892:	4288      	cmp	r0, r1
 8008894:	d3f4      	bcc.n	8008880 <L_shift+0xc>
 8008896:	bd70      	pop	{r4, r5, r6, pc}

08008898 <__match>:
 8008898:	b530      	push	{r4, r5, lr}
 800889a:	6803      	ldr	r3, [r0, #0]
 800889c:	3301      	adds	r3, #1
 800889e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088a2:	b914      	cbnz	r4, 80088aa <__match+0x12>
 80088a4:	6003      	str	r3, [r0, #0]
 80088a6:	2001      	movs	r0, #1
 80088a8:	bd30      	pop	{r4, r5, pc}
 80088aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80088b2:	2d19      	cmp	r5, #25
 80088b4:	bf98      	it	ls
 80088b6:	3220      	addls	r2, #32
 80088b8:	42a2      	cmp	r2, r4
 80088ba:	d0f0      	beq.n	800889e <__match+0x6>
 80088bc:	2000      	movs	r0, #0
 80088be:	e7f3      	b.n	80088a8 <__match+0x10>

080088c0 <__hexnan>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	680b      	ldr	r3, [r1, #0]
 80088c6:	115e      	asrs	r6, r3, #5
 80088c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088cc:	f013 031f 	ands.w	r3, r3, #31
 80088d0:	b087      	sub	sp, #28
 80088d2:	bf18      	it	ne
 80088d4:	3604      	addne	r6, #4
 80088d6:	2500      	movs	r5, #0
 80088d8:	1f37      	subs	r7, r6, #4
 80088da:	4690      	mov	r8, r2
 80088dc:	6802      	ldr	r2, [r0, #0]
 80088de:	9301      	str	r3, [sp, #4]
 80088e0:	4682      	mov	sl, r0
 80088e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80088e6:	46b9      	mov	r9, r7
 80088e8:	463c      	mov	r4, r7
 80088ea:	9502      	str	r5, [sp, #8]
 80088ec:	46ab      	mov	fp, r5
 80088ee:	7851      	ldrb	r1, [r2, #1]
 80088f0:	1c53      	adds	r3, r2, #1
 80088f2:	9303      	str	r3, [sp, #12]
 80088f4:	b341      	cbz	r1, 8008948 <__hexnan+0x88>
 80088f6:	4608      	mov	r0, r1
 80088f8:	9205      	str	r2, [sp, #20]
 80088fa:	9104      	str	r1, [sp, #16]
 80088fc:	f7ff fd5f 	bl	80083be <__hexdig_fun>
 8008900:	2800      	cmp	r0, #0
 8008902:	d14f      	bne.n	80089a4 <__hexnan+0xe4>
 8008904:	9904      	ldr	r1, [sp, #16]
 8008906:	9a05      	ldr	r2, [sp, #20]
 8008908:	2920      	cmp	r1, #32
 800890a:	d818      	bhi.n	800893e <__hexnan+0x7e>
 800890c:	9b02      	ldr	r3, [sp, #8]
 800890e:	459b      	cmp	fp, r3
 8008910:	dd13      	ble.n	800893a <__hexnan+0x7a>
 8008912:	454c      	cmp	r4, r9
 8008914:	d206      	bcs.n	8008924 <__hexnan+0x64>
 8008916:	2d07      	cmp	r5, #7
 8008918:	dc04      	bgt.n	8008924 <__hexnan+0x64>
 800891a:	462a      	mov	r2, r5
 800891c:	4649      	mov	r1, r9
 800891e:	4620      	mov	r0, r4
 8008920:	f7ff ffa8 	bl	8008874 <L_shift>
 8008924:	4544      	cmp	r4, r8
 8008926:	d950      	bls.n	80089ca <__hexnan+0x10a>
 8008928:	2300      	movs	r3, #0
 800892a:	f1a4 0904 	sub.w	r9, r4, #4
 800892e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008932:	f8cd b008 	str.w	fp, [sp, #8]
 8008936:	464c      	mov	r4, r9
 8008938:	461d      	mov	r5, r3
 800893a:	9a03      	ldr	r2, [sp, #12]
 800893c:	e7d7      	b.n	80088ee <__hexnan+0x2e>
 800893e:	2929      	cmp	r1, #41	; 0x29
 8008940:	d156      	bne.n	80089f0 <__hexnan+0x130>
 8008942:	3202      	adds	r2, #2
 8008944:	f8ca 2000 	str.w	r2, [sl]
 8008948:	f1bb 0f00 	cmp.w	fp, #0
 800894c:	d050      	beq.n	80089f0 <__hexnan+0x130>
 800894e:	454c      	cmp	r4, r9
 8008950:	d206      	bcs.n	8008960 <__hexnan+0xa0>
 8008952:	2d07      	cmp	r5, #7
 8008954:	dc04      	bgt.n	8008960 <__hexnan+0xa0>
 8008956:	462a      	mov	r2, r5
 8008958:	4649      	mov	r1, r9
 800895a:	4620      	mov	r0, r4
 800895c:	f7ff ff8a 	bl	8008874 <L_shift>
 8008960:	4544      	cmp	r4, r8
 8008962:	d934      	bls.n	80089ce <__hexnan+0x10e>
 8008964:	f1a8 0204 	sub.w	r2, r8, #4
 8008968:	4623      	mov	r3, r4
 800896a:	f853 1b04 	ldr.w	r1, [r3], #4
 800896e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008972:	429f      	cmp	r7, r3
 8008974:	d2f9      	bcs.n	800896a <__hexnan+0xaa>
 8008976:	1b3b      	subs	r3, r7, r4
 8008978:	f023 0303 	bic.w	r3, r3, #3
 800897c:	3304      	adds	r3, #4
 800897e:	3401      	adds	r4, #1
 8008980:	3e03      	subs	r6, #3
 8008982:	42b4      	cmp	r4, r6
 8008984:	bf88      	it	hi
 8008986:	2304      	movhi	r3, #4
 8008988:	4443      	add	r3, r8
 800898a:	2200      	movs	r2, #0
 800898c:	f843 2b04 	str.w	r2, [r3], #4
 8008990:	429f      	cmp	r7, r3
 8008992:	d2fb      	bcs.n	800898c <__hexnan+0xcc>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	b91b      	cbnz	r3, 80089a0 <__hexnan+0xe0>
 8008998:	4547      	cmp	r7, r8
 800899a:	d127      	bne.n	80089ec <__hexnan+0x12c>
 800899c:	2301      	movs	r3, #1
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	2005      	movs	r0, #5
 80089a2:	e026      	b.n	80089f2 <__hexnan+0x132>
 80089a4:	3501      	adds	r5, #1
 80089a6:	2d08      	cmp	r5, #8
 80089a8:	f10b 0b01 	add.w	fp, fp, #1
 80089ac:	dd06      	ble.n	80089bc <__hexnan+0xfc>
 80089ae:	4544      	cmp	r4, r8
 80089b0:	d9c3      	bls.n	800893a <__hexnan+0x7a>
 80089b2:	2300      	movs	r3, #0
 80089b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80089b8:	2501      	movs	r5, #1
 80089ba:	3c04      	subs	r4, #4
 80089bc:	6822      	ldr	r2, [r4, #0]
 80089be:	f000 000f 	and.w	r0, r0, #15
 80089c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80089c6:	6022      	str	r2, [r4, #0]
 80089c8:	e7b7      	b.n	800893a <__hexnan+0x7a>
 80089ca:	2508      	movs	r5, #8
 80089cc:	e7b5      	b.n	800893a <__hexnan+0x7a>
 80089ce:	9b01      	ldr	r3, [sp, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0df      	beq.n	8008994 <__hexnan+0xd4>
 80089d4:	f04f 32ff 	mov.w	r2, #4294967295
 80089d8:	f1c3 0320 	rsb	r3, r3, #32
 80089dc:	fa22 f303 	lsr.w	r3, r2, r3
 80089e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80089e4:	401a      	ands	r2, r3
 80089e6:	f846 2c04 	str.w	r2, [r6, #-4]
 80089ea:	e7d3      	b.n	8008994 <__hexnan+0xd4>
 80089ec:	3f04      	subs	r7, #4
 80089ee:	e7d1      	b.n	8008994 <__hexnan+0xd4>
 80089f0:	2004      	movs	r0, #4
 80089f2:	b007      	add	sp, #28
 80089f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089f8 <_localeconv_r>:
 80089f8:	4800      	ldr	r0, [pc, #0]	; (80089fc <_localeconv_r+0x4>)
 80089fa:	4770      	bx	lr
 80089fc:	20000164 	.word	0x20000164

08008a00 <__retarget_lock_init_recursive>:
 8008a00:	4770      	bx	lr

08008a02 <__retarget_lock_acquire_recursive>:
 8008a02:	4770      	bx	lr

08008a04 <__retarget_lock_release_recursive>:
 8008a04:	4770      	bx	lr

08008a06 <__swhatbuf_r>:
 8008a06:	b570      	push	{r4, r5, r6, lr}
 8008a08:	460e      	mov	r6, r1
 8008a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0e:	2900      	cmp	r1, #0
 8008a10:	b096      	sub	sp, #88	; 0x58
 8008a12:	4614      	mov	r4, r2
 8008a14:	461d      	mov	r5, r3
 8008a16:	da08      	bge.n	8008a2a <__swhatbuf_r+0x24>
 8008a18:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	602a      	str	r2, [r5, #0]
 8008a20:	061a      	lsls	r2, r3, #24
 8008a22:	d410      	bmi.n	8008a46 <__swhatbuf_r+0x40>
 8008a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a28:	e00e      	b.n	8008a48 <__swhatbuf_r+0x42>
 8008a2a:	466a      	mov	r2, sp
 8008a2c:	f001 f9fe 	bl	8009e2c <_fstat_r>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	dbf1      	blt.n	8008a18 <__swhatbuf_r+0x12>
 8008a34:	9a01      	ldr	r2, [sp, #4]
 8008a36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a3e:	425a      	negs	r2, r3
 8008a40:	415a      	adcs	r2, r3
 8008a42:	602a      	str	r2, [r5, #0]
 8008a44:	e7ee      	b.n	8008a24 <__swhatbuf_r+0x1e>
 8008a46:	2340      	movs	r3, #64	; 0x40
 8008a48:	2000      	movs	r0, #0
 8008a4a:	6023      	str	r3, [r4, #0]
 8008a4c:	b016      	add	sp, #88	; 0x58
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}

08008a50 <__smakebuf_r>:
 8008a50:	898b      	ldrh	r3, [r1, #12]
 8008a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a54:	079d      	lsls	r5, r3, #30
 8008a56:	4606      	mov	r6, r0
 8008a58:	460c      	mov	r4, r1
 8008a5a:	d507      	bpl.n	8008a6c <__smakebuf_r+0x1c>
 8008a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	2301      	movs	r3, #1
 8008a66:	6163      	str	r3, [r4, #20]
 8008a68:	b002      	add	sp, #8
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
 8008a6c:	ab01      	add	r3, sp, #4
 8008a6e:	466a      	mov	r2, sp
 8008a70:	f7ff ffc9 	bl	8008a06 <__swhatbuf_r>
 8008a74:	9900      	ldr	r1, [sp, #0]
 8008a76:	4605      	mov	r5, r0
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f000 fd95 	bl	80095a8 <_malloc_r>
 8008a7e:	b948      	cbnz	r0, 8008a94 <__smakebuf_r+0x44>
 8008a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a84:	059a      	lsls	r2, r3, #22
 8008a86:	d4ef      	bmi.n	8008a68 <__smakebuf_r+0x18>
 8008a88:	f023 0303 	bic.w	r3, r3, #3
 8008a8c:	f043 0302 	orr.w	r3, r3, #2
 8008a90:	81a3      	strh	r3, [r4, #12]
 8008a92:	e7e3      	b.n	8008a5c <__smakebuf_r+0xc>
 8008a94:	4b0d      	ldr	r3, [pc, #52]	; (8008acc <__smakebuf_r+0x7c>)
 8008a96:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	6020      	str	r0, [r4, #0]
 8008a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	9b00      	ldr	r3, [sp, #0]
 8008aa4:	6163      	str	r3, [r4, #20]
 8008aa6:	9b01      	ldr	r3, [sp, #4]
 8008aa8:	6120      	str	r0, [r4, #16]
 8008aaa:	b15b      	cbz	r3, 8008ac4 <__smakebuf_r+0x74>
 8008aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f001 f9cd 	bl	8009e50 <_isatty_r>
 8008ab6:	b128      	cbz	r0, 8008ac4 <__smakebuf_r+0x74>
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	f043 0301 	orr.w	r3, r3, #1
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	89a0      	ldrh	r0, [r4, #12]
 8008ac6:	4305      	orrs	r5, r0
 8008ac8:	81a5      	strh	r5, [r4, #12]
 8008aca:	e7cd      	b.n	8008a68 <__smakebuf_r+0x18>
 8008acc:	08008179 	.word	0x08008179

08008ad0 <malloc>:
 8008ad0:	4b02      	ldr	r3, [pc, #8]	; (8008adc <malloc+0xc>)
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	6818      	ldr	r0, [r3, #0]
 8008ad6:	f000 bd67 	b.w	80095a8 <_malloc_r>
 8008ada:	bf00      	nop
 8008adc:	2000000c 	.word	0x2000000c

08008ae0 <__ascii_mbtowc>:
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	b901      	cbnz	r1, 8008ae6 <__ascii_mbtowc+0x6>
 8008ae4:	a901      	add	r1, sp, #4
 8008ae6:	b142      	cbz	r2, 8008afa <__ascii_mbtowc+0x1a>
 8008ae8:	b14b      	cbz	r3, 8008afe <__ascii_mbtowc+0x1e>
 8008aea:	7813      	ldrb	r3, [r2, #0]
 8008aec:	600b      	str	r3, [r1, #0]
 8008aee:	7812      	ldrb	r2, [r2, #0]
 8008af0:	1e10      	subs	r0, r2, #0
 8008af2:	bf18      	it	ne
 8008af4:	2001      	movne	r0, #1
 8008af6:	b002      	add	sp, #8
 8008af8:	4770      	bx	lr
 8008afa:	4610      	mov	r0, r2
 8008afc:	e7fb      	b.n	8008af6 <__ascii_mbtowc+0x16>
 8008afe:	f06f 0001 	mvn.w	r0, #1
 8008b02:	e7f8      	b.n	8008af6 <__ascii_mbtowc+0x16>

08008b04 <memcpy>:
 8008b04:	440a      	add	r2, r1
 8008b06:	4291      	cmp	r1, r2
 8008b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b0c:	d100      	bne.n	8008b10 <memcpy+0xc>
 8008b0e:	4770      	bx	lr
 8008b10:	b510      	push	{r4, lr}
 8008b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b1a:	4291      	cmp	r1, r2
 8008b1c:	d1f9      	bne.n	8008b12 <memcpy+0xe>
 8008b1e:	bd10      	pop	{r4, pc}

08008b20 <_Balloc>:
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b24:	4604      	mov	r4, r0
 8008b26:	460d      	mov	r5, r1
 8008b28:	b976      	cbnz	r6, 8008b48 <_Balloc+0x28>
 8008b2a:	2010      	movs	r0, #16
 8008b2c:	f7ff ffd0 	bl	8008ad0 <malloc>
 8008b30:	4602      	mov	r2, r0
 8008b32:	6260      	str	r0, [r4, #36]	; 0x24
 8008b34:	b920      	cbnz	r0, 8008b40 <_Balloc+0x20>
 8008b36:	4b18      	ldr	r3, [pc, #96]	; (8008b98 <_Balloc+0x78>)
 8008b38:	4818      	ldr	r0, [pc, #96]	; (8008b9c <_Balloc+0x7c>)
 8008b3a:	2166      	movs	r1, #102	; 0x66
 8008b3c:	f001 f936 	bl	8009dac <__assert_func>
 8008b40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b44:	6006      	str	r6, [r0, #0]
 8008b46:	60c6      	str	r6, [r0, #12]
 8008b48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b4a:	68f3      	ldr	r3, [r6, #12]
 8008b4c:	b183      	cbz	r3, 8008b70 <_Balloc+0x50>
 8008b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b56:	b9b8      	cbnz	r0, 8008b88 <_Balloc+0x68>
 8008b58:	2101      	movs	r1, #1
 8008b5a:	fa01 f605 	lsl.w	r6, r1, r5
 8008b5e:	1d72      	adds	r2, r6, #5
 8008b60:	0092      	lsls	r2, r2, #2
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 fc9d 	bl	80094a2 <_calloc_r>
 8008b68:	b160      	cbz	r0, 8008b84 <_Balloc+0x64>
 8008b6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b6e:	e00e      	b.n	8008b8e <_Balloc+0x6e>
 8008b70:	2221      	movs	r2, #33	; 0x21
 8008b72:	2104      	movs	r1, #4
 8008b74:	4620      	mov	r0, r4
 8008b76:	f000 fc94 	bl	80094a2 <_calloc_r>
 8008b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b7c:	60f0      	str	r0, [r6, #12]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e4      	bne.n	8008b4e <_Balloc+0x2e>
 8008b84:	2000      	movs	r0, #0
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	6802      	ldr	r2, [r0, #0]
 8008b8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b94:	e7f7      	b.n	8008b86 <_Balloc+0x66>
 8008b96:	bf00      	nop
 8008b98:	0800b556 	.word	0x0800b556
 8008b9c:	0800b6b8 	.word	0x0800b6b8

08008ba0 <_Bfree>:
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	b976      	cbnz	r6, 8008bc8 <_Bfree+0x28>
 8008baa:	2010      	movs	r0, #16
 8008bac:	f7ff ff90 	bl	8008ad0 <malloc>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	6268      	str	r0, [r5, #36]	; 0x24
 8008bb4:	b920      	cbnz	r0, 8008bc0 <_Bfree+0x20>
 8008bb6:	4b09      	ldr	r3, [pc, #36]	; (8008bdc <_Bfree+0x3c>)
 8008bb8:	4809      	ldr	r0, [pc, #36]	; (8008be0 <_Bfree+0x40>)
 8008bba:	218a      	movs	r1, #138	; 0x8a
 8008bbc:	f001 f8f6 	bl	8009dac <__assert_func>
 8008bc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bc4:	6006      	str	r6, [r0, #0]
 8008bc6:	60c6      	str	r6, [r0, #12]
 8008bc8:	b13c      	cbz	r4, 8008bda <_Bfree+0x3a>
 8008bca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bcc:	6862      	ldr	r2, [r4, #4]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bd4:	6021      	str	r1, [r4, #0]
 8008bd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
 8008bdc:	0800b556 	.word	0x0800b556
 8008be0:	0800b6b8 	.word	0x0800b6b8

08008be4 <__multadd>:
 8008be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be8:	690d      	ldr	r5, [r1, #16]
 8008bea:	4607      	mov	r7, r0
 8008bec:	460c      	mov	r4, r1
 8008bee:	461e      	mov	r6, r3
 8008bf0:	f101 0c14 	add.w	ip, r1, #20
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	f8dc 3000 	ldr.w	r3, [ip]
 8008bfa:	b299      	uxth	r1, r3
 8008bfc:	fb02 6101 	mla	r1, r2, r1, r6
 8008c00:	0c1e      	lsrs	r6, r3, #16
 8008c02:	0c0b      	lsrs	r3, r1, #16
 8008c04:	fb02 3306 	mla	r3, r2, r6, r3
 8008c08:	b289      	uxth	r1, r1
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c10:	4285      	cmp	r5, r0
 8008c12:	f84c 1b04 	str.w	r1, [ip], #4
 8008c16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c1a:	dcec      	bgt.n	8008bf6 <__multadd+0x12>
 8008c1c:	b30e      	cbz	r6, 8008c62 <__multadd+0x7e>
 8008c1e:	68a3      	ldr	r3, [r4, #8]
 8008c20:	42ab      	cmp	r3, r5
 8008c22:	dc19      	bgt.n	8008c58 <__multadd+0x74>
 8008c24:	6861      	ldr	r1, [r4, #4]
 8008c26:	4638      	mov	r0, r7
 8008c28:	3101      	adds	r1, #1
 8008c2a:	f7ff ff79 	bl	8008b20 <_Balloc>
 8008c2e:	4680      	mov	r8, r0
 8008c30:	b928      	cbnz	r0, 8008c3e <__multadd+0x5a>
 8008c32:	4602      	mov	r2, r0
 8008c34:	4b0c      	ldr	r3, [pc, #48]	; (8008c68 <__multadd+0x84>)
 8008c36:	480d      	ldr	r0, [pc, #52]	; (8008c6c <__multadd+0x88>)
 8008c38:	21b5      	movs	r1, #181	; 0xb5
 8008c3a:	f001 f8b7 	bl	8009dac <__assert_func>
 8008c3e:	6922      	ldr	r2, [r4, #16]
 8008c40:	3202      	adds	r2, #2
 8008c42:	f104 010c 	add.w	r1, r4, #12
 8008c46:	0092      	lsls	r2, r2, #2
 8008c48:	300c      	adds	r0, #12
 8008c4a:	f7ff ff5b 	bl	8008b04 <memcpy>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4638      	mov	r0, r7
 8008c52:	f7ff ffa5 	bl	8008ba0 <_Bfree>
 8008c56:	4644      	mov	r4, r8
 8008c58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c5c:	3501      	adds	r5, #1
 8008c5e:	615e      	str	r6, [r3, #20]
 8008c60:	6125      	str	r5, [r4, #16]
 8008c62:	4620      	mov	r0, r4
 8008c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c68:	0800b5c8 	.word	0x0800b5c8
 8008c6c:	0800b6b8 	.word	0x0800b6b8

08008c70 <__s2b>:
 8008c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c74:	460c      	mov	r4, r1
 8008c76:	4615      	mov	r5, r2
 8008c78:	461f      	mov	r7, r3
 8008c7a:	2209      	movs	r2, #9
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	4606      	mov	r6, r0
 8008c80:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c84:	2100      	movs	r1, #0
 8008c86:	2201      	movs	r2, #1
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	db09      	blt.n	8008ca0 <__s2b+0x30>
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	f7ff ff47 	bl	8008b20 <_Balloc>
 8008c92:	b940      	cbnz	r0, 8008ca6 <__s2b+0x36>
 8008c94:	4602      	mov	r2, r0
 8008c96:	4b19      	ldr	r3, [pc, #100]	; (8008cfc <__s2b+0x8c>)
 8008c98:	4819      	ldr	r0, [pc, #100]	; (8008d00 <__s2b+0x90>)
 8008c9a:	21ce      	movs	r1, #206	; 0xce
 8008c9c:	f001 f886 	bl	8009dac <__assert_func>
 8008ca0:	0052      	lsls	r2, r2, #1
 8008ca2:	3101      	adds	r1, #1
 8008ca4:	e7f0      	b.n	8008c88 <__s2b+0x18>
 8008ca6:	9b08      	ldr	r3, [sp, #32]
 8008ca8:	6143      	str	r3, [r0, #20]
 8008caa:	2d09      	cmp	r5, #9
 8008cac:	f04f 0301 	mov.w	r3, #1
 8008cb0:	6103      	str	r3, [r0, #16]
 8008cb2:	dd16      	ble.n	8008ce2 <__s2b+0x72>
 8008cb4:	f104 0909 	add.w	r9, r4, #9
 8008cb8:	46c8      	mov	r8, r9
 8008cba:	442c      	add	r4, r5
 8008cbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008cc0:	4601      	mov	r1, r0
 8008cc2:	3b30      	subs	r3, #48	; 0x30
 8008cc4:	220a      	movs	r2, #10
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f7ff ff8c 	bl	8008be4 <__multadd>
 8008ccc:	45a0      	cmp	r8, r4
 8008cce:	d1f5      	bne.n	8008cbc <__s2b+0x4c>
 8008cd0:	f1a5 0408 	sub.w	r4, r5, #8
 8008cd4:	444c      	add	r4, r9
 8008cd6:	1b2d      	subs	r5, r5, r4
 8008cd8:	1963      	adds	r3, r4, r5
 8008cda:	42bb      	cmp	r3, r7
 8008cdc:	db04      	blt.n	8008ce8 <__s2b+0x78>
 8008cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ce2:	340a      	adds	r4, #10
 8008ce4:	2509      	movs	r5, #9
 8008ce6:	e7f6      	b.n	8008cd6 <__s2b+0x66>
 8008ce8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008cec:	4601      	mov	r1, r0
 8008cee:	3b30      	subs	r3, #48	; 0x30
 8008cf0:	220a      	movs	r2, #10
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f7ff ff76 	bl	8008be4 <__multadd>
 8008cf8:	e7ee      	b.n	8008cd8 <__s2b+0x68>
 8008cfa:	bf00      	nop
 8008cfc:	0800b5c8 	.word	0x0800b5c8
 8008d00:	0800b6b8 	.word	0x0800b6b8

08008d04 <__hi0bits>:
 8008d04:	0c03      	lsrs	r3, r0, #16
 8008d06:	041b      	lsls	r3, r3, #16
 8008d08:	b9d3      	cbnz	r3, 8008d40 <__hi0bits+0x3c>
 8008d0a:	0400      	lsls	r0, r0, #16
 8008d0c:	2310      	movs	r3, #16
 8008d0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d12:	bf04      	itt	eq
 8008d14:	0200      	lsleq	r0, r0, #8
 8008d16:	3308      	addeq	r3, #8
 8008d18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d1c:	bf04      	itt	eq
 8008d1e:	0100      	lsleq	r0, r0, #4
 8008d20:	3304      	addeq	r3, #4
 8008d22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d26:	bf04      	itt	eq
 8008d28:	0080      	lsleq	r0, r0, #2
 8008d2a:	3302      	addeq	r3, #2
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	db05      	blt.n	8008d3c <__hi0bits+0x38>
 8008d30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d34:	f103 0301 	add.w	r3, r3, #1
 8008d38:	bf08      	it	eq
 8008d3a:	2320      	moveq	r3, #32
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	4770      	bx	lr
 8008d40:	2300      	movs	r3, #0
 8008d42:	e7e4      	b.n	8008d0e <__hi0bits+0xa>

08008d44 <__lo0bits>:
 8008d44:	6803      	ldr	r3, [r0, #0]
 8008d46:	f013 0207 	ands.w	r2, r3, #7
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	d00b      	beq.n	8008d66 <__lo0bits+0x22>
 8008d4e:	07da      	lsls	r2, r3, #31
 8008d50:	d423      	bmi.n	8008d9a <__lo0bits+0x56>
 8008d52:	0798      	lsls	r0, r3, #30
 8008d54:	bf49      	itett	mi
 8008d56:	085b      	lsrmi	r3, r3, #1
 8008d58:	089b      	lsrpl	r3, r3, #2
 8008d5a:	2001      	movmi	r0, #1
 8008d5c:	600b      	strmi	r3, [r1, #0]
 8008d5e:	bf5c      	itt	pl
 8008d60:	600b      	strpl	r3, [r1, #0]
 8008d62:	2002      	movpl	r0, #2
 8008d64:	4770      	bx	lr
 8008d66:	b298      	uxth	r0, r3
 8008d68:	b9a8      	cbnz	r0, 8008d96 <__lo0bits+0x52>
 8008d6a:	0c1b      	lsrs	r3, r3, #16
 8008d6c:	2010      	movs	r0, #16
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	b90a      	cbnz	r2, 8008d76 <__lo0bits+0x32>
 8008d72:	3008      	adds	r0, #8
 8008d74:	0a1b      	lsrs	r3, r3, #8
 8008d76:	071a      	lsls	r2, r3, #28
 8008d78:	bf04      	itt	eq
 8008d7a:	091b      	lsreq	r3, r3, #4
 8008d7c:	3004      	addeq	r0, #4
 8008d7e:	079a      	lsls	r2, r3, #30
 8008d80:	bf04      	itt	eq
 8008d82:	089b      	lsreq	r3, r3, #2
 8008d84:	3002      	addeq	r0, #2
 8008d86:	07da      	lsls	r2, r3, #31
 8008d88:	d403      	bmi.n	8008d92 <__lo0bits+0x4e>
 8008d8a:	085b      	lsrs	r3, r3, #1
 8008d8c:	f100 0001 	add.w	r0, r0, #1
 8008d90:	d005      	beq.n	8008d9e <__lo0bits+0x5a>
 8008d92:	600b      	str	r3, [r1, #0]
 8008d94:	4770      	bx	lr
 8008d96:	4610      	mov	r0, r2
 8008d98:	e7e9      	b.n	8008d6e <__lo0bits+0x2a>
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	4770      	bx	lr
 8008d9e:	2020      	movs	r0, #32
 8008da0:	4770      	bx	lr
	...

08008da4 <__i2b>:
 8008da4:	b510      	push	{r4, lr}
 8008da6:	460c      	mov	r4, r1
 8008da8:	2101      	movs	r1, #1
 8008daa:	f7ff feb9 	bl	8008b20 <_Balloc>
 8008dae:	4602      	mov	r2, r0
 8008db0:	b928      	cbnz	r0, 8008dbe <__i2b+0x1a>
 8008db2:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <__i2b+0x24>)
 8008db4:	4805      	ldr	r0, [pc, #20]	; (8008dcc <__i2b+0x28>)
 8008db6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008dba:	f000 fff7 	bl	8009dac <__assert_func>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	6144      	str	r4, [r0, #20]
 8008dc2:	6103      	str	r3, [r0, #16]
 8008dc4:	bd10      	pop	{r4, pc}
 8008dc6:	bf00      	nop
 8008dc8:	0800b5c8 	.word	0x0800b5c8
 8008dcc:	0800b6b8 	.word	0x0800b6b8

08008dd0 <__multiply>:
 8008dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	4691      	mov	r9, r2
 8008dd6:	690a      	ldr	r2, [r1, #16]
 8008dd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	bfb8      	it	lt
 8008de0:	460b      	movlt	r3, r1
 8008de2:	460c      	mov	r4, r1
 8008de4:	bfbc      	itt	lt
 8008de6:	464c      	movlt	r4, r9
 8008de8:	4699      	movlt	r9, r3
 8008dea:	6927      	ldr	r7, [r4, #16]
 8008dec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008df0:	68a3      	ldr	r3, [r4, #8]
 8008df2:	6861      	ldr	r1, [r4, #4]
 8008df4:	eb07 060a 	add.w	r6, r7, sl
 8008df8:	42b3      	cmp	r3, r6
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	bfb8      	it	lt
 8008dfe:	3101      	addlt	r1, #1
 8008e00:	f7ff fe8e 	bl	8008b20 <_Balloc>
 8008e04:	b930      	cbnz	r0, 8008e14 <__multiply+0x44>
 8008e06:	4602      	mov	r2, r0
 8008e08:	4b44      	ldr	r3, [pc, #272]	; (8008f1c <__multiply+0x14c>)
 8008e0a:	4845      	ldr	r0, [pc, #276]	; (8008f20 <__multiply+0x150>)
 8008e0c:	f240 115d 	movw	r1, #349	; 0x15d
 8008e10:	f000 ffcc 	bl	8009dac <__assert_func>
 8008e14:	f100 0514 	add.w	r5, r0, #20
 8008e18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e1c:	462b      	mov	r3, r5
 8008e1e:	2200      	movs	r2, #0
 8008e20:	4543      	cmp	r3, r8
 8008e22:	d321      	bcc.n	8008e68 <__multiply+0x98>
 8008e24:	f104 0314 	add.w	r3, r4, #20
 8008e28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e2c:	f109 0314 	add.w	r3, r9, #20
 8008e30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e34:	9202      	str	r2, [sp, #8]
 8008e36:	1b3a      	subs	r2, r7, r4
 8008e38:	3a15      	subs	r2, #21
 8008e3a:	f022 0203 	bic.w	r2, r2, #3
 8008e3e:	3204      	adds	r2, #4
 8008e40:	f104 0115 	add.w	r1, r4, #21
 8008e44:	428f      	cmp	r7, r1
 8008e46:	bf38      	it	cc
 8008e48:	2204      	movcc	r2, #4
 8008e4a:	9201      	str	r2, [sp, #4]
 8008e4c:	9a02      	ldr	r2, [sp, #8]
 8008e4e:	9303      	str	r3, [sp, #12]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d80c      	bhi.n	8008e6e <__multiply+0x9e>
 8008e54:	2e00      	cmp	r6, #0
 8008e56:	dd03      	ble.n	8008e60 <__multiply+0x90>
 8008e58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d05a      	beq.n	8008f16 <__multiply+0x146>
 8008e60:	6106      	str	r6, [r0, #16]
 8008e62:	b005      	add	sp, #20
 8008e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e68:	f843 2b04 	str.w	r2, [r3], #4
 8008e6c:	e7d8      	b.n	8008e20 <__multiply+0x50>
 8008e6e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e72:	f1ba 0f00 	cmp.w	sl, #0
 8008e76:	d024      	beq.n	8008ec2 <__multiply+0xf2>
 8008e78:	f104 0e14 	add.w	lr, r4, #20
 8008e7c:	46a9      	mov	r9, r5
 8008e7e:	f04f 0c00 	mov.w	ip, #0
 8008e82:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008e86:	f8d9 1000 	ldr.w	r1, [r9]
 8008e8a:	fa1f fb82 	uxth.w	fp, r2
 8008e8e:	b289      	uxth	r1, r1
 8008e90:	fb0a 110b 	mla	r1, sl, fp, r1
 8008e94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008e98:	f8d9 2000 	ldr.w	r2, [r9]
 8008e9c:	4461      	add	r1, ip
 8008e9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ea2:	fb0a c20b 	mla	r2, sl, fp, ip
 8008ea6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008eaa:	b289      	uxth	r1, r1
 8008eac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008eb0:	4577      	cmp	r7, lr
 8008eb2:	f849 1b04 	str.w	r1, [r9], #4
 8008eb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008eba:	d8e2      	bhi.n	8008e82 <__multiply+0xb2>
 8008ebc:	9a01      	ldr	r2, [sp, #4]
 8008ebe:	f845 c002 	str.w	ip, [r5, r2]
 8008ec2:	9a03      	ldr	r2, [sp, #12]
 8008ec4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	f1b9 0f00 	cmp.w	r9, #0
 8008ece:	d020      	beq.n	8008f12 <__multiply+0x142>
 8008ed0:	6829      	ldr	r1, [r5, #0]
 8008ed2:	f104 0c14 	add.w	ip, r4, #20
 8008ed6:	46ae      	mov	lr, r5
 8008ed8:	f04f 0a00 	mov.w	sl, #0
 8008edc:	f8bc b000 	ldrh.w	fp, [ip]
 8008ee0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ee4:	fb09 220b 	mla	r2, r9, fp, r2
 8008ee8:	4492      	add	sl, r2
 8008eea:	b289      	uxth	r1, r1
 8008eec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008ef0:	f84e 1b04 	str.w	r1, [lr], #4
 8008ef4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ef8:	f8be 1000 	ldrh.w	r1, [lr]
 8008efc:	0c12      	lsrs	r2, r2, #16
 8008efe:	fb09 1102 	mla	r1, r9, r2, r1
 8008f02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008f06:	4567      	cmp	r7, ip
 8008f08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f0c:	d8e6      	bhi.n	8008edc <__multiply+0x10c>
 8008f0e:	9a01      	ldr	r2, [sp, #4]
 8008f10:	50a9      	str	r1, [r5, r2]
 8008f12:	3504      	adds	r5, #4
 8008f14:	e79a      	b.n	8008e4c <__multiply+0x7c>
 8008f16:	3e01      	subs	r6, #1
 8008f18:	e79c      	b.n	8008e54 <__multiply+0x84>
 8008f1a:	bf00      	nop
 8008f1c:	0800b5c8 	.word	0x0800b5c8
 8008f20:	0800b6b8 	.word	0x0800b6b8

08008f24 <__pow5mult>:
 8008f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f28:	4615      	mov	r5, r2
 8008f2a:	f012 0203 	ands.w	r2, r2, #3
 8008f2e:	4606      	mov	r6, r0
 8008f30:	460f      	mov	r7, r1
 8008f32:	d007      	beq.n	8008f44 <__pow5mult+0x20>
 8008f34:	4c25      	ldr	r4, [pc, #148]	; (8008fcc <__pow5mult+0xa8>)
 8008f36:	3a01      	subs	r2, #1
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f3e:	f7ff fe51 	bl	8008be4 <__multadd>
 8008f42:	4607      	mov	r7, r0
 8008f44:	10ad      	asrs	r5, r5, #2
 8008f46:	d03d      	beq.n	8008fc4 <__pow5mult+0xa0>
 8008f48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f4a:	b97c      	cbnz	r4, 8008f6c <__pow5mult+0x48>
 8008f4c:	2010      	movs	r0, #16
 8008f4e:	f7ff fdbf 	bl	8008ad0 <malloc>
 8008f52:	4602      	mov	r2, r0
 8008f54:	6270      	str	r0, [r6, #36]	; 0x24
 8008f56:	b928      	cbnz	r0, 8008f64 <__pow5mult+0x40>
 8008f58:	4b1d      	ldr	r3, [pc, #116]	; (8008fd0 <__pow5mult+0xac>)
 8008f5a:	481e      	ldr	r0, [pc, #120]	; (8008fd4 <__pow5mult+0xb0>)
 8008f5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f60:	f000 ff24 	bl	8009dac <__assert_func>
 8008f64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f68:	6004      	str	r4, [r0, #0]
 8008f6a:	60c4      	str	r4, [r0, #12]
 8008f6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f74:	b94c      	cbnz	r4, 8008f8a <__pow5mult+0x66>
 8008f76:	f240 2171 	movw	r1, #625	; 0x271
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f7ff ff12 	bl	8008da4 <__i2b>
 8008f80:	2300      	movs	r3, #0
 8008f82:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f86:	4604      	mov	r4, r0
 8008f88:	6003      	str	r3, [r0, #0]
 8008f8a:	f04f 0900 	mov.w	r9, #0
 8008f8e:	07eb      	lsls	r3, r5, #31
 8008f90:	d50a      	bpl.n	8008fa8 <__pow5mult+0x84>
 8008f92:	4639      	mov	r1, r7
 8008f94:	4622      	mov	r2, r4
 8008f96:	4630      	mov	r0, r6
 8008f98:	f7ff ff1a 	bl	8008dd0 <__multiply>
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	4680      	mov	r8, r0
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f7ff fdfd 	bl	8008ba0 <_Bfree>
 8008fa6:	4647      	mov	r7, r8
 8008fa8:	106d      	asrs	r5, r5, #1
 8008faa:	d00b      	beq.n	8008fc4 <__pow5mult+0xa0>
 8008fac:	6820      	ldr	r0, [r4, #0]
 8008fae:	b938      	cbnz	r0, 8008fc0 <__pow5mult+0x9c>
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f7ff ff0b 	bl	8008dd0 <__multiply>
 8008fba:	6020      	str	r0, [r4, #0]
 8008fbc:	f8c0 9000 	str.w	r9, [r0]
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	e7e4      	b.n	8008f8e <__pow5mult+0x6a>
 8008fc4:	4638      	mov	r0, r7
 8008fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fca:	bf00      	nop
 8008fcc:	0800b808 	.word	0x0800b808
 8008fd0:	0800b556 	.word	0x0800b556
 8008fd4:	0800b6b8 	.word	0x0800b6b8

08008fd8 <__lshift>:
 8008fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fdc:	460c      	mov	r4, r1
 8008fde:	6849      	ldr	r1, [r1, #4]
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	4607      	mov	r7, r0
 8008fea:	4691      	mov	r9, r2
 8008fec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ff0:	f108 0601 	add.w	r6, r8, #1
 8008ff4:	42b3      	cmp	r3, r6
 8008ff6:	db0b      	blt.n	8009010 <__lshift+0x38>
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff fd91 	bl	8008b20 <_Balloc>
 8008ffe:	4605      	mov	r5, r0
 8009000:	b948      	cbnz	r0, 8009016 <__lshift+0x3e>
 8009002:	4602      	mov	r2, r0
 8009004:	4b2a      	ldr	r3, [pc, #168]	; (80090b0 <__lshift+0xd8>)
 8009006:	482b      	ldr	r0, [pc, #172]	; (80090b4 <__lshift+0xdc>)
 8009008:	f240 11d9 	movw	r1, #473	; 0x1d9
 800900c:	f000 fece 	bl	8009dac <__assert_func>
 8009010:	3101      	adds	r1, #1
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	e7ee      	b.n	8008ff4 <__lshift+0x1c>
 8009016:	2300      	movs	r3, #0
 8009018:	f100 0114 	add.w	r1, r0, #20
 800901c:	f100 0210 	add.w	r2, r0, #16
 8009020:	4618      	mov	r0, r3
 8009022:	4553      	cmp	r3, sl
 8009024:	db37      	blt.n	8009096 <__lshift+0xbe>
 8009026:	6920      	ldr	r0, [r4, #16]
 8009028:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800902c:	f104 0314 	add.w	r3, r4, #20
 8009030:	f019 091f 	ands.w	r9, r9, #31
 8009034:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009038:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800903c:	d02f      	beq.n	800909e <__lshift+0xc6>
 800903e:	f1c9 0e20 	rsb	lr, r9, #32
 8009042:	468a      	mov	sl, r1
 8009044:	f04f 0c00 	mov.w	ip, #0
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	fa02 f209 	lsl.w	r2, r2, r9
 800904e:	ea42 020c 	orr.w	r2, r2, ip
 8009052:	f84a 2b04 	str.w	r2, [sl], #4
 8009056:	f853 2b04 	ldr.w	r2, [r3], #4
 800905a:	4298      	cmp	r0, r3
 800905c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009060:	d8f2      	bhi.n	8009048 <__lshift+0x70>
 8009062:	1b03      	subs	r3, r0, r4
 8009064:	3b15      	subs	r3, #21
 8009066:	f023 0303 	bic.w	r3, r3, #3
 800906a:	3304      	adds	r3, #4
 800906c:	f104 0215 	add.w	r2, r4, #21
 8009070:	4290      	cmp	r0, r2
 8009072:	bf38      	it	cc
 8009074:	2304      	movcc	r3, #4
 8009076:	f841 c003 	str.w	ip, [r1, r3]
 800907a:	f1bc 0f00 	cmp.w	ip, #0
 800907e:	d001      	beq.n	8009084 <__lshift+0xac>
 8009080:	f108 0602 	add.w	r6, r8, #2
 8009084:	3e01      	subs	r6, #1
 8009086:	4638      	mov	r0, r7
 8009088:	612e      	str	r6, [r5, #16]
 800908a:	4621      	mov	r1, r4
 800908c:	f7ff fd88 	bl	8008ba0 <_Bfree>
 8009090:	4628      	mov	r0, r5
 8009092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009096:	f842 0f04 	str.w	r0, [r2, #4]!
 800909a:	3301      	adds	r3, #1
 800909c:	e7c1      	b.n	8009022 <__lshift+0x4a>
 800909e:	3904      	subs	r1, #4
 80090a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80090a8:	4298      	cmp	r0, r3
 80090aa:	d8f9      	bhi.n	80090a0 <__lshift+0xc8>
 80090ac:	e7ea      	b.n	8009084 <__lshift+0xac>
 80090ae:	bf00      	nop
 80090b0:	0800b5c8 	.word	0x0800b5c8
 80090b4:	0800b6b8 	.word	0x0800b6b8

080090b8 <__mcmp>:
 80090b8:	b530      	push	{r4, r5, lr}
 80090ba:	6902      	ldr	r2, [r0, #16]
 80090bc:	690c      	ldr	r4, [r1, #16]
 80090be:	1b12      	subs	r2, r2, r4
 80090c0:	d10e      	bne.n	80090e0 <__mcmp+0x28>
 80090c2:	f100 0314 	add.w	r3, r0, #20
 80090c6:	3114      	adds	r1, #20
 80090c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80090cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80090d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80090d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80090d8:	42a5      	cmp	r5, r4
 80090da:	d003      	beq.n	80090e4 <__mcmp+0x2c>
 80090dc:	d305      	bcc.n	80090ea <__mcmp+0x32>
 80090de:	2201      	movs	r2, #1
 80090e0:	4610      	mov	r0, r2
 80090e2:	bd30      	pop	{r4, r5, pc}
 80090e4:	4283      	cmp	r3, r0
 80090e6:	d3f3      	bcc.n	80090d0 <__mcmp+0x18>
 80090e8:	e7fa      	b.n	80090e0 <__mcmp+0x28>
 80090ea:	f04f 32ff 	mov.w	r2, #4294967295
 80090ee:	e7f7      	b.n	80090e0 <__mcmp+0x28>

080090f0 <__mdiff>:
 80090f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f4:	460c      	mov	r4, r1
 80090f6:	4606      	mov	r6, r0
 80090f8:	4611      	mov	r1, r2
 80090fa:	4620      	mov	r0, r4
 80090fc:	4690      	mov	r8, r2
 80090fe:	f7ff ffdb 	bl	80090b8 <__mcmp>
 8009102:	1e05      	subs	r5, r0, #0
 8009104:	d110      	bne.n	8009128 <__mdiff+0x38>
 8009106:	4629      	mov	r1, r5
 8009108:	4630      	mov	r0, r6
 800910a:	f7ff fd09 	bl	8008b20 <_Balloc>
 800910e:	b930      	cbnz	r0, 800911e <__mdiff+0x2e>
 8009110:	4b3a      	ldr	r3, [pc, #232]	; (80091fc <__mdiff+0x10c>)
 8009112:	4602      	mov	r2, r0
 8009114:	f240 2132 	movw	r1, #562	; 0x232
 8009118:	4839      	ldr	r0, [pc, #228]	; (8009200 <__mdiff+0x110>)
 800911a:	f000 fe47 	bl	8009dac <__assert_func>
 800911e:	2301      	movs	r3, #1
 8009120:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009128:	bfa4      	itt	ge
 800912a:	4643      	movge	r3, r8
 800912c:	46a0      	movge	r8, r4
 800912e:	4630      	mov	r0, r6
 8009130:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009134:	bfa6      	itte	ge
 8009136:	461c      	movge	r4, r3
 8009138:	2500      	movge	r5, #0
 800913a:	2501      	movlt	r5, #1
 800913c:	f7ff fcf0 	bl	8008b20 <_Balloc>
 8009140:	b920      	cbnz	r0, 800914c <__mdiff+0x5c>
 8009142:	4b2e      	ldr	r3, [pc, #184]	; (80091fc <__mdiff+0x10c>)
 8009144:	4602      	mov	r2, r0
 8009146:	f44f 7110 	mov.w	r1, #576	; 0x240
 800914a:	e7e5      	b.n	8009118 <__mdiff+0x28>
 800914c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009150:	6926      	ldr	r6, [r4, #16]
 8009152:	60c5      	str	r5, [r0, #12]
 8009154:	f104 0914 	add.w	r9, r4, #20
 8009158:	f108 0514 	add.w	r5, r8, #20
 800915c:	f100 0e14 	add.w	lr, r0, #20
 8009160:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009164:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009168:	f108 0210 	add.w	r2, r8, #16
 800916c:	46f2      	mov	sl, lr
 800916e:	2100      	movs	r1, #0
 8009170:	f859 3b04 	ldr.w	r3, [r9], #4
 8009174:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009178:	fa1f f883 	uxth.w	r8, r3
 800917c:	fa11 f18b 	uxtah	r1, r1, fp
 8009180:	0c1b      	lsrs	r3, r3, #16
 8009182:	eba1 0808 	sub.w	r8, r1, r8
 8009186:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800918a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800918e:	fa1f f888 	uxth.w	r8, r8
 8009192:	1419      	asrs	r1, r3, #16
 8009194:	454e      	cmp	r6, r9
 8009196:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800919a:	f84a 3b04 	str.w	r3, [sl], #4
 800919e:	d8e7      	bhi.n	8009170 <__mdiff+0x80>
 80091a0:	1b33      	subs	r3, r6, r4
 80091a2:	3b15      	subs	r3, #21
 80091a4:	f023 0303 	bic.w	r3, r3, #3
 80091a8:	3304      	adds	r3, #4
 80091aa:	3415      	adds	r4, #21
 80091ac:	42a6      	cmp	r6, r4
 80091ae:	bf38      	it	cc
 80091b0:	2304      	movcc	r3, #4
 80091b2:	441d      	add	r5, r3
 80091b4:	4473      	add	r3, lr
 80091b6:	469e      	mov	lr, r3
 80091b8:	462e      	mov	r6, r5
 80091ba:	4566      	cmp	r6, ip
 80091bc:	d30e      	bcc.n	80091dc <__mdiff+0xec>
 80091be:	f10c 0203 	add.w	r2, ip, #3
 80091c2:	1b52      	subs	r2, r2, r5
 80091c4:	f022 0203 	bic.w	r2, r2, #3
 80091c8:	3d03      	subs	r5, #3
 80091ca:	45ac      	cmp	ip, r5
 80091cc:	bf38      	it	cc
 80091ce:	2200      	movcc	r2, #0
 80091d0:	441a      	add	r2, r3
 80091d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80091d6:	b17b      	cbz	r3, 80091f8 <__mdiff+0x108>
 80091d8:	6107      	str	r7, [r0, #16]
 80091da:	e7a3      	b.n	8009124 <__mdiff+0x34>
 80091dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80091e0:	fa11 f288 	uxtah	r2, r1, r8
 80091e4:	1414      	asrs	r4, r2, #16
 80091e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80091ea:	b292      	uxth	r2, r2
 80091ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80091f0:	f84e 2b04 	str.w	r2, [lr], #4
 80091f4:	1421      	asrs	r1, r4, #16
 80091f6:	e7e0      	b.n	80091ba <__mdiff+0xca>
 80091f8:	3f01      	subs	r7, #1
 80091fa:	e7ea      	b.n	80091d2 <__mdiff+0xe2>
 80091fc:	0800b5c8 	.word	0x0800b5c8
 8009200:	0800b6b8 	.word	0x0800b6b8

08009204 <__ulp>:
 8009204:	b082      	sub	sp, #8
 8009206:	ed8d 0b00 	vstr	d0, [sp]
 800920a:	9b01      	ldr	r3, [sp, #4]
 800920c:	4912      	ldr	r1, [pc, #72]	; (8009258 <__ulp+0x54>)
 800920e:	4019      	ands	r1, r3
 8009210:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009214:	2900      	cmp	r1, #0
 8009216:	dd05      	ble.n	8009224 <__ulp+0x20>
 8009218:	2200      	movs	r2, #0
 800921a:	460b      	mov	r3, r1
 800921c:	ec43 2b10 	vmov	d0, r2, r3
 8009220:	b002      	add	sp, #8
 8009222:	4770      	bx	lr
 8009224:	4249      	negs	r1, r1
 8009226:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800922a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800922e:	f04f 0200 	mov.w	r2, #0
 8009232:	f04f 0300 	mov.w	r3, #0
 8009236:	da04      	bge.n	8009242 <__ulp+0x3e>
 8009238:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800923c:	fa41 f300 	asr.w	r3, r1, r0
 8009240:	e7ec      	b.n	800921c <__ulp+0x18>
 8009242:	f1a0 0114 	sub.w	r1, r0, #20
 8009246:	291e      	cmp	r1, #30
 8009248:	bfda      	itte	le
 800924a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800924e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009252:	2101      	movgt	r1, #1
 8009254:	460a      	mov	r2, r1
 8009256:	e7e1      	b.n	800921c <__ulp+0x18>
 8009258:	7ff00000 	.word	0x7ff00000

0800925c <__b2d>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	6905      	ldr	r5, [r0, #16]
 8009260:	f100 0714 	add.w	r7, r0, #20
 8009264:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009268:	1f2e      	subs	r6, r5, #4
 800926a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800926e:	4620      	mov	r0, r4
 8009270:	f7ff fd48 	bl	8008d04 <__hi0bits>
 8009274:	f1c0 0320 	rsb	r3, r0, #32
 8009278:	280a      	cmp	r0, #10
 800927a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80092f8 <__b2d+0x9c>
 800927e:	600b      	str	r3, [r1, #0]
 8009280:	dc14      	bgt.n	80092ac <__b2d+0x50>
 8009282:	f1c0 0e0b 	rsb	lr, r0, #11
 8009286:	fa24 f10e 	lsr.w	r1, r4, lr
 800928a:	42b7      	cmp	r7, r6
 800928c:	ea41 030c 	orr.w	r3, r1, ip
 8009290:	bf34      	ite	cc
 8009292:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009296:	2100      	movcs	r1, #0
 8009298:	3015      	adds	r0, #21
 800929a:	fa04 f000 	lsl.w	r0, r4, r0
 800929e:	fa21 f10e 	lsr.w	r1, r1, lr
 80092a2:	ea40 0201 	orr.w	r2, r0, r1
 80092a6:	ec43 2b10 	vmov	d0, r2, r3
 80092aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ac:	42b7      	cmp	r7, r6
 80092ae:	bf3a      	itte	cc
 80092b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80092b4:	f1a5 0608 	subcc.w	r6, r5, #8
 80092b8:	2100      	movcs	r1, #0
 80092ba:	380b      	subs	r0, #11
 80092bc:	d017      	beq.n	80092ee <__b2d+0x92>
 80092be:	f1c0 0c20 	rsb	ip, r0, #32
 80092c2:	fa04 f500 	lsl.w	r5, r4, r0
 80092c6:	42be      	cmp	r6, r7
 80092c8:	fa21 f40c 	lsr.w	r4, r1, ip
 80092cc:	ea45 0504 	orr.w	r5, r5, r4
 80092d0:	bf8c      	ite	hi
 80092d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80092d6:	2400      	movls	r4, #0
 80092d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80092dc:	fa01 f000 	lsl.w	r0, r1, r0
 80092e0:	fa24 f40c 	lsr.w	r4, r4, ip
 80092e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80092e8:	ea40 0204 	orr.w	r2, r0, r4
 80092ec:	e7db      	b.n	80092a6 <__b2d+0x4a>
 80092ee:	ea44 030c 	orr.w	r3, r4, ip
 80092f2:	460a      	mov	r2, r1
 80092f4:	e7d7      	b.n	80092a6 <__b2d+0x4a>
 80092f6:	bf00      	nop
 80092f8:	3ff00000 	.word	0x3ff00000

080092fc <__d2b>:
 80092fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009300:	4689      	mov	r9, r1
 8009302:	2101      	movs	r1, #1
 8009304:	ec57 6b10 	vmov	r6, r7, d0
 8009308:	4690      	mov	r8, r2
 800930a:	f7ff fc09 	bl	8008b20 <_Balloc>
 800930e:	4604      	mov	r4, r0
 8009310:	b930      	cbnz	r0, 8009320 <__d2b+0x24>
 8009312:	4602      	mov	r2, r0
 8009314:	4b25      	ldr	r3, [pc, #148]	; (80093ac <__d2b+0xb0>)
 8009316:	4826      	ldr	r0, [pc, #152]	; (80093b0 <__d2b+0xb4>)
 8009318:	f240 310a 	movw	r1, #778	; 0x30a
 800931c:	f000 fd46 	bl	8009dac <__assert_func>
 8009320:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009324:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009328:	bb35      	cbnz	r5, 8009378 <__d2b+0x7c>
 800932a:	2e00      	cmp	r6, #0
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	d028      	beq.n	8009382 <__d2b+0x86>
 8009330:	4668      	mov	r0, sp
 8009332:	9600      	str	r6, [sp, #0]
 8009334:	f7ff fd06 	bl	8008d44 <__lo0bits>
 8009338:	9900      	ldr	r1, [sp, #0]
 800933a:	b300      	cbz	r0, 800937e <__d2b+0x82>
 800933c:	9a01      	ldr	r2, [sp, #4]
 800933e:	f1c0 0320 	rsb	r3, r0, #32
 8009342:	fa02 f303 	lsl.w	r3, r2, r3
 8009346:	430b      	orrs	r3, r1
 8009348:	40c2      	lsrs	r2, r0
 800934a:	6163      	str	r3, [r4, #20]
 800934c:	9201      	str	r2, [sp, #4]
 800934e:	9b01      	ldr	r3, [sp, #4]
 8009350:	61a3      	str	r3, [r4, #24]
 8009352:	2b00      	cmp	r3, #0
 8009354:	bf14      	ite	ne
 8009356:	2202      	movne	r2, #2
 8009358:	2201      	moveq	r2, #1
 800935a:	6122      	str	r2, [r4, #16]
 800935c:	b1d5      	cbz	r5, 8009394 <__d2b+0x98>
 800935e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009362:	4405      	add	r5, r0
 8009364:	f8c9 5000 	str.w	r5, [r9]
 8009368:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800936c:	f8c8 0000 	str.w	r0, [r8]
 8009370:	4620      	mov	r0, r4
 8009372:	b003      	add	sp, #12
 8009374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800937c:	e7d5      	b.n	800932a <__d2b+0x2e>
 800937e:	6161      	str	r1, [r4, #20]
 8009380:	e7e5      	b.n	800934e <__d2b+0x52>
 8009382:	a801      	add	r0, sp, #4
 8009384:	f7ff fcde 	bl	8008d44 <__lo0bits>
 8009388:	9b01      	ldr	r3, [sp, #4]
 800938a:	6163      	str	r3, [r4, #20]
 800938c:	2201      	movs	r2, #1
 800938e:	6122      	str	r2, [r4, #16]
 8009390:	3020      	adds	r0, #32
 8009392:	e7e3      	b.n	800935c <__d2b+0x60>
 8009394:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009398:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800939c:	f8c9 0000 	str.w	r0, [r9]
 80093a0:	6918      	ldr	r0, [r3, #16]
 80093a2:	f7ff fcaf 	bl	8008d04 <__hi0bits>
 80093a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093aa:	e7df      	b.n	800936c <__d2b+0x70>
 80093ac:	0800b5c8 	.word	0x0800b5c8
 80093b0:	0800b6b8 	.word	0x0800b6b8

080093b4 <__ratio>:
 80093b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	4688      	mov	r8, r1
 80093ba:	4669      	mov	r1, sp
 80093bc:	4681      	mov	r9, r0
 80093be:	f7ff ff4d 	bl	800925c <__b2d>
 80093c2:	a901      	add	r1, sp, #4
 80093c4:	4640      	mov	r0, r8
 80093c6:	ec55 4b10 	vmov	r4, r5, d0
 80093ca:	f7ff ff47 	bl	800925c <__b2d>
 80093ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80093d6:	eba3 0c02 	sub.w	ip, r3, r2
 80093da:	e9dd 3200 	ldrd	r3, r2, [sp]
 80093de:	1a9b      	subs	r3, r3, r2
 80093e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80093e4:	ec51 0b10 	vmov	r0, r1, d0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bfd6      	itet	le
 80093ec:	460a      	movle	r2, r1
 80093ee:	462a      	movgt	r2, r5
 80093f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80093f4:	468b      	mov	fp, r1
 80093f6:	462f      	mov	r7, r5
 80093f8:	bfd4      	ite	le
 80093fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80093fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009402:	4620      	mov	r0, r4
 8009404:	ee10 2a10 	vmov	r2, s0
 8009408:	465b      	mov	r3, fp
 800940a:	4639      	mov	r1, r7
 800940c:	f7f7 fa46 	bl	800089c <__aeabi_ddiv>
 8009410:	ec41 0b10 	vmov	d0, r0, r1
 8009414:	b003      	add	sp, #12
 8009416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800941a <__copybits>:
 800941a:	3901      	subs	r1, #1
 800941c:	b570      	push	{r4, r5, r6, lr}
 800941e:	1149      	asrs	r1, r1, #5
 8009420:	6914      	ldr	r4, [r2, #16]
 8009422:	3101      	adds	r1, #1
 8009424:	f102 0314 	add.w	r3, r2, #20
 8009428:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800942c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009430:	1f05      	subs	r5, r0, #4
 8009432:	42a3      	cmp	r3, r4
 8009434:	d30c      	bcc.n	8009450 <__copybits+0x36>
 8009436:	1aa3      	subs	r3, r4, r2
 8009438:	3b11      	subs	r3, #17
 800943a:	f023 0303 	bic.w	r3, r3, #3
 800943e:	3211      	adds	r2, #17
 8009440:	42a2      	cmp	r2, r4
 8009442:	bf88      	it	hi
 8009444:	2300      	movhi	r3, #0
 8009446:	4418      	add	r0, r3
 8009448:	2300      	movs	r3, #0
 800944a:	4288      	cmp	r0, r1
 800944c:	d305      	bcc.n	800945a <__copybits+0x40>
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	f853 6b04 	ldr.w	r6, [r3], #4
 8009454:	f845 6f04 	str.w	r6, [r5, #4]!
 8009458:	e7eb      	b.n	8009432 <__copybits+0x18>
 800945a:	f840 3b04 	str.w	r3, [r0], #4
 800945e:	e7f4      	b.n	800944a <__copybits+0x30>

08009460 <__any_on>:
 8009460:	f100 0214 	add.w	r2, r0, #20
 8009464:	6900      	ldr	r0, [r0, #16]
 8009466:	114b      	asrs	r3, r1, #5
 8009468:	4298      	cmp	r0, r3
 800946a:	b510      	push	{r4, lr}
 800946c:	db11      	blt.n	8009492 <__any_on+0x32>
 800946e:	dd0a      	ble.n	8009486 <__any_on+0x26>
 8009470:	f011 011f 	ands.w	r1, r1, #31
 8009474:	d007      	beq.n	8009486 <__any_on+0x26>
 8009476:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800947a:	fa24 f001 	lsr.w	r0, r4, r1
 800947e:	fa00 f101 	lsl.w	r1, r0, r1
 8009482:	428c      	cmp	r4, r1
 8009484:	d10b      	bne.n	800949e <__any_on+0x3e>
 8009486:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800948a:	4293      	cmp	r3, r2
 800948c:	d803      	bhi.n	8009496 <__any_on+0x36>
 800948e:	2000      	movs	r0, #0
 8009490:	bd10      	pop	{r4, pc}
 8009492:	4603      	mov	r3, r0
 8009494:	e7f7      	b.n	8009486 <__any_on+0x26>
 8009496:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800949a:	2900      	cmp	r1, #0
 800949c:	d0f5      	beq.n	800948a <__any_on+0x2a>
 800949e:	2001      	movs	r0, #1
 80094a0:	e7f6      	b.n	8009490 <__any_on+0x30>

080094a2 <_calloc_r>:
 80094a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094a4:	fba1 2402 	umull	r2, r4, r1, r2
 80094a8:	b94c      	cbnz	r4, 80094be <_calloc_r+0x1c>
 80094aa:	4611      	mov	r1, r2
 80094ac:	9201      	str	r2, [sp, #4]
 80094ae:	f000 f87b 	bl	80095a8 <_malloc_r>
 80094b2:	9a01      	ldr	r2, [sp, #4]
 80094b4:	4605      	mov	r5, r0
 80094b6:	b930      	cbnz	r0, 80094c6 <_calloc_r+0x24>
 80094b8:	4628      	mov	r0, r5
 80094ba:	b003      	add	sp, #12
 80094bc:	bd30      	pop	{r4, r5, pc}
 80094be:	220c      	movs	r2, #12
 80094c0:	6002      	str	r2, [r0, #0]
 80094c2:	2500      	movs	r5, #0
 80094c4:	e7f8      	b.n	80094b8 <_calloc_r+0x16>
 80094c6:	4621      	mov	r1, r4
 80094c8:	f7fc f83e 	bl	8005548 <memset>
 80094cc:	e7f4      	b.n	80094b8 <_calloc_r+0x16>
	...

080094d0 <_free_r>:
 80094d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094d2:	2900      	cmp	r1, #0
 80094d4:	d044      	beq.n	8009560 <_free_r+0x90>
 80094d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094da:	9001      	str	r0, [sp, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f1a1 0404 	sub.w	r4, r1, #4
 80094e2:	bfb8      	it	lt
 80094e4:	18e4      	addlt	r4, r4, r3
 80094e6:	f000 fcef 	bl	8009ec8 <__malloc_lock>
 80094ea:	4a1e      	ldr	r2, [pc, #120]	; (8009564 <_free_r+0x94>)
 80094ec:	9801      	ldr	r0, [sp, #4]
 80094ee:	6813      	ldr	r3, [r2, #0]
 80094f0:	b933      	cbnz	r3, 8009500 <_free_r+0x30>
 80094f2:	6063      	str	r3, [r4, #4]
 80094f4:	6014      	str	r4, [r2, #0]
 80094f6:	b003      	add	sp, #12
 80094f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094fc:	f000 bcea 	b.w	8009ed4 <__malloc_unlock>
 8009500:	42a3      	cmp	r3, r4
 8009502:	d908      	bls.n	8009516 <_free_r+0x46>
 8009504:	6825      	ldr	r5, [r4, #0]
 8009506:	1961      	adds	r1, r4, r5
 8009508:	428b      	cmp	r3, r1
 800950a:	bf01      	itttt	eq
 800950c:	6819      	ldreq	r1, [r3, #0]
 800950e:	685b      	ldreq	r3, [r3, #4]
 8009510:	1949      	addeq	r1, r1, r5
 8009512:	6021      	streq	r1, [r4, #0]
 8009514:	e7ed      	b.n	80094f2 <_free_r+0x22>
 8009516:	461a      	mov	r2, r3
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	b10b      	cbz	r3, 8009520 <_free_r+0x50>
 800951c:	42a3      	cmp	r3, r4
 800951e:	d9fa      	bls.n	8009516 <_free_r+0x46>
 8009520:	6811      	ldr	r1, [r2, #0]
 8009522:	1855      	adds	r5, r2, r1
 8009524:	42a5      	cmp	r5, r4
 8009526:	d10b      	bne.n	8009540 <_free_r+0x70>
 8009528:	6824      	ldr	r4, [r4, #0]
 800952a:	4421      	add	r1, r4
 800952c:	1854      	adds	r4, r2, r1
 800952e:	42a3      	cmp	r3, r4
 8009530:	6011      	str	r1, [r2, #0]
 8009532:	d1e0      	bne.n	80094f6 <_free_r+0x26>
 8009534:	681c      	ldr	r4, [r3, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	6053      	str	r3, [r2, #4]
 800953a:	4421      	add	r1, r4
 800953c:	6011      	str	r1, [r2, #0]
 800953e:	e7da      	b.n	80094f6 <_free_r+0x26>
 8009540:	d902      	bls.n	8009548 <_free_r+0x78>
 8009542:	230c      	movs	r3, #12
 8009544:	6003      	str	r3, [r0, #0]
 8009546:	e7d6      	b.n	80094f6 <_free_r+0x26>
 8009548:	6825      	ldr	r5, [r4, #0]
 800954a:	1961      	adds	r1, r4, r5
 800954c:	428b      	cmp	r3, r1
 800954e:	bf04      	itt	eq
 8009550:	6819      	ldreq	r1, [r3, #0]
 8009552:	685b      	ldreq	r3, [r3, #4]
 8009554:	6063      	str	r3, [r4, #4]
 8009556:	bf04      	itt	eq
 8009558:	1949      	addeq	r1, r1, r5
 800955a:	6021      	streq	r1, [r4, #0]
 800955c:	6054      	str	r4, [r2, #4]
 800955e:	e7ca      	b.n	80094f6 <_free_r+0x26>
 8009560:	b003      	add	sp, #12
 8009562:	bd30      	pop	{r4, r5, pc}
 8009564:	20000304 	.word	0x20000304

08009568 <sbrk_aligned>:
 8009568:	b570      	push	{r4, r5, r6, lr}
 800956a:	4e0e      	ldr	r6, [pc, #56]	; (80095a4 <sbrk_aligned+0x3c>)
 800956c:	460c      	mov	r4, r1
 800956e:	6831      	ldr	r1, [r6, #0]
 8009570:	4605      	mov	r5, r0
 8009572:	b911      	cbnz	r1, 800957a <sbrk_aligned+0x12>
 8009574:	f000 fb94 	bl	8009ca0 <_sbrk_r>
 8009578:	6030      	str	r0, [r6, #0]
 800957a:	4621      	mov	r1, r4
 800957c:	4628      	mov	r0, r5
 800957e:	f000 fb8f 	bl	8009ca0 <_sbrk_r>
 8009582:	1c43      	adds	r3, r0, #1
 8009584:	d00a      	beq.n	800959c <sbrk_aligned+0x34>
 8009586:	1cc4      	adds	r4, r0, #3
 8009588:	f024 0403 	bic.w	r4, r4, #3
 800958c:	42a0      	cmp	r0, r4
 800958e:	d007      	beq.n	80095a0 <sbrk_aligned+0x38>
 8009590:	1a21      	subs	r1, r4, r0
 8009592:	4628      	mov	r0, r5
 8009594:	f000 fb84 	bl	8009ca0 <_sbrk_r>
 8009598:	3001      	adds	r0, #1
 800959a:	d101      	bne.n	80095a0 <sbrk_aligned+0x38>
 800959c:	f04f 34ff 	mov.w	r4, #4294967295
 80095a0:	4620      	mov	r0, r4
 80095a2:	bd70      	pop	{r4, r5, r6, pc}
 80095a4:	20000308 	.word	0x20000308

080095a8 <_malloc_r>:
 80095a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ac:	1ccd      	adds	r5, r1, #3
 80095ae:	f025 0503 	bic.w	r5, r5, #3
 80095b2:	3508      	adds	r5, #8
 80095b4:	2d0c      	cmp	r5, #12
 80095b6:	bf38      	it	cc
 80095b8:	250c      	movcc	r5, #12
 80095ba:	2d00      	cmp	r5, #0
 80095bc:	4607      	mov	r7, r0
 80095be:	db01      	blt.n	80095c4 <_malloc_r+0x1c>
 80095c0:	42a9      	cmp	r1, r5
 80095c2:	d905      	bls.n	80095d0 <_malloc_r+0x28>
 80095c4:	230c      	movs	r3, #12
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	2600      	movs	r6, #0
 80095ca:	4630      	mov	r0, r6
 80095cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d0:	4e2e      	ldr	r6, [pc, #184]	; (800968c <_malloc_r+0xe4>)
 80095d2:	f000 fc79 	bl	8009ec8 <__malloc_lock>
 80095d6:	6833      	ldr	r3, [r6, #0]
 80095d8:	461c      	mov	r4, r3
 80095da:	bb34      	cbnz	r4, 800962a <_malloc_r+0x82>
 80095dc:	4629      	mov	r1, r5
 80095de:	4638      	mov	r0, r7
 80095e0:	f7ff ffc2 	bl	8009568 <sbrk_aligned>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	4604      	mov	r4, r0
 80095e8:	d14d      	bne.n	8009686 <_malloc_r+0xde>
 80095ea:	6834      	ldr	r4, [r6, #0]
 80095ec:	4626      	mov	r6, r4
 80095ee:	2e00      	cmp	r6, #0
 80095f0:	d140      	bne.n	8009674 <_malloc_r+0xcc>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	4631      	mov	r1, r6
 80095f6:	4638      	mov	r0, r7
 80095f8:	eb04 0803 	add.w	r8, r4, r3
 80095fc:	f000 fb50 	bl	8009ca0 <_sbrk_r>
 8009600:	4580      	cmp	r8, r0
 8009602:	d13a      	bne.n	800967a <_malloc_r+0xd2>
 8009604:	6821      	ldr	r1, [r4, #0]
 8009606:	3503      	adds	r5, #3
 8009608:	1a6d      	subs	r5, r5, r1
 800960a:	f025 0503 	bic.w	r5, r5, #3
 800960e:	3508      	adds	r5, #8
 8009610:	2d0c      	cmp	r5, #12
 8009612:	bf38      	it	cc
 8009614:	250c      	movcc	r5, #12
 8009616:	4629      	mov	r1, r5
 8009618:	4638      	mov	r0, r7
 800961a:	f7ff ffa5 	bl	8009568 <sbrk_aligned>
 800961e:	3001      	adds	r0, #1
 8009620:	d02b      	beq.n	800967a <_malloc_r+0xd2>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	442b      	add	r3, r5
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	e00e      	b.n	8009648 <_malloc_r+0xa0>
 800962a:	6822      	ldr	r2, [r4, #0]
 800962c:	1b52      	subs	r2, r2, r5
 800962e:	d41e      	bmi.n	800966e <_malloc_r+0xc6>
 8009630:	2a0b      	cmp	r2, #11
 8009632:	d916      	bls.n	8009662 <_malloc_r+0xba>
 8009634:	1961      	adds	r1, r4, r5
 8009636:	42a3      	cmp	r3, r4
 8009638:	6025      	str	r5, [r4, #0]
 800963a:	bf18      	it	ne
 800963c:	6059      	strne	r1, [r3, #4]
 800963e:	6863      	ldr	r3, [r4, #4]
 8009640:	bf08      	it	eq
 8009642:	6031      	streq	r1, [r6, #0]
 8009644:	5162      	str	r2, [r4, r5]
 8009646:	604b      	str	r3, [r1, #4]
 8009648:	4638      	mov	r0, r7
 800964a:	f104 060b 	add.w	r6, r4, #11
 800964e:	f000 fc41 	bl	8009ed4 <__malloc_unlock>
 8009652:	f026 0607 	bic.w	r6, r6, #7
 8009656:	1d23      	adds	r3, r4, #4
 8009658:	1af2      	subs	r2, r6, r3
 800965a:	d0b6      	beq.n	80095ca <_malloc_r+0x22>
 800965c:	1b9b      	subs	r3, r3, r6
 800965e:	50a3      	str	r3, [r4, r2]
 8009660:	e7b3      	b.n	80095ca <_malloc_r+0x22>
 8009662:	6862      	ldr	r2, [r4, #4]
 8009664:	42a3      	cmp	r3, r4
 8009666:	bf0c      	ite	eq
 8009668:	6032      	streq	r2, [r6, #0]
 800966a:	605a      	strne	r2, [r3, #4]
 800966c:	e7ec      	b.n	8009648 <_malloc_r+0xa0>
 800966e:	4623      	mov	r3, r4
 8009670:	6864      	ldr	r4, [r4, #4]
 8009672:	e7b2      	b.n	80095da <_malloc_r+0x32>
 8009674:	4634      	mov	r4, r6
 8009676:	6876      	ldr	r6, [r6, #4]
 8009678:	e7b9      	b.n	80095ee <_malloc_r+0x46>
 800967a:	230c      	movs	r3, #12
 800967c:	603b      	str	r3, [r7, #0]
 800967e:	4638      	mov	r0, r7
 8009680:	f000 fc28 	bl	8009ed4 <__malloc_unlock>
 8009684:	e7a1      	b.n	80095ca <_malloc_r+0x22>
 8009686:	6025      	str	r5, [r4, #0]
 8009688:	e7de      	b.n	8009648 <_malloc_r+0xa0>
 800968a:	bf00      	nop
 800968c:	20000304 	.word	0x20000304

08009690 <__ssputs_r>:
 8009690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009694:	688e      	ldr	r6, [r1, #8]
 8009696:	429e      	cmp	r6, r3
 8009698:	4682      	mov	sl, r0
 800969a:	460c      	mov	r4, r1
 800969c:	4690      	mov	r8, r2
 800969e:	461f      	mov	r7, r3
 80096a0:	d838      	bhi.n	8009714 <__ssputs_r+0x84>
 80096a2:	898a      	ldrh	r2, [r1, #12]
 80096a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096a8:	d032      	beq.n	8009710 <__ssputs_r+0x80>
 80096aa:	6825      	ldr	r5, [r4, #0]
 80096ac:	6909      	ldr	r1, [r1, #16]
 80096ae:	eba5 0901 	sub.w	r9, r5, r1
 80096b2:	6965      	ldr	r5, [r4, #20]
 80096b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096bc:	3301      	adds	r3, #1
 80096be:	444b      	add	r3, r9
 80096c0:	106d      	asrs	r5, r5, #1
 80096c2:	429d      	cmp	r5, r3
 80096c4:	bf38      	it	cc
 80096c6:	461d      	movcc	r5, r3
 80096c8:	0553      	lsls	r3, r2, #21
 80096ca:	d531      	bpl.n	8009730 <__ssputs_r+0xa0>
 80096cc:	4629      	mov	r1, r5
 80096ce:	f7ff ff6b 	bl	80095a8 <_malloc_r>
 80096d2:	4606      	mov	r6, r0
 80096d4:	b950      	cbnz	r0, 80096ec <__ssputs_r+0x5c>
 80096d6:	230c      	movs	r3, #12
 80096d8:	f8ca 3000 	str.w	r3, [sl]
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295
 80096e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ec:	6921      	ldr	r1, [r4, #16]
 80096ee:	464a      	mov	r2, r9
 80096f0:	f7ff fa08 	bl	8008b04 <memcpy>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096fe:	81a3      	strh	r3, [r4, #12]
 8009700:	6126      	str	r6, [r4, #16]
 8009702:	6165      	str	r5, [r4, #20]
 8009704:	444e      	add	r6, r9
 8009706:	eba5 0509 	sub.w	r5, r5, r9
 800970a:	6026      	str	r6, [r4, #0]
 800970c:	60a5      	str	r5, [r4, #8]
 800970e:	463e      	mov	r6, r7
 8009710:	42be      	cmp	r6, r7
 8009712:	d900      	bls.n	8009716 <__ssputs_r+0x86>
 8009714:	463e      	mov	r6, r7
 8009716:	6820      	ldr	r0, [r4, #0]
 8009718:	4632      	mov	r2, r6
 800971a:	4641      	mov	r1, r8
 800971c:	f000 fbba 	bl	8009e94 <memmove>
 8009720:	68a3      	ldr	r3, [r4, #8]
 8009722:	1b9b      	subs	r3, r3, r6
 8009724:	60a3      	str	r3, [r4, #8]
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	4433      	add	r3, r6
 800972a:	6023      	str	r3, [r4, #0]
 800972c:	2000      	movs	r0, #0
 800972e:	e7db      	b.n	80096e8 <__ssputs_r+0x58>
 8009730:	462a      	mov	r2, r5
 8009732:	f000 fbd5 	bl	8009ee0 <_realloc_r>
 8009736:	4606      	mov	r6, r0
 8009738:	2800      	cmp	r0, #0
 800973a:	d1e1      	bne.n	8009700 <__ssputs_r+0x70>
 800973c:	6921      	ldr	r1, [r4, #16]
 800973e:	4650      	mov	r0, sl
 8009740:	f7ff fec6 	bl	80094d0 <_free_r>
 8009744:	e7c7      	b.n	80096d6 <__ssputs_r+0x46>
	...

08009748 <_svfiprintf_r>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	4698      	mov	r8, r3
 800974e:	898b      	ldrh	r3, [r1, #12]
 8009750:	061b      	lsls	r3, r3, #24
 8009752:	b09d      	sub	sp, #116	; 0x74
 8009754:	4607      	mov	r7, r0
 8009756:	460d      	mov	r5, r1
 8009758:	4614      	mov	r4, r2
 800975a:	d50e      	bpl.n	800977a <_svfiprintf_r+0x32>
 800975c:	690b      	ldr	r3, [r1, #16]
 800975e:	b963      	cbnz	r3, 800977a <_svfiprintf_r+0x32>
 8009760:	2140      	movs	r1, #64	; 0x40
 8009762:	f7ff ff21 	bl	80095a8 <_malloc_r>
 8009766:	6028      	str	r0, [r5, #0]
 8009768:	6128      	str	r0, [r5, #16]
 800976a:	b920      	cbnz	r0, 8009776 <_svfiprintf_r+0x2e>
 800976c:	230c      	movs	r3, #12
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	f04f 30ff 	mov.w	r0, #4294967295
 8009774:	e0d1      	b.n	800991a <_svfiprintf_r+0x1d2>
 8009776:	2340      	movs	r3, #64	; 0x40
 8009778:	616b      	str	r3, [r5, #20]
 800977a:	2300      	movs	r3, #0
 800977c:	9309      	str	r3, [sp, #36]	; 0x24
 800977e:	2320      	movs	r3, #32
 8009780:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009784:	f8cd 800c 	str.w	r8, [sp, #12]
 8009788:	2330      	movs	r3, #48	; 0x30
 800978a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009934 <_svfiprintf_r+0x1ec>
 800978e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009792:	f04f 0901 	mov.w	r9, #1
 8009796:	4623      	mov	r3, r4
 8009798:	469a      	mov	sl, r3
 800979a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800979e:	b10a      	cbz	r2, 80097a4 <_svfiprintf_r+0x5c>
 80097a0:	2a25      	cmp	r2, #37	; 0x25
 80097a2:	d1f9      	bne.n	8009798 <_svfiprintf_r+0x50>
 80097a4:	ebba 0b04 	subs.w	fp, sl, r4
 80097a8:	d00b      	beq.n	80097c2 <_svfiprintf_r+0x7a>
 80097aa:	465b      	mov	r3, fp
 80097ac:	4622      	mov	r2, r4
 80097ae:	4629      	mov	r1, r5
 80097b0:	4638      	mov	r0, r7
 80097b2:	f7ff ff6d 	bl	8009690 <__ssputs_r>
 80097b6:	3001      	adds	r0, #1
 80097b8:	f000 80aa 	beq.w	8009910 <_svfiprintf_r+0x1c8>
 80097bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097be:	445a      	add	r2, fp
 80097c0:	9209      	str	r2, [sp, #36]	; 0x24
 80097c2:	f89a 3000 	ldrb.w	r3, [sl]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 80a2 	beq.w	8009910 <_svfiprintf_r+0x1c8>
 80097cc:	2300      	movs	r3, #0
 80097ce:	f04f 32ff 	mov.w	r2, #4294967295
 80097d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097d6:	f10a 0a01 	add.w	sl, sl, #1
 80097da:	9304      	str	r3, [sp, #16]
 80097dc:	9307      	str	r3, [sp, #28]
 80097de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097e2:	931a      	str	r3, [sp, #104]	; 0x68
 80097e4:	4654      	mov	r4, sl
 80097e6:	2205      	movs	r2, #5
 80097e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ec:	4851      	ldr	r0, [pc, #324]	; (8009934 <_svfiprintf_r+0x1ec>)
 80097ee:	f7f6 fd1f 	bl	8000230 <memchr>
 80097f2:	9a04      	ldr	r2, [sp, #16]
 80097f4:	b9d8      	cbnz	r0, 800982e <_svfiprintf_r+0xe6>
 80097f6:	06d0      	lsls	r0, r2, #27
 80097f8:	bf44      	itt	mi
 80097fa:	2320      	movmi	r3, #32
 80097fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009800:	0711      	lsls	r1, r2, #28
 8009802:	bf44      	itt	mi
 8009804:	232b      	movmi	r3, #43	; 0x2b
 8009806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800980a:	f89a 3000 	ldrb.w	r3, [sl]
 800980e:	2b2a      	cmp	r3, #42	; 0x2a
 8009810:	d015      	beq.n	800983e <_svfiprintf_r+0xf6>
 8009812:	9a07      	ldr	r2, [sp, #28]
 8009814:	4654      	mov	r4, sl
 8009816:	2000      	movs	r0, #0
 8009818:	f04f 0c0a 	mov.w	ip, #10
 800981c:	4621      	mov	r1, r4
 800981e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009822:	3b30      	subs	r3, #48	; 0x30
 8009824:	2b09      	cmp	r3, #9
 8009826:	d94e      	bls.n	80098c6 <_svfiprintf_r+0x17e>
 8009828:	b1b0      	cbz	r0, 8009858 <_svfiprintf_r+0x110>
 800982a:	9207      	str	r2, [sp, #28]
 800982c:	e014      	b.n	8009858 <_svfiprintf_r+0x110>
 800982e:	eba0 0308 	sub.w	r3, r0, r8
 8009832:	fa09 f303 	lsl.w	r3, r9, r3
 8009836:	4313      	orrs	r3, r2
 8009838:	9304      	str	r3, [sp, #16]
 800983a:	46a2      	mov	sl, r4
 800983c:	e7d2      	b.n	80097e4 <_svfiprintf_r+0x9c>
 800983e:	9b03      	ldr	r3, [sp, #12]
 8009840:	1d19      	adds	r1, r3, #4
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	9103      	str	r1, [sp, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	bfbb      	ittet	lt
 800984a:	425b      	neglt	r3, r3
 800984c:	f042 0202 	orrlt.w	r2, r2, #2
 8009850:	9307      	strge	r3, [sp, #28]
 8009852:	9307      	strlt	r3, [sp, #28]
 8009854:	bfb8      	it	lt
 8009856:	9204      	strlt	r2, [sp, #16]
 8009858:	7823      	ldrb	r3, [r4, #0]
 800985a:	2b2e      	cmp	r3, #46	; 0x2e
 800985c:	d10c      	bne.n	8009878 <_svfiprintf_r+0x130>
 800985e:	7863      	ldrb	r3, [r4, #1]
 8009860:	2b2a      	cmp	r3, #42	; 0x2a
 8009862:	d135      	bne.n	80098d0 <_svfiprintf_r+0x188>
 8009864:	9b03      	ldr	r3, [sp, #12]
 8009866:	1d1a      	adds	r2, r3, #4
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	9203      	str	r2, [sp, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	bfb8      	it	lt
 8009870:	f04f 33ff 	movlt.w	r3, #4294967295
 8009874:	3402      	adds	r4, #2
 8009876:	9305      	str	r3, [sp, #20]
 8009878:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009944 <_svfiprintf_r+0x1fc>
 800987c:	7821      	ldrb	r1, [r4, #0]
 800987e:	2203      	movs	r2, #3
 8009880:	4650      	mov	r0, sl
 8009882:	f7f6 fcd5 	bl	8000230 <memchr>
 8009886:	b140      	cbz	r0, 800989a <_svfiprintf_r+0x152>
 8009888:	2340      	movs	r3, #64	; 0x40
 800988a:	eba0 000a 	sub.w	r0, r0, sl
 800988e:	fa03 f000 	lsl.w	r0, r3, r0
 8009892:	9b04      	ldr	r3, [sp, #16]
 8009894:	4303      	orrs	r3, r0
 8009896:	3401      	adds	r4, #1
 8009898:	9304      	str	r3, [sp, #16]
 800989a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800989e:	4826      	ldr	r0, [pc, #152]	; (8009938 <_svfiprintf_r+0x1f0>)
 80098a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098a4:	2206      	movs	r2, #6
 80098a6:	f7f6 fcc3 	bl	8000230 <memchr>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d038      	beq.n	8009920 <_svfiprintf_r+0x1d8>
 80098ae:	4b23      	ldr	r3, [pc, #140]	; (800993c <_svfiprintf_r+0x1f4>)
 80098b0:	bb1b      	cbnz	r3, 80098fa <_svfiprintf_r+0x1b2>
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	3307      	adds	r3, #7
 80098b6:	f023 0307 	bic.w	r3, r3, #7
 80098ba:	3308      	adds	r3, #8
 80098bc:	9303      	str	r3, [sp, #12]
 80098be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c0:	4433      	add	r3, r6
 80098c2:	9309      	str	r3, [sp, #36]	; 0x24
 80098c4:	e767      	b.n	8009796 <_svfiprintf_r+0x4e>
 80098c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80098ca:	460c      	mov	r4, r1
 80098cc:	2001      	movs	r0, #1
 80098ce:	e7a5      	b.n	800981c <_svfiprintf_r+0xd4>
 80098d0:	2300      	movs	r3, #0
 80098d2:	3401      	adds	r4, #1
 80098d4:	9305      	str	r3, [sp, #20]
 80098d6:	4619      	mov	r1, r3
 80098d8:	f04f 0c0a 	mov.w	ip, #10
 80098dc:	4620      	mov	r0, r4
 80098de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098e2:	3a30      	subs	r2, #48	; 0x30
 80098e4:	2a09      	cmp	r2, #9
 80098e6:	d903      	bls.n	80098f0 <_svfiprintf_r+0x1a8>
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d0c5      	beq.n	8009878 <_svfiprintf_r+0x130>
 80098ec:	9105      	str	r1, [sp, #20]
 80098ee:	e7c3      	b.n	8009878 <_svfiprintf_r+0x130>
 80098f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80098f4:	4604      	mov	r4, r0
 80098f6:	2301      	movs	r3, #1
 80098f8:	e7f0      	b.n	80098dc <_svfiprintf_r+0x194>
 80098fa:	ab03      	add	r3, sp, #12
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	462a      	mov	r2, r5
 8009900:	4b0f      	ldr	r3, [pc, #60]	; (8009940 <_svfiprintf_r+0x1f8>)
 8009902:	a904      	add	r1, sp, #16
 8009904:	4638      	mov	r0, r7
 8009906:	f7fb fec7 	bl	8005698 <_printf_float>
 800990a:	1c42      	adds	r2, r0, #1
 800990c:	4606      	mov	r6, r0
 800990e:	d1d6      	bne.n	80098be <_svfiprintf_r+0x176>
 8009910:	89ab      	ldrh	r3, [r5, #12]
 8009912:	065b      	lsls	r3, r3, #25
 8009914:	f53f af2c 	bmi.w	8009770 <_svfiprintf_r+0x28>
 8009918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800991a:	b01d      	add	sp, #116	; 0x74
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	ab03      	add	r3, sp, #12
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	462a      	mov	r2, r5
 8009926:	4b06      	ldr	r3, [pc, #24]	; (8009940 <_svfiprintf_r+0x1f8>)
 8009928:	a904      	add	r1, sp, #16
 800992a:	4638      	mov	r0, r7
 800992c:	f7fc f958 	bl	8005be0 <_printf_i>
 8009930:	e7eb      	b.n	800990a <_svfiprintf_r+0x1c2>
 8009932:	bf00      	nop
 8009934:	0800b814 	.word	0x0800b814
 8009938:	0800b81e 	.word	0x0800b81e
 800993c:	08005699 	.word	0x08005699
 8009940:	08009691 	.word	0x08009691
 8009944:	0800b81a 	.word	0x0800b81a

08009948 <__sfputc_r>:
 8009948:	6893      	ldr	r3, [r2, #8]
 800994a:	3b01      	subs	r3, #1
 800994c:	2b00      	cmp	r3, #0
 800994e:	b410      	push	{r4}
 8009950:	6093      	str	r3, [r2, #8]
 8009952:	da08      	bge.n	8009966 <__sfputc_r+0x1e>
 8009954:	6994      	ldr	r4, [r2, #24]
 8009956:	42a3      	cmp	r3, r4
 8009958:	db01      	blt.n	800995e <__sfputc_r+0x16>
 800995a:	290a      	cmp	r1, #10
 800995c:	d103      	bne.n	8009966 <__sfputc_r+0x1e>
 800995e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009962:	f7fd bbe9 	b.w	8007138 <__swbuf_r>
 8009966:	6813      	ldr	r3, [r2, #0]
 8009968:	1c58      	adds	r0, r3, #1
 800996a:	6010      	str	r0, [r2, #0]
 800996c:	7019      	strb	r1, [r3, #0]
 800996e:	4608      	mov	r0, r1
 8009970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009974:	4770      	bx	lr

08009976 <__sfputs_r>:
 8009976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009978:	4606      	mov	r6, r0
 800997a:	460f      	mov	r7, r1
 800997c:	4614      	mov	r4, r2
 800997e:	18d5      	adds	r5, r2, r3
 8009980:	42ac      	cmp	r4, r5
 8009982:	d101      	bne.n	8009988 <__sfputs_r+0x12>
 8009984:	2000      	movs	r0, #0
 8009986:	e007      	b.n	8009998 <__sfputs_r+0x22>
 8009988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998c:	463a      	mov	r2, r7
 800998e:	4630      	mov	r0, r6
 8009990:	f7ff ffda 	bl	8009948 <__sfputc_r>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d1f3      	bne.n	8009980 <__sfputs_r+0xa>
 8009998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800999c <_vfiprintf_r>:
 800999c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a0:	460d      	mov	r5, r1
 80099a2:	b09d      	sub	sp, #116	; 0x74
 80099a4:	4614      	mov	r4, r2
 80099a6:	4698      	mov	r8, r3
 80099a8:	4606      	mov	r6, r0
 80099aa:	b118      	cbz	r0, 80099b4 <_vfiprintf_r+0x18>
 80099ac:	6983      	ldr	r3, [r0, #24]
 80099ae:	b90b      	cbnz	r3, 80099b4 <_vfiprintf_r+0x18>
 80099b0:	f7fe fc16 	bl	80081e0 <__sinit>
 80099b4:	4b89      	ldr	r3, [pc, #548]	; (8009bdc <_vfiprintf_r+0x240>)
 80099b6:	429d      	cmp	r5, r3
 80099b8:	d11b      	bne.n	80099f2 <_vfiprintf_r+0x56>
 80099ba:	6875      	ldr	r5, [r6, #4]
 80099bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099be:	07d9      	lsls	r1, r3, #31
 80099c0:	d405      	bmi.n	80099ce <_vfiprintf_r+0x32>
 80099c2:	89ab      	ldrh	r3, [r5, #12]
 80099c4:	059a      	lsls	r2, r3, #22
 80099c6:	d402      	bmi.n	80099ce <_vfiprintf_r+0x32>
 80099c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ca:	f7ff f81a 	bl	8008a02 <__retarget_lock_acquire_recursive>
 80099ce:	89ab      	ldrh	r3, [r5, #12]
 80099d0:	071b      	lsls	r3, r3, #28
 80099d2:	d501      	bpl.n	80099d8 <_vfiprintf_r+0x3c>
 80099d4:	692b      	ldr	r3, [r5, #16]
 80099d6:	b9eb      	cbnz	r3, 8009a14 <_vfiprintf_r+0x78>
 80099d8:	4629      	mov	r1, r5
 80099da:	4630      	mov	r0, r6
 80099dc:	f7fd fbfe 	bl	80071dc <__swsetup_r>
 80099e0:	b1c0      	cbz	r0, 8009a14 <_vfiprintf_r+0x78>
 80099e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099e4:	07dc      	lsls	r4, r3, #31
 80099e6:	d50e      	bpl.n	8009a06 <_vfiprintf_r+0x6a>
 80099e8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ec:	b01d      	add	sp, #116	; 0x74
 80099ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f2:	4b7b      	ldr	r3, [pc, #492]	; (8009be0 <_vfiprintf_r+0x244>)
 80099f4:	429d      	cmp	r5, r3
 80099f6:	d101      	bne.n	80099fc <_vfiprintf_r+0x60>
 80099f8:	68b5      	ldr	r5, [r6, #8]
 80099fa:	e7df      	b.n	80099bc <_vfiprintf_r+0x20>
 80099fc:	4b79      	ldr	r3, [pc, #484]	; (8009be4 <_vfiprintf_r+0x248>)
 80099fe:	429d      	cmp	r5, r3
 8009a00:	bf08      	it	eq
 8009a02:	68f5      	ldreq	r5, [r6, #12]
 8009a04:	e7da      	b.n	80099bc <_vfiprintf_r+0x20>
 8009a06:	89ab      	ldrh	r3, [r5, #12]
 8009a08:	0598      	lsls	r0, r3, #22
 8009a0a:	d4ed      	bmi.n	80099e8 <_vfiprintf_r+0x4c>
 8009a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a0e:	f7fe fff9 	bl	8008a04 <__retarget_lock_release_recursive>
 8009a12:	e7e9      	b.n	80099e8 <_vfiprintf_r+0x4c>
 8009a14:	2300      	movs	r3, #0
 8009a16:	9309      	str	r3, [sp, #36]	; 0x24
 8009a18:	2320      	movs	r3, #32
 8009a1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a22:	2330      	movs	r3, #48	; 0x30
 8009a24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009be8 <_vfiprintf_r+0x24c>
 8009a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a2c:	f04f 0901 	mov.w	r9, #1
 8009a30:	4623      	mov	r3, r4
 8009a32:	469a      	mov	sl, r3
 8009a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a38:	b10a      	cbz	r2, 8009a3e <_vfiprintf_r+0xa2>
 8009a3a:	2a25      	cmp	r2, #37	; 0x25
 8009a3c:	d1f9      	bne.n	8009a32 <_vfiprintf_r+0x96>
 8009a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a42:	d00b      	beq.n	8009a5c <_vfiprintf_r+0xc0>
 8009a44:	465b      	mov	r3, fp
 8009a46:	4622      	mov	r2, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f7ff ff93 	bl	8009976 <__sfputs_r>
 8009a50:	3001      	adds	r0, #1
 8009a52:	f000 80aa 	beq.w	8009baa <_vfiprintf_r+0x20e>
 8009a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a58:	445a      	add	r2, fp
 8009a5a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 80a2 	beq.w	8009baa <_vfiprintf_r+0x20e>
 8009a66:	2300      	movs	r3, #0
 8009a68:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a70:	f10a 0a01 	add.w	sl, sl, #1
 8009a74:	9304      	str	r3, [sp, #16]
 8009a76:	9307      	str	r3, [sp, #28]
 8009a78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a7e:	4654      	mov	r4, sl
 8009a80:	2205      	movs	r2, #5
 8009a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a86:	4858      	ldr	r0, [pc, #352]	; (8009be8 <_vfiprintf_r+0x24c>)
 8009a88:	f7f6 fbd2 	bl	8000230 <memchr>
 8009a8c:	9a04      	ldr	r2, [sp, #16]
 8009a8e:	b9d8      	cbnz	r0, 8009ac8 <_vfiprintf_r+0x12c>
 8009a90:	06d1      	lsls	r1, r2, #27
 8009a92:	bf44      	itt	mi
 8009a94:	2320      	movmi	r3, #32
 8009a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a9a:	0713      	lsls	r3, r2, #28
 8009a9c:	bf44      	itt	mi
 8009a9e:	232b      	movmi	r3, #43	; 0x2b
 8009aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8009aaa:	d015      	beq.n	8009ad8 <_vfiprintf_r+0x13c>
 8009aac:	9a07      	ldr	r2, [sp, #28]
 8009aae:	4654      	mov	r4, sl
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	f04f 0c0a 	mov.w	ip, #10
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009abc:	3b30      	subs	r3, #48	; 0x30
 8009abe:	2b09      	cmp	r3, #9
 8009ac0:	d94e      	bls.n	8009b60 <_vfiprintf_r+0x1c4>
 8009ac2:	b1b0      	cbz	r0, 8009af2 <_vfiprintf_r+0x156>
 8009ac4:	9207      	str	r2, [sp, #28]
 8009ac6:	e014      	b.n	8009af2 <_vfiprintf_r+0x156>
 8009ac8:	eba0 0308 	sub.w	r3, r0, r8
 8009acc:	fa09 f303 	lsl.w	r3, r9, r3
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	9304      	str	r3, [sp, #16]
 8009ad4:	46a2      	mov	sl, r4
 8009ad6:	e7d2      	b.n	8009a7e <_vfiprintf_r+0xe2>
 8009ad8:	9b03      	ldr	r3, [sp, #12]
 8009ada:	1d19      	adds	r1, r3, #4
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	9103      	str	r1, [sp, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	bfbb      	ittet	lt
 8009ae4:	425b      	neglt	r3, r3
 8009ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8009aea:	9307      	strge	r3, [sp, #28]
 8009aec:	9307      	strlt	r3, [sp, #28]
 8009aee:	bfb8      	it	lt
 8009af0:	9204      	strlt	r2, [sp, #16]
 8009af2:	7823      	ldrb	r3, [r4, #0]
 8009af4:	2b2e      	cmp	r3, #46	; 0x2e
 8009af6:	d10c      	bne.n	8009b12 <_vfiprintf_r+0x176>
 8009af8:	7863      	ldrb	r3, [r4, #1]
 8009afa:	2b2a      	cmp	r3, #42	; 0x2a
 8009afc:	d135      	bne.n	8009b6a <_vfiprintf_r+0x1ce>
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	1d1a      	adds	r2, r3, #4
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	9203      	str	r2, [sp, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bfb8      	it	lt
 8009b0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b0e:	3402      	adds	r4, #2
 8009b10:	9305      	str	r3, [sp, #20]
 8009b12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009bf8 <_vfiprintf_r+0x25c>
 8009b16:	7821      	ldrb	r1, [r4, #0]
 8009b18:	2203      	movs	r2, #3
 8009b1a:	4650      	mov	r0, sl
 8009b1c:	f7f6 fb88 	bl	8000230 <memchr>
 8009b20:	b140      	cbz	r0, 8009b34 <_vfiprintf_r+0x198>
 8009b22:	2340      	movs	r3, #64	; 0x40
 8009b24:	eba0 000a 	sub.w	r0, r0, sl
 8009b28:	fa03 f000 	lsl.w	r0, r3, r0
 8009b2c:	9b04      	ldr	r3, [sp, #16]
 8009b2e:	4303      	orrs	r3, r0
 8009b30:	3401      	adds	r4, #1
 8009b32:	9304      	str	r3, [sp, #16]
 8009b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b38:	482c      	ldr	r0, [pc, #176]	; (8009bec <_vfiprintf_r+0x250>)
 8009b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b3e:	2206      	movs	r2, #6
 8009b40:	f7f6 fb76 	bl	8000230 <memchr>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d03f      	beq.n	8009bc8 <_vfiprintf_r+0x22c>
 8009b48:	4b29      	ldr	r3, [pc, #164]	; (8009bf0 <_vfiprintf_r+0x254>)
 8009b4a:	bb1b      	cbnz	r3, 8009b94 <_vfiprintf_r+0x1f8>
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	3307      	adds	r3, #7
 8009b50:	f023 0307 	bic.w	r3, r3, #7
 8009b54:	3308      	adds	r3, #8
 8009b56:	9303      	str	r3, [sp, #12]
 8009b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b5a:	443b      	add	r3, r7
 8009b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b5e:	e767      	b.n	8009a30 <_vfiprintf_r+0x94>
 8009b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b64:	460c      	mov	r4, r1
 8009b66:	2001      	movs	r0, #1
 8009b68:	e7a5      	b.n	8009ab6 <_vfiprintf_r+0x11a>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	3401      	adds	r4, #1
 8009b6e:	9305      	str	r3, [sp, #20]
 8009b70:	4619      	mov	r1, r3
 8009b72:	f04f 0c0a 	mov.w	ip, #10
 8009b76:	4620      	mov	r0, r4
 8009b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b7c:	3a30      	subs	r2, #48	; 0x30
 8009b7e:	2a09      	cmp	r2, #9
 8009b80:	d903      	bls.n	8009b8a <_vfiprintf_r+0x1ee>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0c5      	beq.n	8009b12 <_vfiprintf_r+0x176>
 8009b86:	9105      	str	r1, [sp, #20]
 8009b88:	e7c3      	b.n	8009b12 <_vfiprintf_r+0x176>
 8009b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b8e:	4604      	mov	r4, r0
 8009b90:	2301      	movs	r3, #1
 8009b92:	e7f0      	b.n	8009b76 <_vfiprintf_r+0x1da>
 8009b94:	ab03      	add	r3, sp, #12
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	462a      	mov	r2, r5
 8009b9a:	4b16      	ldr	r3, [pc, #88]	; (8009bf4 <_vfiprintf_r+0x258>)
 8009b9c:	a904      	add	r1, sp, #16
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f7fb fd7a 	bl	8005698 <_printf_float>
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	1c78      	adds	r0, r7, #1
 8009ba8:	d1d6      	bne.n	8009b58 <_vfiprintf_r+0x1bc>
 8009baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bac:	07d9      	lsls	r1, r3, #31
 8009bae:	d405      	bmi.n	8009bbc <_vfiprintf_r+0x220>
 8009bb0:	89ab      	ldrh	r3, [r5, #12]
 8009bb2:	059a      	lsls	r2, r3, #22
 8009bb4:	d402      	bmi.n	8009bbc <_vfiprintf_r+0x220>
 8009bb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bb8:	f7fe ff24 	bl	8008a04 <__retarget_lock_release_recursive>
 8009bbc:	89ab      	ldrh	r3, [r5, #12]
 8009bbe:	065b      	lsls	r3, r3, #25
 8009bc0:	f53f af12 	bmi.w	80099e8 <_vfiprintf_r+0x4c>
 8009bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bc6:	e711      	b.n	80099ec <_vfiprintf_r+0x50>
 8009bc8:	ab03      	add	r3, sp, #12
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	462a      	mov	r2, r5
 8009bce:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <_vfiprintf_r+0x258>)
 8009bd0:	a904      	add	r1, sp, #16
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f7fc f804 	bl	8005be0 <_printf_i>
 8009bd8:	e7e4      	b.n	8009ba4 <_vfiprintf_r+0x208>
 8009bda:	bf00      	nop
 8009bdc:	0800b5fc 	.word	0x0800b5fc
 8009be0:	0800b61c 	.word	0x0800b61c
 8009be4:	0800b5dc 	.word	0x0800b5dc
 8009be8:	0800b814 	.word	0x0800b814
 8009bec:	0800b81e 	.word	0x0800b81e
 8009bf0:	08005699 	.word	0x08005699
 8009bf4:	08009977 	.word	0x08009977
 8009bf8:	0800b81a 	.word	0x0800b81a

08009bfc <_putc_r>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	460d      	mov	r5, r1
 8009c00:	4614      	mov	r4, r2
 8009c02:	4606      	mov	r6, r0
 8009c04:	b118      	cbz	r0, 8009c0e <_putc_r+0x12>
 8009c06:	6983      	ldr	r3, [r0, #24]
 8009c08:	b90b      	cbnz	r3, 8009c0e <_putc_r+0x12>
 8009c0a:	f7fe fae9 	bl	80081e0 <__sinit>
 8009c0e:	4b1c      	ldr	r3, [pc, #112]	; (8009c80 <_putc_r+0x84>)
 8009c10:	429c      	cmp	r4, r3
 8009c12:	d124      	bne.n	8009c5e <_putc_r+0x62>
 8009c14:	6874      	ldr	r4, [r6, #4]
 8009c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c18:	07d8      	lsls	r0, r3, #31
 8009c1a:	d405      	bmi.n	8009c28 <_putc_r+0x2c>
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	0599      	lsls	r1, r3, #22
 8009c20:	d402      	bmi.n	8009c28 <_putc_r+0x2c>
 8009c22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c24:	f7fe feed 	bl	8008a02 <__retarget_lock_acquire_recursive>
 8009c28:	68a3      	ldr	r3, [r4, #8]
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	60a3      	str	r3, [r4, #8]
 8009c30:	da05      	bge.n	8009c3e <_putc_r+0x42>
 8009c32:	69a2      	ldr	r2, [r4, #24]
 8009c34:	4293      	cmp	r3, r2
 8009c36:	db1c      	blt.n	8009c72 <_putc_r+0x76>
 8009c38:	b2eb      	uxtb	r3, r5
 8009c3a:	2b0a      	cmp	r3, #10
 8009c3c:	d019      	beq.n	8009c72 <_putc_r+0x76>
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	6022      	str	r2, [r4, #0]
 8009c44:	701d      	strb	r5, [r3, #0]
 8009c46:	b2ed      	uxtb	r5, r5
 8009c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c4a:	07da      	lsls	r2, r3, #31
 8009c4c:	d405      	bmi.n	8009c5a <_putc_r+0x5e>
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	059b      	lsls	r3, r3, #22
 8009c52:	d402      	bmi.n	8009c5a <_putc_r+0x5e>
 8009c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c56:	f7fe fed5 	bl	8008a04 <__retarget_lock_release_recursive>
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	bd70      	pop	{r4, r5, r6, pc}
 8009c5e:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <_putc_r+0x88>)
 8009c60:	429c      	cmp	r4, r3
 8009c62:	d101      	bne.n	8009c68 <_putc_r+0x6c>
 8009c64:	68b4      	ldr	r4, [r6, #8]
 8009c66:	e7d6      	b.n	8009c16 <_putc_r+0x1a>
 8009c68:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <_putc_r+0x8c>)
 8009c6a:	429c      	cmp	r4, r3
 8009c6c:	bf08      	it	eq
 8009c6e:	68f4      	ldreq	r4, [r6, #12]
 8009c70:	e7d1      	b.n	8009c16 <_putc_r+0x1a>
 8009c72:	4629      	mov	r1, r5
 8009c74:	4622      	mov	r2, r4
 8009c76:	4630      	mov	r0, r6
 8009c78:	f7fd fa5e 	bl	8007138 <__swbuf_r>
 8009c7c:	4605      	mov	r5, r0
 8009c7e:	e7e3      	b.n	8009c48 <_putc_r+0x4c>
 8009c80:	0800b5fc 	.word	0x0800b5fc
 8009c84:	0800b61c 	.word	0x0800b61c
 8009c88:	0800b5dc 	.word	0x0800b5dc
 8009c8c:	00000000 	.word	0x00000000

08009c90 <nan>:
 8009c90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c98 <nan+0x8>
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	00000000 	.word	0x00000000
 8009c9c:	7ff80000 	.word	0x7ff80000

08009ca0 <_sbrk_r>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	4d06      	ldr	r5, [pc, #24]	; (8009cbc <_sbrk_r+0x1c>)
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	4608      	mov	r0, r1
 8009caa:	602b      	str	r3, [r5, #0]
 8009cac:	f7f8 f854 	bl	8001d58 <_sbrk>
 8009cb0:	1c43      	adds	r3, r0, #1
 8009cb2:	d102      	bne.n	8009cba <_sbrk_r+0x1a>
 8009cb4:	682b      	ldr	r3, [r5, #0]
 8009cb6:	b103      	cbz	r3, 8009cba <_sbrk_r+0x1a>
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	2000030c 	.word	0x2000030c

08009cc0 <__sread>:
 8009cc0:	b510      	push	{r4, lr}
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc8:	f000 f93a 	bl	8009f40 <_read_r>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	bfab      	itete	ge
 8009cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8009cd4:	181b      	addge	r3, r3, r0
 8009cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cda:	bfac      	ite	ge
 8009cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cde:	81a3      	strhlt	r3, [r4, #12]
 8009ce0:	bd10      	pop	{r4, pc}

08009ce2 <__swrite>:
 8009ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce6:	461f      	mov	r7, r3
 8009ce8:	898b      	ldrh	r3, [r1, #12]
 8009cea:	05db      	lsls	r3, r3, #23
 8009cec:	4605      	mov	r5, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	4616      	mov	r6, r2
 8009cf2:	d505      	bpl.n	8009d00 <__swrite+0x1e>
 8009cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f000 f8b8 	bl	8009e70 <_lseek_r>
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	463b      	mov	r3, r7
 8009d10:	4628      	mov	r0, r5
 8009d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d16:	f000 b837 	b.w	8009d88 <_write_r>

08009d1a <__sseek>:
 8009d1a:	b510      	push	{r4, lr}
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d22:	f000 f8a5 	bl	8009e70 <_lseek_r>
 8009d26:	1c43      	adds	r3, r0, #1
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	bf15      	itete	ne
 8009d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d36:	81a3      	strheq	r3, [r4, #12]
 8009d38:	bf18      	it	ne
 8009d3a:	81a3      	strhne	r3, [r4, #12]
 8009d3c:	bd10      	pop	{r4, pc}

08009d3e <__sclose>:
 8009d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d42:	f000 b851 	b.w	8009de8 <_close_r>

08009d46 <strncmp>:
 8009d46:	b510      	push	{r4, lr}
 8009d48:	b17a      	cbz	r2, 8009d6a <strncmp+0x24>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	3901      	subs	r1, #1
 8009d4e:	1884      	adds	r4, r0, r2
 8009d50:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d58:	4290      	cmp	r0, r2
 8009d5a:	d101      	bne.n	8009d60 <strncmp+0x1a>
 8009d5c:	42a3      	cmp	r3, r4
 8009d5e:	d101      	bne.n	8009d64 <strncmp+0x1e>
 8009d60:	1a80      	subs	r0, r0, r2
 8009d62:	bd10      	pop	{r4, pc}
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d1f3      	bne.n	8009d50 <strncmp+0xa>
 8009d68:	e7fa      	b.n	8009d60 <strncmp+0x1a>
 8009d6a:	4610      	mov	r0, r2
 8009d6c:	e7f9      	b.n	8009d62 <strncmp+0x1c>

08009d6e <__ascii_wctomb>:
 8009d6e:	b149      	cbz	r1, 8009d84 <__ascii_wctomb+0x16>
 8009d70:	2aff      	cmp	r2, #255	; 0xff
 8009d72:	bf85      	ittet	hi
 8009d74:	238a      	movhi	r3, #138	; 0x8a
 8009d76:	6003      	strhi	r3, [r0, #0]
 8009d78:	700a      	strbls	r2, [r1, #0]
 8009d7a:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d7e:	bf98      	it	ls
 8009d80:	2001      	movls	r0, #1
 8009d82:	4770      	bx	lr
 8009d84:	4608      	mov	r0, r1
 8009d86:	4770      	bx	lr

08009d88 <_write_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4d07      	ldr	r5, [pc, #28]	; (8009da8 <_write_r+0x20>)
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	4608      	mov	r0, r1
 8009d90:	4611      	mov	r1, r2
 8009d92:	2200      	movs	r2, #0
 8009d94:	602a      	str	r2, [r5, #0]
 8009d96:	461a      	mov	r2, r3
 8009d98:	f7f7 ff8d 	bl	8001cb6 <_write>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d102      	bne.n	8009da6 <_write_r+0x1e>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	b103      	cbz	r3, 8009da6 <_write_r+0x1e>
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	2000030c 	.word	0x2000030c

08009dac <__assert_func>:
 8009dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dae:	4614      	mov	r4, r2
 8009db0:	461a      	mov	r2, r3
 8009db2:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <__assert_func+0x2c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4605      	mov	r5, r0
 8009db8:	68d8      	ldr	r0, [r3, #12]
 8009dba:	b14c      	cbz	r4, 8009dd0 <__assert_func+0x24>
 8009dbc:	4b07      	ldr	r3, [pc, #28]	; (8009ddc <__assert_func+0x30>)
 8009dbe:	9100      	str	r1, [sp, #0]
 8009dc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009dc4:	4906      	ldr	r1, [pc, #24]	; (8009de0 <__assert_func+0x34>)
 8009dc6:	462b      	mov	r3, r5
 8009dc8:	f000 f81e 	bl	8009e08 <fiprintf>
 8009dcc:	f000 f8ca 	bl	8009f64 <abort>
 8009dd0:	4b04      	ldr	r3, [pc, #16]	; (8009de4 <__assert_func+0x38>)
 8009dd2:	461c      	mov	r4, r3
 8009dd4:	e7f3      	b.n	8009dbe <__assert_func+0x12>
 8009dd6:	bf00      	nop
 8009dd8:	2000000c 	.word	0x2000000c
 8009ddc:	0800b825 	.word	0x0800b825
 8009de0:	0800b832 	.word	0x0800b832
 8009de4:	0800b860 	.word	0x0800b860

08009de8 <_close_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d06      	ldr	r5, [pc, #24]	; (8009e04 <_close_r+0x1c>)
 8009dec:	2300      	movs	r3, #0
 8009dee:	4604      	mov	r4, r0
 8009df0:	4608      	mov	r0, r1
 8009df2:	602b      	str	r3, [r5, #0]
 8009df4:	f7f7 ff7b 	bl	8001cee <_close>
 8009df8:	1c43      	adds	r3, r0, #1
 8009dfa:	d102      	bne.n	8009e02 <_close_r+0x1a>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	b103      	cbz	r3, 8009e02 <_close_r+0x1a>
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	bd38      	pop	{r3, r4, r5, pc}
 8009e04:	2000030c 	.word	0x2000030c

08009e08 <fiprintf>:
 8009e08:	b40e      	push	{r1, r2, r3}
 8009e0a:	b503      	push	{r0, r1, lr}
 8009e0c:	4601      	mov	r1, r0
 8009e0e:	ab03      	add	r3, sp, #12
 8009e10:	4805      	ldr	r0, [pc, #20]	; (8009e28 <fiprintf+0x20>)
 8009e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e16:	6800      	ldr	r0, [r0, #0]
 8009e18:	9301      	str	r3, [sp, #4]
 8009e1a:	f7ff fdbf 	bl	800999c <_vfiprintf_r>
 8009e1e:	b002      	add	sp, #8
 8009e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e24:	b003      	add	sp, #12
 8009e26:	4770      	bx	lr
 8009e28:	2000000c 	.word	0x2000000c

08009e2c <_fstat_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d07      	ldr	r5, [pc, #28]	; (8009e4c <_fstat_r+0x20>)
 8009e30:	2300      	movs	r3, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	4611      	mov	r1, r2
 8009e38:	602b      	str	r3, [r5, #0]
 8009e3a:	f7f7 ff64 	bl	8001d06 <_fstat>
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	d102      	bne.n	8009e48 <_fstat_r+0x1c>
 8009e42:	682b      	ldr	r3, [r5, #0]
 8009e44:	b103      	cbz	r3, 8009e48 <_fstat_r+0x1c>
 8009e46:	6023      	str	r3, [r4, #0]
 8009e48:	bd38      	pop	{r3, r4, r5, pc}
 8009e4a:	bf00      	nop
 8009e4c:	2000030c 	.word	0x2000030c

08009e50 <_isatty_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d06      	ldr	r5, [pc, #24]	; (8009e6c <_isatty_r+0x1c>)
 8009e54:	2300      	movs	r3, #0
 8009e56:	4604      	mov	r4, r0
 8009e58:	4608      	mov	r0, r1
 8009e5a:	602b      	str	r3, [r5, #0]
 8009e5c:	f7f7 ff63 	bl	8001d26 <_isatty>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	d102      	bne.n	8009e6a <_isatty_r+0x1a>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	b103      	cbz	r3, 8009e6a <_isatty_r+0x1a>
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	2000030c 	.word	0x2000030c

08009e70 <_lseek_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d07      	ldr	r5, [pc, #28]	; (8009e90 <_lseek_r+0x20>)
 8009e74:	4604      	mov	r4, r0
 8009e76:	4608      	mov	r0, r1
 8009e78:	4611      	mov	r1, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	602a      	str	r2, [r5, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f7f7 ff5c 	bl	8001d3c <_lseek>
 8009e84:	1c43      	adds	r3, r0, #1
 8009e86:	d102      	bne.n	8009e8e <_lseek_r+0x1e>
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	b103      	cbz	r3, 8009e8e <_lseek_r+0x1e>
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}
 8009e90:	2000030c 	.word	0x2000030c

08009e94 <memmove>:
 8009e94:	4288      	cmp	r0, r1
 8009e96:	b510      	push	{r4, lr}
 8009e98:	eb01 0402 	add.w	r4, r1, r2
 8009e9c:	d902      	bls.n	8009ea4 <memmove+0x10>
 8009e9e:	4284      	cmp	r4, r0
 8009ea0:	4623      	mov	r3, r4
 8009ea2:	d807      	bhi.n	8009eb4 <memmove+0x20>
 8009ea4:	1e43      	subs	r3, r0, #1
 8009ea6:	42a1      	cmp	r1, r4
 8009ea8:	d008      	beq.n	8009ebc <memmove+0x28>
 8009eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009eb2:	e7f8      	b.n	8009ea6 <memmove+0x12>
 8009eb4:	4402      	add	r2, r0
 8009eb6:	4601      	mov	r1, r0
 8009eb8:	428a      	cmp	r2, r1
 8009eba:	d100      	bne.n	8009ebe <memmove+0x2a>
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ec6:	e7f7      	b.n	8009eb8 <memmove+0x24>

08009ec8 <__malloc_lock>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	; (8009ed0 <__malloc_lock+0x8>)
 8009eca:	f7fe bd9a 	b.w	8008a02 <__retarget_lock_acquire_recursive>
 8009ece:	bf00      	nop
 8009ed0:	20000300 	.word	0x20000300

08009ed4 <__malloc_unlock>:
 8009ed4:	4801      	ldr	r0, [pc, #4]	; (8009edc <__malloc_unlock+0x8>)
 8009ed6:	f7fe bd95 	b.w	8008a04 <__retarget_lock_release_recursive>
 8009eda:	bf00      	nop
 8009edc:	20000300 	.word	0x20000300

08009ee0 <_realloc_r>:
 8009ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee4:	4680      	mov	r8, r0
 8009ee6:	4614      	mov	r4, r2
 8009ee8:	460e      	mov	r6, r1
 8009eea:	b921      	cbnz	r1, 8009ef6 <_realloc_r+0x16>
 8009eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	f7ff bb59 	b.w	80095a8 <_malloc_r>
 8009ef6:	b92a      	cbnz	r2, 8009f04 <_realloc_r+0x24>
 8009ef8:	f7ff faea 	bl	80094d0 <_free_r>
 8009efc:	4625      	mov	r5, r4
 8009efe:	4628      	mov	r0, r5
 8009f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f04:	f000 f835 	bl	8009f72 <_malloc_usable_size_r>
 8009f08:	4284      	cmp	r4, r0
 8009f0a:	4607      	mov	r7, r0
 8009f0c:	d802      	bhi.n	8009f14 <_realloc_r+0x34>
 8009f0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f12:	d812      	bhi.n	8009f3a <_realloc_r+0x5a>
 8009f14:	4621      	mov	r1, r4
 8009f16:	4640      	mov	r0, r8
 8009f18:	f7ff fb46 	bl	80095a8 <_malloc_r>
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d0ed      	beq.n	8009efe <_realloc_r+0x1e>
 8009f22:	42bc      	cmp	r4, r7
 8009f24:	4622      	mov	r2, r4
 8009f26:	4631      	mov	r1, r6
 8009f28:	bf28      	it	cs
 8009f2a:	463a      	movcs	r2, r7
 8009f2c:	f7fe fdea 	bl	8008b04 <memcpy>
 8009f30:	4631      	mov	r1, r6
 8009f32:	4640      	mov	r0, r8
 8009f34:	f7ff facc 	bl	80094d0 <_free_r>
 8009f38:	e7e1      	b.n	8009efe <_realloc_r+0x1e>
 8009f3a:	4635      	mov	r5, r6
 8009f3c:	e7df      	b.n	8009efe <_realloc_r+0x1e>
	...

08009f40 <_read_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4d07      	ldr	r5, [pc, #28]	; (8009f60 <_read_r+0x20>)
 8009f44:	4604      	mov	r4, r0
 8009f46:	4608      	mov	r0, r1
 8009f48:	4611      	mov	r1, r2
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	602a      	str	r2, [r5, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	f7f7 fe94 	bl	8001c7c <_read>
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	d102      	bne.n	8009f5e <_read_r+0x1e>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	b103      	cbz	r3, 8009f5e <_read_r+0x1e>
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	2000030c 	.word	0x2000030c

08009f64 <abort>:
 8009f64:	b508      	push	{r3, lr}
 8009f66:	2006      	movs	r0, #6
 8009f68:	f000 f834 	bl	8009fd4 <raise>
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	f7f7 fe7b 	bl	8001c68 <_exit>

08009f72 <_malloc_usable_size_r>:
 8009f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f76:	1f18      	subs	r0, r3, #4
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	bfbc      	itt	lt
 8009f7c:	580b      	ldrlt	r3, [r1, r0]
 8009f7e:	18c0      	addlt	r0, r0, r3
 8009f80:	4770      	bx	lr

08009f82 <_raise_r>:
 8009f82:	291f      	cmp	r1, #31
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	4604      	mov	r4, r0
 8009f88:	460d      	mov	r5, r1
 8009f8a:	d904      	bls.n	8009f96 <_raise_r+0x14>
 8009f8c:	2316      	movs	r3, #22
 8009f8e:	6003      	str	r3, [r0, #0]
 8009f90:	f04f 30ff 	mov.w	r0, #4294967295
 8009f94:	bd38      	pop	{r3, r4, r5, pc}
 8009f96:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f98:	b112      	cbz	r2, 8009fa0 <_raise_r+0x1e>
 8009f9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f9e:	b94b      	cbnz	r3, 8009fb4 <_raise_r+0x32>
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f000 f831 	bl	800a008 <_getpid_r>
 8009fa6:	462a      	mov	r2, r5
 8009fa8:	4601      	mov	r1, r0
 8009faa:	4620      	mov	r0, r4
 8009fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fb0:	f000 b818 	b.w	8009fe4 <_kill_r>
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d00a      	beq.n	8009fce <_raise_r+0x4c>
 8009fb8:	1c59      	adds	r1, r3, #1
 8009fba:	d103      	bne.n	8009fc4 <_raise_r+0x42>
 8009fbc:	2316      	movs	r3, #22
 8009fbe:	6003      	str	r3, [r0, #0]
 8009fc0:	2001      	movs	r0, #1
 8009fc2:	e7e7      	b.n	8009f94 <_raise_r+0x12>
 8009fc4:	2400      	movs	r4, #0
 8009fc6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009fca:	4628      	mov	r0, r5
 8009fcc:	4798      	blx	r3
 8009fce:	2000      	movs	r0, #0
 8009fd0:	e7e0      	b.n	8009f94 <_raise_r+0x12>
	...

08009fd4 <raise>:
 8009fd4:	4b02      	ldr	r3, [pc, #8]	; (8009fe0 <raise+0xc>)
 8009fd6:	4601      	mov	r1, r0
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	f7ff bfd2 	b.w	8009f82 <_raise_r>
 8009fde:	bf00      	nop
 8009fe0:	2000000c 	.word	0x2000000c

08009fe4 <_kill_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4d07      	ldr	r5, [pc, #28]	; (800a004 <_kill_r+0x20>)
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4604      	mov	r4, r0
 8009fec:	4608      	mov	r0, r1
 8009fee:	4611      	mov	r1, r2
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	f7f7 fe29 	bl	8001c48 <_kill>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	d102      	bne.n	800a000 <_kill_r+0x1c>
 8009ffa:	682b      	ldr	r3, [r5, #0]
 8009ffc:	b103      	cbz	r3, 800a000 <_kill_r+0x1c>
 8009ffe:	6023      	str	r3, [r4, #0]
 800a000:	bd38      	pop	{r3, r4, r5, pc}
 800a002:	bf00      	nop
 800a004:	2000030c 	.word	0x2000030c

0800a008 <_getpid_r>:
 800a008:	f7f7 be16 	b.w	8001c38 <_getpid>

0800a00c <pow>:
 800a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00e:	ed2d 8b02 	vpush	{d8}
 800a012:	eeb0 8a40 	vmov.f32	s16, s0
 800a016:	eef0 8a60 	vmov.f32	s17, s1
 800a01a:	ec55 4b11 	vmov	r4, r5, d1
 800a01e:	f000 f893 	bl	800a148 <__ieee754_pow>
 800a022:	4622      	mov	r2, r4
 800a024:	462b      	mov	r3, r5
 800a026:	4620      	mov	r0, r4
 800a028:	4629      	mov	r1, r5
 800a02a:	ec57 6b10 	vmov	r6, r7, d0
 800a02e:	f7f6 fda5 	bl	8000b7c <__aeabi_dcmpun>
 800a032:	2800      	cmp	r0, #0
 800a034:	d13b      	bne.n	800a0ae <pow+0xa2>
 800a036:	ec51 0b18 	vmov	r0, r1, d8
 800a03a:	2200      	movs	r2, #0
 800a03c:	2300      	movs	r3, #0
 800a03e:	f7f6 fd6b 	bl	8000b18 <__aeabi_dcmpeq>
 800a042:	b1b8      	cbz	r0, 800a074 <pow+0x68>
 800a044:	2200      	movs	r2, #0
 800a046:	2300      	movs	r3, #0
 800a048:	4620      	mov	r0, r4
 800a04a:	4629      	mov	r1, r5
 800a04c:	f7f6 fd64 	bl	8000b18 <__aeabi_dcmpeq>
 800a050:	2800      	cmp	r0, #0
 800a052:	d146      	bne.n	800a0e2 <pow+0xd6>
 800a054:	ec45 4b10 	vmov	d0, r4, r5
 800a058:	f000 fe8f 	bl	800ad7a <finite>
 800a05c:	b338      	cbz	r0, 800a0ae <pow+0xa2>
 800a05e:	2200      	movs	r2, #0
 800a060:	2300      	movs	r3, #0
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	f7f6 fd61 	bl	8000b2c <__aeabi_dcmplt>
 800a06a:	b300      	cbz	r0, 800a0ae <pow+0xa2>
 800a06c:	f7fb fa42 	bl	80054f4 <__errno>
 800a070:	2322      	movs	r3, #34	; 0x22
 800a072:	e01b      	b.n	800a0ac <pow+0xa0>
 800a074:	ec47 6b10 	vmov	d0, r6, r7
 800a078:	f000 fe7f 	bl	800ad7a <finite>
 800a07c:	b9e0      	cbnz	r0, 800a0b8 <pow+0xac>
 800a07e:	eeb0 0a48 	vmov.f32	s0, s16
 800a082:	eef0 0a68 	vmov.f32	s1, s17
 800a086:	f000 fe78 	bl	800ad7a <finite>
 800a08a:	b1a8      	cbz	r0, 800a0b8 <pow+0xac>
 800a08c:	ec45 4b10 	vmov	d0, r4, r5
 800a090:	f000 fe73 	bl	800ad7a <finite>
 800a094:	b180      	cbz	r0, 800a0b8 <pow+0xac>
 800a096:	4632      	mov	r2, r6
 800a098:	463b      	mov	r3, r7
 800a09a:	4630      	mov	r0, r6
 800a09c:	4639      	mov	r1, r7
 800a09e:	f7f6 fd6d 	bl	8000b7c <__aeabi_dcmpun>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	d0e2      	beq.n	800a06c <pow+0x60>
 800a0a6:	f7fb fa25 	bl	80054f4 <__errno>
 800a0aa:	2321      	movs	r3, #33	; 0x21
 800a0ac:	6003      	str	r3, [r0, #0]
 800a0ae:	ecbd 8b02 	vpop	{d8}
 800a0b2:	ec47 6b10 	vmov	d0, r6, r7
 800a0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	4630      	mov	r0, r6
 800a0be:	4639      	mov	r1, r7
 800a0c0:	f7f6 fd2a 	bl	8000b18 <__aeabi_dcmpeq>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d0f2      	beq.n	800a0ae <pow+0xa2>
 800a0c8:	eeb0 0a48 	vmov.f32	s0, s16
 800a0cc:	eef0 0a68 	vmov.f32	s1, s17
 800a0d0:	f000 fe53 	bl	800ad7a <finite>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d0ea      	beq.n	800a0ae <pow+0xa2>
 800a0d8:	ec45 4b10 	vmov	d0, r4, r5
 800a0dc:	f000 fe4d 	bl	800ad7a <finite>
 800a0e0:	e7c3      	b.n	800a06a <pow+0x5e>
 800a0e2:	4f01      	ldr	r7, [pc, #4]	; (800a0e8 <pow+0xdc>)
 800a0e4:	2600      	movs	r6, #0
 800a0e6:	e7e2      	b.n	800a0ae <pow+0xa2>
 800a0e8:	3ff00000 	.word	0x3ff00000

0800a0ec <sqrt>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	ed2d 8b02 	vpush	{d8}
 800a0f2:	ec55 4b10 	vmov	r4, r5, d0
 800a0f6:	f000 fd55 	bl	800aba4 <__ieee754_sqrt>
 800a0fa:	4622      	mov	r2, r4
 800a0fc:	462b      	mov	r3, r5
 800a0fe:	4620      	mov	r0, r4
 800a100:	4629      	mov	r1, r5
 800a102:	eeb0 8a40 	vmov.f32	s16, s0
 800a106:	eef0 8a60 	vmov.f32	s17, s1
 800a10a:	f7f6 fd37 	bl	8000b7c <__aeabi_dcmpun>
 800a10e:	b990      	cbnz	r0, 800a136 <sqrt+0x4a>
 800a110:	2200      	movs	r2, #0
 800a112:	2300      	movs	r3, #0
 800a114:	4620      	mov	r0, r4
 800a116:	4629      	mov	r1, r5
 800a118:	f7f6 fd08 	bl	8000b2c <__aeabi_dcmplt>
 800a11c:	b158      	cbz	r0, 800a136 <sqrt+0x4a>
 800a11e:	f7fb f9e9 	bl	80054f4 <__errno>
 800a122:	2321      	movs	r3, #33	; 0x21
 800a124:	6003      	str	r3, [r0, #0]
 800a126:	2200      	movs	r2, #0
 800a128:	2300      	movs	r3, #0
 800a12a:	4610      	mov	r0, r2
 800a12c:	4619      	mov	r1, r3
 800a12e:	f7f6 fbb5 	bl	800089c <__aeabi_ddiv>
 800a132:	ec41 0b18 	vmov	d8, r0, r1
 800a136:	eeb0 0a48 	vmov.f32	s0, s16
 800a13a:	eef0 0a68 	vmov.f32	s1, s17
 800a13e:	ecbd 8b02 	vpop	{d8}
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	0000      	movs	r0, r0
	...

0800a148 <__ieee754_pow>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	ed2d 8b06 	vpush	{d8-d10}
 800a150:	b089      	sub	sp, #36	; 0x24
 800a152:	ed8d 1b00 	vstr	d1, [sp]
 800a156:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a15a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a15e:	ea58 0102 	orrs.w	r1, r8, r2
 800a162:	ec57 6b10 	vmov	r6, r7, d0
 800a166:	d115      	bne.n	800a194 <__ieee754_pow+0x4c>
 800a168:	19b3      	adds	r3, r6, r6
 800a16a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a16e:	4152      	adcs	r2, r2
 800a170:	4299      	cmp	r1, r3
 800a172:	4b89      	ldr	r3, [pc, #548]	; (800a398 <__ieee754_pow+0x250>)
 800a174:	4193      	sbcs	r3, r2
 800a176:	f080 84d2 	bcs.w	800ab1e <__ieee754_pow+0x9d6>
 800a17a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a17e:	4630      	mov	r0, r6
 800a180:	4639      	mov	r1, r7
 800a182:	f7f6 f8ab 	bl	80002dc <__adddf3>
 800a186:	ec41 0b10 	vmov	d0, r0, r1
 800a18a:	b009      	add	sp, #36	; 0x24
 800a18c:	ecbd 8b06 	vpop	{d8-d10}
 800a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a194:	4b81      	ldr	r3, [pc, #516]	; (800a39c <__ieee754_pow+0x254>)
 800a196:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a19a:	429c      	cmp	r4, r3
 800a19c:	ee10 aa10 	vmov	sl, s0
 800a1a0:	463d      	mov	r5, r7
 800a1a2:	dc06      	bgt.n	800a1b2 <__ieee754_pow+0x6a>
 800a1a4:	d101      	bne.n	800a1aa <__ieee754_pow+0x62>
 800a1a6:	2e00      	cmp	r6, #0
 800a1a8:	d1e7      	bne.n	800a17a <__ieee754_pow+0x32>
 800a1aa:	4598      	cmp	r8, r3
 800a1ac:	dc01      	bgt.n	800a1b2 <__ieee754_pow+0x6a>
 800a1ae:	d10f      	bne.n	800a1d0 <__ieee754_pow+0x88>
 800a1b0:	b172      	cbz	r2, 800a1d0 <__ieee754_pow+0x88>
 800a1b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a1b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a1ba:	ea55 050a 	orrs.w	r5, r5, sl
 800a1be:	d1dc      	bne.n	800a17a <__ieee754_pow+0x32>
 800a1c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a1c4:	18db      	adds	r3, r3, r3
 800a1c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a1ca:	4152      	adcs	r2, r2
 800a1cc:	429d      	cmp	r5, r3
 800a1ce:	e7d0      	b.n	800a172 <__ieee754_pow+0x2a>
 800a1d0:	2d00      	cmp	r5, #0
 800a1d2:	da3b      	bge.n	800a24c <__ieee754_pow+0x104>
 800a1d4:	4b72      	ldr	r3, [pc, #456]	; (800a3a0 <__ieee754_pow+0x258>)
 800a1d6:	4598      	cmp	r8, r3
 800a1d8:	dc51      	bgt.n	800a27e <__ieee754_pow+0x136>
 800a1da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a1de:	4598      	cmp	r8, r3
 800a1e0:	f340 84ac 	ble.w	800ab3c <__ieee754_pow+0x9f4>
 800a1e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a1e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a1ec:	2b14      	cmp	r3, #20
 800a1ee:	dd0f      	ble.n	800a210 <__ieee754_pow+0xc8>
 800a1f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a1f4:	fa22 f103 	lsr.w	r1, r2, r3
 800a1f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	f040 849d 	bne.w	800ab3c <__ieee754_pow+0x9f4>
 800a202:	f001 0101 	and.w	r1, r1, #1
 800a206:	f1c1 0302 	rsb	r3, r1, #2
 800a20a:	9304      	str	r3, [sp, #16]
 800a20c:	b182      	cbz	r2, 800a230 <__ieee754_pow+0xe8>
 800a20e:	e05f      	b.n	800a2d0 <__ieee754_pow+0x188>
 800a210:	2a00      	cmp	r2, #0
 800a212:	d15b      	bne.n	800a2cc <__ieee754_pow+0x184>
 800a214:	f1c3 0314 	rsb	r3, r3, #20
 800a218:	fa48 f103 	asr.w	r1, r8, r3
 800a21c:	fa01 f303 	lsl.w	r3, r1, r3
 800a220:	4543      	cmp	r3, r8
 800a222:	f040 8488 	bne.w	800ab36 <__ieee754_pow+0x9ee>
 800a226:	f001 0101 	and.w	r1, r1, #1
 800a22a:	f1c1 0302 	rsb	r3, r1, #2
 800a22e:	9304      	str	r3, [sp, #16]
 800a230:	4b5c      	ldr	r3, [pc, #368]	; (800a3a4 <__ieee754_pow+0x25c>)
 800a232:	4598      	cmp	r8, r3
 800a234:	d132      	bne.n	800a29c <__ieee754_pow+0x154>
 800a236:	f1b9 0f00 	cmp.w	r9, #0
 800a23a:	f280 8478 	bge.w	800ab2e <__ieee754_pow+0x9e6>
 800a23e:	4959      	ldr	r1, [pc, #356]	; (800a3a4 <__ieee754_pow+0x25c>)
 800a240:	4632      	mov	r2, r6
 800a242:	463b      	mov	r3, r7
 800a244:	2000      	movs	r0, #0
 800a246:	f7f6 fb29 	bl	800089c <__aeabi_ddiv>
 800a24a:	e79c      	b.n	800a186 <__ieee754_pow+0x3e>
 800a24c:	2300      	movs	r3, #0
 800a24e:	9304      	str	r3, [sp, #16]
 800a250:	2a00      	cmp	r2, #0
 800a252:	d13d      	bne.n	800a2d0 <__ieee754_pow+0x188>
 800a254:	4b51      	ldr	r3, [pc, #324]	; (800a39c <__ieee754_pow+0x254>)
 800a256:	4598      	cmp	r8, r3
 800a258:	d1ea      	bne.n	800a230 <__ieee754_pow+0xe8>
 800a25a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a25e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a262:	ea53 030a 	orrs.w	r3, r3, sl
 800a266:	f000 845a 	beq.w	800ab1e <__ieee754_pow+0x9d6>
 800a26a:	4b4f      	ldr	r3, [pc, #316]	; (800a3a8 <__ieee754_pow+0x260>)
 800a26c:	429c      	cmp	r4, r3
 800a26e:	dd08      	ble.n	800a282 <__ieee754_pow+0x13a>
 800a270:	f1b9 0f00 	cmp.w	r9, #0
 800a274:	f2c0 8457 	blt.w	800ab26 <__ieee754_pow+0x9de>
 800a278:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a27c:	e783      	b.n	800a186 <__ieee754_pow+0x3e>
 800a27e:	2302      	movs	r3, #2
 800a280:	e7e5      	b.n	800a24e <__ieee754_pow+0x106>
 800a282:	f1b9 0f00 	cmp.w	r9, #0
 800a286:	f04f 0000 	mov.w	r0, #0
 800a28a:	f04f 0100 	mov.w	r1, #0
 800a28e:	f6bf af7a 	bge.w	800a186 <__ieee754_pow+0x3e>
 800a292:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a296:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a29a:	e774      	b.n	800a186 <__ieee754_pow+0x3e>
 800a29c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a2a0:	d106      	bne.n	800a2b0 <__ieee754_pow+0x168>
 800a2a2:	4632      	mov	r2, r6
 800a2a4:	463b      	mov	r3, r7
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	4639      	mov	r1, r7
 800a2aa:	f7f6 f9cd 	bl	8000648 <__aeabi_dmul>
 800a2ae:	e76a      	b.n	800a186 <__ieee754_pow+0x3e>
 800a2b0:	4b3e      	ldr	r3, [pc, #248]	; (800a3ac <__ieee754_pow+0x264>)
 800a2b2:	4599      	cmp	r9, r3
 800a2b4:	d10c      	bne.n	800a2d0 <__ieee754_pow+0x188>
 800a2b6:	2d00      	cmp	r5, #0
 800a2b8:	db0a      	blt.n	800a2d0 <__ieee754_pow+0x188>
 800a2ba:	ec47 6b10 	vmov	d0, r6, r7
 800a2be:	b009      	add	sp, #36	; 0x24
 800a2c0:	ecbd 8b06 	vpop	{d8-d10}
 800a2c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	f000 bc6c 	b.w	800aba4 <__ieee754_sqrt>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	9304      	str	r3, [sp, #16]
 800a2d0:	ec47 6b10 	vmov	d0, r6, r7
 800a2d4:	f000 fd48 	bl	800ad68 <fabs>
 800a2d8:	ec51 0b10 	vmov	r0, r1, d0
 800a2dc:	f1ba 0f00 	cmp.w	sl, #0
 800a2e0:	d129      	bne.n	800a336 <__ieee754_pow+0x1ee>
 800a2e2:	b124      	cbz	r4, 800a2ee <__ieee754_pow+0x1a6>
 800a2e4:	4b2f      	ldr	r3, [pc, #188]	; (800a3a4 <__ieee754_pow+0x25c>)
 800a2e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d123      	bne.n	800a336 <__ieee754_pow+0x1ee>
 800a2ee:	f1b9 0f00 	cmp.w	r9, #0
 800a2f2:	da05      	bge.n	800a300 <__ieee754_pow+0x1b8>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	492a      	ldr	r1, [pc, #168]	; (800a3a4 <__ieee754_pow+0x25c>)
 800a2fc:	f7f6 face 	bl	800089c <__aeabi_ddiv>
 800a300:	2d00      	cmp	r5, #0
 800a302:	f6bf af40 	bge.w	800a186 <__ieee754_pow+0x3e>
 800a306:	9b04      	ldr	r3, [sp, #16]
 800a308:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a30c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a310:	4323      	orrs	r3, r4
 800a312:	d108      	bne.n	800a326 <__ieee754_pow+0x1de>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4610      	mov	r0, r2
 800a31a:	4619      	mov	r1, r3
 800a31c:	f7f5 ffdc 	bl	80002d8 <__aeabi_dsub>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	e78f      	b.n	800a246 <__ieee754_pow+0xfe>
 800a326:	9b04      	ldr	r3, [sp, #16]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	f47f af2c 	bne.w	800a186 <__ieee754_pow+0x3e>
 800a32e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a332:	4619      	mov	r1, r3
 800a334:	e727      	b.n	800a186 <__ieee754_pow+0x3e>
 800a336:	0feb      	lsrs	r3, r5, #31
 800a338:	3b01      	subs	r3, #1
 800a33a:	9306      	str	r3, [sp, #24]
 800a33c:	9a06      	ldr	r2, [sp, #24]
 800a33e:	9b04      	ldr	r3, [sp, #16]
 800a340:	4313      	orrs	r3, r2
 800a342:	d102      	bne.n	800a34a <__ieee754_pow+0x202>
 800a344:	4632      	mov	r2, r6
 800a346:	463b      	mov	r3, r7
 800a348:	e7e6      	b.n	800a318 <__ieee754_pow+0x1d0>
 800a34a:	4b19      	ldr	r3, [pc, #100]	; (800a3b0 <__ieee754_pow+0x268>)
 800a34c:	4598      	cmp	r8, r3
 800a34e:	f340 80fb 	ble.w	800a548 <__ieee754_pow+0x400>
 800a352:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a356:	4598      	cmp	r8, r3
 800a358:	4b13      	ldr	r3, [pc, #76]	; (800a3a8 <__ieee754_pow+0x260>)
 800a35a:	dd0c      	ble.n	800a376 <__ieee754_pow+0x22e>
 800a35c:	429c      	cmp	r4, r3
 800a35e:	dc0f      	bgt.n	800a380 <__ieee754_pow+0x238>
 800a360:	f1b9 0f00 	cmp.w	r9, #0
 800a364:	da0f      	bge.n	800a386 <__ieee754_pow+0x23e>
 800a366:	2000      	movs	r0, #0
 800a368:	b009      	add	sp, #36	; 0x24
 800a36a:	ecbd 8b06 	vpop	{d8-d10}
 800a36e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a372:	f000 bcf0 	b.w	800ad56 <__math_oflow>
 800a376:	429c      	cmp	r4, r3
 800a378:	dbf2      	blt.n	800a360 <__ieee754_pow+0x218>
 800a37a:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <__ieee754_pow+0x25c>)
 800a37c:	429c      	cmp	r4, r3
 800a37e:	dd19      	ble.n	800a3b4 <__ieee754_pow+0x26c>
 800a380:	f1b9 0f00 	cmp.w	r9, #0
 800a384:	dcef      	bgt.n	800a366 <__ieee754_pow+0x21e>
 800a386:	2000      	movs	r0, #0
 800a388:	b009      	add	sp, #36	; 0x24
 800a38a:	ecbd 8b06 	vpop	{d8-d10}
 800a38e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a392:	f000 bcd7 	b.w	800ad44 <__math_uflow>
 800a396:	bf00      	nop
 800a398:	fff00000 	.word	0xfff00000
 800a39c:	7ff00000 	.word	0x7ff00000
 800a3a0:	433fffff 	.word	0x433fffff
 800a3a4:	3ff00000 	.word	0x3ff00000
 800a3a8:	3fefffff 	.word	0x3fefffff
 800a3ac:	3fe00000 	.word	0x3fe00000
 800a3b0:	41e00000 	.word	0x41e00000
 800a3b4:	4b60      	ldr	r3, [pc, #384]	; (800a538 <__ieee754_pow+0x3f0>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f7f5 ff8e 	bl	80002d8 <__aeabi_dsub>
 800a3bc:	a354      	add	r3, pc, #336	; (adr r3, 800a510 <__ieee754_pow+0x3c8>)
 800a3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	460d      	mov	r5, r1
 800a3c6:	f7f6 f93f 	bl	8000648 <__aeabi_dmul>
 800a3ca:	a353      	add	r3, pc, #332	; (adr r3, 800a518 <__ieee754_pow+0x3d0>)
 800a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	460f      	mov	r7, r1
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	f7f6 f936 	bl	8000648 <__aeabi_dmul>
 800a3dc:	4b57      	ldr	r3, [pc, #348]	; (800a53c <__ieee754_pow+0x3f4>)
 800a3de:	4682      	mov	sl, r0
 800a3e0:	468b      	mov	fp, r1
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f6 f92e 	bl	8000648 <__aeabi_dmul>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	a14b      	add	r1, pc, #300	; (adr r1, 800a520 <__ieee754_pow+0x3d8>)
 800a3f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3f6:	f7f5 ff6f 	bl	80002d8 <__aeabi_dsub>
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	462b      	mov	r3, r5
 800a3fe:	f7f6 f923 	bl	8000648 <__aeabi_dmul>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	2000      	movs	r0, #0
 800a408:	494d      	ldr	r1, [pc, #308]	; (800a540 <__ieee754_pow+0x3f8>)
 800a40a:	f7f5 ff65 	bl	80002d8 <__aeabi_dsub>
 800a40e:	4622      	mov	r2, r4
 800a410:	4680      	mov	r8, r0
 800a412:	4689      	mov	r9, r1
 800a414:	462b      	mov	r3, r5
 800a416:	4620      	mov	r0, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	f7f6 f915 	bl	8000648 <__aeabi_dmul>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4640      	mov	r0, r8
 800a424:	4649      	mov	r1, r9
 800a426:	f7f6 f90f 	bl	8000648 <__aeabi_dmul>
 800a42a:	a33f      	add	r3, pc, #252	; (adr r3, 800a528 <__ieee754_pow+0x3e0>)
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f7f6 f90a 	bl	8000648 <__aeabi_dmul>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4650      	mov	r0, sl
 800a43a:	4659      	mov	r1, fp
 800a43c:	f7f5 ff4c 	bl	80002d8 <__aeabi_dsub>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4680      	mov	r8, r0
 800a446:	4689      	mov	r9, r1
 800a448:	4630      	mov	r0, r6
 800a44a:	4639      	mov	r1, r7
 800a44c:	f7f5 ff46 	bl	80002dc <__adddf3>
 800a450:	2000      	movs	r0, #0
 800a452:	4632      	mov	r2, r6
 800a454:	463b      	mov	r3, r7
 800a456:	4604      	mov	r4, r0
 800a458:	460d      	mov	r5, r1
 800a45a:	f7f5 ff3d 	bl	80002d8 <__aeabi_dsub>
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	4640      	mov	r0, r8
 800a464:	4649      	mov	r1, r9
 800a466:	f7f5 ff37 	bl	80002d8 <__aeabi_dsub>
 800a46a:	9b04      	ldr	r3, [sp, #16]
 800a46c:	9a06      	ldr	r2, [sp, #24]
 800a46e:	3b01      	subs	r3, #1
 800a470:	4313      	orrs	r3, r2
 800a472:	4682      	mov	sl, r0
 800a474:	468b      	mov	fp, r1
 800a476:	f040 81e7 	bne.w	800a848 <__ieee754_pow+0x700>
 800a47a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a530 <__ieee754_pow+0x3e8>
 800a47e:	eeb0 8a47 	vmov.f32	s16, s14
 800a482:	eef0 8a67 	vmov.f32	s17, s15
 800a486:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a48a:	2600      	movs	r6, #0
 800a48c:	4632      	mov	r2, r6
 800a48e:	463b      	mov	r3, r7
 800a490:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a494:	f7f5 ff20 	bl	80002d8 <__aeabi_dsub>
 800a498:	4622      	mov	r2, r4
 800a49a:	462b      	mov	r3, r5
 800a49c:	f7f6 f8d4 	bl	8000648 <__aeabi_dmul>
 800a4a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	4689      	mov	r9, r1
 800a4a8:	4650      	mov	r0, sl
 800a4aa:	4659      	mov	r1, fp
 800a4ac:	f7f6 f8cc 	bl	8000648 <__aeabi_dmul>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	f7f5 ff10 	bl	80002dc <__adddf3>
 800a4bc:	4632      	mov	r2, r6
 800a4be:	463b      	mov	r3, r7
 800a4c0:	4680      	mov	r8, r0
 800a4c2:	4689      	mov	r9, r1
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	f7f6 f8be 	bl	8000648 <__aeabi_dmul>
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	460d      	mov	r5, r1
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	4649      	mov	r1, r9
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	f7f5 ff00 	bl	80002dc <__adddf3>
 800a4dc:	4b19      	ldr	r3, [pc, #100]	; (800a544 <__ieee754_pow+0x3fc>)
 800a4de:	4299      	cmp	r1, r3
 800a4e0:	ec45 4b19 	vmov	d9, r4, r5
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	460f      	mov	r7, r1
 800a4e8:	468b      	mov	fp, r1
 800a4ea:	f340 82f1 	ble.w	800aad0 <__ieee754_pow+0x988>
 800a4ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a4f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a4f6:	4303      	orrs	r3, r0
 800a4f8:	f000 81e4 	beq.w	800a8c4 <__ieee754_pow+0x77c>
 800a4fc:	ec51 0b18 	vmov	r0, r1, d8
 800a500:	2200      	movs	r2, #0
 800a502:	2300      	movs	r3, #0
 800a504:	f7f6 fb12 	bl	8000b2c <__aeabi_dcmplt>
 800a508:	3800      	subs	r0, #0
 800a50a:	bf18      	it	ne
 800a50c:	2001      	movne	r0, #1
 800a50e:	e72b      	b.n	800a368 <__ieee754_pow+0x220>
 800a510:	60000000 	.word	0x60000000
 800a514:	3ff71547 	.word	0x3ff71547
 800a518:	f85ddf44 	.word	0xf85ddf44
 800a51c:	3e54ae0b 	.word	0x3e54ae0b
 800a520:	55555555 	.word	0x55555555
 800a524:	3fd55555 	.word	0x3fd55555
 800a528:	652b82fe 	.word	0x652b82fe
 800a52c:	3ff71547 	.word	0x3ff71547
 800a530:	00000000 	.word	0x00000000
 800a534:	bff00000 	.word	0xbff00000
 800a538:	3ff00000 	.word	0x3ff00000
 800a53c:	3fd00000 	.word	0x3fd00000
 800a540:	3fe00000 	.word	0x3fe00000
 800a544:	408fffff 	.word	0x408fffff
 800a548:	4bd5      	ldr	r3, [pc, #852]	; (800a8a0 <__ieee754_pow+0x758>)
 800a54a:	402b      	ands	r3, r5
 800a54c:	2200      	movs	r2, #0
 800a54e:	b92b      	cbnz	r3, 800a55c <__ieee754_pow+0x414>
 800a550:	4bd4      	ldr	r3, [pc, #848]	; (800a8a4 <__ieee754_pow+0x75c>)
 800a552:	f7f6 f879 	bl	8000648 <__aeabi_dmul>
 800a556:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a55a:	460c      	mov	r4, r1
 800a55c:	1523      	asrs	r3, r4, #20
 800a55e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a562:	4413      	add	r3, r2
 800a564:	9305      	str	r3, [sp, #20]
 800a566:	4bd0      	ldr	r3, [pc, #832]	; (800a8a8 <__ieee754_pow+0x760>)
 800a568:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a56c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a570:	429c      	cmp	r4, r3
 800a572:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a576:	dd08      	ble.n	800a58a <__ieee754_pow+0x442>
 800a578:	4bcc      	ldr	r3, [pc, #816]	; (800a8ac <__ieee754_pow+0x764>)
 800a57a:	429c      	cmp	r4, r3
 800a57c:	f340 8162 	ble.w	800a844 <__ieee754_pow+0x6fc>
 800a580:	9b05      	ldr	r3, [sp, #20]
 800a582:	3301      	adds	r3, #1
 800a584:	9305      	str	r3, [sp, #20]
 800a586:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a58a:	2400      	movs	r4, #0
 800a58c:	00e3      	lsls	r3, r4, #3
 800a58e:	9307      	str	r3, [sp, #28]
 800a590:	4bc7      	ldr	r3, [pc, #796]	; (800a8b0 <__ieee754_pow+0x768>)
 800a592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a596:	ed93 7b00 	vldr	d7, [r3]
 800a59a:	4629      	mov	r1, r5
 800a59c:	ec53 2b17 	vmov	r2, r3, d7
 800a5a0:	eeb0 9a47 	vmov.f32	s18, s14
 800a5a4:	eef0 9a67 	vmov.f32	s19, s15
 800a5a8:	4682      	mov	sl, r0
 800a5aa:	f7f5 fe95 	bl	80002d8 <__aeabi_dsub>
 800a5ae:	4652      	mov	r2, sl
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	460f      	mov	r7, r1
 800a5b4:	462b      	mov	r3, r5
 800a5b6:	ec51 0b19 	vmov	r0, r1, d9
 800a5ba:	f7f5 fe8f 	bl	80002dc <__adddf3>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	49bb      	ldr	r1, [pc, #748]	; (800a8b4 <__ieee754_pow+0x76c>)
 800a5c6:	f7f6 f969 	bl	800089c <__aeabi_ddiv>
 800a5ca:	ec41 0b1a 	vmov	d10, r0, r1
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	f7f6 f837 	bl	8000648 <__aeabi_dmul>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5e0:	9302      	str	r3, [sp, #8]
 800a5e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a5e6:	46ab      	mov	fp, r5
 800a5e8:	106d      	asrs	r5, r5, #1
 800a5ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a5ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a5f2:	ec41 0b18 	vmov	d8, r0, r1
 800a5f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	4649      	mov	r1, r9
 800a600:	4614      	mov	r4, r2
 800a602:	461d      	mov	r5, r3
 800a604:	f7f6 f820 	bl	8000648 <__aeabi_dmul>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f7f5 fe62 	bl	80002d8 <__aeabi_dsub>
 800a614:	ec53 2b19 	vmov	r2, r3, d9
 800a618:	4606      	mov	r6, r0
 800a61a:	460f      	mov	r7, r1
 800a61c:	4620      	mov	r0, r4
 800a61e:	4629      	mov	r1, r5
 800a620:	f7f5 fe5a 	bl	80002d8 <__aeabi_dsub>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	4650      	mov	r0, sl
 800a62a:	4659      	mov	r1, fp
 800a62c:	f7f5 fe54 	bl	80002d8 <__aeabi_dsub>
 800a630:	4642      	mov	r2, r8
 800a632:	464b      	mov	r3, r9
 800a634:	f7f6 f808 	bl	8000648 <__aeabi_dmul>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4630      	mov	r0, r6
 800a63e:	4639      	mov	r1, r7
 800a640:	f7f5 fe4a 	bl	80002d8 <__aeabi_dsub>
 800a644:	ec53 2b1a 	vmov	r2, r3, d10
 800a648:	f7f5 fffe 	bl	8000648 <__aeabi_dmul>
 800a64c:	ec53 2b18 	vmov	r2, r3, d8
 800a650:	ec41 0b19 	vmov	d9, r0, r1
 800a654:	ec51 0b18 	vmov	r0, r1, d8
 800a658:	f7f5 fff6 	bl	8000648 <__aeabi_dmul>
 800a65c:	a37c      	add	r3, pc, #496	; (adr r3, 800a850 <__ieee754_pow+0x708>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	4604      	mov	r4, r0
 800a664:	460d      	mov	r5, r1
 800a666:	f7f5 ffef 	bl	8000648 <__aeabi_dmul>
 800a66a:	a37b      	add	r3, pc, #492	; (adr r3, 800a858 <__ieee754_pow+0x710>)
 800a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a670:	f7f5 fe34 	bl	80002dc <__adddf3>
 800a674:	4622      	mov	r2, r4
 800a676:	462b      	mov	r3, r5
 800a678:	f7f5 ffe6 	bl	8000648 <__aeabi_dmul>
 800a67c:	a378      	add	r3, pc, #480	; (adr r3, 800a860 <__ieee754_pow+0x718>)
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	f7f5 fe2b 	bl	80002dc <__adddf3>
 800a686:	4622      	mov	r2, r4
 800a688:	462b      	mov	r3, r5
 800a68a:	f7f5 ffdd 	bl	8000648 <__aeabi_dmul>
 800a68e:	a376      	add	r3, pc, #472	; (adr r3, 800a868 <__ieee754_pow+0x720>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	f7f5 fe22 	bl	80002dc <__adddf3>
 800a698:	4622      	mov	r2, r4
 800a69a:	462b      	mov	r3, r5
 800a69c:	f7f5 ffd4 	bl	8000648 <__aeabi_dmul>
 800a6a0:	a373      	add	r3, pc, #460	; (adr r3, 800a870 <__ieee754_pow+0x728>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 fe19 	bl	80002dc <__adddf3>
 800a6aa:	4622      	mov	r2, r4
 800a6ac:	462b      	mov	r3, r5
 800a6ae:	f7f5 ffcb 	bl	8000648 <__aeabi_dmul>
 800a6b2:	a371      	add	r3, pc, #452	; (adr r3, 800a878 <__ieee754_pow+0x730>)
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	f7f5 fe10 	bl	80002dc <__adddf3>
 800a6bc:	4622      	mov	r2, r4
 800a6be:	4606      	mov	r6, r0
 800a6c0:	460f      	mov	r7, r1
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	f7f5 ffbe 	bl	8000648 <__aeabi_dmul>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	4639      	mov	r1, r7
 800a6d4:	f7f5 ffb8 	bl	8000648 <__aeabi_dmul>
 800a6d8:	4642      	mov	r2, r8
 800a6da:	4604      	mov	r4, r0
 800a6dc:	460d      	mov	r5, r1
 800a6de:	464b      	mov	r3, r9
 800a6e0:	ec51 0b18 	vmov	r0, r1, d8
 800a6e4:	f7f5 fdfa 	bl	80002dc <__adddf3>
 800a6e8:	ec53 2b19 	vmov	r2, r3, d9
 800a6ec:	f7f5 ffac 	bl	8000648 <__aeabi_dmul>
 800a6f0:	4622      	mov	r2, r4
 800a6f2:	462b      	mov	r3, r5
 800a6f4:	f7f5 fdf2 	bl	80002dc <__adddf3>
 800a6f8:	4642      	mov	r2, r8
 800a6fa:	4682      	mov	sl, r0
 800a6fc:	468b      	mov	fp, r1
 800a6fe:	464b      	mov	r3, r9
 800a700:	4640      	mov	r0, r8
 800a702:	4649      	mov	r1, r9
 800a704:	f7f5 ffa0 	bl	8000648 <__aeabi_dmul>
 800a708:	4b6b      	ldr	r3, [pc, #428]	; (800a8b8 <__ieee754_pow+0x770>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	4606      	mov	r6, r0
 800a70e:	460f      	mov	r7, r1
 800a710:	f7f5 fde4 	bl	80002dc <__adddf3>
 800a714:	4652      	mov	r2, sl
 800a716:	465b      	mov	r3, fp
 800a718:	f7f5 fde0 	bl	80002dc <__adddf3>
 800a71c:	2000      	movs	r0, #0
 800a71e:	4604      	mov	r4, r0
 800a720:	460d      	mov	r5, r1
 800a722:	4602      	mov	r2, r0
 800a724:	460b      	mov	r3, r1
 800a726:	4640      	mov	r0, r8
 800a728:	4649      	mov	r1, r9
 800a72a:	f7f5 ff8d 	bl	8000648 <__aeabi_dmul>
 800a72e:	4b62      	ldr	r3, [pc, #392]	; (800a8b8 <__ieee754_pow+0x770>)
 800a730:	4680      	mov	r8, r0
 800a732:	4689      	mov	r9, r1
 800a734:	2200      	movs	r2, #0
 800a736:	4620      	mov	r0, r4
 800a738:	4629      	mov	r1, r5
 800a73a:	f7f5 fdcd 	bl	80002d8 <__aeabi_dsub>
 800a73e:	4632      	mov	r2, r6
 800a740:	463b      	mov	r3, r7
 800a742:	f7f5 fdc9 	bl	80002d8 <__aeabi_dsub>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	4650      	mov	r0, sl
 800a74c:	4659      	mov	r1, fp
 800a74e:	f7f5 fdc3 	bl	80002d8 <__aeabi_dsub>
 800a752:	ec53 2b18 	vmov	r2, r3, d8
 800a756:	f7f5 ff77 	bl	8000648 <__aeabi_dmul>
 800a75a:	4622      	mov	r2, r4
 800a75c:	4606      	mov	r6, r0
 800a75e:	460f      	mov	r7, r1
 800a760:	462b      	mov	r3, r5
 800a762:	ec51 0b19 	vmov	r0, r1, d9
 800a766:	f7f5 ff6f 	bl	8000648 <__aeabi_dmul>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4630      	mov	r0, r6
 800a770:	4639      	mov	r1, r7
 800a772:	f7f5 fdb3 	bl	80002dc <__adddf3>
 800a776:	4606      	mov	r6, r0
 800a778:	460f      	mov	r7, r1
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	4640      	mov	r0, r8
 800a780:	4649      	mov	r1, r9
 800a782:	f7f5 fdab 	bl	80002dc <__adddf3>
 800a786:	a33e      	add	r3, pc, #248	; (adr r3, 800a880 <__ieee754_pow+0x738>)
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	2000      	movs	r0, #0
 800a78e:	4604      	mov	r4, r0
 800a790:	460d      	mov	r5, r1
 800a792:	f7f5 ff59 	bl	8000648 <__aeabi_dmul>
 800a796:	4642      	mov	r2, r8
 800a798:	ec41 0b18 	vmov	d8, r0, r1
 800a79c:	464b      	mov	r3, r9
 800a79e:	4620      	mov	r0, r4
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	f7f5 fd99 	bl	80002d8 <__aeabi_dsub>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	f7f5 fd93 	bl	80002d8 <__aeabi_dsub>
 800a7b2:	a335      	add	r3, pc, #212	; (adr r3, 800a888 <__ieee754_pow+0x740>)
 800a7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b8:	f7f5 ff46 	bl	8000648 <__aeabi_dmul>
 800a7bc:	a334      	add	r3, pc, #208	; (adr r3, 800a890 <__ieee754_pow+0x748>)
 800a7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	460f      	mov	r7, r1
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f7f5 ff3d 	bl	8000648 <__aeabi_dmul>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	f7f5 fd81 	bl	80002dc <__adddf3>
 800a7da:	9a07      	ldr	r2, [sp, #28]
 800a7dc:	4b37      	ldr	r3, [pc, #220]	; (800a8bc <__ieee754_pow+0x774>)
 800a7de:	4413      	add	r3, r2
 800a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e4:	f7f5 fd7a 	bl	80002dc <__adddf3>
 800a7e8:	4682      	mov	sl, r0
 800a7ea:	9805      	ldr	r0, [sp, #20]
 800a7ec:	468b      	mov	fp, r1
 800a7ee:	f7f5 fec1 	bl	8000574 <__aeabi_i2d>
 800a7f2:	9a07      	ldr	r2, [sp, #28]
 800a7f4:	4b32      	ldr	r3, [pc, #200]	; (800a8c0 <__ieee754_pow+0x778>)
 800a7f6:	4413      	add	r3, r2
 800a7f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	460f      	mov	r7, r1
 800a800:	4652      	mov	r2, sl
 800a802:	465b      	mov	r3, fp
 800a804:	ec51 0b18 	vmov	r0, r1, d8
 800a808:	f7f5 fd68 	bl	80002dc <__adddf3>
 800a80c:	4642      	mov	r2, r8
 800a80e:	464b      	mov	r3, r9
 800a810:	f7f5 fd64 	bl	80002dc <__adddf3>
 800a814:	4632      	mov	r2, r6
 800a816:	463b      	mov	r3, r7
 800a818:	f7f5 fd60 	bl	80002dc <__adddf3>
 800a81c:	2000      	movs	r0, #0
 800a81e:	4632      	mov	r2, r6
 800a820:	463b      	mov	r3, r7
 800a822:	4604      	mov	r4, r0
 800a824:	460d      	mov	r5, r1
 800a826:	f7f5 fd57 	bl	80002d8 <__aeabi_dsub>
 800a82a:	4642      	mov	r2, r8
 800a82c:	464b      	mov	r3, r9
 800a82e:	f7f5 fd53 	bl	80002d8 <__aeabi_dsub>
 800a832:	ec53 2b18 	vmov	r2, r3, d8
 800a836:	f7f5 fd4f 	bl	80002d8 <__aeabi_dsub>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	4650      	mov	r0, sl
 800a840:	4659      	mov	r1, fp
 800a842:	e610      	b.n	800a466 <__ieee754_pow+0x31e>
 800a844:	2401      	movs	r4, #1
 800a846:	e6a1      	b.n	800a58c <__ieee754_pow+0x444>
 800a848:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a898 <__ieee754_pow+0x750>
 800a84c:	e617      	b.n	800a47e <__ieee754_pow+0x336>
 800a84e:	bf00      	nop
 800a850:	4a454eef 	.word	0x4a454eef
 800a854:	3fca7e28 	.word	0x3fca7e28
 800a858:	93c9db65 	.word	0x93c9db65
 800a85c:	3fcd864a 	.word	0x3fcd864a
 800a860:	a91d4101 	.word	0xa91d4101
 800a864:	3fd17460 	.word	0x3fd17460
 800a868:	518f264d 	.word	0x518f264d
 800a86c:	3fd55555 	.word	0x3fd55555
 800a870:	db6fabff 	.word	0xdb6fabff
 800a874:	3fdb6db6 	.word	0x3fdb6db6
 800a878:	33333303 	.word	0x33333303
 800a87c:	3fe33333 	.word	0x3fe33333
 800a880:	e0000000 	.word	0xe0000000
 800a884:	3feec709 	.word	0x3feec709
 800a888:	dc3a03fd 	.word	0xdc3a03fd
 800a88c:	3feec709 	.word	0x3feec709
 800a890:	145b01f5 	.word	0x145b01f5
 800a894:	be3e2fe0 	.word	0xbe3e2fe0
 800a898:	00000000 	.word	0x00000000
 800a89c:	3ff00000 	.word	0x3ff00000
 800a8a0:	7ff00000 	.word	0x7ff00000
 800a8a4:	43400000 	.word	0x43400000
 800a8a8:	0003988e 	.word	0x0003988e
 800a8ac:	000bb679 	.word	0x000bb679
 800a8b0:	0800b868 	.word	0x0800b868
 800a8b4:	3ff00000 	.word	0x3ff00000
 800a8b8:	40080000 	.word	0x40080000
 800a8bc:	0800b888 	.word	0x0800b888
 800a8c0:	0800b878 	.word	0x0800b878
 800a8c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800ab9c <__ieee754_pow+0xa54>)
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	f7f5 fd05 	bl	80002dc <__adddf3>
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	ec41 0b1a 	vmov	d10, r0, r1
 800a8d8:	462b      	mov	r3, r5
 800a8da:	4630      	mov	r0, r6
 800a8dc:	4639      	mov	r1, r7
 800a8de:	f7f5 fcfb 	bl	80002d8 <__aeabi_dsub>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	ec51 0b1a 	vmov	r0, r1, d10
 800a8ea:	f7f6 f93d 	bl	8000b68 <__aeabi_dcmpgt>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	f47f ae04 	bne.w	800a4fc <__ieee754_pow+0x3b4>
 800a8f4:	4aa4      	ldr	r2, [pc, #656]	; (800ab88 <__ieee754_pow+0xa40>)
 800a8f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	f340 8108 	ble.w	800ab10 <__ieee754_pow+0x9c8>
 800a900:	151b      	asrs	r3, r3, #20
 800a902:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a906:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a90a:	fa4a f303 	asr.w	r3, sl, r3
 800a90e:	445b      	add	r3, fp
 800a910:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a914:	4e9d      	ldr	r6, [pc, #628]	; (800ab8c <__ieee754_pow+0xa44>)
 800a916:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a91a:	4116      	asrs	r6, r2
 800a91c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a920:	2000      	movs	r0, #0
 800a922:	ea23 0106 	bic.w	r1, r3, r6
 800a926:	f1c2 0214 	rsb	r2, r2, #20
 800a92a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a92e:	fa4a fa02 	asr.w	sl, sl, r2
 800a932:	f1bb 0f00 	cmp.w	fp, #0
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	4620      	mov	r0, r4
 800a93c:	4629      	mov	r1, r5
 800a93e:	bfb8      	it	lt
 800a940:	f1ca 0a00 	rsblt	sl, sl, #0
 800a944:	f7f5 fcc8 	bl	80002d8 <__aeabi_dsub>
 800a948:	ec41 0b19 	vmov	d9, r0, r1
 800a94c:	4642      	mov	r2, r8
 800a94e:	464b      	mov	r3, r9
 800a950:	ec51 0b19 	vmov	r0, r1, d9
 800a954:	f7f5 fcc2 	bl	80002dc <__adddf3>
 800a958:	a37b      	add	r3, pc, #492	; (adr r3, 800ab48 <__ieee754_pow+0xa00>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	2000      	movs	r0, #0
 800a960:	4604      	mov	r4, r0
 800a962:	460d      	mov	r5, r1
 800a964:	f7f5 fe70 	bl	8000648 <__aeabi_dmul>
 800a968:	ec53 2b19 	vmov	r2, r3, d9
 800a96c:	4606      	mov	r6, r0
 800a96e:	460f      	mov	r7, r1
 800a970:	4620      	mov	r0, r4
 800a972:	4629      	mov	r1, r5
 800a974:	f7f5 fcb0 	bl	80002d8 <__aeabi_dsub>
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	4640      	mov	r0, r8
 800a97e:	4649      	mov	r1, r9
 800a980:	f7f5 fcaa 	bl	80002d8 <__aeabi_dsub>
 800a984:	a372      	add	r3, pc, #456	; (adr r3, 800ab50 <__ieee754_pow+0xa08>)
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	f7f5 fe5d 	bl	8000648 <__aeabi_dmul>
 800a98e:	a372      	add	r3, pc, #456	; (adr r3, 800ab58 <__ieee754_pow+0xa10>)
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	4680      	mov	r8, r0
 800a996:	4689      	mov	r9, r1
 800a998:	4620      	mov	r0, r4
 800a99a:	4629      	mov	r1, r5
 800a99c:	f7f5 fe54 	bl	8000648 <__aeabi_dmul>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4640      	mov	r0, r8
 800a9a6:	4649      	mov	r1, r9
 800a9a8:	f7f5 fc98 	bl	80002dc <__adddf3>
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	460d      	mov	r5, r1
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	f7f5 fc90 	bl	80002dc <__adddf3>
 800a9bc:	4632      	mov	r2, r6
 800a9be:	463b      	mov	r3, r7
 800a9c0:	4680      	mov	r8, r0
 800a9c2:	4689      	mov	r9, r1
 800a9c4:	f7f5 fc88 	bl	80002d8 <__aeabi_dsub>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	f7f5 fc82 	bl	80002d8 <__aeabi_dsub>
 800a9d4:	4642      	mov	r2, r8
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	460f      	mov	r7, r1
 800a9da:	464b      	mov	r3, r9
 800a9dc:	4640      	mov	r0, r8
 800a9de:	4649      	mov	r1, r9
 800a9e0:	f7f5 fe32 	bl	8000648 <__aeabi_dmul>
 800a9e4:	a35e      	add	r3, pc, #376	; (adr r3, 800ab60 <__ieee754_pow+0xa18>)
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	460d      	mov	r5, r1
 800a9ee:	f7f5 fe2b 	bl	8000648 <__aeabi_dmul>
 800a9f2:	a35d      	add	r3, pc, #372	; (adr r3, 800ab68 <__ieee754_pow+0xa20>)
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	f7f5 fc6e 	bl	80002d8 <__aeabi_dsub>
 800a9fc:	4622      	mov	r2, r4
 800a9fe:	462b      	mov	r3, r5
 800aa00:	f7f5 fe22 	bl	8000648 <__aeabi_dmul>
 800aa04:	a35a      	add	r3, pc, #360	; (adr r3, 800ab70 <__ieee754_pow+0xa28>)
 800aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0a:	f7f5 fc67 	bl	80002dc <__adddf3>
 800aa0e:	4622      	mov	r2, r4
 800aa10:	462b      	mov	r3, r5
 800aa12:	f7f5 fe19 	bl	8000648 <__aeabi_dmul>
 800aa16:	a358      	add	r3, pc, #352	; (adr r3, 800ab78 <__ieee754_pow+0xa30>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f7f5 fc5c 	bl	80002d8 <__aeabi_dsub>
 800aa20:	4622      	mov	r2, r4
 800aa22:	462b      	mov	r3, r5
 800aa24:	f7f5 fe10 	bl	8000648 <__aeabi_dmul>
 800aa28:	a355      	add	r3, pc, #340	; (adr r3, 800ab80 <__ieee754_pow+0xa38>)
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	f7f5 fc55 	bl	80002dc <__adddf3>
 800aa32:	4622      	mov	r2, r4
 800aa34:	462b      	mov	r3, r5
 800aa36:	f7f5 fe07 	bl	8000648 <__aeabi_dmul>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	4640      	mov	r0, r8
 800aa40:	4649      	mov	r1, r9
 800aa42:	f7f5 fc49 	bl	80002d8 <__aeabi_dsub>
 800aa46:	4604      	mov	r4, r0
 800aa48:	460d      	mov	r5, r1
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	4640      	mov	r0, r8
 800aa50:	4649      	mov	r1, r9
 800aa52:	f7f5 fdf9 	bl	8000648 <__aeabi_dmul>
 800aa56:	2200      	movs	r2, #0
 800aa58:	ec41 0b19 	vmov	d9, r0, r1
 800aa5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa60:	4620      	mov	r0, r4
 800aa62:	4629      	mov	r1, r5
 800aa64:	f7f5 fc38 	bl	80002d8 <__aeabi_dsub>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	ec51 0b19 	vmov	r0, r1, d9
 800aa70:	f7f5 ff14 	bl	800089c <__aeabi_ddiv>
 800aa74:	4632      	mov	r2, r6
 800aa76:	4604      	mov	r4, r0
 800aa78:	460d      	mov	r5, r1
 800aa7a:	463b      	mov	r3, r7
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	4649      	mov	r1, r9
 800aa80:	f7f5 fde2 	bl	8000648 <__aeabi_dmul>
 800aa84:	4632      	mov	r2, r6
 800aa86:	463b      	mov	r3, r7
 800aa88:	f7f5 fc28 	bl	80002dc <__adddf3>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4620      	mov	r0, r4
 800aa92:	4629      	mov	r1, r5
 800aa94:	f7f5 fc20 	bl	80002d8 <__aeabi_dsub>
 800aa98:	4642      	mov	r2, r8
 800aa9a:	464b      	mov	r3, r9
 800aa9c:	f7f5 fc1c 	bl	80002d8 <__aeabi_dsub>
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	493a      	ldr	r1, [pc, #232]	; (800ab90 <__ieee754_pow+0xa48>)
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	f7f5 fc16 	bl	80002d8 <__aeabi_dsub>
 800aaac:	ec41 0b10 	vmov	d0, r0, r1
 800aab0:	ee10 3a90 	vmov	r3, s1
 800aab4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800aab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aabc:	da2b      	bge.n	800ab16 <__ieee754_pow+0x9ce>
 800aabe:	4650      	mov	r0, sl
 800aac0:	f000 f966 	bl	800ad90 <scalbn>
 800aac4:	ec51 0b10 	vmov	r0, r1, d0
 800aac8:	ec53 2b18 	vmov	r2, r3, d8
 800aacc:	f7ff bbed 	b.w	800a2aa <__ieee754_pow+0x162>
 800aad0:	4b30      	ldr	r3, [pc, #192]	; (800ab94 <__ieee754_pow+0xa4c>)
 800aad2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800aad6:	429e      	cmp	r6, r3
 800aad8:	f77f af0c 	ble.w	800a8f4 <__ieee754_pow+0x7ac>
 800aadc:	4b2e      	ldr	r3, [pc, #184]	; (800ab98 <__ieee754_pow+0xa50>)
 800aade:	440b      	add	r3, r1
 800aae0:	4303      	orrs	r3, r0
 800aae2:	d009      	beq.n	800aaf8 <__ieee754_pow+0x9b0>
 800aae4:	ec51 0b18 	vmov	r0, r1, d8
 800aae8:	2200      	movs	r2, #0
 800aaea:	2300      	movs	r3, #0
 800aaec:	f7f6 f81e 	bl	8000b2c <__aeabi_dcmplt>
 800aaf0:	3800      	subs	r0, #0
 800aaf2:	bf18      	it	ne
 800aaf4:	2001      	movne	r0, #1
 800aaf6:	e447      	b.n	800a388 <__ieee754_pow+0x240>
 800aaf8:	4622      	mov	r2, r4
 800aafa:	462b      	mov	r3, r5
 800aafc:	f7f5 fbec 	bl	80002d8 <__aeabi_dsub>
 800ab00:	4642      	mov	r2, r8
 800ab02:	464b      	mov	r3, r9
 800ab04:	f7f6 f826 	bl	8000b54 <__aeabi_dcmpge>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	f43f aef3 	beq.w	800a8f4 <__ieee754_pow+0x7ac>
 800ab0e:	e7e9      	b.n	800aae4 <__ieee754_pow+0x99c>
 800ab10:	f04f 0a00 	mov.w	sl, #0
 800ab14:	e71a      	b.n	800a94c <__ieee754_pow+0x804>
 800ab16:	ec51 0b10 	vmov	r0, r1, d0
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	e7d4      	b.n	800aac8 <__ieee754_pow+0x980>
 800ab1e:	491c      	ldr	r1, [pc, #112]	; (800ab90 <__ieee754_pow+0xa48>)
 800ab20:	2000      	movs	r0, #0
 800ab22:	f7ff bb30 	b.w	800a186 <__ieee754_pow+0x3e>
 800ab26:	2000      	movs	r0, #0
 800ab28:	2100      	movs	r1, #0
 800ab2a:	f7ff bb2c 	b.w	800a186 <__ieee754_pow+0x3e>
 800ab2e:	4630      	mov	r0, r6
 800ab30:	4639      	mov	r1, r7
 800ab32:	f7ff bb28 	b.w	800a186 <__ieee754_pow+0x3e>
 800ab36:	9204      	str	r2, [sp, #16]
 800ab38:	f7ff bb7a 	b.w	800a230 <__ieee754_pow+0xe8>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f7ff bb64 	b.w	800a20a <__ieee754_pow+0xc2>
 800ab42:	bf00      	nop
 800ab44:	f3af 8000 	nop.w
 800ab48:	00000000 	.word	0x00000000
 800ab4c:	3fe62e43 	.word	0x3fe62e43
 800ab50:	fefa39ef 	.word	0xfefa39ef
 800ab54:	3fe62e42 	.word	0x3fe62e42
 800ab58:	0ca86c39 	.word	0x0ca86c39
 800ab5c:	be205c61 	.word	0xbe205c61
 800ab60:	72bea4d0 	.word	0x72bea4d0
 800ab64:	3e663769 	.word	0x3e663769
 800ab68:	c5d26bf1 	.word	0xc5d26bf1
 800ab6c:	3ebbbd41 	.word	0x3ebbbd41
 800ab70:	af25de2c 	.word	0xaf25de2c
 800ab74:	3f11566a 	.word	0x3f11566a
 800ab78:	16bebd93 	.word	0x16bebd93
 800ab7c:	3f66c16c 	.word	0x3f66c16c
 800ab80:	5555553e 	.word	0x5555553e
 800ab84:	3fc55555 	.word	0x3fc55555
 800ab88:	3fe00000 	.word	0x3fe00000
 800ab8c:	000fffff 	.word	0x000fffff
 800ab90:	3ff00000 	.word	0x3ff00000
 800ab94:	4090cbff 	.word	0x4090cbff
 800ab98:	3f6f3400 	.word	0x3f6f3400
 800ab9c:	652b82fe 	.word	0x652b82fe
 800aba0:	3c971547 	.word	0x3c971547

0800aba4 <__ieee754_sqrt>:
 800aba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba8:	ec55 4b10 	vmov	r4, r5, d0
 800abac:	4e55      	ldr	r6, [pc, #340]	; (800ad04 <__ieee754_sqrt+0x160>)
 800abae:	43ae      	bics	r6, r5
 800abb0:	ee10 0a10 	vmov	r0, s0
 800abb4:	ee10 3a10 	vmov	r3, s0
 800abb8:	462a      	mov	r2, r5
 800abba:	4629      	mov	r1, r5
 800abbc:	d110      	bne.n	800abe0 <__ieee754_sqrt+0x3c>
 800abbe:	ee10 2a10 	vmov	r2, s0
 800abc2:	462b      	mov	r3, r5
 800abc4:	f7f5 fd40 	bl	8000648 <__aeabi_dmul>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4620      	mov	r0, r4
 800abce:	4629      	mov	r1, r5
 800abd0:	f7f5 fb84 	bl	80002dc <__adddf3>
 800abd4:	4604      	mov	r4, r0
 800abd6:	460d      	mov	r5, r1
 800abd8:	ec45 4b10 	vmov	d0, r4, r5
 800abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe0:	2d00      	cmp	r5, #0
 800abe2:	dc10      	bgt.n	800ac06 <__ieee754_sqrt+0x62>
 800abe4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800abe8:	4330      	orrs	r0, r6
 800abea:	d0f5      	beq.n	800abd8 <__ieee754_sqrt+0x34>
 800abec:	b15d      	cbz	r5, 800ac06 <__ieee754_sqrt+0x62>
 800abee:	ee10 2a10 	vmov	r2, s0
 800abf2:	462b      	mov	r3, r5
 800abf4:	ee10 0a10 	vmov	r0, s0
 800abf8:	f7f5 fb6e 	bl	80002d8 <__aeabi_dsub>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	f7f5 fe4c 	bl	800089c <__aeabi_ddiv>
 800ac04:	e7e6      	b.n	800abd4 <__ieee754_sqrt+0x30>
 800ac06:	1512      	asrs	r2, r2, #20
 800ac08:	d074      	beq.n	800acf4 <__ieee754_sqrt+0x150>
 800ac0a:	07d4      	lsls	r4, r2, #31
 800ac0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ac10:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ac14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ac18:	bf5e      	ittt	pl
 800ac1a:	0fda      	lsrpl	r2, r3, #31
 800ac1c:	005b      	lslpl	r3, r3, #1
 800ac1e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ac22:	2400      	movs	r4, #0
 800ac24:	0fda      	lsrs	r2, r3, #31
 800ac26:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ac2a:	107f      	asrs	r7, r7, #1
 800ac2c:	005b      	lsls	r3, r3, #1
 800ac2e:	2516      	movs	r5, #22
 800ac30:	4620      	mov	r0, r4
 800ac32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ac36:	1886      	adds	r6, r0, r2
 800ac38:	428e      	cmp	r6, r1
 800ac3a:	bfde      	ittt	le
 800ac3c:	1b89      	suble	r1, r1, r6
 800ac3e:	18b0      	addle	r0, r6, r2
 800ac40:	18a4      	addle	r4, r4, r2
 800ac42:	0049      	lsls	r1, r1, #1
 800ac44:	3d01      	subs	r5, #1
 800ac46:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ac4a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ac4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ac52:	d1f0      	bne.n	800ac36 <__ieee754_sqrt+0x92>
 800ac54:	462a      	mov	r2, r5
 800ac56:	f04f 0e20 	mov.w	lr, #32
 800ac5a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ac5e:	4281      	cmp	r1, r0
 800ac60:	eb06 0c05 	add.w	ip, r6, r5
 800ac64:	dc02      	bgt.n	800ac6c <__ieee754_sqrt+0xc8>
 800ac66:	d113      	bne.n	800ac90 <__ieee754_sqrt+0xec>
 800ac68:	459c      	cmp	ip, r3
 800ac6a:	d811      	bhi.n	800ac90 <__ieee754_sqrt+0xec>
 800ac6c:	f1bc 0f00 	cmp.w	ip, #0
 800ac70:	eb0c 0506 	add.w	r5, ip, r6
 800ac74:	da43      	bge.n	800acfe <__ieee754_sqrt+0x15a>
 800ac76:	2d00      	cmp	r5, #0
 800ac78:	db41      	blt.n	800acfe <__ieee754_sqrt+0x15a>
 800ac7a:	f100 0801 	add.w	r8, r0, #1
 800ac7e:	1a09      	subs	r1, r1, r0
 800ac80:	459c      	cmp	ip, r3
 800ac82:	bf88      	it	hi
 800ac84:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ac88:	eba3 030c 	sub.w	r3, r3, ip
 800ac8c:	4432      	add	r2, r6
 800ac8e:	4640      	mov	r0, r8
 800ac90:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ac94:	f1be 0e01 	subs.w	lr, lr, #1
 800ac98:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ac9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aca0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aca4:	d1db      	bne.n	800ac5e <__ieee754_sqrt+0xba>
 800aca6:	430b      	orrs	r3, r1
 800aca8:	d006      	beq.n	800acb8 <__ieee754_sqrt+0x114>
 800acaa:	1c50      	adds	r0, r2, #1
 800acac:	bf13      	iteet	ne
 800acae:	3201      	addne	r2, #1
 800acb0:	3401      	addeq	r4, #1
 800acb2:	4672      	moveq	r2, lr
 800acb4:	f022 0201 	bicne.w	r2, r2, #1
 800acb8:	1063      	asrs	r3, r4, #1
 800acba:	0852      	lsrs	r2, r2, #1
 800acbc:	07e1      	lsls	r1, r4, #31
 800acbe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800acc2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800acc6:	bf48      	it	mi
 800acc8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800accc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800acd0:	4614      	mov	r4, r2
 800acd2:	e781      	b.n	800abd8 <__ieee754_sqrt+0x34>
 800acd4:	0ad9      	lsrs	r1, r3, #11
 800acd6:	3815      	subs	r0, #21
 800acd8:	055b      	lsls	r3, r3, #21
 800acda:	2900      	cmp	r1, #0
 800acdc:	d0fa      	beq.n	800acd4 <__ieee754_sqrt+0x130>
 800acde:	02cd      	lsls	r5, r1, #11
 800ace0:	d50a      	bpl.n	800acf8 <__ieee754_sqrt+0x154>
 800ace2:	f1c2 0420 	rsb	r4, r2, #32
 800ace6:	fa23 f404 	lsr.w	r4, r3, r4
 800acea:	1e55      	subs	r5, r2, #1
 800acec:	4093      	lsls	r3, r2
 800acee:	4321      	orrs	r1, r4
 800acf0:	1b42      	subs	r2, r0, r5
 800acf2:	e78a      	b.n	800ac0a <__ieee754_sqrt+0x66>
 800acf4:	4610      	mov	r0, r2
 800acf6:	e7f0      	b.n	800acda <__ieee754_sqrt+0x136>
 800acf8:	0049      	lsls	r1, r1, #1
 800acfa:	3201      	adds	r2, #1
 800acfc:	e7ef      	b.n	800acde <__ieee754_sqrt+0x13a>
 800acfe:	4680      	mov	r8, r0
 800ad00:	e7bd      	b.n	800ac7e <__ieee754_sqrt+0xda>
 800ad02:	bf00      	nop
 800ad04:	7ff00000 	.word	0x7ff00000

0800ad08 <with_errno>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	4616      	mov	r6, r2
 800ad10:	f7fa fbf0 	bl	80054f4 <__errno>
 800ad14:	4629      	mov	r1, r5
 800ad16:	6006      	str	r6, [r0, #0]
 800ad18:	4620      	mov	r0, r4
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}

0800ad1c <xflow>:
 800ad1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad1e:	4614      	mov	r4, r2
 800ad20:	461d      	mov	r5, r3
 800ad22:	b108      	cbz	r0, 800ad28 <xflow+0xc>
 800ad24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad28:	e9cd 2300 	strd	r2, r3, [sp]
 800ad2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad30:	4620      	mov	r0, r4
 800ad32:	4629      	mov	r1, r5
 800ad34:	f7f5 fc88 	bl	8000648 <__aeabi_dmul>
 800ad38:	2222      	movs	r2, #34	; 0x22
 800ad3a:	b003      	add	sp, #12
 800ad3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad40:	f7ff bfe2 	b.w	800ad08 <with_errno>

0800ad44 <__math_uflow>:
 800ad44:	b508      	push	{r3, lr}
 800ad46:	2200      	movs	r2, #0
 800ad48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad4c:	f7ff ffe6 	bl	800ad1c <xflow>
 800ad50:	ec41 0b10 	vmov	d0, r0, r1
 800ad54:	bd08      	pop	{r3, pc}

0800ad56 <__math_oflow>:
 800ad56:	b508      	push	{r3, lr}
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ad5e:	f7ff ffdd 	bl	800ad1c <xflow>
 800ad62:	ec41 0b10 	vmov	d0, r0, r1
 800ad66:	bd08      	pop	{r3, pc}

0800ad68 <fabs>:
 800ad68:	ec51 0b10 	vmov	r0, r1, d0
 800ad6c:	ee10 2a10 	vmov	r2, s0
 800ad70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad74:	ec43 2b10 	vmov	d0, r2, r3
 800ad78:	4770      	bx	lr

0800ad7a <finite>:
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	ed8d 0b00 	vstr	d0, [sp]
 800ad80:	9801      	ldr	r0, [sp, #4]
 800ad82:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ad86:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ad8a:	0fc0      	lsrs	r0, r0, #31
 800ad8c:	b002      	add	sp, #8
 800ad8e:	4770      	bx	lr

0800ad90 <scalbn>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	ec55 4b10 	vmov	r4, r5, d0
 800ad96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	462b      	mov	r3, r5
 800ad9e:	b99a      	cbnz	r2, 800adc8 <scalbn+0x38>
 800ada0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ada4:	4323      	orrs	r3, r4
 800ada6:	d036      	beq.n	800ae16 <scalbn+0x86>
 800ada8:	4b39      	ldr	r3, [pc, #228]	; (800ae90 <scalbn+0x100>)
 800adaa:	4629      	mov	r1, r5
 800adac:	ee10 0a10 	vmov	r0, s0
 800adb0:	2200      	movs	r2, #0
 800adb2:	f7f5 fc49 	bl	8000648 <__aeabi_dmul>
 800adb6:	4b37      	ldr	r3, [pc, #220]	; (800ae94 <scalbn+0x104>)
 800adb8:	429e      	cmp	r6, r3
 800adba:	4604      	mov	r4, r0
 800adbc:	460d      	mov	r5, r1
 800adbe:	da10      	bge.n	800ade2 <scalbn+0x52>
 800adc0:	a32b      	add	r3, pc, #172	; (adr r3, 800ae70 <scalbn+0xe0>)
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	e03a      	b.n	800ae3e <scalbn+0xae>
 800adc8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800adcc:	428a      	cmp	r2, r1
 800adce:	d10c      	bne.n	800adea <scalbn+0x5a>
 800add0:	ee10 2a10 	vmov	r2, s0
 800add4:	4620      	mov	r0, r4
 800add6:	4629      	mov	r1, r5
 800add8:	f7f5 fa80 	bl	80002dc <__adddf3>
 800addc:	4604      	mov	r4, r0
 800adde:	460d      	mov	r5, r1
 800ade0:	e019      	b.n	800ae16 <scalbn+0x86>
 800ade2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ade6:	460b      	mov	r3, r1
 800ade8:	3a36      	subs	r2, #54	; 0x36
 800adea:	4432      	add	r2, r6
 800adec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800adf0:	428a      	cmp	r2, r1
 800adf2:	dd08      	ble.n	800ae06 <scalbn+0x76>
 800adf4:	2d00      	cmp	r5, #0
 800adf6:	a120      	add	r1, pc, #128	; (adr r1, 800ae78 <scalbn+0xe8>)
 800adf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adfc:	da1c      	bge.n	800ae38 <scalbn+0xa8>
 800adfe:	a120      	add	r1, pc, #128	; (adr r1, 800ae80 <scalbn+0xf0>)
 800ae00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae04:	e018      	b.n	800ae38 <scalbn+0xa8>
 800ae06:	2a00      	cmp	r2, #0
 800ae08:	dd08      	ble.n	800ae1c <scalbn+0x8c>
 800ae0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae16:	ec45 4b10 	vmov	d0, r4, r5
 800ae1a:	bd70      	pop	{r4, r5, r6, pc}
 800ae1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ae20:	da19      	bge.n	800ae56 <scalbn+0xc6>
 800ae22:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ae26:	429e      	cmp	r6, r3
 800ae28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ae2c:	dd0a      	ble.n	800ae44 <scalbn+0xb4>
 800ae2e:	a112      	add	r1, pc, #72	; (adr r1, 800ae78 <scalbn+0xe8>)
 800ae30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1e2      	bne.n	800adfe <scalbn+0x6e>
 800ae38:	a30f      	add	r3, pc, #60	; (adr r3, 800ae78 <scalbn+0xe8>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	f7f5 fc03 	bl	8000648 <__aeabi_dmul>
 800ae42:	e7cb      	b.n	800addc <scalbn+0x4c>
 800ae44:	a10a      	add	r1, pc, #40	; (adr r1, 800ae70 <scalbn+0xe0>)
 800ae46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0b8      	beq.n	800adc0 <scalbn+0x30>
 800ae4e:	a10e      	add	r1, pc, #56	; (adr r1, 800ae88 <scalbn+0xf8>)
 800ae50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae54:	e7b4      	b.n	800adc0 <scalbn+0x30>
 800ae56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae5a:	3236      	adds	r2, #54	; 0x36
 800ae5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ae64:	4620      	mov	r0, r4
 800ae66:	4b0c      	ldr	r3, [pc, #48]	; (800ae98 <scalbn+0x108>)
 800ae68:	2200      	movs	r2, #0
 800ae6a:	e7e8      	b.n	800ae3e <scalbn+0xae>
 800ae6c:	f3af 8000 	nop.w
 800ae70:	c2f8f359 	.word	0xc2f8f359
 800ae74:	01a56e1f 	.word	0x01a56e1f
 800ae78:	8800759c 	.word	0x8800759c
 800ae7c:	7e37e43c 	.word	0x7e37e43c
 800ae80:	8800759c 	.word	0x8800759c
 800ae84:	fe37e43c 	.word	0xfe37e43c
 800ae88:	c2f8f359 	.word	0xc2f8f359
 800ae8c:	81a56e1f 	.word	0x81a56e1f
 800ae90:	43500000 	.word	0x43500000
 800ae94:	ffff3cb0 	.word	0xffff3cb0
 800ae98:	3c900000 	.word	0x3c900000

0800ae9c <_init>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	bf00      	nop
 800aea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aea2:	bc08      	pop	{r3}
 800aea4:	469e      	mov	lr, r3
 800aea6:	4770      	bx	lr

0800aea8 <_fini>:
 800aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeaa:	bf00      	nop
 800aeac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeae:	bc08      	pop	{r3}
 800aeb0:	469e      	mov	lr, r3
 800aeb2:	4770      	bx	lr
